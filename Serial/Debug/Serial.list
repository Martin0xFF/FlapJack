
Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007358  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080074f0  080074f0  000174f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007548  08007548  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007548  08007548  00017548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007550  08007550  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007550  08007550  00017550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007554  08007554  00017554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001994  200001ec  08007744  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b80  08007744  00021b80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000163ee  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003055  00000000  00000000  0003660a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  00039660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  0003a690  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019127  00000000  00000000  0003b558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ed00  00000000  00000000  0005467f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e776  00000000  00000000  0006337f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1af5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004418  00000000  00000000  000f1b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001ec 	.word	0x200001ec
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080074d8 	.word	0x080074d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001f0 	.word	0x200001f0
 80001d4:	080074d8 	.word	0x080074d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fbfe 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f8e6 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 fa24 	bl	8000930 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f006 f94c 	bl	8006784 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 80004ec:	f000 f948 	bl	8000780 <MX_TIM3_Init>
  MX_TIM9_Init();
 80004f0:	f000 f9bc 	bl	800086c <MX_TIM9_Init>
  uint8_t msg[25] = {'\0'};
  uint8_t buffer[25] = {'\0'};
  uint16_t bs = 0;
  sprintf((char *)msg, "Swagger Bagger\n");
  */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 80004f4:	2104      	movs	r1, #4
 80004f6:	4865      	ldr	r0, [pc, #404]	; (800068c <main+0x1b4>)
 80004f8:	f002 fd28 	bl	8002f4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80004fc:	2104      	movs	r1, #4
 80004fe:	4864      	ldr	r0, [pc, #400]	; (8000690 <main+0x1b8>)
 8000500:	f002 fd24 	bl	8002f4c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  TIM3->CCR2 = DR;
 8000504:	4b63      	ldr	r3, [pc, #396]	; (8000694 <main+0x1bc>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	b29a      	uxth	r2, r3
 800050a:	4b63      	ldr	r3, [pc, #396]	; (8000698 <main+0x1c0>)
 800050c:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM9->CCR2 = DL;
 800050e:	4b63      	ldr	r3, [pc, #396]	; (800069c <main+0x1c4>)
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b62      	ldr	r3, [pc, #392]	; (80006a0 <main+0x1c8>)
 8000516:	639a      	str	r2, [r3, #56]	; 0x38
	  switch(status){
 8000518:	4b62      	ldr	r3, [pc, #392]	; (80006a4 <main+0x1cc>)
 800051a:	881b      	ldrh	r3, [r3, #0]
 800051c:	2b09      	cmp	r3, #9
 800051e:	f200 80b3 	bhi.w	8000688 <main+0x1b0>
 8000522:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <main+0x50>)
 8000524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000528:	080005b1 	.word	0x080005b1
 800052c:	080005cf 	.word	0x080005cf
 8000530:	080005a1 	.word	0x080005a1
 8000534:	08000551 	.word	0x08000551
 8000538:	08000579 	.word	0x08000579
 800053c:	0800064d 	.word	0x0800064d
 8000540:	0800066b 	.word	0x0800066b
 8000544:	0800063d 	.word	0x0800063d
 8000548:	080005ed 	.word	0x080005ed
 800054c:	08000615 	.word	0x08000615
	  	case RWHEEL_SPEEDUP:
	  		if (DR <= 62000)
 8000550:	4b50      	ldr	r3, [pc, #320]	; (8000694 <main+0x1bc>)
 8000552:	881b      	ldrh	r3, [r3, #0]
 8000554:	b29b      	uxth	r3, r3
 8000556:	f24f 2230 	movw	r2, #62000	; 0xf230
 800055a:	4293      	cmp	r3, r2
 800055c:	d807      	bhi.n	800056e <main+0x96>
	  		DR = DR + 3000;
 800055e:	4b4d      	ldr	r3, [pc, #308]	; (8000694 <main+0x1bc>)
 8000560:	881b      	ldrh	r3, [r3, #0]
 8000562:	b29b      	uxth	r3, r3
 8000564:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b4a      	ldr	r3, [pc, #296]	; (8000694 <main+0x1bc>)
 800056c:	801a      	strh	r2, [r3, #0]
	  		status = -1;
 800056e:	4b4d      	ldr	r3, [pc, #308]	; (80006a4 <main+0x1cc>)
 8000570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000574:	801a      	strh	r2, [r3, #0]
	  		break;
 8000576:	e088      	b.n	800068a <main+0x1b2>

	  	case RWHEEL_SLOWDOWN:
	  		if (DR >= 3000)
 8000578:	4b46      	ldr	r3, [pc, #280]	; (8000694 <main+0x1bc>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	b29b      	uxth	r3, r3
 800057e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000582:	4293      	cmp	r3, r2
 8000584:	d907      	bls.n	8000596 <main+0xbe>
	  		DR = DR - 3000;
 8000586:	4b43      	ldr	r3, [pc, #268]	; (8000694 <main+0x1bc>)
 8000588:	881b      	ldrh	r3, [r3, #0]
 800058a:	b29b      	uxth	r3, r3
 800058c:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <main+0x1bc>)
 8000594:	801a      	strh	r2, [r3, #0]
	  		status = -1;
 8000596:	4b43      	ldr	r3, [pc, #268]	; (80006a4 <main+0x1cc>)
 8000598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800059c:	801a      	strh	r2, [r3, #0]
	  		break;
 800059e:	e074      	b.n	800068a <main+0x1b2>

	  	case RWHEEL_STOP:
	  		DR = 0;
 80005a0:	4b3c      	ldr	r3, [pc, #240]	; (8000694 <main+0x1bc>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	801a      	strh	r2, [r3, #0]
	  		status = -1;
 80005a6:	4b3f      	ldr	r3, [pc, #252]	; (80006a4 <main+0x1cc>)
 80005a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ac:	801a      	strh	r2, [r3, #0]
	  		break;
 80005ae:	e06c      	b.n	800068a <main+0x1b2>

	  	case RWHEEL_FORWARD:
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2120      	movs	r1, #32
 80005b4:	483c      	ldr	r0, [pc, #240]	; (80006a8 <main+0x1d0>)
 80005b6:	f000 feb9 	bl	800132c <HAL_GPIO_WritePin>
	  	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	483a      	ldr	r0, [pc, #232]	; (80006a8 <main+0x1d0>)
 80005c0:	f000 feb4 	bl	800132c <HAL_GPIO_WritePin>
	  		status = -1;
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <main+0x1cc>)
 80005c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ca:	801a      	strh	r2, [r3, #0]
	  		break;
 80005cc:	e05d      	b.n	800068a <main+0x1b2>

	  	case RWHEEL_BACKWARD:
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	4835      	ldr	r0, [pc, #212]	; (80006a8 <main+0x1d0>)
 80005d4:	f000 feaa 	bl	800132c <HAL_GPIO_WritePin>
	  	  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	4832      	ldr	r0, [pc, #200]	; (80006a8 <main+0x1d0>)
 80005de:	f000 fea5 	bl	800132c <HAL_GPIO_WritePin>
	  		status = -1;
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <main+0x1cc>)
 80005e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005e8:	801a      	strh	r2, [r3, #0]
	  		break;
 80005ea:	e04e      	b.n	800068a <main+0x1b2>

	  	case LWHEEL_SPEEDUP:
	  		if (DL <= 62000)
 80005ec:	4b2b      	ldr	r3, [pc, #172]	; (800069c <main+0x1c4>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	f24f 2230 	movw	r2, #62000	; 0xf230
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d807      	bhi.n	800060a <main+0x132>
	  		DL = DL + 3000;
 80005fa:	4b28      	ldr	r3, [pc, #160]	; (800069c <main+0x1c4>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	b29b      	uxth	r3, r3
 8000600:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000604:	b29a      	uxth	r2, r3
 8000606:	4b25      	ldr	r3, [pc, #148]	; (800069c <main+0x1c4>)
 8000608:	801a      	strh	r2, [r3, #0]
	  		status = -1;
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <main+0x1cc>)
 800060c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000610:	801a      	strh	r2, [r3, #0]
	  		break;
 8000612:	e03a      	b.n	800068a <main+0x1b2>

	  	case LWHEEL_SLOWDOWN:
	  		if (DL >= 3000)
 8000614:	4b21      	ldr	r3, [pc, #132]	; (800069c <main+0x1c4>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800061e:	4293      	cmp	r3, r2
 8000620:	d907      	bls.n	8000632 <main+0x15a>
	  		DL = DL - 3000;
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <main+0x1c4>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	b29b      	uxth	r3, r3
 8000628:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b1b      	ldr	r3, [pc, #108]	; (800069c <main+0x1c4>)
 8000630:	801a      	strh	r2, [r3, #0]
	  		status = -1;
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <main+0x1cc>)
 8000634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000638:	801a      	strh	r2, [r3, #0]
	  		break;
 800063a:	e026      	b.n	800068a <main+0x1b2>

	  	case LWHEEL_STOP:
	  		DL = 0;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <main+0x1c4>)
 800063e:	2200      	movs	r2, #0
 8000640:	801a      	strh	r2, [r3, #0]
	  		status = -1;
 8000642:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <main+0x1cc>)
 8000644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000648:	801a      	strh	r2, [r3, #0]
	  		break;
 800064a:	e01e      	b.n	800068a <main+0x1b2>

	  	case LWHEEL_FORWARD:
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	4816      	ldr	r0, [pc, #88]	; (80006ac <main+0x1d4>)
 8000652:	f000 fe6b 	bl	800132c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	4814      	ldr	r0, [pc, #80]	; (80006ac <main+0x1d4>)
 800065c:	f000 fe66 	bl	800132c <HAL_GPIO_WritePin>
	  		status = -1;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <main+0x1cc>)
 8000662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000666:	801a      	strh	r2, [r3, #0]
	  		break;
 8000668:	e00f      	b.n	800068a <main+0x1b2>

	  	case LWHEEL_BACKWARD:
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2140      	movs	r1, #64	; 0x40
 800066e:	480f      	ldr	r0, [pc, #60]	; (80006ac <main+0x1d4>)
 8000670:	f000 fe5c 	bl	800132c <HAL_GPIO_WritePin>
	  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <main+0x1d4>)
 800067a:	f000 fe57 	bl	800132c <HAL_GPIO_WritePin>
	  		status = -1;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <main+0x1cc>)
 8000680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000684:	801a      	strh	r2, [r3, #0]
	  		break;
 8000686:	e000      	b.n	800068a <main+0x1b2>

	  	default:
	  		break;
 8000688:	bf00      	nop
	  TIM3->CCR2 = DR;
 800068a:	e73b      	b.n	8000504 <main+0x2c>
 800068c:	20000258 	.word	0x20000258
 8000690:	20000218 	.word	0x20000218
 8000694:	20000002 	.word	0x20000002
 8000698:	40000400 	.word	0x40000400
 800069c:	20000000 	.word	0x20000000
 80006a0:	40014000 	.word	0x40014000
 80006a4:	20000120 	.word	0x20000120
 80006a8:	40020000 	.word	0x40020000
 80006ac:	40020400 	.word	0x40020400

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 fe48 	bl	8007354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <SystemClock_Config+0xc8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a26      	ldr	r2, [pc, #152]	; (8000778 <SystemClock_Config+0xc8>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <SystemClock_Config+0xc8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <SystemClock_Config+0xcc>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <SystemClock_Config+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000720:	2319      	movs	r3, #25
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000724:	2390      	movs	r3, #144	; 0x90
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800072c:	2303      	movs	r3, #3
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f001 ff95 	bl	8002664 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 f95c 	bl	80009fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2102      	movs	r1, #2
 8000760:	4618      	mov	r0, r3
 8000762:	f002 f9ef 	bl	8002b44 <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800076c:	f000 f946 	bl	80009fc <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08e      	sub	sp, #56	; 0x38
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
 80007ac:	615a      	str	r2, [r3, #20]
 80007ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b0:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007b2:	4a2d      	ldr	r2, [pc, #180]	; (8000868 <MX_TIM3_Init+0xe8>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007b6:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b29      	ldr	r3, [pc, #164]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d6:	4823      	ldr	r0, [pc, #140]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007d8:	f002 fb58 	bl	8002e8c <HAL_TIM_Base_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007e2:	f000 f90b 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f0:	4619      	mov	r1, r3
 80007f2:	481c      	ldr	r0, [pc, #112]	; (8000864 <MX_TIM3_Init+0xe4>)
 80007f4:	f002 fca2 	bl	800313c <HAL_TIM_ConfigClockSource>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007fe:	f000 f8fd 	bl	80009fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000804:	f002 fb6d 	bl	8002ee2 <HAL_TIM_PWM_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800080e:	f000 f8f5 	bl	80009fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	4619      	mov	r1, r3
 8000820:	4810      	ldr	r0, [pc, #64]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000822:	f003 f80f 	bl	8003844 <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800082c:	f000 f8e6 	bl	80009fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000830:	2360      	movs	r3, #96	; 0x60
 8000832:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	2204      	movs	r2, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4807      	ldr	r0, [pc, #28]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000848:	f002 fbb2 	bl	8002fb0 <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000852:	f000 f8d3 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000856:	4803      	ldr	r0, [pc, #12]	; (8000864 <MX_TIM3_Init+0xe4>)
 8000858:	f000 f934 	bl	8000ac4 <HAL_TIM_MspPostInit>

}
 800085c:	bf00      	nop
 800085e:	3738      	adds	r7, #56	; 0x38
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000218 	.word	0x20000218
 8000868:	40000400 	.word	0x40000400

0800086c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000872:	f107 0320 	add.w	r3, r7, #32
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
 800088e:	615a      	str	r2, [r3, #20]
 8000890:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000892:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_TIM9_Init+0xbc>)
 8000894:	4a25      	ldr	r2, [pc, #148]	; (800092c <MX_TIM9_Init+0xc0>)
 8000896:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000898:	4b23      	ldr	r3, [pc, #140]	; (8000928 <MX_TIM9_Init+0xbc>)
 800089a:	2200      	movs	r2, #0
 800089c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089e:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_TIM9_Init+0xbc>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80008a4:	4b20      	ldr	r3, [pc, #128]	; (8000928 <MX_TIM9_Init+0xbc>)
 80008a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008aa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_TIM9_Init+0xbc>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_TIM9_Init+0xbc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80008b8:	481b      	ldr	r0, [pc, #108]	; (8000928 <MX_TIM9_Init+0xbc>)
 80008ba:	f002 fae7 	bl	8002e8c <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80008c4:	f000 f89a 	bl	80009fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	4619      	mov	r1, r3
 80008d4:	4814      	ldr	r0, [pc, #80]	; (8000928 <MX_TIM9_Init+0xbc>)
 80008d6:	f002 fc31 	bl	800313c <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80008e0:	f000 f88c 	bl	80009fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80008e4:	4810      	ldr	r0, [pc, #64]	; (8000928 <MX_TIM9_Init+0xbc>)
 80008e6:	f002 fafc 	bl	8002ee2 <HAL_TIM_PWM_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80008f0:	f000 f884 	bl	80009fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f4:	2360      	movs	r3, #96	; 0x60
 80008f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2204      	movs	r2, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_TIM9_Init+0xbc>)
 800090c:	f002 fb50 	bl	8002fb0 <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000916:	f000 f871 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800091a:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_TIM9_Init+0xbc>)
 800091c:	f000 f8d2 	bl	8000ac4 <HAL_TIM_MspPostInit>

}
 8000920:	bf00      	nop
 8000922:	3730      	adds	r7, #48	; 0x30
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000258 	.word	0x20000258
 800092c:	40014000 	.word	0x40014000

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a28      	ldr	r2, [pc, #160]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <MX_GPIO_Init+0xc0>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_GPIO_Init+0xc0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2160      	movs	r1, #96	; 0x60
 800099e:	4815      	ldr	r0, [pc, #84]	; (80009f4 <MX_GPIO_Init+0xc4>)
 80009a0:	f000 fcc4 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	21c0      	movs	r1, #192	; 0xc0
 80009a8:	4813      	ldr	r0, [pc, #76]	; (80009f8 <MX_GPIO_Init+0xc8>)
 80009aa:	f000 fcbf 	bl	800132c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80009ae:	2360      	movs	r3, #96	; 0x60
 80009b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	480b      	ldr	r0, [pc, #44]	; (80009f4 <MX_GPIO_Init+0xc4>)
 80009c6:	f000 fb2f 	bl	8001028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ca:	23c0      	movs	r3, #192	; 0xc0
 80009cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 030c 	add.w	r3, r7, #12
 80009de:	4619      	mov	r1, r3
 80009e0:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_GPIO_Init+0xc8>)
 80009e2:	f000 fb21 	bl	8001028 <HAL_GPIO_Init>

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <Error_Handler+0x6>

08000a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a0f      	ldr	r2, [pc, #60]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x4c>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <HAL_TIM_Base_MspInit+0x64>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10e      	bne.n	8000a84 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_TIM_Base_MspInit+0x68>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <HAL_TIM_Base_MspInit+0x68>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_TIM_Base_MspInit+0x68>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000a82:	e012      	b.n	8000aaa <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <HAL_TIM_Base_MspInit+0x6c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d10d      	bne.n	8000aaa <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_TIM_Base_MspInit+0x68>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a09      	ldr	r2, [pc, #36]	; (8000abc <HAL_TIM_Base_MspInit+0x68>)
 8000a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b07      	ldr	r3, [pc, #28]	; (8000abc <HAL_TIM_Base_MspInit+0x68>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40000400 	.word	0x40000400
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40014000 	.word	0x40014000

08000ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a24      	ldr	r2, [pc, #144]	; (8000b74 <HAL_TIM_MspPostInit+0xb0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d11e      	bne.n	8000b24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b23      	ldr	r3, [pc, #140]	; (8000b78 <HAL_TIM_MspPostInit+0xb4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a22      	ldr	r2, [pc, #136]	; (8000b78 <HAL_TIM_MspPostInit+0xb4>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_TIM_MspPostInit+0xb4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b02:	2320      	movs	r3, #32
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b12:	2302      	movs	r3, #2
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <HAL_TIM_MspPostInit+0xb8>)
 8000b1e:	f000 fa83 	bl	8001028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8000b22:	e022      	b.n	8000b6a <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM9)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a15      	ldr	r2, [pc, #84]	; (8000b80 <HAL_TIM_MspPostInit+0xbc>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d11d      	bne.n	8000b6a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <HAL_TIM_MspPostInit+0xb4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_TIM_MspPostInit+0xb4>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_TIM_MspPostInit+0xb4>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <HAL_TIM_MspPostInit+0xc0>)
 8000b66:	f000 fa5f 	bl	8001028 <HAL_GPIO_Init>
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	; 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40000400 	.word	0x40000400
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020400 	.word	0x40020400
 8000b80:	40014000 	.word	0x40014000
 8000b84:	40020000 	.word	0x40020000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f8d4 	bl	8000d80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <OTG_FS_IRQHandler+0x10>)
 8000be2:	f000 fd0c 	bl	80015fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20001774 	.word	0x20001774

08000bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf8:	4a14      	ldr	r2, [pc, #80]	; (8000c4c <_sbrk+0x5c>)
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <_sbrk+0x60>)
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c04:	4b13      	ldr	r3, [pc, #76]	; (8000c54 <_sbrk+0x64>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d102      	bne.n	8000c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	; (8000c54 <_sbrk+0x64>)
 8000c0e:	4a12      	ldr	r2, [pc, #72]	; (8000c58 <_sbrk+0x68>)
 8000c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d207      	bcs.n	8000c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c20:	f006 fb5e 	bl	80072e0 <__errno>
 8000c24:	4602      	mov	r2, r0
 8000c26:	230c      	movs	r3, #12
 8000c28:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2e:	e009      	b.n	8000c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c30:	4b08      	ldr	r3, [pc, #32]	; (8000c54 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <_sbrk+0x64>)
 8000c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c42:	68fb      	ldr	r3, [r7, #12]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3718      	adds	r7, #24
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20020000 	.word	0x20020000
 8000c50:	00000400 	.word	0x00000400
 8000c54:	20000208 	.word	0x20000208
 8000c58:	20001b80 	.word	0x20001b80

08000c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <SystemInit+0x28>)
 8000c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c66:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <SystemInit+0x28>)
 8000c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c70:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SystemInit+0x28>)
 8000c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c76:	609a      	str	r2, [r3, #8]
#endif
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c8e:	e003      	b.n	8000c98 <LoopCopyDataInit>

08000c90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c96:	3104      	adds	r1, #4

08000c98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ca0:	d3f6      	bcc.n	8000c90 <CopyDataInit>
  ldr  r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ca4:	e002      	b.n	8000cac <LoopFillZerobss>

08000ca6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ca6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca8:	f842 3b04 	str.w	r3, [r2], #4

08000cac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cb0:	d3f9      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cb2:	f7ff ffd3 	bl	8000c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f006 fb19 	bl	80072ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cba:	f7ff fc0d 	bl	80004d8 <main>
  bx  lr    
 8000cbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cc4:	08007558 	.word	0x08007558
  ldr  r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ccc:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8000cd0:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8000cd4:	20001b80 	.word	0x20001b80

08000cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_Init+0x40>)
 8000ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <HAL_Init+0x40>)
 8000cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf8:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <HAL_Init+0x40>)
 8000cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f94d 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f808 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d10:	f7ff fe78 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023c00 	.word	0x40023c00

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_InitTick+0x54>)
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <HAL_InitTick+0x58>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4619      	mov	r1, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f965 	bl	800100e <HAL_SYSTICK_Config>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00e      	b.n	8000d6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b0f      	cmp	r3, #15
 8000d52:	d80a      	bhi.n	8000d6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	2200      	movs	r2, #0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f000 f92d 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4a06      	ldr	r2, [pc, #24]	; (8000d7c <HAL_InitTick+0x5c>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
 8000d68:	e000      	b.n	8000d6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000004 	.word	0x20000004
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	20000008 	.word	0x20000008

08000d80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x20>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <HAL_IncTick+0x24>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_IncTick+0x24>)
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	20000298 	.word	0x20000298

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_GetTick+0x14>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000298 	.word	0x20000298

08000dc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dc8:	f7ff ffee 	bl	8000da8 <HAL_GetTick>
 8000dcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dd8:	d005      	beq.n	8000de6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_Delay+0x40>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000de6:	bf00      	nop
 8000de8:	f7ff ffde 	bl	8000da8 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d8f7      	bhi.n	8000de8 <HAL_Delay+0x28>
  {
  }
}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000000c 	.word	0x2000000c

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	60d3      	str	r3, [r2, #12]
}
 8000e3c:	bf00      	nop
 8000e3e:	3714      	adds	r7, #20
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fcc:	f7ff ff3e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	6978      	ldr	r0, [r7, #20]
 8000fd8:	f7ff ff8e 	bl	8000ef8 <NVIC_EncodePriority>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff5d 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fea:	bf00      	nop
 8000fec:	3718      	adds	r7, #24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff31 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffa2 	bl	8000f60 <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e159      	b.n	80012f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8148 	bne.w	80012f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00b      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001076:	2b11      	cmp	r3, #17
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b12      	cmp	r3, #18
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0xfc>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80a2 	beq.w	80012f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b56      	ldr	r3, [pc, #344]	; (800130c <HAL_GPIO_Init+0x2e4>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a55      	ldr	r2, [pc, #340]	; (800130c <HAL_GPIO_Init+0x2e4>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b53      	ldr	r3, [pc, #332]	; (800130c <HAL_GPIO_Init+0x2e4>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a51      	ldr	r2, [pc, #324]	; (8001310 <HAL_GPIO_Init+0x2e8>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a48      	ldr	r2, [pc, #288]	; (8001314 <HAL_GPIO_Init+0x2ec>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x202>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a47      	ldr	r2, [pc, #284]	; (8001318 <HAL_GPIO_Init+0x2f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x1fe>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a46      	ldr	r2, [pc, #280]	; (800131c <HAL_GPIO_Init+0x2f4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x1fa>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a45      	ldr	r2, [pc, #276]	; (8001320 <HAL_GPIO_Init+0x2f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x1f6>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a44      	ldr	r2, [pc, #272]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x1f2>
 8001216:	2304      	movs	r3, #4
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x204>
 800121a:	2307      	movs	r3, #7
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x204>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x204>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x204>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x204>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4934      	ldr	r1, [pc, #208]	; (8001310 <HAL_GPIO_Init+0x2e8>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x300>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126e:	4a2e      	ldr	r2, [pc, #184]	; (8001328 <HAL_GPIO_Init+0x300>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <HAL_GPIO_Init+0x300>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001298:	4a23      	ldr	r2, [pc, #140]	; (8001328 <HAL_GPIO_Init+0x300>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_GPIO_Init+0x300>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a19      	ldr	r2, [pc, #100]	; (8001328 <HAL_GPIO_Init+0x300>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_GPIO_Init+0x300>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <HAL_GPIO_Init+0x300>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f aea2 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40023800 	.word	0x40023800
 8001310:	40013800 	.word	0x40013800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021000 	.word	0x40021000
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	460b      	mov	r3, r1
 8001336:	807b      	strh	r3, [r7, #2]
 8001338:	4613      	mov	r3, r2
 800133a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800133c:	787b      	ldrb	r3, [r7, #1]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001342:	887a      	ldrh	r2, [r7, #2]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001348:	e003      	b.n	8001352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	041a      	lsls	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	619a      	str	r2, [r3, #24]
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800135e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001360:	b08f      	sub	sp, #60	; 0x3c
 8001362:	af0a      	add	r7, sp, #40	; 0x28
 8001364:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e10f      	b.n	8001590 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d106      	bne.n	8001390 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f005 fcb6 	bl	8006cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2203      	movs	r2, #3
 8001394:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fbcb 	bl	8003b4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	687e      	ldr	r6, [r7, #4]
 80013bc:	466d      	mov	r5, sp
 80013be:	f106 0410 	add.w	r4, r6, #16
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80013d2:	1d33      	adds	r3, r6, #4
 80013d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013d6:	6838      	ldr	r0, [r7, #0]
 80013d8:	f002 faa2 	bl	8003920 <USB_CoreInit>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2202      	movs	r2, #2
 80013e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e0d0      	b.n	8001590 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 fbb9 	bl	8003b6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	73fb      	strb	r3, [r7, #15]
 80013fe:	e04a      	b.n	8001496 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	1a9b      	subs	r3, r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	333d      	adds	r3, #61	; 0x3d
 8001410:	2201      	movs	r2, #1
 8001412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001414:	7bfa      	ldrb	r2, [r7, #15]
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	333c      	adds	r3, #60	; 0x3c
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	b298      	uxth	r0, r3
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	1a9b      	subs	r3, r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	440b      	add	r3, r1
 800143a:	3342      	adds	r3, #66	; 0x42
 800143c:	4602      	mov	r2, r0
 800143e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	333f      	adds	r3, #63	; 0x3f
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	3344      	adds	r3, #68	; 0x44
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3348      	adds	r3, #72	; 0x48
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3350      	adds	r3, #80	; 0x50
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3301      	adds	r3, #1
 8001494:	73fb      	strb	r3, [r7, #15]
 8001496:	7bfa      	ldrb	r2, [r7, #15]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d3af      	bcc.n	8001400 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]
 80014a4:	e044      	b.n	8001530 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014a6:	7bfa      	ldrb	r2, [r7, #15]
 80014a8:	6879      	ldr	r1, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014bc:	7bfa      	ldrb	r2, [r7, #15]
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80014d2:	7bfa      	ldrb	r2, [r7, #15]
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	4613      	mov	r3, r2
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	4613      	mov	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	1a9b      	subs	r3, r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014fe:	7bfa      	ldrb	r2, [r7, #15]
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001514:	7bfa      	ldrb	r2, [r7, #15]
 8001516:	6879      	ldr	r1, [r7, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	1a9b      	subs	r3, r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	440b      	add	r3, r1
 8001522:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	7bfb      	ldrb	r3, [r7, #15]
 800152c:	3301      	adds	r3, #1
 800152e:	73fb      	strb	r3, [r7, #15]
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d3b5      	bcc.n	80014a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	687e      	ldr	r6, [r7, #4]
 8001542:	466d      	mov	r5, sp
 8001544:	f106 0410 	add.w	r4, r6, #16
 8001548:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800154c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800154e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001554:	e885 0003 	stmia.w	r5, {r0, r1}
 8001558:	1d33      	adds	r3, r6, #4
 800155a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800155c:	6838      	ldr	r0, [r7, #0]
 800155e:	f002 fb2f 	bl	8003bc0 <USB_DevInit>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2202      	movs	r2, #2
 800156c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e00d      	b.n	8001590 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fb77 	bl	8004c7c <USB_DevDisconnect>

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001598 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d101      	bne.n	80015b4 <HAL_PCD_Start+0x1c>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e020      	b.n	80015f6 <HAL_PCD_Start+0x5e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d109      	bne.n	80015d8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 faa3 	bl	8003b28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fb27 	bl	8004c3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015fe:	b590      	push	{r4, r7, lr}
 8001600:	b08d      	sub	sp, #52	; 0x34
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800160c:	6a3b      	ldr	r3, [r7, #32]
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fbe5 	bl	8004de4 <USB_GetMode>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 839d 	bne.w	8001d5c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fb49 	bl	8004cbe <USB_ReadInterrupts>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8393 	beq.w	8001d5a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f003 fb40 	bl	8004cbe <USB_ReadInterrupts>
 800163e:	4603      	mov	r3, r0
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b02      	cmp	r3, #2
 8001646:	d107      	bne.n	8001658 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f002 0202 	and.w	r2, r2, #2
 8001656:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f003 fb2e 	bl	8004cbe <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b10      	cmp	r3, #16
 800166a:	d161      	bne.n	8001730 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0210 	bic.w	r2, r2, #16
 800167a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	f003 020f 	and.w	r2, r3, #15
 8001688:	4613      	mov	r3, r2
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	4413      	add	r3, r2
 8001698:	3304      	adds	r3, #4
 800169a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	0c5b      	lsrs	r3, r3, #17
 80016a0:	f003 030f 	and.w	r3, r3, #15
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d124      	bne.n	80016f2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d035      	beq.n	8001720 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80016be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	6a38      	ldr	r0, [r7, #32]
 80016c8:	f003 f994 	bl	80049f4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d8:	441a      	add	r2, r3
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	699a      	ldr	r2, [r3, #24]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016ea:	441a      	add	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	619a      	str	r2, [r3, #24]
 80016f0:	e016      	b.n	8001720 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	0c5b      	lsrs	r3, r3, #17
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d110      	bne.n	8001720 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001704:	2208      	movs	r2, #8
 8001706:	4619      	mov	r1, r3
 8001708:	6a38      	ldr	r0, [r7, #32]
 800170a:	f003 f973 	bl	80049f4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800171a:	441a      	add	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0210 	orr.w	r2, r2, #16
 800172e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fac2 	bl	8004cbe <USB_ReadInterrupts>
 800173a:	4603      	mov	r3, r0
 800173c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001740:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001744:	d16e      	bne.n	8001824 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 fac8 	bl	8004ce4 <USB_ReadDevAllOutEpInterrupt>
 8001754:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001756:	e062      	b.n	800181e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d057      	beq.n	8001812 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f003 faed 	bl	8004d4c <USB_ReadDevOutEPInterrupt>
 8001772:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d00c      	beq.n	8001798 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	015a      	lsls	r2, r3, #5
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	4413      	add	r3, r2
 8001786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800178a:	461a      	mov	r2, r3
 800178c:	2301      	movs	r3, #1
 800178e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001790:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fdb0 	bl	80022f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00c      	beq.n	80017bc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ae:	461a      	mov	r2, r3
 80017b0:	2308      	movs	r3, #8
 80017b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80017b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 feaa 	bl	8002510 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d008      	beq.n	80017d8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d2:	461a      	mov	r2, r3
 80017d4:	2310      	movs	r3, #16
 80017d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f003 0320 	and.w	r3, r3, #32
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d008      	beq.n	80017f4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	015a      	lsls	r2, r3, #5
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	4413      	add	r3, r2
 80017ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017ee:	461a      	mov	r2, r3
 80017f0:	2320      	movs	r3, #32
 80017f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d009      	beq.n	8001812 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	4413      	add	r3, r2
 8001806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800180a:	461a      	mov	r2, r3
 800180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001810:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	3301      	adds	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d199      	bne.n	8001758 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f003 fa48 	bl	8004cbe <USB_ReadInterrupts>
 800182e:	4603      	mov	r3, r0
 8001830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001834:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001838:	f040 80c0 	bne.w	80019bc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fa69 	bl	8004d18 <USB_ReadDevAllInEpInterrupt>
 8001846:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800184c:	e0b2      	b.n	80019b4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80a7 	beq.w	80019a8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f003 fa8f 	bl	8004d88 <USB_ReadDevInEPInterrupt>
 800186a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d057      	beq.n	8001926 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001878:	f003 030f 	and.w	r3, r3, #15
 800187c:	2201      	movs	r2, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800188a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43db      	mvns	r3, r3
 8001890:	69f9      	ldr	r1, [r7, #28]
 8001892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001896:	4013      	ands	r3, r2
 8001898:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	015a      	lsls	r2, r3, #5
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	4413      	add	r3, r2
 80018a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a6:	461a      	mov	r2, r3
 80018a8:	2301      	movs	r3, #1
 80018aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d132      	bne.n	800191a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3348      	adds	r3, #72	; 0x48
 80018c4:	6819      	ldr	r1, [r3, #0]
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ca:	4613      	mov	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	1a9b      	subs	r3, r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4403      	add	r3, r0
 80018d4:	3344      	adds	r3, #68	; 0x44
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4419      	add	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	1a9b      	subs	r3, r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4403      	add	r3, r0
 80018e8:	3348      	adds	r3, #72	; 0x48
 80018ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d113      	bne.n	800191a <HAL_PCD_IRQHandler+0x31c>
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	1a9b      	subs	r3, r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3350      	adds	r3, #80	; 0x50
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d108      	bne.n	800191a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6818      	ldr	r0, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001912:	461a      	mov	r2, r3
 8001914:	2101      	movs	r1, #1
 8001916:	f003 fa97 	bl	8004e48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4619      	mov	r1, r3
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f005 fa6c 	bl	8006dfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	015a      	lsls	r2, r3, #5
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	4413      	add	r3, r2
 8001938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800193c:	461a      	mov	r2, r3
 800193e:	2308      	movs	r3, #8
 8001940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	015a      	lsls	r2, r3, #5
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	4413      	add	r3, r2
 8001954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001958:	461a      	mov	r2, r3
 800195a:	2310      	movs	r3, #16
 800195c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001974:	461a      	mov	r2, r3
 8001976:	2340      	movs	r3, #64	; 0x40
 8001978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001990:	461a      	mov	r2, r3
 8001992:	2302      	movs	r3, #2
 8001994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80019a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fc1b 	bl	80021de <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	3301      	adds	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80019ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80019b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f47f af49 	bne.w	800184e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 f97c 	bl	8004cbe <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80019cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019d0:	d122      	bne.n	8001a18 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80019f8:	2100      	movs	r1, #0
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fe26 	bl	800264c <HAL_PCDEx_LPM_Callback>
 8001a00:	e002      	b.n	8001a08 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f005 fa68 	bl	8006ed8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	695a      	ldr	r2, [r3, #20]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 f94e 	bl	8004cbe <USB_ReadInterrupts>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a2c:	d112      	bne.n	8001a54 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f005 fa24 	bl	8006e8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695a      	ldr	r2, [r3, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001a52:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f003 f930 	bl	8004cbe <USB_ReadInterrupts>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a68:	f040 80c7 	bne.w	8001bfa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2110      	movs	r1, #16
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 f9fe 	bl	8003e88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a90:	e056      	b.n	8001b40 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001aa4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa8:	015a      	lsls	r2, r3, #5
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	4413      	add	r3, r2
 8001aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab6:	0151      	lsls	r1, r2, #5
 8001ab8:	69fa      	ldr	r2, [r7, #28]
 8001aba:	440a      	add	r2, r1
 8001abc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ac0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ac4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	015a      	lsls	r2, r3, #5
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	4413      	add	r3, r2
 8001ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ad6:	0151      	lsls	r1, r2, #5
 8001ad8:	69fa      	ldr	r2, [r7, #28]
 8001ada:	440a      	add	r2, r1
 8001adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001ae0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae8:	015a      	lsls	r2, r3, #5
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001af2:	461a      	mov	r2, r3
 8001af4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001af8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afc:	015a      	lsls	r2, r3, #5
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b0a:	0151      	lsls	r1, r2, #5
 8001b0c:	69fa      	ldr	r2, [r7, #28]
 8001b0e:	440a      	add	r2, r1
 8001b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001b18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	015a      	lsls	r2, r3, #5
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	4413      	add	r3, r2
 8001b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b2a:	0151      	lsls	r1, r2, #5
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	440a      	add	r2, r1
 8001b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001b34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b38:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d3a3      	bcc.n	8001a92 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b58:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001b5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d016      	beq.n	8001b94 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b70:	69fa      	ldr	r2, [r7, #28]
 8001b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b76:	f043 030b 	orr.w	r3, r3, #11
 8001b7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	69fa      	ldr	r2, [r7, #28]
 8001b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b8c:	f043 030b 	orr.w	r3, r3, #11
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	e015      	b.n	8001bc0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ba2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ba6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001baa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bba:	f043 030b 	orr.w	r3, r3, #11
 8001bbe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001bce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001bd2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001be4:	461a      	mov	r2, r3
 8001be6:	f003 f92f 	bl	8004e48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001bf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 f85d 	bl	8004cbe <USB_ReadInterrupts>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c0e:	d124      	bne.n	8001c5a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 f8f3 	bl	8004e00 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f002 f993 	bl	8003f4a <USB_GetDevSpeed>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681c      	ldr	r4, [r3, #0]
 8001c30:	f001 f920 	bl	8002e74 <HAL_RCC_GetHCLKFreq>
 8001c34:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f001 fed0 	bl	80039e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f005 f902 	bl	8006e4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 f82d 	bl	8004cbe <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d10a      	bne.n	8001c84 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f005 f8df 	bl	8006e32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f002 0208 	and.w	r2, r2, #8
 8001c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 f818 	bl	8004cbe <USB_ReadInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c98:	d10f      	bne.n	8001cba <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f005 f937 	bl	8006f18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 fffd 	bl	8004cbe <USB_ReadInterrupts>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cce:	d10f      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f005 f90a 	bl	8006ef4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695a      	ldr	r2, [r3, #20]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f002 ffe2 	bl	8004cbe <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d04:	d10a      	bne.n	8001d1c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f005 f918 	bl	8006f3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695a      	ldr	r2, [r3, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 ffcc 	bl	8004cbe <USB_ReadInterrupts>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d115      	bne.n	8001d5c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f005 f908 	bl	8006f58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6859      	ldr	r1, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	e000      	b.n	8001d5c <HAL_PCD_IRQHandler+0x75e>
      return;
 8001d5a:	bf00      	nop
    }
  }
}
 8001d5c:	3734      	adds	r7, #52	; 0x34
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}

08001d62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_PCD_SetAddress+0x1a>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e013      	b.n	8001da4 <HAL_PCD_SetAddress+0x42>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	4611      	mov	r1, r2
 8001d94:	4618      	mov	r0, r3
 8001d96:	f002 ff2a 	bl	8004bee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	4608      	mov	r0, r1
 8001db6:	4611      	mov	r1, r2
 8001db8:	461a      	mov	r2, r3
 8001dba:	4603      	mov	r3, r0
 8001dbc:	70fb      	strb	r3, [r7, #3]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	803b      	strh	r3, [r7, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	da0f      	bge.n	8001df2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	f003 020f 	and.w	r2, r3, #15
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3338      	adds	r3, #56	; 0x38
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	705a      	strb	r2, [r3, #1]
 8001df0:	e00f      	b.n	8001e12 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001df2:	78fb      	ldrb	r3, [r7, #3]
 8001df4:	f003 020f 	and.w	r2, r3, #15
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	1a9b      	subs	r3, r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	4413      	add	r3, r2
 8001e08:	3304      	adds	r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e1e:	883a      	ldrh	r2, [r7, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	78ba      	ldrb	r2, [r7, #2]
 8001e28:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	785b      	ldrb	r3, [r3, #1]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e3c:	78bb      	ldrb	r3, [r7, #2]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d102      	bne.n	8001e48 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_PCD_EP_Open+0xaa>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e00e      	b.n	8001e74 <HAL_PCD_EP_Open+0xc8>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 f895 	bl	8003f94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e72:	7afb      	ldrb	r3, [r7, #11]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da0f      	bge.n	8001eb0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 020f 	and.w	r2, r3, #15
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	1a9b      	subs	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	3338      	adds	r3, #56	; 0x38
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	705a      	strb	r2, [r3, #1]
 8001eae:	e00f      	b.n	8001ed0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 020f 	and.w	r2, r3, #15
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	3304      	adds	r3, #4
 8001ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_PCD_EP_Close+0x6e>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e00e      	b.n	8001f08 <HAL_PCD_EP_Close+0x8c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68f9      	ldr	r1, [r7, #12]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f002 f8d3 	bl	80040a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	607a      	str	r2, [r7, #4]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	f003 020f 	and.w	r2, r3, #15
 8001f26:	4613      	mov	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	f003 030f 	and.w	r3, r3, #15
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d102      	bne.n	8001f6c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	6979      	ldr	r1, [r7, #20]
 8001f84:	f002 fbae 	bl	80046e4 <USB_EP0StartXfer>
 8001f88:	e008      	b.n	8001f9c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6818      	ldr	r0, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	6979      	ldr	r1, [r7, #20]
 8001f98:	f002 f960 	bl	800425c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fc8:	681b      	ldr	r3, [r3, #0]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	607a      	str	r2, [r7, #4]
 8001fe0:	603b      	str	r3, [r7, #0]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
 8001fe8:	f003 020f 	and.w	r2, r3, #15
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	3338      	adds	r3, #56	; 0x38
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2201      	movs	r2, #1
 8002014:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002016:	7afb      	ldrb	r3, [r7, #11]
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	b2da      	uxtb	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d102      	bne.n	8002030 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	6979      	ldr	r1, [r7, #20]
 8002048:	f002 fb4c 	bl	80046e4 <USB_EP0StartXfer>
 800204c:	e008      	b.n	8002060 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	6979      	ldr	r1, [r7, #20]
 800205c:	f002 f8fe 	bl	800425c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002076:	78fb      	ldrb	r3, [r7, #3]
 8002078:	f003 020f 	and.w	r2, r3, #15
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	d901      	bls.n	8002088 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e050      	b.n	800212a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208c:	2b00      	cmp	r3, #0
 800208e:	da0f      	bge.n	80020b0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	f003 020f 	and.w	r2, r3, #15
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	3338      	adds	r3, #56	; 0x38
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	3304      	adds	r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	705a      	strb	r2, [r3, #1]
 80020ae:	e00d      	b.n	80020cc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	3304      	adds	r3, #4
 80020c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_PCD_EP_SetStall+0x82>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e01e      	b.n	800212a <HAL_PCD_EP_SetStall+0xc0>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fca3 	bl	8004a46 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002100:	78fb      	ldrb	r3, [r7, #3]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10a      	bne.n	8002120 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	b2d9      	uxtb	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800211a:	461a      	mov	r2, r3
 800211c:	f002 fe94 	bl	8004e48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	460b      	mov	r3, r1
 800213c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	f003 020f 	and.w	r2, r3, #15
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d901      	bls.n	8002150 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e042      	b.n	80021d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002154:	2b00      	cmp	r3, #0
 8002156:	da0f      	bge.n	8002178 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 020f 	and.w	r2, r3, #15
 800215e:	4613      	mov	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	3338      	adds	r3, #56	; 0x38
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	705a      	strb	r2, [r3, #1]
 8002176:	e00f      	b.n	8002198 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 020f 	and.w	r2, r3, #15
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	f003 030f 	and.w	r3, r3, #15
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_PCD_EP_ClrStall+0x86>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e00e      	b.n	80021d6 <HAL_PCD_EP_ClrStall+0xa4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68f9      	ldr	r1, [r7, #12]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f002 fcab 	bl	8004b22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b08a      	sub	sp, #40	; 0x28
 80021e2:	af02      	add	r7, sp, #8
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	3338      	adds	r3, #56	; 0x38
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	3304      	adds	r3, #4
 8002204:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	429a      	cmp	r2, r3
 8002210:	d901      	bls.n	8002216 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06c      	b.n	80022f0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	429a      	cmp	r2, r3
 800222a:	d902      	bls.n	8002232 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3303      	adds	r3, #3
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800223a:	e02b      	b.n	8002294 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	429a      	cmp	r2, r3
 8002250:	d902      	bls.n	8002258 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	3303      	adds	r3, #3
 800225c:	089b      	lsrs	r3, r3, #2
 800225e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	68d9      	ldr	r1, [r3, #12]
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	b2da      	uxtb	r2, r3
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002270:	b2db      	uxtb	r3, r3
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4603      	mov	r3, r0
 8002276:	6978      	ldr	r0, [r7, #20]
 8002278:	f002 fb87 	bl	800498a <USB_WritePacket>

    ep->xfer_buff  += len;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	441a      	add	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	699a      	ldr	r2, [r3, #24]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	441a      	add	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	015a      	lsls	r2, r3, #5
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4413      	add	r3, r2
 800229c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d809      	bhi.n	80022be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d203      	bcs.n	80022be <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1be      	bne.n	800223c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	695a      	ldr	r2, [r3, #20]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d811      	bhi.n	80022ee <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	2201      	movs	r2, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	6939      	ldr	r1, [r7, #16]
 80022e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022ea:	4013      	ands	r3, r2
 80022ec:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	333c      	adds	r3, #60	; 0x3c
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	f040 80a0 	bne.w	8002470 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a72      	ldr	r2, [pc, #456]	; (8002508 <PCD_EP_OutXfrComplete_int+0x210>)
 800233e:	4293      	cmp	r3, r2
 8002340:	f240 80dd 	bls.w	80024fe <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 80d7 	beq.w	80024fe <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002362:	6093      	str	r3, [r2, #8]
 8002364:	e0cb      	b.n	80024fe <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	f003 0320 	and.w	r3, r3, #32
 800236c:	2b00      	cmp	r3, #0
 800236e:	d009      	beq.n	8002384 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	015a      	lsls	r2, r3, #5
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	4413      	add	r3, r2
 8002378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800237c:	461a      	mov	r2, r3
 800237e:	2320      	movs	r3, #32
 8002380:	6093      	str	r3, [r2, #8]
 8002382:	e0bc      	b.n	80024fe <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 80b7 	bne.w	80024fe <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4a5d      	ldr	r2, [pc, #372]	; (8002508 <PCD_EP_OutXfrComplete_int+0x210>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d90f      	bls.n	80023b8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00a      	beq.n	80023b8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ae:	461a      	mov	r2, r3
 80023b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023b4:	6093      	str	r3, [r2, #8]
 80023b6:	e0a2      	b.n	80024fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023ca:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	0159      	lsls	r1, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	440b      	add	r3, r1
 80023d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80023de:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4403      	add	r3, r0
 80023ee:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80023f2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002406:	6819      	ldr	r1, [r3, #0]
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	4613      	mov	r3, r2
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4403      	add	r3, r0
 8002416:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4419      	add	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	1a9b      	subs	r3, r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4403      	add	r3, r0
 800242c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002430:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d114      	bne.n	8002462 <PCD_EP_OutXfrComplete_int+0x16a>
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	1a9b      	subs	r3, r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d108      	bne.n	8002462 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800245a:	461a      	mov	r2, r3
 800245c:	2101      	movs	r1, #1
 800245e:	f002 fcf3 	bl	8004e48 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f004 fcad 	bl	8006dc8 <HAL_PCD_DataOutStageCallback>
 800246e:	e046      	b.n	80024fe <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4a26      	ldr	r2, [pc, #152]	; (800250c <PCD_EP_OutXfrComplete_int+0x214>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d124      	bne.n	80024c2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248e:	461a      	mov	r2, r3
 8002490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002494:	6093      	str	r3, [r2, #8]
 8002496:	e032      	b.n	80024fe <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 0320 	and.w	r3, r3, #32
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ae:	461a      	mov	r2, r3
 80024b0:	2320      	movs	r3, #32
 80024b2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f004 fc84 	bl	8006dc8 <HAL_PCD_DataOutStageCallback>
 80024c0:	e01d      	b.n	80024fe <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d114      	bne.n	80024f2 <PCD_EP_OutXfrComplete_int+0x1fa>
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4613      	mov	r3, r2
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	1a9b      	subs	r3, r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d108      	bne.n	80024f2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024ea:	461a      	mov	r2, r3
 80024ec:	2100      	movs	r1, #0
 80024ee:	f002 fcab 	bl	8004e48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f004 fc65 	bl	8006dc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	4f54300a 	.word	0x4f54300a
 800250c:	4f54310a 	.word	0x4f54310a

08002510 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	333c      	adds	r3, #60	; 0x3c
 8002528:	3304      	adds	r3, #4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a15      	ldr	r2, [pc, #84]	; (8002598 <PCD_EP_OutSetupPacket_int+0x88>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d90e      	bls.n	8002564 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	015a      	lsls	r2, r3, #5
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	4413      	add	r3, r2
 8002558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255c:	461a      	mov	r2, r3
 800255e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002562:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f004 fc1d 	bl	8006da4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a0a      	ldr	r2, [pc, #40]	; (8002598 <PCD_EP_OutSetupPacket_int+0x88>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d90c      	bls.n	800258c <PCD_EP_OutSetupPacket_int+0x7c>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d108      	bne.n	800258c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002584:	461a      	mov	r2, r3
 8002586:	2101      	movs	r1, #1
 8002588:	f002 fc5e 	bl	8004e48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	4f54300a 	.word	0x4f54300a

0800259c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	70fb      	strb	r3, [r7, #3]
 80025a8:	4613      	mov	r3, r2
 80025aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d107      	bne.n	80025ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80025ba:	883b      	ldrh	r3, [r7, #0]
 80025bc:	0419      	lsls	r1, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	629a      	str	r2, [r3, #40]	; 0x28
 80025c8:	e028      	b.n	800261c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	0c1b      	lsrs	r3, r3, #16
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4413      	add	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025d8:	2300      	movs	r3, #0
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e00d      	b.n	80025fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	3340      	adds	r3, #64	; 0x40
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	0c1b      	lsrs	r3, r3, #16
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	3301      	adds	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	78fb      	ldrb	r3, [r7, #3]
 80025fe:	3b01      	subs	r3, #1
 8002600:	429a      	cmp	r2, r3
 8002602:	d3ec      	bcc.n	80025de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002604:	883b      	ldrh	r3, [r7, #0]
 8002606:	0418      	lsls	r0, r3, #16
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	3b01      	subs	r3, #1
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	4302      	orrs	r2, r0
 8002614:	3340      	adds	r3, #64	; 0x40
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	460b      	mov	r3, r1
 8002634:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e25b      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d075      	beq.n	800276e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002682:	4ba3      	ldr	r3, [pc, #652]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b04      	cmp	r3, #4
 800268c:	d00c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800268e:	4ba0      	ldr	r3, [pc, #640]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002696:	2b08      	cmp	r3, #8
 8002698:	d112      	bne.n	80026c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800269a:	4b9d      	ldr	r3, [pc, #628]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026a6:	d10b      	bne.n	80026c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4b99      	ldr	r3, [pc, #612]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d05b      	beq.n	800276c <HAL_RCC_OscConfig+0x108>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d157      	bne.n	800276c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e236      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x74>
 80026ca:	4b91      	ldr	r3, [pc, #580]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a90      	ldr	r2, [pc, #576]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0xb0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x98>
 80026e2:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a8a      	ldr	r2, [pc, #552]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80026e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	4b88      	ldr	r3, [pc, #544]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a87      	ldr	r2, [pc, #540]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0xb0>
 80026fc:	4b84      	ldr	r3, [pc, #528]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a83      	ldr	r2, [pc, #524]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	4b81      	ldr	r3, [pc, #516]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a80      	ldr	r2, [pc, #512]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 800270e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d013      	beq.n	8002744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7fe fb44 	bl	8000da8 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002724:	f7fe fb40 	bl	8000da8 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1fb      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b76      	ldr	r3, [pc, #472]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0xc0>
 8002742:	e014      	b.n	800276e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7fe fb30 	bl	8000da8 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800274c:	f7fe fb2c 	bl	8000da8 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e1e7      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800275e:	4b6c      	ldr	r3, [pc, #432]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f0      	bne.n	800274c <HAL_RCC_OscConfig+0xe8>
 800276a:	e000      	b.n	800276e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800276c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d063      	beq.n	8002842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800277a:	4b65      	ldr	r3, [pc, #404]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 030c 	and.w	r3, r3, #12
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00b      	beq.n	800279e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002786:	4b62      	ldr	r3, [pc, #392]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800278e:	2b08      	cmp	r3, #8
 8002790:	d11c      	bne.n	80027cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002792:	4b5f      	ldr	r3, [pc, #380]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d116      	bne.n	80027cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800279e:	4b5c      	ldr	r3, [pc, #368]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_RCC_OscConfig+0x152>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e1bb      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b6:	4b56      	ldr	r3, [pc, #344]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4952      	ldr	r1, [pc, #328]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ca:	e03a      	b.n	8002842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d020      	beq.n	8002816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <HAL_RCC_OscConfig+0x2b0>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fae5 	bl	8000da8 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027e2:	f7fe fae1 	bl	8000da8 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e19c      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f4:	4b46      	ldr	r3, [pc, #280]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d0f0      	beq.n	80027e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002800:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4940      	ldr	r1, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]
 8002814:	e015      	b.n	8002842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002816:	4b3f      	ldr	r3, [pc, #252]	; (8002914 <HAL_RCC_OscConfig+0x2b0>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281c:	f7fe fac4 	bl	8000da8 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002824:	f7fe fac0 	bl	8000da8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e17b      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002836:	4b36      	ldr	r3, [pc, #216]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d030      	beq.n	80028b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d016      	beq.n	8002884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002856:	4b30      	ldr	r3, [pc, #192]	; (8002918 <HAL_RCC_OscConfig+0x2b4>)
 8002858:	2201      	movs	r2, #1
 800285a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe faa4 	bl	8000da8 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002864:	f7fe faa0 	bl	8000da8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e15b      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002876:	4b26      	ldr	r3, [pc, #152]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0f0      	beq.n	8002864 <HAL_RCC_OscConfig+0x200>
 8002882:	e015      	b.n	80028b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002884:	4b24      	ldr	r3, [pc, #144]	; (8002918 <HAL_RCC_OscConfig+0x2b4>)
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800288a:	f7fe fa8d 	bl	8000da8 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002892:	f7fe fa89 	bl	8000da8 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e144      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80028a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f0      	bne.n	8002892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a0 	beq.w	80029fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	60bb      	str	r3, [r7, #8]
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028dc:	6413      	str	r3, [r2, #64]	; 0x40
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	60bb      	str	r3, [r7, #8]
 80028e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <HAL_RCC_OscConfig+0x2b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d121      	bne.n	800293e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <HAL_RCC_OscConfig+0x2b8>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a07      	ldr	r2, [pc, #28]	; (800291c <HAL_RCC_OscConfig+0x2b8>)
 8002900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002906:	f7fe fa4f 	bl	8000da8 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	e011      	b.n	8002932 <HAL_RCC_OscConfig+0x2ce>
 800290e:	bf00      	nop
 8002910:	40023800 	.word	0x40023800
 8002914:	42470000 	.word	0x42470000
 8002918:	42470e80 	.word	0x42470e80
 800291c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002920:	f7fe fa42 	bl	8000da8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e0fd      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002932:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x4d4>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x2f0>
 8002946:	4b7d      	ldr	r3, [pc, #500]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294a:	4a7c      	ldr	r2, [pc, #496]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	6713      	str	r3, [r2, #112]	; 0x70
 8002952:	e01c      	b.n	800298e <HAL_RCC_OscConfig+0x32a>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2b05      	cmp	r3, #5
 800295a:	d10c      	bne.n	8002976 <HAL_RCC_OscConfig+0x312>
 800295c:	4b77      	ldr	r3, [pc, #476]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002960:	4a76      	ldr	r2, [pc, #472]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002962:	f043 0304 	orr.w	r3, r3, #4
 8002966:	6713      	str	r3, [r2, #112]	; 0x70
 8002968:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	4a73      	ldr	r2, [pc, #460]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	; 0x70
 8002974:	e00b      	b.n	800298e <HAL_RCC_OscConfig+0x32a>
 8002976:	4b71      	ldr	r3, [pc, #452]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	4a70      	ldr	r2, [pc, #448]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	6713      	str	r3, [r2, #112]	; 0x70
 8002982:	4b6e      	ldr	r3, [pc, #440]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a6d      	ldr	r2, [pc, #436]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002988:	f023 0304 	bic.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7fe fa07 	bl	8000da8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800299e:	f7fe fa03 	bl	8000da8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e0bc      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b4:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0ee      	beq.n	800299e <HAL_RCC_OscConfig+0x33a>
 80029c0:	e014      	b.n	80029ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7fe f9f1 	bl	8000da8 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe f9ed 	bl	8000da8 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e0a6      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e0:	4b56      	ldr	r3, [pc, #344]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1ee      	bne.n	80029ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029ec:	7dfb      	ldrb	r3, [r7, #23]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d105      	bne.n	80029fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f2:	4b52      	ldr	r3, [pc, #328]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4a51      	ldr	r2, [pc, #324]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 80029f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8092 	beq.w	8002b2c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a08:	4b4c      	ldr	r3, [pc, #304]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 030c 	and.w	r3, r3, #12
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d05c      	beq.n	8002ace <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d141      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a22:	f7fe f9c1 	bl	8000da8 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a2a:	f7fe f9bd 	bl	8000da8 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e078      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3c:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1f0      	bne.n	8002a2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	019b      	lsls	r3, r3, #6
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	3b01      	subs	r3, #1
 8002a62:	041b      	lsls	r3, r3, #16
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	061b      	lsls	r3, r3, #24
 8002a6c:	4933      	ldr	r1, [pc, #204]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7fe f996 	bl	8000da8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe f992 	bl	8000da8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e04d      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x41c>
 8002a9e:	e045      	b.n	8002b2c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa0:	4b27      	ldr	r3, [pc, #156]	; (8002b40 <HAL_RCC_OscConfig+0x4dc>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe f97f 	bl	8000da8 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aae:	f7fe f97b 	bl	8000da8 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e036      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x44a>
 8002acc:	e02e      	b.n	8002b2c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e029      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <HAL_RCC_OscConfig+0x4d8>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d11c      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d115      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b02:	4013      	ands	r3, r2
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d106      	bne.n	8002b28 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	42470060 	.word	0x42470060

08002b44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0cc      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b68      	ldr	r3, [pc, #416]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d90c      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	4b63      	ldr	r3, [pc, #396]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0b8      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b98:	4b59      	ldr	r3, [pc, #356]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a58      	ldr	r2, [pc, #352]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bb0:	4b53      	ldr	r3, [pc, #332]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a52      	ldr	r2, [pc, #328]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bbc:	4b50      	ldr	r3, [pc, #320]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	494d      	ldr	r1, [pc, #308]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d044      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d119      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e07f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c02:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e06f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e067      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4934      	ldr	r1, [pc, #208]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c34:	f7fe f8b8 	bl	8000da8 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7fe f8b4 	bl	8000da8 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e04f      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 020c 	and.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c64:	4b25      	ldr	r3, [pc, #148]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d20c      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	b2d2      	uxtb	r2, r2
 8002c78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <HAL_RCC_ClockConfig+0x1b8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e032      	b.n	8002cf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4916      	ldr	r1, [pc, #88]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	490e      	ldr	r1, [pc, #56]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cca:	f000 f821 	bl	8002d10 <HAL_RCC_GetSysClockFreq>
 8002cce:	4601      	mov	r1, r0
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <HAL_RCC_ClockConfig+0x1c0>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	fa21 f303 	lsr.w	r3, r1, r3
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ce6:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f818 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00
 8002d00:	40023800 	.word	0x40023800
 8002d04:	08007538 	.word	0x08007538
 8002d08:	20000004 	.word	0x20000004
 8002d0c:	20000008 	.word	0x20000008

08002d10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d26:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d007      	beq.n	8002d42 <HAL_RCC_GetSysClockFreq+0x32>
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d008      	beq.n	8002d48 <HAL_RCC_GetSysClockFreq+0x38>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 808d 	bne.w	8002e56 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002d3e:	60bb      	str	r3, [r7, #8]
       break;
 8002d40:	e08c      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d42:	4b4b      	ldr	r3, [pc, #300]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d44:	60bb      	str	r3, [r7, #8]
      break;
 8002d46:	e089      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d48:	4b47      	ldr	r3, [pc, #284]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d52:	4b45      	ldr	r3, [pc, #276]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d023      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5e:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	099b      	lsrs	r3, r3, #6
 8002d64:	f04f 0400 	mov.w	r4, #0
 8002d68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d6c:	f04f 0200 	mov.w	r2, #0
 8002d70:	ea03 0501 	and.w	r5, r3, r1
 8002d74:	ea04 0602 	and.w	r6, r4, r2
 8002d78:	4a3d      	ldr	r2, [pc, #244]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d7a:	fb02 f106 	mul.w	r1, r2, r6
 8002d7e:	2200      	movs	r2, #0
 8002d80:	fb02 f205 	mul.w	r2, r2, r5
 8002d84:	440a      	add	r2, r1
 8002d86:	493a      	ldr	r1, [pc, #232]	; (8002e70 <HAL_RCC_GetSysClockFreq+0x160>)
 8002d88:	fba5 0101 	umull	r0, r1, r5, r1
 8002d8c:	1853      	adds	r3, r2, r1
 8002d8e:	4619      	mov	r1, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f04f 0400 	mov.w	r4, #0
 8002d96:	461a      	mov	r2, r3
 8002d98:	4623      	mov	r3, r4
 8002d9a:	f7fd fa1d 	bl	80001d8 <__aeabi_uldivmod>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	460c      	mov	r4, r1
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e049      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002da6:	4b30      	ldr	r3, [pc, #192]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	099b      	lsrs	r3, r3, #6
 8002dac:	f04f 0400 	mov.w	r4, #0
 8002db0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	ea03 0501 	and.w	r5, r3, r1
 8002dbc:	ea04 0602 	and.w	r6, r4, r2
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4632      	mov	r2, r6
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	f04f 0400 	mov.w	r4, #0
 8002dcc:	0154      	lsls	r4, r2, #5
 8002dce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002dd2:	014b      	lsls	r3, r1, #5
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4622      	mov	r2, r4
 8002dd8:	1b49      	subs	r1, r1, r5
 8002dda:	eb62 0206 	sbc.w	r2, r2, r6
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	f04f 0400 	mov.w	r4, #0
 8002de6:	0194      	lsls	r4, r2, #6
 8002de8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002dec:	018b      	lsls	r3, r1, #6
 8002dee:	1a5b      	subs	r3, r3, r1
 8002df0:	eb64 0402 	sbc.w	r4, r4, r2
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	00e2      	lsls	r2, r4, #3
 8002dfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e02:	00d9      	lsls	r1, r3, #3
 8002e04:	460b      	mov	r3, r1
 8002e06:	4614      	mov	r4, r2
 8002e08:	195b      	adds	r3, r3, r5
 8002e0a:	eb44 0406 	adc.w	r4, r4, r6
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	02a2      	lsls	r2, r4, #10
 8002e18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e1c:	0299      	lsls	r1, r3, #10
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4614      	mov	r4, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	4621      	mov	r1, r4
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f04f 0400 	mov.w	r4, #0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4623      	mov	r3, r4
 8002e30:	f7fd f9d2 	bl	80001d8 <__aeabi_uldivmod>
 8002e34:	4603      	mov	r3, r0
 8002e36:	460c      	mov	r4, r1
 8002e38:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <HAL_RCC_GetSysClockFreq+0x158>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	0c1b      	lsrs	r3, r3, #16
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	3301      	adds	r3, #1
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e52:	60bb      	str	r3, [r7, #8]
      break;
 8002e54:	e002      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002e58:	60bb      	str	r3, [r7, #8]
      break;
 8002e5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	017d7840 	.word	0x017d7840

08002e74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000004 	.word	0x20000004

08002e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e01d      	b.n	8002eda <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fd fdce 	bl	8000a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f000 f9ee 	bl	80032ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e01d      	b.n	8002f30 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d106      	bne.n	8002f0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f815 	bl	8002f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f000 f9c3 	bl	80032ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	6839      	ldr	r1, [r7, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fc4a 	bl	80037f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a10      	ldr	r2, [pc, #64]	; (8002fac <HAL_TIM_PWM_Start+0x60>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d107      	bne.n	8002f7e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b06      	cmp	r3, #6
 8002f8e:	d007      	beq.n	8002fa0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000

08002fb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e0b4      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2b0c      	cmp	r3, #12
 8002fde:	f200 809f 	bhi.w	8003120 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002fe2:	a201      	add	r2, pc, #4	; (adr r2, 8002fe8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	0800301d 	.word	0x0800301d
 8002fec:	08003121 	.word	0x08003121
 8002ff0:	08003121 	.word	0x08003121
 8002ff4:	08003121 	.word	0x08003121
 8002ff8:	0800305d 	.word	0x0800305d
 8002ffc:	08003121 	.word	0x08003121
 8003000:	08003121 	.word	0x08003121
 8003004:	08003121 	.word	0x08003121
 8003008:	0800309f 	.word	0x0800309f
 800300c:	08003121 	.word	0x08003121
 8003010:	08003121 	.word	0x08003121
 8003014:	08003121 	.word	0x08003121
 8003018:	080030df 	.word	0x080030df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f9c2 	bl	80033ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0204 	bic.w	r2, r2, #4
 8003046:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6999      	ldr	r1, [r3, #24]
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	619a      	str	r2, [r3, #24]
      break;
 800305a:	e062      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68b9      	ldr	r1, [r7, #8]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fa08 	bl	8003478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6999      	ldr	r1, [r3, #24]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	021a      	lsls	r2, r3, #8
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      break;
 800309c:	e041      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fa53 	bl	8003550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	69da      	ldr	r2, [r3, #28]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0208 	orr.w	r2, r2, #8
 80030b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0204 	bic.w	r2, r2, #4
 80030c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69d9      	ldr	r1, [r3, #28]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	61da      	str	r2, [r3, #28]
      break;
 80030dc:	e021      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68b9      	ldr	r1, [r7, #8]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fa9d 	bl	8003624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69d9      	ldr	r1, [r3, #28]
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	021a      	lsls	r2, r3, #8
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	61da      	str	r2, [r3, #28]
      break;
 800311e:	e000      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003120:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2201      	movs	r2, #1
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_TIM_ConfigClockSource+0x18>
 8003150:	2302      	movs	r3, #2
 8003152:	e0a6      	b.n	80032a2 <HAL_TIM_ConfigClockSource+0x166>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2202      	movs	r2, #2
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d067      	beq.n	800325c <HAL_TIM_ConfigClockSource+0x120>
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d80b      	bhi.n	80031a8 <HAL_TIM_ConfigClockSource+0x6c>
 8003190:	2b10      	cmp	r3, #16
 8003192:	d073      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x140>
 8003194:	2b10      	cmp	r3, #16
 8003196:	d802      	bhi.n	800319e <HAL_TIM_ConfigClockSource+0x62>
 8003198:	2b00      	cmp	r3, #0
 800319a:	d06f      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800319c:	e078      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d06c      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x140>
 80031a2:	2b30      	cmp	r3, #48	; 0x30
 80031a4:	d06a      	beq.n	800327c <HAL_TIM_ConfigClockSource+0x140>
      break;
 80031a6:	e073      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031a8:	2b70      	cmp	r3, #112	; 0x70
 80031aa:	d00d      	beq.n	80031c8 <HAL_TIM_ConfigClockSource+0x8c>
 80031ac:	2b70      	cmp	r3, #112	; 0x70
 80031ae:	d804      	bhi.n	80031ba <HAL_TIM_ConfigClockSource+0x7e>
 80031b0:	2b50      	cmp	r3, #80	; 0x50
 80031b2:	d033      	beq.n	800321c <HAL_TIM_ConfigClockSource+0xe0>
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d041      	beq.n	800323c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80031b8:	e06a      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80031ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031be:	d066      	beq.n	800328e <HAL_TIM_ConfigClockSource+0x152>
 80031c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c4:	d017      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80031c6:	e063      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6818      	ldr	r0, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f000 faee 	bl	80037b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031ea:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	609a      	str	r2, [r3, #8]
      break;
 80031f4:	e04c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6899      	ldr	r1, [r3, #8]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f000 fad7 	bl	80037b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003218:	609a      	str	r2, [r3, #8]
      break;
 800321a:	e039      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	461a      	mov	r2, r3
 800322a:	f000 fa4b 	bl	80036c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2150      	movs	r1, #80	; 0x50
 8003234:	4618      	mov	r0, r3
 8003236:	f000 faa4 	bl	8003782 <TIM_ITRx_SetConfig>
      break;
 800323a:	e029      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	461a      	mov	r2, r3
 800324a:	f000 fa6a 	bl	8003722 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2160      	movs	r1, #96	; 0x60
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fa94 	bl	8003782 <TIM_ITRx_SetConfig>
      break;
 800325a:	e019      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	461a      	mov	r2, r3
 800326a:	f000 fa2b 	bl	80036c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2140      	movs	r1, #64	; 0x40
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fa84 	bl	8003782 <TIM_ITRx_SetConfig>
      break;
 800327a:	e009      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f000 fa7b 	bl	8003782 <TIM_ITRx_SetConfig>
      break;
 800328c:	e000      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800328e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a34      	ldr	r2, [pc, #208]	; (8003390 <TIM_Base_SetConfig+0xe4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d00f      	beq.n	80032e4 <TIM_Base_SetConfig+0x38>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0x38>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a31      	ldr	r2, [pc, #196]	; (8003394 <TIM_Base_SetConfig+0xe8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0x38>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a30      	ldr	r2, [pc, #192]	; (8003398 <TIM_Base_SetConfig+0xec>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0x38>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a2f      	ldr	r2, [pc, #188]	; (800339c <TIM_Base_SetConfig+0xf0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a25      	ldr	r2, [pc, #148]	; (8003390 <TIM_Base_SetConfig+0xe4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01b      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003304:	d017      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a22      	ldr	r2, [pc, #136]	; (8003394 <TIM_Base_SetConfig+0xe8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a21      	ldr	r2, [pc, #132]	; (8003398 <TIM_Base_SetConfig+0xec>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00f      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a20      	ldr	r2, [pc, #128]	; (800339c <TIM_Base_SetConfig+0xf0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00b      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <TIM_Base_SetConfig+0xf4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d007      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <TIM_Base_SetConfig+0xf8>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d003      	beq.n	8003336 <TIM_Base_SetConfig+0x8a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <TIM_Base_SetConfig+0xfc>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d108      	bne.n	8003348 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a08      	ldr	r2, [pc, #32]	; (8003390 <TIM_Base_SetConfig+0xe4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d103      	bne.n	800337c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	615a      	str	r2, [r3, #20]
}
 8003382:	bf00      	nop
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40010000 	.word	0x40010000
 8003394:	40000400 	.word	0x40000400
 8003398:	40000800 	.word	0x40000800
 800339c:	40000c00 	.word	0x40000c00
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	40014800 	.word	0x40014800

080033ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f023 0201 	bic.w	r2, r3, #1
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0303 	bic.w	r3, r3, #3
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f023 0302 	bic.w	r3, r3, #2
 80033f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a1c      	ldr	r2, [pc, #112]	; (8003474 <TIM_OC1_SetConfig+0xc8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d10c      	bne.n	8003422 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f023 0308 	bic.w	r3, r3, #8
 800340e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f023 0304 	bic.w	r3, r3, #4
 8003420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a13      	ldr	r2, [pc, #76]	; (8003474 <TIM_OC1_SetConfig+0xc8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d111      	bne.n	800344e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr
 8003474:	40010000 	.word	0x40010000

08003478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f023 0210 	bic.w	r2, r3, #16
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0320 	bic.w	r3, r3, #32
 80034c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a1e      	ldr	r2, [pc, #120]	; (800354c <TIM_OC2_SetConfig+0xd4>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d10d      	bne.n	80034f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <TIM_OC2_SetConfig+0xd4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d113      	bne.n	8003524 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800350a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	621a      	str	r2, [r3, #32]
}
 800353e:	bf00      	nop
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40010000 	.word	0x40010000

08003550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <TIM_OC3_SetConfig+0xd0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d10d      	bne.n	80035ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a14      	ldr	r2, [pc, #80]	; (8003620 <TIM_OC3_SetConfig+0xd0>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d113      	bne.n	80035fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	011b      	lsls	r3, r3, #4
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	621a      	str	r2, [r3, #32]
}
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40010000 	.word	0x40010000

08003624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800366e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	031b      	lsls	r3, r3, #12
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a10      	ldr	r2, [pc, #64]	; (80036c0 <TIM_OC4_SetConfig+0x9c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d109      	bne.n	8003698 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800368a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	693a      	ldr	r2, [r7, #16]
 80036b0:	621a      	str	r2, [r3, #32]
}
 80036b2:	bf00      	nop
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40010000 	.word	0x40010000

080036c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f023 0201 	bic.w	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f023 030a 	bic.w	r3, r3, #10
 8003700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
 8003708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003722:	b480      	push	{r7}
 8003724:	b087      	sub	sp, #28
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f023 0210 	bic.w	r2, r3, #16
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800374c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	031b      	lsls	r3, r3, #12
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800375e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
 800378a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	f043 0307 	orr.w	r3, r3, #7
 80037a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	609a      	str	r2, [r3, #8]
}
 80037ac:	bf00      	nop
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
 80037c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	021a      	lsls	r2, r3, #8
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	431a      	orrs	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4313      	orrs	r3, r2
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b087      	sub	sp, #28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2201      	movs	r2, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a1a      	ldr	r2, [r3, #32]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	43db      	mvns	r3, r3
 800381a:	401a      	ands	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	fa01 f303 	lsl.w	r3, r1, r3
 8003830:	431a      	orrs	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003858:	2302      	movs	r3, #2
 800385a:	e050      	b.n	80038fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	4313      	orrs	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1c      	ldr	r2, [pc, #112]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d018      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a8:	d013      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d00e      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a16      	ldr	r2, [pc, #88]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d009      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d004      	beq.n	80038d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a13      	ldr	r2, [pc, #76]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d10c      	bne.n	80038ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3714      	adds	r7, #20
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40010000 	.word	0x40010000
 8003910:	40000400 	.word	0x40000400
 8003914:	40000800 	.word	0x40000800
 8003918:	40000c00 	.word	0x40000c00
 800391c:	40014000 	.word	0x40014000

08003920 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003920:	b084      	sub	sp, #16
 8003922:	b580      	push	{r7, lr}
 8003924:	b084      	sub	sp, #16
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	f107 001c 	add.w	r0, r7, #28
 800392e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	2b01      	cmp	r3, #1
 8003936:	d122      	bne.n	800397e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800394c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003962:	2b01      	cmp	r3, #1
 8003964:	d105      	bne.n	8003972 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f001 fac6 	bl	8004f04 <USB_CoreReset>
 8003978:	4603      	mov	r3, r0
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e01a      	b.n	80039b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f001 faba 	bl	8004f04 <USB_CoreReset>
 8003990:	4603      	mov	r3, r0
 8003992:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38
 80039a6:	e005      	b.n	80039b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d10b      	bne.n	80039d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f043 0206 	orr.w	r2, r3, #6
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f043 0220 	orr.w	r2, r3, #32
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039de:	b004      	add	sp, #16
 80039e0:	4770      	bx	lr
	...

080039e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	4613      	mov	r3, r2
 80039f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80039f2:	79fb      	ldrb	r3, [r7, #7]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d165      	bne.n	8003ac4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4a41      	ldr	r2, [pc, #260]	; (8003b00 <USB_SetTurnaroundTime+0x11c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d906      	bls.n	8003a0e <USB_SetTurnaroundTime+0x2a>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4a40      	ldr	r2, [pc, #256]	; (8003b04 <USB_SetTurnaroundTime+0x120>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d802      	bhi.n	8003a0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a08:	230f      	movs	r3, #15
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e062      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <USB_SetTurnaroundTime+0x120>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d906      	bls.n	8003a24 <USB_SetTurnaroundTime+0x40>
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4a3b      	ldr	r2, [pc, #236]	; (8003b08 <USB_SetTurnaroundTime+0x124>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d802      	bhi.n	8003a24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a1e:	230e      	movs	r3, #14
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	e057      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4a38      	ldr	r2, [pc, #224]	; (8003b08 <USB_SetTurnaroundTime+0x124>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d906      	bls.n	8003a3a <USB_SetTurnaroundTime+0x56>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	4a37      	ldr	r2, [pc, #220]	; (8003b0c <USB_SetTurnaroundTime+0x128>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d802      	bhi.n	8003a3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003a34:	230d      	movs	r3, #13
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e04c      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	4a33      	ldr	r2, [pc, #204]	; (8003b0c <USB_SetTurnaroundTime+0x128>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d906      	bls.n	8003a50 <USB_SetTurnaroundTime+0x6c>
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4a32      	ldr	r2, [pc, #200]	; (8003b10 <USB_SetTurnaroundTime+0x12c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d802      	bhi.n	8003a50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003a4a:	230c      	movs	r3, #12
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	e041      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	4a2f      	ldr	r2, [pc, #188]	; (8003b10 <USB_SetTurnaroundTime+0x12c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d906      	bls.n	8003a66 <USB_SetTurnaroundTime+0x82>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <USB_SetTurnaroundTime+0x130>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d802      	bhi.n	8003a66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003a60:	230b      	movs	r3, #11
 8003a62:	617b      	str	r3, [r7, #20]
 8003a64:	e036      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4a2a      	ldr	r2, [pc, #168]	; (8003b14 <USB_SetTurnaroundTime+0x130>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d906      	bls.n	8003a7c <USB_SetTurnaroundTime+0x98>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4a29      	ldr	r2, [pc, #164]	; (8003b18 <USB_SetTurnaroundTime+0x134>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d802      	bhi.n	8003a7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003a76:	230a      	movs	r3, #10
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	e02b      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <USB_SetTurnaroundTime+0x134>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d906      	bls.n	8003a92 <USB_SetTurnaroundTime+0xae>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4a25      	ldr	r2, [pc, #148]	; (8003b1c <USB_SetTurnaroundTime+0x138>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d802      	bhi.n	8003a92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003a8c:	2309      	movs	r3, #9
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e020      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4a21      	ldr	r2, [pc, #132]	; (8003b1c <USB_SetTurnaroundTime+0x138>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d906      	bls.n	8003aa8 <USB_SetTurnaroundTime+0xc4>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4a20      	ldr	r2, [pc, #128]	; (8003b20 <USB_SetTurnaroundTime+0x13c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d802      	bhi.n	8003aa8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	e015      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4a1d      	ldr	r2, [pc, #116]	; (8003b20 <USB_SetTurnaroundTime+0x13c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d906      	bls.n	8003abe <USB_SetTurnaroundTime+0xda>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <USB_SetTurnaroundTime+0x140>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d802      	bhi.n	8003abe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ab8:	2307      	movs	r3, #7
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	e00a      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003abe:	2306      	movs	r3, #6
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e007      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003aca:	2309      	movs	r3, #9
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e001      	b.n	8003ad4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ad0:	2309      	movs	r3, #9
 8003ad2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	029b      	lsls	r3, r3, #10
 8003ae8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003aec:	431a      	orrs	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	371c      	adds	r7, #28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	00d8acbf 	.word	0x00d8acbf
 8003b04:	00e4e1bf 	.word	0x00e4e1bf
 8003b08:	00f423ff 	.word	0x00f423ff
 8003b0c:	0106737f 	.word	0x0106737f
 8003b10:	011a499f 	.word	0x011a499f
 8003b14:	01312cff 	.word	0x01312cff
 8003b18:	014ca43f 	.word	0x014ca43f
 8003b1c:	016e35ff 	.word	0x016e35ff
 8003b20:	01a6ab1f 	.word	0x01a6ab1f
 8003b24:	01e847ff 	.word	0x01e847ff

08003b28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f043 0201 	orr.w	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b083      	sub	sp, #12
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d106      	bne.n	8003b98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	60da      	str	r2, [r3, #12]
 8003b96:	e00b      	b.n	8003bb0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d106      	bne.n	8003bac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	e001      	b.n	8003bb0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e003      	b.n	8003bb8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003bb0:	2032      	movs	r0, #50	; 0x32
 8003bb2:	f7fd f905 	bl	8000dc0 <HAL_Delay>

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bc0:	b084      	sub	sp, #16
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003bce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	e009      	b.n	8003bf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3340      	adds	r3, #64	; 0x40
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	2200      	movs	r2, #0
 8003bec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b0e      	cmp	r3, #14
 8003bf8:	d9f2      	bls.n	8003be0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d11c      	bne.n	8003c3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0e:	f043 0302 	orr.w	r3, r3, #2
 8003c12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
 8003c38:	e00b      	b.n	8003c52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	4619      	mov	r1, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	680b      	ldr	r3, [r1, #0]
 8003c70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d10c      	bne.n	8003c92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d104      	bne.n	8003c88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f949 	bl	8003f18 <USB_SetDevSpeed>
 8003c86:	e008      	b.n	8003c9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003c88:	2101      	movs	r1, #1
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f944 	bl	8003f18 <USB_SetDevSpeed>
 8003c90:	e003      	b.n	8003c9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c92:	2103      	movs	r1, #3
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f93f 	bl	8003f18 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c9a:	2110      	movs	r1, #16
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8f3 	bl	8003e88 <USB_FlushTxFifo>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f911 	bl	8003ed4 <USB_FlushRxFifo>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2300      	movs	r3, #0
 8003cde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	e043      	b.n	8003d6e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cfc:	d118      	bne.n	8003d30 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10a      	bne.n	8003d1a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	461a      	mov	r2, r3
 8003d12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d16:	6013      	str	r3, [r2, #0]
 8003d18:	e013      	b.n	8003d42 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	461a      	mov	r2, r3
 8003d28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	e008      	b.n	8003d42 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2300      	movs	r3, #0
 8003d40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2300      	movs	r3, #0
 8003d52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d60:	461a      	mov	r2, r3
 8003d62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d3b7      	bcc.n	8003ce6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	e043      	b.n	8003e04 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d92:	d118      	bne.n	8003dc6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da6:	461a      	mov	r2, r3
 8003da8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e013      	b.n	8003dd8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	e008      	b.n	8003dd8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de4:	461a      	mov	r2, r3
 8003de6:	2300      	movs	r3, #0
 8003de8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	015a      	lsls	r2, r3, #5
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df6:	461a      	mov	r2, r3
 8003df8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	3301      	adds	r3, #1
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d3b7      	bcc.n	8003d7c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003e2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f043 0210 	orr.w	r2, r3, #16
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699a      	ldr	r2, [r3, #24]
 8003e44:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <USB_DevInit+0x2c4>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d005      	beq.n	8003e5e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f043 0208 	orr.w	r2, r3, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d107      	bne.n	8003e74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e80:	b004      	add	sp, #16
 8003e82:	4770      	bx	lr
 8003e84:	803c3800 	.word	0x803c3800

08003e88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	019b      	lsls	r3, r3, #6
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <USB_FlushTxFifo+0x48>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d901      	bls.n	8003eb4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e006      	b.n	8003ec2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d0f0      	beq.n	8003ea2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	00030d40 	.word	0x00030d40

08003ed4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2210      	movs	r2, #16
 8003ee4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <USB_FlushRxFifo+0x40>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e006      	b.n	8003f06 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d0f0      	beq.n	8003ee6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	00030d40 	.word	0x00030d40

08003f18 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	460b      	mov	r3, r1
 8003f22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	68f9      	ldr	r1, [r7, #12]
 8003f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b087      	sub	sp, #28
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	75fb      	strb	r3, [r7, #23]
 8003f6e:	e00a      	b.n	8003f86 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d002      	beq.n	8003f7c <USB_GetDevSpeed+0x32>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d102      	bne.n	8003f82 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	75fb      	strb	r3, [r7, #23]
 8003f80:	e001      	b.n	8003f86 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f82:	230f      	movs	r3, #15
 8003f84:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	371c      	adds	r7, #28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	785b      	ldrb	r3, [r3, #1]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d13a      	bne.n	8004026 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d155      	bne.n	8004094 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	78db      	ldrb	r3, [r3, #3]
 8004002:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004004:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	059b      	lsls	r3, r3, #22
 800400a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800400c:	4313      	orrs	r3, r2
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	e036      	b.n	8004094 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	2101      	movs	r1, #1
 8004038:	fa01 f303 	lsl.w	r3, r1, r3
 800403c:	041b      	lsls	r3, r3, #16
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004044:	4313      	orrs	r3, r2
 8004046:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11a      	bne.n	8004094 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	78db      	ldrb	r3, [r3, #3]
 8004078:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800407a:	430b      	orrs	r3, r1
 800407c:	4313      	orrs	r3, r2
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	0151      	lsls	r1, r2, #5
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	440a      	add	r2, r1
 8004086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004092:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d161      	bne.n	8004184 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040d6:	d11f      	bne.n	8004118 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004112:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004116:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	f003 030f 	and.w	r3, r3, #15
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	b29b      	uxth	r3, r3
 8004130:	43db      	mvns	r3, r3
 8004132:	68f9      	ldr	r1, [r7, #12]
 8004134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004138:	4013      	ands	r3, r2
 800413a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f303 	lsl.w	r3, r1, r3
 8004152:	b29b      	uxth	r3, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	68f9      	ldr	r1, [r7, #12]
 8004158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800415c:	4013      	ands	r3, r2
 800415e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	0159      	lsls	r1, r3, #5
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	440b      	add	r3, r1
 8004176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417a:	4619      	mov	r1, r3
 800417c:	4b35      	ldr	r3, [pc, #212]	; (8004254 <USB_DeactivateEndpoint+0x1b0>)
 800417e:	4013      	ands	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
 8004182:	e060      	b.n	8004246 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800419a:	d11f      	bne.n	80041dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	015a      	lsls	r2, r3, #5
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	4413      	add	r3, r2
 80041a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	0151      	lsls	r1, r2, #5
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	440a      	add	r2, r1
 80041b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	2101      	movs	r1, #1
 80041ee:	fa01 f303 	lsl.w	r3, r1, r3
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	43db      	mvns	r3, r3
 80041f6:	68f9      	ldr	r1, [r7, #12]
 80041f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041fc:	4013      	ands	r3, r2
 80041fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	2101      	movs	r1, #1
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	041b      	lsls	r3, r3, #16
 8004218:	43db      	mvns	r3, r3
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004220:	4013      	ands	r3, r2
 8004222:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	0159      	lsls	r1, r3, #5
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	440b      	add	r3, r1
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	4619      	mov	r1, r3
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <USB_DeactivateEndpoint+0x1b4>)
 8004242:	4013      	ands	r3, r2
 8004244:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	ec337800 	.word	0xec337800
 8004258:	eff37800 	.word	0xeff37800

0800425c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	4613      	mov	r3, r2
 8004268:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	785b      	ldrb	r3, [r3, #1]
 8004278:	2b01      	cmp	r3, #1
 800427a:	f040 815c 	bne.w	8004536 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d132      	bne.n	80042ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	015a      	lsls	r2, r3, #5
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	0151      	lsls	r1, r2, #5
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	440a      	add	r2, r1
 800429c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	015a      	lsls	r2, r3, #5
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	4413      	add	r3, r2
 80042b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	69ba      	ldr	r2, [r7, #24]
 80042ba:	0151      	lsls	r1, r2, #5
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	440a      	add	r2, r1
 80042c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80042c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	0151      	lsls	r1, r2, #5
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	440a      	add	r2, r1
 80042e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e4:	0cdb      	lsrs	r3, r3, #19
 80042e6:	04db      	lsls	r3, r3, #19
 80042e8:	6113      	str	r3, [r2, #16]
 80042ea:	e074      	b.n	80043d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	0151      	lsls	r1, r2, #5
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	440a      	add	r2, r1
 8004302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004306:	0cdb      	lsrs	r3, r3, #19
 8004308:	04db      	lsls	r3, r3, #19
 800430a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	0151      	lsls	r1, r2, #5
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	440a      	add	r2, r1
 8004322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004326:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800432a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800432e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6959      	ldr	r1, [r3, #20]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	440b      	add	r3, r1
 8004348:	1e59      	subs	r1, r3, #1
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004352:	04d9      	lsls	r1, r3, #19
 8004354:	4b9d      	ldr	r3, [pc, #628]	; (80045cc <USB_EPStartXfer+0x370>)
 8004356:	400b      	ands	r3, r1
 8004358:	69b9      	ldr	r1, [r7, #24]
 800435a:	0148      	lsls	r0, r1, #5
 800435c:	69f9      	ldr	r1, [r7, #28]
 800435e:	4401      	add	r1, r0
 8004360:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004364:	4313      	orrs	r3, r2
 8004366:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	691a      	ldr	r2, [r3, #16]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437e:	69b9      	ldr	r1, [r7, #24]
 8004380:	0148      	lsls	r0, r1, #5
 8004382:	69f9      	ldr	r1, [r7, #28]
 8004384:	4401      	add	r1, r0
 8004386:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800438a:	4313      	orrs	r3, r2
 800438c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	78db      	ldrb	r3, [r3, #3]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d11f      	bne.n	80043d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80043b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	0151      	lsls	r1, r2, #5
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	440a      	add	r2, r1
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80043d6:	79fb      	ldrb	r3, [r7, #7]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d14b      	bne.n	8004474 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	78db      	ldrb	r3, [r3, #3]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d128      	bne.n	8004452 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d110      	bne.n	8004432 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800442a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e00f      	b.n	8004452 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800446c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e12f      	b.n	80046d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	4413      	add	r3, r2
 800447c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	0151      	lsls	r1, r2, #5
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	440a      	add	r2, r1
 800448a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800448e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004492:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	78db      	ldrb	r3, [r3, #3]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d015      	beq.n	80044c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8117 	beq.w	80046d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	69f9      	ldr	r1, [r7, #28]
 80044be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c2:	4313      	orrs	r3, r2
 80044c4:	634b      	str	r3, [r1, #52]	; 0x34
 80044c6:	e105      	b.n	80046d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d110      	bne.n	80044fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	0151      	lsls	r1, r2, #5
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	440a      	add	r2, r1
 80044ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	e00f      	b.n	800451a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	0151      	lsls	r1, r2, #5
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	440a      	add	r2, r1
 8004510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	68d9      	ldr	r1, [r3, #12]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	b298      	uxth	r0, r3
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4603      	mov	r3, r0
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fa2b 	bl	800498a <USB_WritePacket>
 8004534:	e0ce      	b.n	80046d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004550:	0cdb      	lsrs	r3, r3, #19
 8004552:	04db      	lsls	r3, r3, #19
 8004554:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004570:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004574:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004578:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d126      	bne.n	80045d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	0148      	lsls	r0, r1, #5
 800459c:	69f9      	ldr	r1, [r7, #28]
 800459e:	4401      	add	r1, r0
 80045a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045a4:	4313      	orrs	r3, r2
 80045a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	0151      	lsls	r1, r2, #5
 80045ba:	69fa      	ldr	r2, [r7, #28]
 80045bc:	440a      	add	r2, r1
 80045be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045c6:	6113      	str	r3, [r2, #16]
 80045c8:	e036      	b.n	8004638 <USB_EPStartXfer+0x3dc>
 80045ca:	bf00      	nop
 80045cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4413      	add	r3, r2
 80045da:	1e5a      	subs	r2, r3, #1
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	015a      	lsls	r2, r3, #5
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f2:	691a      	ldr	r2, [r3, #16]
 80045f4:	8afb      	ldrh	r3, [r7, #22]
 80045f6:	04d9      	lsls	r1, r3, #19
 80045f8:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <USB_EPStartXfer+0x484>)
 80045fa:	400b      	ands	r3, r1
 80045fc:	69b9      	ldr	r1, [r7, #24]
 80045fe:	0148      	lsls	r0, r1, #5
 8004600:	69f9      	ldr	r1, [r7, #28]
 8004602:	4401      	add	r1, r0
 8004604:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004608:	4313      	orrs	r3, r2
 800460a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	8af9      	ldrh	r1, [r7, #22]
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004628:	69b9      	ldr	r1, [r7, #24]
 800462a:	0148      	lsls	r0, r1, #5
 800462c:	69f9      	ldr	r1, [r7, #28]
 800462e:	4401      	add	r1, r0
 8004630:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004634:	4313      	orrs	r3, r2
 8004636:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d10d      	bne.n	800465a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	68d9      	ldr	r1, [r3, #12]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	460a      	mov	r2, r1
 8004658:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	78db      	ldrb	r3, [r3, #3]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d128      	bne.n	80046b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d110      	bne.n	8004694 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	0151      	lsls	r1, r2, #5
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	440a      	add	r2, r1
 8004688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e00f      	b.n	80046b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	1ff80000 	.word	0x1ff80000

080046e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	4613      	mov	r3, r2
 80046f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	785b      	ldrb	r3, [r3, #1]
 8004700:	2b01      	cmp	r3, #1
 8004702:	f040 80cd 	bne.w	80048a0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d132      	bne.n	8004774 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	0151      	lsls	r1, r2, #5
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	440a      	add	r2, r1
 8004724:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004728:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800472c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004730:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004750:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	4413      	add	r3, r2
 800475a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	0151      	lsls	r1, r2, #5
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	440a      	add	r2, r1
 8004768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800476c:	0cdb      	lsrs	r3, r3, #19
 800476e:	04db      	lsls	r3, r3, #19
 8004770:	6113      	str	r3, [r2, #16]
 8004772:	e04e      	b.n	8004812 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	015a      	lsls	r2, r3, #5
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4413      	add	r3, r2
 800477c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	0151      	lsls	r1, r2, #5
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	440a      	add	r2, r1
 800478a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800478e:	0cdb      	lsrs	r3, r3, #19
 8004790:	04db      	lsls	r3, r3, #19
 8004792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	0151      	lsls	r1, r2, #5
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	440a      	add	r2, r1
 80047aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	695a      	ldr	r2, [r3, #20]
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d903      	bls.n	80047cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	0151      	lsls	r1, r2, #5
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	440a      	add	r2, r1
 80047e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004802:	6939      	ldr	r1, [r7, #16]
 8004804:	0148      	lsls	r0, r1, #5
 8004806:	6979      	ldr	r1, [r7, #20]
 8004808:	4401      	add	r1, r0
 800480a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800480e:	4313      	orrs	r3, r2
 8004810:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d11e      	bne.n	8004856 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d009      	beq.n	8004834 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	461a      	mov	r2, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	015a      	lsls	r2, r3, #5
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4413      	add	r3, r2
 800483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	0151      	lsls	r1, r2, #5
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	440a      	add	r2, r1
 800484a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800484e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e092      	b.n	800497c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	440a      	add	r2, r1
 800486c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004874:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d07e      	beq.n	800497c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	2101      	movs	r1, #1
 8004890:	fa01 f303 	lsl.w	r3, r1, r3
 8004894:	6979      	ldr	r1, [r7, #20]
 8004896:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800489a:	4313      	orrs	r3, r2
 800489c:	634b      	str	r3, [r1, #52]	; 0x34
 800489e:	e06d      	b.n	800497c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ba:	0cdb      	lsrs	r3, r3, #19
 80048bc:	04db      	lsls	r3, r3, #19
 80048be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048e2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	0151      	lsls	r1, r2, #5
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	440a      	add	r2, r1
 800490a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800490e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004912:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	015a      	lsls	r2, r3, #5
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4413      	add	r3, r2
 800491c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492a:	6939      	ldr	r1, [r7, #16]
 800492c:	0148      	lsls	r0, r1, #5
 800492e:	6979      	ldr	r1, [r7, #20]
 8004930:	4401      	add	r1, r0
 8004932:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004936:	4313      	orrs	r3, r2
 8004938:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10d      	bne.n	800495c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d009      	beq.n	800495c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	68d9      	ldr	r1, [r3, #12]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004958:	460a      	mov	r2, r1
 800495a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	0151      	lsls	r1, r2, #5
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	440a      	add	r2, r1
 8004972:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004976:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800497a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr

0800498a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800498a:	b480      	push	{r7}
 800498c:	b089      	sub	sp, #36	; 0x24
 800498e:	af00      	add	r7, sp, #0
 8004990:	60f8      	str	r0, [r7, #12]
 8004992:	60b9      	str	r1, [r7, #8]
 8004994:	4611      	mov	r1, r2
 8004996:	461a      	mov	r2, r3
 8004998:	460b      	mov	r3, r1
 800499a:	71fb      	strb	r3, [r7, #7]
 800499c:	4613      	mov	r3, r2
 800499e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80049a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11a      	bne.n	80049e6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049b0:	88bb      	ldrh	r3, [r7, #4]
 80049b2:	3303      	adds	r3, #3
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	e00f      	b.n	80049de <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80049be:	79fb      	ldrb	r3, [r7, #7]
 80049c0:	031a      	lsls	r2, r3, #12
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ca:	461a      	mov	r2, r3
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	3304      	adds	r3, #4
 80049d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	3301      	adds	r3, #1
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d3eb      	bcc.n	80049be <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3724      	adds	r7, #36	; 0x24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b089      	sub	sp, #36	; 0x24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4613      	mov	r3, r2
 8004a00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004a0a:	88fb      	ldrh	r3, [r7, #6]
 8004a0c:	3303      	adds	r3, #3
 8004a0e:	089b      	lsrs	r3, r3, #2
 8004a10:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004a12:	2300      	movs	r3, #0
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e00b      	b.n	8004a30 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	3304      	adds	r3, #4
 8004a28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d3ef      	bcc.n	8004a18 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004a38:	69fb      	ldr	r3, [r7, #28]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3724      	adds	r7, #36	; 0x24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	785b      	ldrb	r3, [r3, #1]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d12c      	bne.n	8004abc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	db12      	blt.n	8004a9a <USB_EPSetStall+0x54>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00f      	beq.n	8004a9a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a98:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e02b      	b.n	8004b14 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	db12      	blt.n	8004af4 <USB_EPSetStall+0xae>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00f      	beq.n	8004af4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004af2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	0151      	lsls	r1, r2, #5
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	440a      	add	r2, r1
 8004b0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
 8004b2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d128      	bne.n	8004b90 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	78db      	ldrb	r3, [r3, #3]
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d003      	beq.n	8004b6e <USB_EPClearStall+0x4c>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	78db      	ldrb	r3, [r3, #3]
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d138      	bne.n	8004be0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	e027      	b.n	8004be0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	78db      	ldrb	r3, [r3, #3]
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d003      	beq.n	8004bc0 <USB_EPClearStall+0x9e>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	78db      	ldrb	r3, [r3, #3]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d10f      	bne.n	8004be0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	0151      	lsls	r1, r2, #5
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bde:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b085      	sub	sp, #20
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c10:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	011b      	lsls	r3, r3, #4
 8004c1e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr

08004c3a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b085      	sub	sp, #20
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c54:	f023 0303 	bic.w	r3, r3, #3
 8004c58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c68:	f023 0302 	bic.w	r3, r3, #2
 8004c6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004caa:	f043 0302 	orr.w	r3, r3, #2
 8004cae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	4013      	ands	r3, r2
 8004d06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	0c1b      	lsrs	r3, r3, #16
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	b29b      	uxth	r3, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	460b      	mov	r3, r1
 8004d56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	4013      	ands	r3, r2
 8004d78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004daa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
 8004db8:	01db      	lsls	r3, r3, #7
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	371c      	adds	r7, #28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0301 	and.w	r3, r3, #1
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e1e:	f023 0307 	bic.w	r3, r3, #7
 8004e22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	460b      	mov	r3, r1
 8004e52:	607a      	str	r2, [r7, #4]
 8004e54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	333c      	adds	r3, #60	; 0x3c
 8004e5e:	3304      	adds	r3, #4
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	4a26      	ldr	r2, [pc, #152]	; (8004f00 <USB_EP0_OutStart+0xb8>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d90a      	bls.n	8004e82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e7c:	d101      	bne.n	8004e82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e037      	b.n	8004ef2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb0:	f043 0318 	orr.w	r3, r3, #24
 8004eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ec4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ec8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004eca:	7afb      	ldrb	r3, [r7, #11]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10f      	bne.n	8004ef0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004eee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	4f54300a 	.word	0x4f54300a

08004f04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3301      	adds	r3, #1
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	4a13      	ldr	r2, [pc, #76]	; (8004f68 <USB_CoreReset+0x64>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d901      	bls.n	8004f22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e01b      	b.n	8004f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	daf2      	bge.n	8004f10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f043 0201 	orr.w	r2, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <USB_CoreReset+0x64>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d901      	bls.n	8004f4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d0f0      	beq.n	8004f3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	00030d40 	.word	0x00030d40

08004f6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f7c:	f002 f9da 	bl	8007334 <malloc>
 8004f80:	4603      	mov	r3, r0
 8004f82:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d105      	bne.n	8004f96 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004f92:	2302      	movs	r3, #2
 8004f94:	e066      	b.n	8005064 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	7c1b      	ldrb	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d119      	bne.n	8004fda <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004faa:	2202      	movs	r2, #2
 8004fac:	2181      	movs	r1, #129	; 0x81
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f002 f847 	bl	8007042 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f002 f83d 	bl	8007042 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2210      	movs	r2, #16
 8004fd4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004fd8:	e016      	b.n	8005008 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004fda:	2340      	movs	r3, #64	; 0x40
 8004fdc:	2202      	movs	r2, #2
 8004fde:	2181      	movs	r1, #129	; 0x81
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f002 f82e 	bl	8007042 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004fec:	2340      	movs	r3, #64	; 0x40
 8004fee:	2202      	movs	r2, #2
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f002 f825 	bl	8007042 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2210      	movs	r2, #16
 8005004:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005008:	2308      	movs	r3, #8
 800500a:	2203      	movs	r2, #3
 800500c:	2182      	movs	r1, #130	; 0x82
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f002 f817 	bl	8007042 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7c1b      	ldrb	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005044:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005048:	2101      	movs	r1, #1
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f002 f8e8 	bl	8007220 <USBD_LL_PrepareReceive>
 8005050:	e007      	b.n	8005062 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005058:	2340      	movs	r3, #64	; 0x40
 800505a:	2101      	movs	r1, #1
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f002 f8df 	bl	8007220 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800507c:	2181      	movs	r1, #129	; 0x81
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f002 f805 	bl	800708e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800508a:	2101      	movs	r1, #1
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f001 fffe 	bl	800708e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800509a:	2182      	movs	r1, #130	; 0x82
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f001 fff6 	bl	800708e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00e      	beq.n	80050da <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 f939 	bl	8007344 <free>
    pdev->pClassData = NULL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80050da:	7bfb      	ldrb	r3, [r7, #15]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050f4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800510a:	2b00      	cmp	r3, #0
 800510c:	d03a      	beq.n	8005184 <USBD_CDC_Setup+0xa0>
 800510e:	2b20      	cmp	r3, #32
 8005110:	f040 8097 	bne.w	8005242 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	88db      	ldrh	r3, [r3, #6]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d029      	beq.n	8005170 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	b25b      	sxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	da11      	bge.n	800514a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005132:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	88d2      	ldrh	r2, [r2, #6]
 8005138:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	88db      	ldrh	r3, [r3, #6]
 8005140:	461a      	mov	r2, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f001 fa9d 	bl	8006682 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005148:	e082      	b.n	8005250 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	785a      	ldrb	r2, [r3, #1]
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	88db      	ldrh	r3, [r3, #6]
 8005158:	b2da      	uxtb	r2, r3
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005160:	6939      	ldr	r1, [r7, #16]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	88db      	ldrh	r3, [r3, #6]
 8005166:	461a      	mov	r2, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f001 fab6 	bl	80066da <USBD_CtlPrepareRx>
    break;
 800516e:	e06f      	b.n	8005250 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	7850      	ldrb	r0, [r2, #1]
 800517c:	2200      	movs	r2, #0
 800517e:	6839      	ldr	r1, [r7, #0]
 8005180:	4798      	blx	r3
    break;
 8005182:	e065      	b.n	8005250 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b0b      	cmp	r3, #11
 800518a:	d84f      	bhi.n	800522c <USBD_CDC_Setup+0x148>
 800518c:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <USBD_CDC_Setup+0xb0>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051c5 	.word	0x080051c5
 8005198:	0800523b 	.word	0x0800523b
 800519c:	0800522d 	.word	0x0800522d
 80051a0:	0800522d 	.word	0x0800522d
 80051a4:	0800522d 	.word	0x0800522d
 80051a8:	0800522d 	.word	0x0800522d
 80051ac:	0800522d 	.word	0x0800522d
 80051b0:	0800522d 	.word	0x0800522d
 80051b4:	0800522d 	.word	0x0800522d
 80051b8:	0800522d 	.word	0x0800522d
 80051bc:	080051ed 	.word	0x080051ed
 80051c0:	08005215 	.word	0x08005215
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d107      	bne.n	80051de <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80051ce:	f107 030c 	add.w	r3, r7, #12
 80051d2:	2202      	movs	r2, #2
 80051d4:	4619      	mov	r1, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f001 fa53 	bl	8006682 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80051dc:	e030      	b.n	8005240 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80051de:	6839      	ldr	r1, [r7, #0]
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 f9dd 	bl	80065a0 <USBD_CtlError>
        ret = USBD_FAIL;
 80051e6:	2303      	movs	r3, #3
 80051e8:	75fb      	strb	r3, [r7, #23]
      break;
 80051ea:	e029      	b.n	8005240 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d107      	bne.n	8005206 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80051f6:	f107 030f 	add.w	r3, r7, #15
 80051fa:	2201      	movs	r2, #1
 80051fc:	4619      	mov	r1, r3
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f001 fa3f 	bl	8006682 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005204:	e01c      	b.n	8005240 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005206:	6839      	ldr	r1, [r7, #0]
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f001 f9c9 	bl	80065a0 <USBD_CtlError>
        ret = USBD_FAIL;
 800520e:	2303      	movs	r3, #3
 8005210:	75fb      	strb	r3, [r7, #23]
      break;
 8005212:	e015      	b.n	8005240 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800521a:	2b03      	cmp	r3, #3
 800521c:	d00f      	beq.n	800523e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 f9bd 	bl	80065a0 <USBD_CtlError>
        ret = USBD_FAIL;
 8005226:	2303      	movs	r3, #3
 8005228:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800522a:	e008      	b.n	800523e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 f9b6 	bl	80065a0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005234:	2303      	movs	r3, #3
 8005236:	75fb      	strb	r3, [r7, #23]
      break;
 8005238:	e002      	b.n	8005240 <USBD_CDC_Setup+0x15c>
      break;
 800523a:	bf00      	nop
 800523c:	e008      	b.n	8005250 <USBD_CDC_Setup+0x16c>
      break;
 800523e:	bf00      	nop
    }
    break;
 8005240:	e006      	b.n	8005250 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005242:	6839      	ldr	r1, [r7, #0]
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f001 f9ab 	bl	80065a0 <USBD_CtlError>
    ret = USBD_FAIL;
 800524a:	2303      	movs	r3, #3
 800524c:	75fb      	strb	r3, [r7, #23]
    break;
 800524e:	bf00      	nop
  }

  return (uint8_t)ret;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop

0800525c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	460b      	mov	r3, r1
 8005266:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800526e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800527a:	2303      	movs	r3, #3
 800527c:	e049      	b.n	8005312 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005284:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005286:	78fa      	ldrb	r2, [r7, #3]
 8005288:	6879      	ldr	r1, [r7, #4]
 800528a:	4613      	mov	r3, r2
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	4413      	add	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	3318      	adds	r3, #24
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d029      	beq.n	80052f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	3318      	adds	r3, #24
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	78f9      	ldrb	r1, [r7, #3]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	460b      	mov	r3, r1
 80052b4:	00db      	lsls	r3, r3, #3
 80052b6:	1a5b      	subs	r3, r3, r1
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4403      	add	r3, r0
 80052bc:	3344      	adds	r3, #68	; 0x44
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80052c4:	fb03 f301 	mul.w	r3, r3, r1
 80052c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d110      	bne.n	80052f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3318      	adds	r3, #24
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80052e2:	78f9      	ldrb	r1, [r7, #3]
 80052e4:	2300      	movs	r3, #0
 80052e6:	2200      	movs	r2, #0
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f001 ff78 	bl	80071de <USBD_LL_Transmit>
 80052ee:	e00f      	b.n	8005310 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800532c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005334:	2b00      	cmp	r3, #0
 8005336:	d101      	bne.n	800533c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005338:	2303      	movs	r3, #3
 800533a:	e015      	b.n	8005368 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f001 ff8e 	bl	8007262 <USBD_LL_GetRxDataSize>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005362:	4611      	mov	r1, r2
 8005364:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800537e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d015      	beq.n	80053b6 <USBD_CDC_EP0_RxReady+0x46>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005390:	2bff      	cmp	r3, #255	; 0xff
 8005392:	d010      	beq.n	80053b6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80053a2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80053aa:	b292      	uxth	r2, r2
 80053ac:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	22ff      	movs	r2, #255	; 0xff
 80053b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2243      	movs	r2, #67	; 0x43
 80053cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80053ce:	4b03      	ldr	r3, [pc, #12]	; (80053dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	20000098 	.word	0x20000098

080053e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2243      	movs	r2, #67	; 0x43
 80053ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80053ee:	4b03      	ldr	r3, [pc, #12]	; (80053fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	20000054 	.word	0x20000054

08005400 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2243      	movs	r2, #67	; 0x43
 800540c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800540e:	4b03      	ldr	r3, [pc, #12]	; (800541c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	200000dc 	.word	0x200000dc

08005420 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	220a      	movs	r2, #10
 800542c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800542e:	4b03      	ldr	r3, [pc, #12]	; (800543c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	20000010 	.word	0x20000010

08005440 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005450:	2303      	movs	r3, #3
 8005452:	e004      	b.n	800545e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800546a:	b480      	push	{r7}
 800546c:	b087      	sub	sp, #28
 800546e:	af00      	add	r7, sp, #0
 8005470:	60f8      	str	r0, [r7, #12]
 8005472:	60b9      	str	r1, [r7, #8]
 8005474:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800547c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	371c      	adds	r7, #28
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054ac:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054d2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e01a      	b.n	800551c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d114      	bne.n	800551a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800550e:	2181      	movs	r1, #129	; 0x81
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 fe64 	bl	80071de <USBD_LL_Transmit>

    ret = USBD_OK;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800551a:	7bfb      	ldrb	r3, [r7, #15]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005532:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800553e:	2303      	movs	r3, #3
 8005540:	e016      	b.n	8005570 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	7c1b      	ldrb	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005554:	2101      	movs	r1, #1
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f001 fe62 	bl	8007220 <USBD_LL_PrepareReceive>
 800555c:	e007      	b.n	800556e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005564:	2340      	movs	r3, #64	; 0x40
 8005566:	2101      	movs	r1, #1
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f001 fe59 	bl	8007220 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	4613      	mov	r3, r2
 8005584:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800558c:	2303      	movs	r3, #3
 800558e:	e025      	b.n	80055dc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	79fa      	ldrb	r2, [r7, #7]
 80055ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f001 fccf 	bl	8006f74 <USBD_LL_Init>
 80055d6:	4603      	mov	r3, r0
 80055d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3718      	adds	r7, #24
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e010      	b.n	800561e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	f107 020e 	add.w	r2, r7, #14
 8005610:	4610      	mov	r0, r2
 8005612:	4798      	blx	r3
 8005614:	4602      	mov	r2, r0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b082      	sub	sp, #8
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 fcec 	bl	800700c <USBD_LL_Start>
 8005634:	4603      	mov	r3, r0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005660:	2303      	movs	r3, #3
 8005662:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	78fa      	ldrb	r2, [r7, #3]
 8005678:	4611      	mov	r1, r2
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	4798      	blx	r3
 800567e:	4603      	mov	r3, r0
 8005680:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005682:	7bfb      	ldrb	r3, [r7, #15]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	4611      	mov	r1, r2
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
  }

  return USBD_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056cc:	6839      	ldr	r1, [r7, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 ff2c 	bl	800652c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d00e      	beq.n	8005716 <USBD_LL_SetupStage+0x5a>
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d302      	bcc.n	8005702 <USBD_LL_SetupStage+0x46>
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d014      	beq.n	800572a <USBD_LL_SetupStage+0x6e>
 8005700:	e01d      	b.n	800573e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fa18 	bl	8005b40 <USBD_StdDevReq>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]
      break;
 8005714:	e020      	b.n	8005758 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800571c:	4619      	mov	r1, r3
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa7c 	bl	8005c1c <USBD_StdItfReq>
 8005724:	4603      	mov	r3, r0
 8005726:	73fb      	strb	r3, [r7, #15]
      break;
 8005728:	e016      	b.n	8005758 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fab8 	bl	8005ca8 <USBD_StdEPReq>
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
      break;
 800573c:	e00c      	b.n	8005758 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005744:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005748:	b2db      	uxtb	r3, r3
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f001 fcbd 	bl	80070cc <USBD_LL_StallEP>
 8005752:	4603      	mov	r3, r0
 8005754:	73fb      	strb	r3, [r7, #15]
      break;
 8005756:	bf00      	nop
  }

  return ret;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b086      	sub	sp, #24
 8005766:	af00      	add	r7, sp, #0
 8005768:	60f8      	str	r0, [r7, #12]
 800576a:	460b      	mov	r3, r1
 800576c:	607a      	str	r2, [r7, #4]
 800576e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005770:	7afb      	ldrb	r3, [r7, #11]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d137      	bne.n	80057e6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800577c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005784:	2b03      	cmp	r3, #3
 8005786:	d14a      	bne.n	800581e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	429a      	cmp	r2, r3
 8005792:	d913      	bls.n	80057bc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	689a      	ldr	r2, [r3, #8]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	1ad2      	subs	r2, r2, r3
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	68da      	ldr	r2, [r3, #12]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	4293      	cmp	r3, r2
 80057ac:	bf28      	it	cs
 80057ae:	4613      	movcs	r3, r2
 80057b0:	461a      	mov	r2, r3
 80057b2:	6879      	ldr	r1, [r7, #4]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 ffad 	bl	8006714 <USBD_CtlContinueRx>
 80057ba:	e030      	b.n	800581e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80057ce:	2b03      	cmp	r3, #3
 80057d0:	d105      	bne.n	80057de <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f000 ffa9 	bl	8006736 <USBD_CtlSendStatus>
 80057e4:	e01b      	b.n	800581e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d013      	beq.n	800581a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d10e      	bne.n	800581a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	7afa      	ldrb	r2, [r7, #11]
 8005806:	4611      	mov	r1, r2
 8005808:	68f8      	ldr	r0, [r7, #12]
 800580a:	4798      	blx	r3
 800580c:	4603      	mov	r3, r0
 800580e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	e002      	b.n	8005820 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800581a:	2303      	movs	r3, #3
 800581c:	e000      	b.n	8005820 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	460b      	mov	r3, r1
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005836:	7afb      	ldrb	r3, [r7, #11]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d16a      	bne.n	8005912 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3314      	adds	r3, #20
 8005840:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005848:	2b02      	cmp	r3, #2
 800584a:	d155      	bne.n	80058f8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	429a      	cmp	r2, r3
 8005856:	d914      	bls.n	8005882 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	1ad2      	subs	r2, r2, r3
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	461a      	mov	r2, r3
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f000 ff22 	bl	80066b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005874:	2300      	movs	r3, #0
 8005876:	2200      	movs	r2, #0
 8005878:	2100      	movs	r1, #0
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f001 fcd0 	bl	8007220 <USBD_LL_PrepareReceive>
 8005880:	e03a      	b.n	80058f8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d11c      	bne.n	80058c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005896:	429a      	cmp	r2, r3
 8005898:	d316      	bcc.n	80058c8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d20f      	bcs.n	80058c8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058a8:	2200      	movs	r2, #0
 80058aa:	2100      	movs	r1, #0
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 ff03 	bl	80066b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058ba:	2300      	movs	r3, #0
 80058bc:	2200      	movs	r2, #0
 80058be:	2100      	movs	r1, #0
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f001 fcad 	bl	8007220 <USBD_LL_PrepareReceive>
 80058c6:	e017      	b.n	80058f8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d105      	bne.n	80058ea <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058ea:	2180      	movs	r1, #128	; 0x80
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f001 fbed 	bl	80070cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058f2:	68f8      	ldr	r0, [r7, #12]
 80058f4:	f000 ff32 	bl	800675c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d123      	bne.n	800594a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f7ff fe9b 	bl	800563e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005910:	e01b      	b.n	800594a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d013      	beq.n	8005946 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005924:	2b03      	cmp	r3, #3
 8005926:	d10e      	bne.n	8005946 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	7afa      	ldrb	r2, [r7, #11]
 8005932:	4611      	mov	r1, r2
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	4798      	blx	r3
 8005938:	4603      	mov	r3, r0
 800593a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800593c:	7dfb      	ldrb	r3, [r7, #23]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8005942:	7dfb      	ldrb	r3, [r7, #23]
 8005944:	e002      	b.n	800594c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005946:	2303      	movs	r3, #3
 8005948:	e000      	b.n	800594c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005980:	2b00      	cmp	r3, #0
 8005982:	d009      	beq.n	8005998 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6852      	ldr	r2, [r2, #4]
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	4611      	mov	r1, r2
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	2200      	movs	r2, #0
 800599c:	2100      	movs	r1, #0
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 fb4f 	bl	8007042 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2240      	movs	r2, #64	; 0x40
 80059b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059b4:	2340      	movs	r3, #64	; 0x40
 80059b6:	2200      	movs	r2, #0
 80059b8:	2180      	movs	r1, #128	; 0x80
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 fb41 	bl	8007042 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2240      	movs	r2, #64	; 0x40
 80059ca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	d105      	bne.n	8005a3e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d10b      	bne.n	8005a76 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d005      	beq.n	8005a76 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b083      	sub	sp, #12
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b082      	sub	sp, #8
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d009      	beq.n	8005af8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6852      	ldr	r2, [r2, #4]
 8005af0:	b2d2      	uxtb	r2, r2
 8005af2:	4611      	mov	r1, r2
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
  }

  return USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b087      	sub	sp, #28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	3301      	adds	r3, #1
 8005b18:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b20:	8a3b      	ldrh	r3, [r7, #16]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	b21a      	sxth	r2, r3
 8005b26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b30:	89fb      	ldrh	r3, [r7, #14]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d004      	beq.n	8005b64 <USBD_StdDevReq+0x24>
 8005b5a:	2b40      	cmp	r3, #64	; 0x40
 8005b5c:	d002      	beq.n	8005b64 <USBD_StdDevReq+0x24>
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <USBD_StdDevReq+0x38>
 8005b62:	e050      	b.n	8005c06 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
    break;
 8005b76:	e04b      	b.n	8005c10 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	d83c      	bhi.n	8005bfa <USBD_StdDevReq+0xba>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <USBD_StdDevReq+0x48>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bdd 	.word	0x08005bdd
 8005b8c:	08005bf1 	.word	0x08005bf1
 8005b90:	08005bfb 	.word	0x08005bfb
 8005b94:	08005be7 	.word	0x08005be7
 8005b98:	08005bfb 	.word	0x08005bfb
 8005b9c:	08005bbb 	.word	0x08005bbb
 8005ba0:	08005bb1 	.word	0x08005bb1
 8005ba4:	08005bfb 	.word	0x08005bfb
 8005ba8:	08005bd3 	.word	0x08005bd3
 8005bac:	08005bc5 	.word	0x08005bc5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f9ce 	bl	8005f54 <USBD_GetDescriptor>
      break;
 8005bb8:	e024      	b.n	8005c04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fb33 	bl	8006228 <USBD_SetAddress>
      break;
 8005bc2:	e01f      	b.n	8005c04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fb70 	bl	80062ac <USBD_SetConfig>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd0:	e018      	b.n	8005c04 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc0d 	bl	80063f4 <USBD_GetConfig>
      break;
 8005bda:	e013      	b.n	8005c04 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fc3c 	bl	800645c <USBD_GetStatus>
      break;
 8005be4:	e00e      	b.n	8005c04 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005be6:	6839      	ldr	r1, [r7, #0]
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fc6a 	bl	80064c2 <USBD_SetFeature>
      break;
 8005bee:	e009      	b.n	8005c04 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fc79 	bl	80064ea <USBD_ClrFeature>
      break;
 8005bf8:	e004      	b.n	8005c04 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fccf 	bl	80065a0 <USBD_CtlError>
      break;
 8005c02:	bf00      	nop
    }
    break;
 8005c04:	e004      	b.n	8005c10 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005c06:	6839      	ldr	r1, [r7, #0]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fcc9 	bl	80065a0 <USBD_CtlError>
    break;
 8005c0e:	bf00      	nop
  }

  return ret;
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop

08005c1c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d003      	beq.n	8005c3e <USBD_StdItfReq+0x22>
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d001      	beq.n	8005c3e <USBD_StdItfReq+0x22>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d12a      	bne.n	8005c94 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c44:	3b01      	subs	r3, #1
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d81d      	bhi.n	8005c86 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	889b      	ldrh	r3, [r3, #4]
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d813      	bhi.n	8005c7c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	88db      	ldrh	r3, [r3, #6]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d110      	bne.n	8005c90 <USBD_StdItfReq+0x74>
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10d      	bne.n	8005c90 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fd5e 	bl	8006736 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8005c7a:	e009      	b.n	8005c90 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 fc8e 	bl	80065a0 <USBD_CtlError>
      break;
 8005c84:	e004      	b.n	8005c90 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005c86:	6839      	ldr	r1, [r7, #0]
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 fc89 	bl	80065a0 <USBD_CtlError>
      break;
 8005c8e:	e000      	b.n	8005c92 <USBD_StdItfReq+0x76>
      break;
 8005c90:	bf00      	nop
    }
    break;
 8005c92:	e004      	b.n	8005c9e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fc82 	bl	80065a0 <USBD_CtlError>
    break;
 8005c9c:	bf00      	nop
  }

  return ret;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	889b      	ldrh	r3, [r3, #4]
 8005cba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d004      	beq.n	8005cd2 <USBD_StdEPReq+0x2a>
 8005cc8:	2b40      	cmp	r3, #64	; 0x40
 8005cca:	d002      	beq.n	8005cd2 <USBD_StdEPReq+0x2a>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <USBD_StdEPReq+0x3e>
 8005cd0:	e135      	b.n	8005f3e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	6839      	ldr	r1, [r7, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ce4:	e130      	b.n	8005f48 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	785b      	ldrb	r3, [r3, #1]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d03e      	beq.n	8005d6c <USBD_StdEPReq+0xc4>
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d002      	beq.n	8005cf8 <USBD_StdEPReq+0x50>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d077      	beq.n	8005de6 <USBD_StdEPReq+0x13e>
 8005cf6:	e11c      	b.n	8005f32 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d002      	beq.n	8005d08 <USBD_StdEPReq+0x60>
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d015      	beq.n	8005d32 <USBD_StdEPReq+0x8a>
 8005d06:	e02b      	b.n	8005d60 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d08:	7bbb      	ldrb	r3, [r7, #14]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00c      	beq.n	8005d28 <USBD_StdEPReq+0x80>
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	2b80      	cmp	r3, #128	; 0x80
 8005d12:	d009      	beq.n	8005d28 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d14:	7bbb      	ldrb	r3, [r7, #14]
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f001 f9d7 	bl	80070cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d1e:	2180      	movs	r1, #128	; 0x80
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f001 f9d3 	bl	80070cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005d26:	e020      	b.n	8005d6a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fc38 	bl	80065a0 <USBD_CtlError>
        break;
 8005d30:	e01b      	b.n	8005d6a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	885b      	ldrh	r3, [r3, #2]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10e      	bne.n	8005d58 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d3a:	7bbb      	ldrb	r3, [r7, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_StdEPReq+0xb0>
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	2b80      	cmp	r3, #128	; 0x80
 8005d44:	d008      	beq.n	8005d58 <USBD_StdEPReq+0xb0>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	88db      	ldrh	r3, [r3, #6]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d104      	bne.n	8005d58 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d4e:	7bbb      	ldrb	r3, [r7, #14]
 8005d50:	4619      	mov	r1, r3
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 f9ba 	bl	80070cc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fcec 	bl	8006736 <USBD_CtlSendStatus>

        break;
 8005d5e:	e004      	b.n	8005d6a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fc1c 	bl	80065a0 <USBD_CtlError>
        break;
 8005d68:	bf00      	nop
      }
      break;
 8005d6a:	e0e7      	b.n	8005f3c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d002      	beq.n	8005d7c <USBD_StdEPReq+0xd4>
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d015      	beq.n	8005da6 <USBD_StdEPReq+0xfe>
 8005d7a:	e02d      	b.n	8005dd8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d7c:	7bbb      	ldrb	r3, [r7, #14]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00c      	beq.n	8005d9c <USBD_StdEPReq+0xf4>
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	2b80      	cmp	r3, #128	; 0x80
 8005d86:	d009      	beq.n	8005d9c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f001 f99d 	bl	80070cc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d92:	2180      	movs	r1, #128	; 0x80
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f001 f999 	bl	80070cc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005d9a:	e023      	b.n	8005de4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fbfe 	bl	80065a0 <USBD_CtlError>
        break;
 8005da4:	e01e      	b.n	8005de4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	885b      	ldrh	r3, [r3, #2]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d119      	bne.n	8005de2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005dae:	7bbb      	ldrb	r3, [r7, #14]
 8005db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d004      	beq.n	8005dc2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005db8:	7bbb      	ldrb	r3, [r7, #14]
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f001 f9a4 	bl	800710a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fcb7 	bl	8006736 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
        }
        break;
 8005dd6:	e004      	b.n	8005de2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fbe0 	bl	80065a0 <USBD_CtlError>
        break;
 8005de0:	e000      	b.n	8005de4 <USBD_StdEPReq+0x13c>
        break;
 8005de2:	bf00      	nop
      }
      break;
 8005de4:	e0aa      	b.n	8005f3c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d002      	beq.n	8005df6 <USBD_StdEPReq+0x14e>
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	d032      	beq.n	8005e5a <USBD_StdEPReq+0x1b2>
 8005df4:	e097      	b.n	8005f26 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d007      	beq.n	8005e0c <USBD_StdEPReq+0x164>
 8005dfc:	7bbb      	ldrb	r3, [r7, #14]
 8005dfe:	2b80      	cmp	r3, #128	; 0x80
 8005e00:	d004      	beq.n	8005e0c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fbcb 	bl	80065a0 <USBD_CtlError>
          break;
 8005e0a:	e091      	b.n	8005f30 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	da0b      	bge.n	8005e2c <USBD_StdEPReq+0x184>
 8005e14:	7bbb      	ldrb	r3, [r7, #14]
 8005e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	3310      	adds	r3, #16
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	4413      	add	r3, r2
 8005e28:	3304      	adds	r3, #4
 8005e2a:	e00b      	b.n	8005e44 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005e2c:	7bbb      	ldrb	r3, [r7, #14]
 8005e2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e32:	4613      	mov	r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	4413      	add	r3, r2
 8005e42:	3304      	adds	r3, #4
 8005e44:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fc15 	bl	8006682 <USBD_CtlSendData>
        break;
 8005e58:	e06a      	b.n	8005f30 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005e5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da11      	bge.n	8005e86 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e62:	7bbb      	ldrb	r3, [r7, #14]
 8005e64:	f003 020f 	and.w	r2, r3, #15
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	3324      	adds	r3, #36	; 0x24
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d117      	bne.n	8005eac <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fb8e 	bl	80065a0 <USBD_CtlError>
            break;
 8005e84:	e054      	b.n	8005f30 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e86:	7bbb      	ldrb	r3, [r7, #14]
 8005e88:	f003 020f 	and.w	r2, r3, #15
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4613      	mov	r3, r2
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	440b      	add	r3, r1
 8005e98:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fb7b 	bl	80065a0 <USBD_CtlError>
            break;
 8005eaa:	e041      	b.n	8005f30 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	da0b      	bge.n	8005ecc <USBD_StdEPReq+0x224>
 8005eb4:	7bbb      	ldrb	r3, [r7, #14]
 8005eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	3310      	adds	r3, #16
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3304      	adds	r3, #4
 8005eca:	e00b      	b.n	8005ee4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005ecc:	7bbb      	ldrb	r3, [r7, #14]
 8005ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3304      	adds	r3, #4
 8005ee4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ee6:	7bbb      	ldrb	r3, [r7, #14]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <USBD_StdEPReq+0x24a>
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	2b80      	cmp	r3, #128	; 0x80
 8005ef0:	d103      	bne.n	8005efa <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e00e      	b.n	8005f18 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	4619      	mov	r1, r3
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f001 f922 	bl	8007148 <USBD_LL_IsStallEP>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e002      	b.n	8005f18 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 fbaf 	bl	8006682 <USBD_CtlSendData>
          break;
 8005f24:	e004      	b.n	8005f30 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fb39 	bl	80065a0 <USBD_CtlError>
        break;
 8005f2e:	bf00      	nop
      }
      break;
 8005f30:	e004      	b.n	8005f3c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fb33 	bl	80065a0 <USBD_CtlError>
      break;
 8005f3a:	bf00      	nop
    }
    break;
 8005f3c:	e004      	b.n	8005f48 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 fb2d 	bl	80065a0 <USBD_CtlError>
    break;
 8005f46:	bf00      	nop
  }

  return ret;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	885b      	ldrh	r3, [r3, #2]
 8005f6e:	0a1b      	lsrs	r3, r3, #8
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	2b06      	cmp	r3, #6
 8005f76:	f200 8128 	bhi.w	80061ca <USBD_GetDescriptor+0x276>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <USBD_GetDescriptor+0x2c>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005f9d 	.word	0x08005f9d
 8005f84:	08005fb5 	.word	0x08005fb5
 8005f88:	08005ff5 	.word	0x08005ff5
 8005f8c:	080061cb 	.word	0x080061cb
 8005f90:	080061cb 	.word	0x080061cb
 8005f94:	0800616b 	.word	0x0800616b
 8005f98:	08006197 	.word	0x08006197
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	7c12      	ldrb	r2, [r2, #16]
 8005fa8:	f107 0108 	add.w	r1, r7, #8
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
 8005fb0:	60f8      	str	r0, [r7, #12]
    break;
 8005fb2:	e112      	b.n	80061da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	7c1b      	ldrb	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10d      	bne.n	8005fd8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc4:	f107 0208 	add.w	r2, r7, #8
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
 8005fcc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	2202      	movs	r2, #2
 8005fd4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005fd6:	e100      	b.n	80061da <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	f107 0208 	add.w	r2, r7, #8
 8005fe4:	4610      	mov	r0, r2
 8005fe6:	4798      	blx	r3
 8005fe8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	3301      	adds	r3, #1
 8005fee:	2202      	movs	r2, #2
 8005ff0:	701a      	strb	r2, [r3, #0]
    break;
 8005ff2:	e0f2      	b.n	80061da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	885b      	ldrh	r3, [r3, #2]
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b05      	cmp	r3, #5
 8005ffc:	f200 80ac 	bhi.w	8006158 <USBD_GetDescriptor+0x204>
 8006000:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <USBD_GetDescriptor+0xb4>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	08006021 	.word	0x08006021
 800600c:	08006055 	.word	0x08006055
 8006010:	08006089 	.word	0x08006089
 8006014:	080060bd 	.word	0x080060bd
 8006018:	080060f1 	.word	0x080060f1
 800601c:	08006125 	.word	0x08006125
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	7c12      	ldrb	r2, [r2, #16]
 8006038:	f107 0108 	add.w	r1, r7, #8
 800603c:	4610      	mov	r0, r2
 800603e:	4798      	blx	r3
 8006040:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006042:	e091      	b.n	8006168 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006044:	6839      	ldr	r1, [r7, #0]
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 faaa 	bl	80065a0 <USBD_CtlError>
        err++;
 800604c:	7afb      	ldrb	r3, [r7, #11]
 800604e:	3301      	adds	r3, #1
 8006050:	72fb      	strb	r3, [r7, #11]
      break;
 8006052:	e089      	b.n	8006168 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00b      	beq.n	8006078 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	7c12      	ldrb	r2, [r2, #16]
 800606c:	f107 0108 	add.w	r1, r7, #8
 8006070:	4610      	mov	r0, r2
 8006072:	4798      	blx	r3
 8006074:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006076:	e077      	b.n	8006168 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006078:	6839      	ldr	r1, [r7, #0]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa90 	bl	80065a0 <USBD_CtlError>
        err++;
 8006080:	7afb      	ldrb	r3, [r7, #11]
 8006082:	3301      	adds	r3, #1
 8006084:	72fb      	strb	r3, [r7, #11]
      break;
 8006086:	e06f      	b.n	8006168 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00b      	beq.n	80060ac <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	7c12      	ldrb	r2, [r2, #16]
 80060a0:	f107 0108 	add.w	r1, r7, #8
 80060a4:	4610      	mov	r0, r2
 80060a6:	4798      	blx	r3
 80060a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060aa:	e05d      	b.n	8006168 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80060ac:	6839      	ldr	r1, [r7, #0]
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fa76 	bl	80065a0 <USBD_CtlError>
        err++;
 80060b4:	7afb      	ldrb	r3, [r7, #11]
 80060b6:	3301      	adds	r3, #1
 80060b8:	72fb      	strb	r3, [r7, #11]
      break;
 80060ba:	e055      	b.n	8006168 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00b      	beq.n	80060e0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	7c12      	ldrb	r2, [r2, #16]
 80060d4:	f107 0108 	add.w	r1, r7, #8
 80060d8:	4610      	mov	r0, r2
 80060da:	4798      	blx	r3
 80060dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060de:	e043      	b.n	8006168 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa5c 	bl	80065a0 <USBD_CtlError>
        err++;
 80060e8:	7afb      	ldrb	r3, [r7, #11]
 80060ea:	3301      	adds	r3, #1
 80060ec:	72fb      	strb	r3, [r7, #11]
      break;
 80060ee:	e03b      	b.n	8006168 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	7c12      	ldrb	r2, [r2, #16]
 8006108:	f107 0108 	add.w	r1, r7, #8
 800610c:	4610      	mov	r0, r2
 800610e:	4798      	blx	r3
 8006110:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006112:	e029      	b.n	8006168 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fa42 	bl	80065a0 <USBD_CtlError>
        err++;
 800611c:	7afb      	ldrb	r3, [r7, #11]
 800611e:	3301      	adds	r3, #1
 8006120:	72fb      	strb	r3, [r7, #11]
      break;
 8006122:	e021      	b.n	8006168 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006136:	699b      	ldr	r3, [r3, #24]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	7c12      	ldrb	r2, [r2, #16]
 800613c:	f107 0108 	add.w	r1, r7, #8
 8006140:	4610      	mov	r0, r2
 8006142:	4798      	blx	r3
 8006144:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006146:	e00f      	b.n	8006168 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa28 	bl	80065a0 <USBD_CtlError>
        err++;
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	3301      	adds	r3, #1
 8006154:	72fb      	strb	r3, [r7, #11]
      break;
 8006156:	e007      	b.n	8006168 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa20 	bl	80065a0 <USBD_CtlError>
      err++;
 8006160:	7afb      	ldrb	r3, [r7, #11]
 8006162:	3301      	adds	r3, #1
 8006164:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006166:	bf00      	nop
    }
    break;
 8006168:	e037      	b.n	80061da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7c1b      	ldrb	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617a:	f107 0208 	add.w	r2, r7, #8
 800617e:	4610      	mov	r0, r2
 8006180:	4798      	blx	r3
 8006182:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006184:	e029      	b.n	80061da <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fa09 	bl	80065a0 <USBD_CtlError>
      err++;
 800618e:	7afb      	ldrb	r3, [r7, #11]
 8006190:	3301      	adds	r3, #1
 8006192:	72fb      	strb	r3, [r7, #11]
    break;
 8006194:	e021      	b.n	80061da <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	7c1b      	ldrb	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d10d      	bne.n	80061ba <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a6:	f107 0208 	add.w	r2, r7, #8
 80061aa:	4610      	mov	r0, r2
 80061ac:	4798      	blx	r3
 80061ae:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	2207      	movs	r2, #7
 80061b6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80061b8:	e00f      	b.n	80061da <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80061ba:	6839      	ldr	r1, [r7, #0]
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f9ef 	bl	80065a0 <USBD_CtlError>
      err++;
 80061c2:	7afb      	ldrb	r3, [r7, #11]
 80061c4:	3301      	adds	r3, #1
 80061c6:	72fb      	strb	r3, [r7, #11]
    break;
 80061c8:	e007      	b.n	80061da <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f9e7 	bl	80065a0 <USBD_CtlError>
    err++;
 80061d2:	7afb      	ldrb	r3, [r7, #11]
 80061d4:	3301      	adds	r3, #1
 80061d6:	72fb      	strb	r3, [r7, #11]
    break;
 80061d8:	bf00      	nop
  }

  if (err != 0U)
 80061da:	7afb      	ldrb	r3, [r7, #11]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d11e      	bne.n	800621e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	88db      	ldrh	r3, [r3, #6]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d016      	beq.n	8006216 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80061e8:	893b      	ldrh	r3, [r7, #8]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00e      	beq.n	800620c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	88da      	ldrh	r2, [r3, #6]
 80061f2:	893b      	ldrh	r3, [r7, #8]
 80061f4:	4293      	cmp	r3, r2
 80061f6:	bf28      	it	cs
 80061f8:	4613      	movcs	r3, r2
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80061fe:	893b      	ldrh	r3, [r7, #8]
 8006200:	461a      	mov	r2, r3
 8006202:	68f9      	ldr	r1, [r7, #12]
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fa3c 	bl	8006682 <USBD_CtlSendData>
 800620a:	e009      	b.n	8006220 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800620c:	6839      	ldr	r1, [r7, #0]
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f9c6 	bl	80065a0 <USBD_CtlError>
 8006214:	e004      	b.n	8006220 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fa8d 	bl	8006736 <USBD_CtlSendStatus>
 800621c:	e000      	b.n	8006220 <USBD_GetDescriptor+0x2cc>
    return;
 800621e:	bf00      	nop
    }
  }
}
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop

08006228 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	889b      	ldrh	r3, [r3, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d130      	bne.n	800629c <USBD_SetAddress+0x74>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	88db      	ldrh	r3, [r3, #6]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d12c      	bne.n	800629c <USBD_SetAddress+0x74>
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	885b      	ldrh	r3, [r3, #2]
 8006246:	2b7f      	cmp	r3, #127	; 0x7f
 8006248:	d828      	bhi.n	800629c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	885b      	ldrh	r3, [r3, #2]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006254:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625c:	2b03      	cmp	r3, #3
 800625e:	d104      	bne.n	800626a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006260:	6839      	ldr	r1, [r7, #0]
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f99c 	bl	80065a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006268:	e01c      	b.n	80062a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7bfa      	ldrb	r2, [r7, #15]
 800626e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	4619      	mov	r1, r3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 ff92 	bl	80071a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fa5a 	bl	8006736 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d004      	beq.n	8006292 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006290:	e008      	b.n	80062a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800629a:	e003      	b.n	80062a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800629c:	6839      	ldr	r1, [r7, #0]
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f97e 	bl	80065a0 <USBD_CtlError>
  }
}
 80062a4:	bf00      	nop
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	885b      	ldrh	r3, [r3, #2]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	4b4b      	ldr	r3, [pc, #300]	; (80063f0 <USBD_SetConfig+0x144>)
 80062c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80062c4:	4b4a      	ldr	r3, [pc, #296]	; (80063f0 <USBD_SetConfig+0x144>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d905      	bls.n	80062d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f966 	bl	80065a0 <USBD_CtlError>
    return USBD_FAIL;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e087      	b.n	80063e8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d002      	beq.n	80062e8 <USBD_SetConfig+0x3c>
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d025      	beq.n	8006332 <USBD_SetConfig+0x86>
 80062e6:	e071      	b.n	80063cc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80062e8:	4b41      	ldr	r3, [pc, #260]	; (80063f0 <USBD_SetConfig+0x144>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d01c      	beq.n	800632a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80062f0:	4b3f      	ldr	r3, [pc, #252]	; (80063f0 <USBD_SetConfig+0x144>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80062fa:	4b3d      	ldr	r3, [pc, #244]	; (80063f0 <USBD_SetConfig+0x144>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	4619      	mov	r1, r3
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7ff f9a7 	bl	8005654 <USBD_SetClassConfig>
 8006306:	4603      	mov	r3, r0
 8006308:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f944 	bl	80065a0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006318:	e065      	b.n	80063e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa0b 	bl	8006736 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2203      	movs	r2, #3
 8006324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006328:	e05d      	b.n	80063e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 fa03 	bl	8006736 <USBD_CtlSendStatus>
    break;
 8006330:	e059      	b.n	80063e6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006332:	4b2f      	ldr	r3, [pc, #188]	; (80063f0 <USBD_SetConfig+0x144>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d112      	bne.n	8006360 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2202      	movs	r2, #2
 800633e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006342:	4b2b      	ldr	r3, [pc, #172]	; (80063f0 <USBD_SetConfig+0x144>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800634c:	4b28      	ldr	r3, [pc, #160]	; (80063f0 <USBD_SetConfig+0x144>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff f99a 	bl	800568c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 f9ec 	bl	8006736 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800635e:	e042      	b.n	80063e6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006360:	4b23      	ldr	r3, [pc, #140]	; (80063f0 <USBD_SetConfig+0x144>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d02a      	beq.n	80063c4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff f988 	bl	800568c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800637c:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <USBD_SetConfig+0x144>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	461a      	mov	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006386:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <USBD_SetConfig+0x144>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff f961 	bl	8005654 <USBD_SetClassConfig>
 8006392:	4603      	mov	r3, r0
 8006394:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00f      	beq.n	80063bc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800639c:	6839      	ldr	r1, [r7, #0]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f8fe 	bl	80065a0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	4619      	mov	r1, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f7ff f96d 	bl	800568c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80063ba:	e014      	b.n	80063e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 f9ba 	bl	8006736 <USBD_CtlSendStatus>
    break;
 80063c2:	e010      	b.n	80063e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f9b6 	bl	8006736 <USBD_CtlSendStatus>
    break;
 80063ca:	e00c      	b.n	80063e6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80063cc:	6839      	ldr	r1, [r7, #0]
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f8e6 	bl	80065a0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063d4:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <USBD_SetConfig+0x144>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f7ff f956 	bl	800568c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80063e0:	2303      	movs	r3, #3
 80063e2:	73fb      	strb	r3, [r7, #15]
    break;
 80063e4:	bf00      	nop
  }

  return ret;
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	2000020c 	.word	0x2000020c

080063f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	88db      	ldrh	r3, [r3, #6]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d004      	beq.n	8006410 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f8c9 	bl	80065a0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800640e:	e021      	b.n	8006454 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006416:	2b01      	cmp	r3, #1
 8006418:	db17      	blt.n	800644a <USBD_GetConfig+0x56>
 800641a:	2b02      	cmp	r3, #2
 800641c:	dd02      	ble.n	8006424 <USBD_GetConfig+0x30>
 800641e:	2b03      	cmp	r3, #3
 8006420:	d00b      	beq.n	800643a <USBD_GetConfig+0x46>
 8006422:	e012      	b.n	800644a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3308      	adds	r3, #8
 800642e:	2201      	movs	r2, #1
 8006430:	4619      	mov	r1, r3
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f925 	bl	8006682 <USBD_CtlSendData>
      break;
 8006438:	e00c      	b.n	8006454 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3304      	adds	r3, #4
 800643e:	2201      	movs	r2, #1
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f91d 	bl	8006682 <USBD_CtlSendData>
      break;
 8006448:	e004      	b.n	8006454 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f8a7 	bl	80065a0 <USBD_CtlError>
      break;
 8006452:	bf00      	nop
}
 8006454:	bf00      	nop
 8006456:	3708      	adds	r7, #8
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800646c:	3b01      	subs	r3, #1
 800646e:	2b02      	cmp	r3, #2
 8006470:	d81e      	bhi.n	80064b0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	88db      	ldrh	r3, [r3, #6]
 8006476:	2b02      	cmp	r3, #2
 8006478:	d004      	beq.n	8006484 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f88f 	bl	80065a0 <USBD_CtlError>
      break;
 8006482:	e01a      	b.n	80064ba <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f043 0202 	orr.w	r2, r3, #2
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	330c      	adds	r3, #12
 80064a4:	2202      	movs	r2, #2
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f8ea 	bl	8006682 <USBD_CtlSendData>
    break;
 80064ae:	e004      	b.n	80064ba <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f874 	bl	80065a0 <USBD_CtlError>
    break;
 80064b8:	bf00      	nop
  }
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	885b      	ldrh	r3, [r3, #2]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d106      	bne.n	80064e2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f92a 	bl	8006736 <USBD_CtlSendStatus>
  }
}
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fa:	3b01      	subs	r3, #1
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d80b      	bhi.n	8006518 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	885b      	ldrh	r3, [r3, #2]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d10c      	bne.n	8006522 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f910 	bl	8006736 <USBD_CtlSendStatus>
      }
      break;
 8006516:	e004      	b.n	8006522 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006518:	6839      	ldr	r1, [r7, #0]
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f840 	bl	80065a0 <USBD_CtlError>
      break;
 8006520:	e000      	b.n	8006524 <USBD_ClrFeature+0x3a>
      break;
 8006522:	bf00      	nop
  }
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	781a      	ldrb	r2, [r3, #0]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f7ff fad3 	bl	8005b02 <SWAPBYTE>
 800655c:	4603      	mov	r3, r0
 800655e:	461a      	mov	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3301      	adds	r3, #1
 8006568:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	3301      	adds	r3, #1
 800656e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f7ff fac6 	bl	8005b02 <SWAPBYTE>
 8006576:	4603      	mov	r3, r0
 8006578:	461a      	mov	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3301      	adds	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f7ff fab9 	bl	8005b02 <SWAPBYTE>
 8006590:	4603      	mov	r3, r0
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	80da      	strh	r2, [r3, #6]
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fd8d 	bl	80070cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065b2:	2100      	movs	r1, #0
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fd89 	bl	80070cc <USBD_LL_StallEP>
}
 80065ba:	bf00      	nop
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	60b9      	str	r1, [r7, #8]
 80065cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d036      	beq.n	8006646 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80065dc:	6938      	ldr	r0, [r7, #16]
 80065de:	f000 f836 	bl	800664e <USBD_GetLen>
 80065e2:	4603      	mov	r3, r0
 80065e4:	3301      	adds	r3, #1
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80065f0:	7dfb      	ldrb	r3, [r7, #23]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	4413      	add	r3, r2
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	7812      	ldrb	r2, [r2, #0]
 80065fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
 80065fe:	3301      	adds	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006602:	7dfb      	ldrb	r3, [r7, #23]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4413      	add	r3, r2
 8006608:	2203      	movs	r2, #3
 800660a:	701a      	strb	r2, [r3, #0]
  idx++;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	3301      	adds	r3, #1
 8006610:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006612:	e013      	b.n	800663c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	4413      	add	r3, r2
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	7812      	ldrb	r2, [r2, #0]
 800661e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	3301      	adds	r3, #1
 8006624:	613b      	str	r3, [r7, #16]
    idx++;
 8006626:	7dfb      	ldrb	r3, [r7, #23]
 8006628:	3301      	adds	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4413      	add	r3, r2
 8006632:	2200      	movs	r2, #0
 8006634:	701a      	strb	r2, [r3, #0]
    idx++;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	3301      	adds	r3, #1
 800663a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e7      	bne.n	8006614 <USBD_GetString+0x52>
 8006644:	e000      	b.n	8006648 <USBD_GetString+0x86>
    return;
 8006646:	bf00      	nop
  }
}
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800665e:	e005      	b.n	800666c <USBD_GetLen+0x1e>
  {
    len++;
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	3301      	adds	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	3301      	adds	r3, #1
 800666a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f5      	bne.n	8006660 <USBD_GetLen+0x12>
  }

  return len;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	60f8      	str	r0, [r7, #12]
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2202      	movs	r2, #2
 8006692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	2100      	movs	r1, #0
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fd98 	bl	80071de <USBD_LL_Transmit>

  return USBD_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	2100      	movs	r1, #0
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fd87 	bl	80071de <USBD_LL_Transmit>

  return USBD_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2203      	movs	r2, #3
 80066ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	2100      	movs	r1, #0
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fd8b 	bl	8007220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68ba      	ldr	r2, [r7, #8]
 8006724:	2100      	movs	r1, #0
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 fd7a 	bl	8007220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3710      	adds	r7, #16
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b082      	sub	sp, #8
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2204      	movs	r2, #4
 8006742:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006746:	2300      	movs	r3, #0
 8006748:	2200      	movs	r2, #0
 800674a:	2100      	movs	r1, #0
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fd46 	bl	80071de <USBD_LL_Transmit>

  return USBD_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2205      	movs	r2, #5
 8006768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800676c:	2300      	movs	r3, #0
 800676e:	2200      	movs	r2, #0
 8006770:	2100      	movs	r1, #0
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fd54 	bl	8007220 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006788:	2200      	movs	r2, #0
 800678a:	4912      	ldr	r1, [pc, #72]	; (80067d4 <MX_USB_DEVICE_Init+0x50>)
 800678c:	4812      	ldr	r0, [pc, #72]	; (80067d8 <MX_USB_DEVICE_Init+0x54>)
 800678e:	f7fe fef3 	bl	8005578 <USBD_Init>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006798:	f7fa f930 	bl	80009fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800679c:	490f      	ldr	r1, [pc, #60]	; (80067dc <MX_USB_DEVICE_Init+0x58>)
 800679e:	480e      	ldr	r0, [pc, #56]	; (80067d8 <MX_USB_DEVICE_Init+0x54>)
 80067a0:	f7fe ff20 	bl	80055e4 <USBD_RegisterClass>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d001      	beq.n	80067ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80067aa:	f7fa f927 	bl	80009fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80067ae:	490c      	ldr	r1, [pc, #48]	; (80067e0 <MX_USB_DEVICE_Init+0x5c>)
 80067b0:	4809      	ldr	r0, [pc, #36]	; (80067d8 <MX_USB_DEVICE_Init+0x54>)
 80067b2:	f7fe fe45 	bl	8005440 <USBD_CDC_RegisterInterface>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d001      	beq.n	80067c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80067bc:	f7fa f91e 	bl	80009fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067c0:	4805      	ldr	r0, [pc, #20]	; (80067d8 <MX_USB_DEVICE_Init+0x54>)
 80067c2:	f7fe ff30 	bl	8005626 <USBD_Start>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80067cc:	f7fa f916 	bl	80009fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067d0:	bf00      	nop
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000138 	.word	0x20000138
 80067d8:	2000029c 	.word	0x2000029c
 80067dc:	2000001c 	.word	0x2000001c
 80067e0:	20000124 	.word	0x20000124

080067e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067e8:	2200      	movs	r2, #0
 80067ea:	4905      	ldr	r1, [pc, #20]	; (8006800 <CDC_Init_FS+0x1c>)
 80067ec:	4805      	ldr	r0, [pc, #20]	; (8006804 <CDC_Init_FS+0x20>)
 80067ee:	f7fe fe3c 	bl	800546a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80067f2:	4905      	ldr	r1, [pc, #20]	; (8006808 <CDC_Init_FS+0x24>)
 80067f4:	4803      	ldr	r0, [pc, #12]	; (8006804 <CDC_Init_FS+0x20>)
 80067f6:	f7fe fe51 	bl	800549c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80067fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20000d6c 	.word	0x20000d6c
 8006804:	2000029c 	.word	0x2000029c
 8006808:	2000056c 	.word	0x2000056c

0800680c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006810:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006812:	4618      	mov	r0, r3
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	4603      	mov	r3, r0
 8006824:	6039      	str	r1, [r7, #0]
 8006826:	71fb      	strb	r3, [r7, #7]
 8006828:	4613      	mov	r3, r2
 800682a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	2b23      	cmp	r3, #35	; 0x23
 8006830:	f200 808c 	bhi.w	800694c <CDC_Control_FS+0x130>
 8006834:	a201      	add	r2, pc, #4	; (adr r2, 800683c <CDC_Control_FS+0x20>)
 8006836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683a:	bf00      	nop
 800683c:	0800694d 	.word	0x0800694d
 8006840:	0800694d 	.word	0x0800694d
 8006844:	0800694d 	.word	0x0800694d
 8006848:	0800694d 	.word	0x0800694d
 800684c:	0800694d 	.word	0x0800694d
 8006850:	0800694d 	.word	0x0800694d
 8006854:	0800694d 	.word	0x0800694d
 8006858:	0800694d 	.word	0x0800694d
 800685c:	0800694d 	.word	0x0800694d
 8006860:	0800694d 	.word	0x0800694d
 8006864:	0800694d 	.word	0x0800694d
 8006868:	0800694d 	.word	0x0800694d
 800686c:	0800694d 	.word	0x0800694d
 8006870:	0800694d 	.word	0x0800694d
 8006874:	0800694d 	.word	0x0800694d
 8006878:	0800694d 	.word	0x0800694d
 800687c:	0800694d 	.word	0x0800694d
 8006880:	0800694d 	.word	0x0800694d
 8006884:	0800694d 	.word	0x0800694d
 8006888:	0800694d 	.word	0x0800694d
 800688c:	0800694d 	.word	0x0800694d
 8006890:	0800694d 	.word	0x0800694d
 8006894:	0800694d 	.word	0x0800694d
 8006898:	0800694d 	.word	0x0800694d
 800689c:	0800694d 	.word	0x0800694d
 80068a0:	0800694d 	.word	0x0800694d
 80068a4:	0800694d 	.word	0x0800694d
 80068a8:	0800694d 	.word	0x0800694d
 80068ac:	0800694d 	.word	0x0800694d
 80068b0:	0800694d 	.word	0x0800694d
 80068b4:	0800694d 	.word	0x0800694d
 80068b8:	0800694d 	.word	0x0800694d
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	08006907 	.word	0x08006907
 80068c4:	0800694d 	.word	0x0800694d
 80068c8:	0800694d 	.word	0x0800694d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	buffer[0] = pbuf[0];
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	781a      	ldrb	r2, [r3, #0]
 80068d0:	4b22      	ldr	r3, [pc, #136]	; (800695c <CDC_Control_FS+0x140>)
 80068d2:	701a      	strb	r2, [r3, #0]
    	buffer[1] = pbuf[1];
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	785a      	ldrb	r2, [r3, #1]
 80068d8:	4b20      	ldr	r3, [pc, #128]	; (800695c <CDC_Control_FS+0x140>)
 80068da:	705a      	strb	r2, [r3, #1]
    	buffer[2] = pbuf[2];
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	789a      	ldrb	r2, [r3, #2]
 80068e0:	4b1e      	ldr	r3, [pc, #120]	; (800695c <CDC_Control_FS+0x140>)
 80068e2:	709a      	strb	r2, [r3, #2]
    	buffer[3] = pbuf[3];
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	78da      	ldrb	r2, [r3, #3]
 80068e8:	4b1c      	ldr	r3, [pc, #112]	; (800695c <CDC_Control_FS+0x140>)
 80068ea:	70da      	strb	r2, [r3, #3]
    	buffer[4] = pbuf[4];
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	791a      	ldrb	r2, [r3, #4]
 80068f0:	4b1a      	ldr	r3, [pc, #104]	; (800695c <CDC_Control_FS+0x140>)
 80068f2:	711a      	strb	r2, [r3, #4]
    	buffer[5] = pbuf[5];
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	795a      	ldrb	r2, [r3, #5]
 80068f8:	4b18      	ldr	r3, [pc, #96]	; (800695c <CDC_Control_FS+0x140>)
 80068fa:	715a      	strb	r2, [r3, #5]
    	buffer[6] = pbuf[6];
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	799a      	ldrb	r2, [r3, #6]
 8006900:	4b16      	ldr	r3, [pc, #88]	; (800695c <CDC_Control_FS+0x140>)
 8006902:	719a      	strb	r2, [r3, #6]

    break;
 8006904:	e023      	b.n	800694e <CDC_Control_FS+0x132>

    case CDC_GET_LINE_CODING:
    	pbuf[0] = buffer[0];
 8006906:	4b15      	ldr	r3, [pc, #84]	; (800695c <CDC_Control_FS+0x140>)
 8006908:	781a      	ldrb	r2, [r3, #0]
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	701a      	strb	r2, [r3, #0]
    	pbuf[1] = buffer[1];
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	3301      	adds	r3, #1
 8006912:	4a12      	ldr	r2, [pc, #72]	; (800695c <CDC_Control_FS+0x140>)
 8006914:	7852      	ldrb	r2, [r2, #1]
 8006916:	701a      	strb	r2, [r3, #0]
    	pbuf[2] = buffer[2];
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	3302      	adds	r3, #2
 800691c:	4a0f      	ldr	r2, [pc, #60]	; (800695c <CDC_Control_FS+0x140>)
 800691e:	7892      	ldrb	r2, [r2, #2]
 8006920:	701a      	strb	r2, [r3, #0]
    	pbuf[3] = buffer[3];
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	3303      	adds	r3, #3
 8006926:	4a0d      	ldr	r2, [pc, #52]	; (800695c <CDC_Control_FS+0x140>)
 8006928:	78d2      	ldrb	r2, [r2, #3]
 800692a:	701a      	strb	r2, [r3, #0]
    	pbuf[4] = buffer[4];
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	3304      	adds	r3, #4
 8006930:	4a0a      	ldr	r2, [pc, #40]	; (800695c <CDC_Control_FS+0x140>)
 8006932:	7912      	ldrb	r2, [r2, #4]
 8006934:	701a      	strb	r2, [r3, #0]
    	pbuf[5] = buffer[5];
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	3305      	adds	r3, #5
 800693a:	4a08      	ldr	r2, [pc, #32]	; (800695c <CDC_Control_FS+0x140>)
 800693c:	7952      	ldrb	r2, [r2, #5]
 800693e:	701a      	strb	r2, [r3, #0]
    	pbuf[6] = buffer[6];
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	3306      	adds	r3, #6
 8006944:	4a05      	ldr	r2, [pc, #20]	; (800695c <CDC_Control_FS+0x140>)
 8006946:	7992      	ldrb	r2, [r2, #6]
 8006948:	701a      	strb	r2, [r3, #0]

    break;
 800694a:	e000      	b.n	800694e <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800694c:	bf00      	nop
  }

  return (USBD_OK);
 800694e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	2000156c 	.word	0x2000156c

08006960 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > 0){
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d06c      	beq.n	8006a4c <CDC_Receive_FS+0xec>
		switch(Buf[0]){
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	3b61      	subs	r3, #97	; 0x61
 8006978:	2b19      	cmp	r3, #25
 800697a:	d85f      	bhi.n	8006a3c <CDC_Receive_FS+0xdc>
 800697c:	a201      	add	r2, pc, #4	; (adr r2, 8006984 <CDC_Receive_FS+0x24>)
 800697e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006982:	bf00      	nop
 8006984:	08006a15 	.word	0x08006a15
 8006988:	08006a3d 	.word	0x08006a3d
 800698c:	08006a35 	.word	0x08006a35
 8006990:	08006a25 	.word	0x08006a25
 8006994:	08006a1d 	.word	0x08006a1d
 8006998:	08006a05 	.word	0x08006a05
 800699c:	08006a3d 	.word	0x08006a3d
 80069a0:	08006a3d 	.word	0x08006a3d
 80069a4:	08006a3d 	.word	0x08006a3d
 80069a8:	08006a3d 	.word	0x08006a3d
 80069ac:	08006a3d 	.word	0x08006a3d
 80069b0:	08006a3d 	.word	0x08006a3d
 80069b4:	08006a3d 	.word	0x08006a3d
 80069b8:	08006a3d 	.word	0x08006a3d
 80069bc:	08006a3d 	.word	0x08006a3d
 80069c0:	08006a3d 	.word	0x08006a3d
 80069c4:	08006a0d 	.word	0x08006a0d
 80069c8:	080069f5 	.word	0x080069f5
 80069cc:	080069fd 	.word	0x080069fd
 80069d0:	08006a3d 	.word	0x08006a3d
 80069d4:	08006a3d 	.word	0x08006a3d
 80069d8:	08006a3d 	.word	0x08006a3d
 80069dc:	080069ed 	.word	0x080069ed
 80069e0:	08006a3d 	.word	0x08006a3d
 80069e4:	08006a3d 	.word	0x08006a3d
 80069e8:	08006a2d 	.word	0x08006a2d
			case 'w':
				status = LWHEEL_FORWARD;
 80069ec:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <CDC_Receive_FS+0x108>)
 80069ee:	2205      	movs	r2, #5
 80069f0:	801a      	strh	r2, [r3, #0]
				break;
 80069f2:	e02c      	b.n	8006a4e <CDC_Receive_FS+0xee>
			case 'r':
				status = RWHEEL_FORWARD;
 80069f4:	4b1c      	ldr	r3, [pc, #112]	; (8006a68 <CDC_Receive_FS+0x108>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	801a      	strh	r2, [r3, #0]
				break;
 80069fa:	e028      	b.n	8006a4e <CDC_Receive_FS+0xee>

			case 's':
				status = LWHEEL_BACKWARD;
 80069fc:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <CDC_Receive_FS+0x108>)
 80069fe:	2206      	movs	r2, #6
 8006a00:	801a      	strh	r2, [r3, #0]
				break;
 8006a02:	e024      	b.n	8006a4e <CDC_Receive_FS+0xee>

			case 'f':
				status = RWHEEL_BACKWARD;
 8006a04:	4b18      	ldr	r3, [pc, #96]	; (8006a68 <CDC_Receive_FS+0x108>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	801a      	strh	r2, [r3, #0]
				break;
 8006a0a:	e020      	b.n	8006a4e <CDC_Receive_FS+0xee>

			case 'q':
				status = LWHEEL_SPEEDUP;
 8006a0c:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <CDC_Receive_FS+0x108>)
 8006a0e:	2208      	movs	r2, #8
 8006a10:	801a      	strh	r2, [r3, #0]
				break;
 8006a12:	e01c      	b.n	8006a4e <CDC_Receive_FS+0xee>

			case 'a':
				status = LWHEEL_SLOWDOWN;
 8006a14:	4b14      	ldr	r3, [pc, #80]	; (8006a68 <CDC_Receive_FS+0x108>)
 8006a16:	2209      	movs	r2, #9
 8006a18:	801a      	strh	r2, [r3, #0]
				break;
 8006a1a:	e018      	b.n	8006a4e <CDC_Receive_FS+0xee>

			case 'e':
				status = RWHEEL_SPEEDUP;
 8006a1c:	4b12      	ldr	r3, [pc, #72]	; (8006a68 <CDC_Receive_FS+0x108>)
 8006a1e:	2203      	movs	r2, #3
 8006a20:	801a      	strh	r2, [r3, #0]
				break;
 8006a22:	e014      	b.n	8006a4e <CDC_Receive_FS+0xee>

			case 'd':
				status = RWHEEL_SLOWDOWN;
 8006a24:	4b10      	ldr	r3, [pc, #64]	; (8006a68 <CDC_Receive_FS+0x108>)
 8006a26:	2204      	movs	r2, #4
 8006a28:	801a      	strh	r2, [r3, #0]
				break;
 8006a2a:	e010      	b.n	8006a4e <CDC_Receive_FS+0xee>

			case 'z':
				status = LWHEEL_STOP;
 8006a2c:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <CDC_Receive_FS+0x108>)
 8006a2e:	2207      	movs	r2, #7
 8006a30:	801a      	strh	r2, [r3, #0]
				break;
 8006a32:	e00c      	b.n	8006a4e <CDC_Receive_FS+0xee>

			case 'c':
				status = RWHEEL_STOP;
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <CDC_Receive_FS+0x108>)
 8006a36:	2202      	movs	r2, #2
 8006a38:	801a      	strh	r2, [r3, #0]
				break;
 8006a3a:	e008      	b.n	8006a4e <CDC_Receive_FS+0xee>

			default:
				CDC_Transmit_FS(Buf, *Len);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f813 	bl	8006a70 <CDC_Transmit_FS>
 8006a4a:	e000      	b.n	8006a4e <CDC_Receive_FS+0xee>
		}
	}
 8006a4c:	bf00      	nop
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4806      	ldr	r0, [pc, #24]	; (8006a6c <CDC_Receive_FS+0x10c>)
 8006a52:	f7fe fd23 	bl	800549c <USBD_CDC_SetRxBuffer>
	if (USBD_CDC_ReceivePacket(&hUsbDeviceFS)==0){
 8006a56:	4805      	ldr	r0, [pc, #20]	; (8006a6c <CDC_Receive_FS+0x10c>)
 8006a58:	f7fe fd64 	bl	8005524 <USBD_CDC_ReceivePacket>

	}

	return (USBD_OK);
 8006a5c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	20000120 	.word	0x20000120
 8006a6c:	2000029c 	.word	0x2000029c

08006a70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a80:	4b0d      	ldr	r3, [pc, #52]	; (8006ab8 <CDC_Transmit_FS+0x48>)
 8006a82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d001      	beq.n	8006a96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e00b      	b.n	8006aae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a96:	887b      	ldrh	r3, [r7, #2]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	4806      	ldr	r0, [pc, #24]	; (8006ab8 <CDC_Transmit_FS+0x48>)
 8006a9e:	f7fe fce4 	bl	800546a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006aa2:	4805      	ldr	r0, [pc, #20]	; (8006ab8 <CDC_Transmit_FS+0x48>)
 8006aa4:	f7fe fd0e 	bl	80054c4 <USBD_CDC_TransmitPacket>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	2000029c 	.word	0x2000029c

08006abc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	4613      	mov	r3, r2
 8006ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	371c      	adds	r7, #28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	6039      	str	r1, [r7, #0]
 8006aea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2212      	movs	r2, #18
 8006af0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006af2:	4b03      	ldr	r3, [pc, #12]	; (8006b00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000154 	.word	0x20000154

08006b04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	6039      	str	r1, [r7, #0]
 8006b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	2204      	movs	r2, #4
 8006b14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b16:	4b03      	ldr	r3, [pc, #12]	; (8006b24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	20000168 	.word	0x20000168

08006b28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	4603      	mov	r3, r0
 8006b30:	6039      	str	r1, [r7, #0]
 8006b32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d105      	bne.n	8006b46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	4907      	ldr	r1, [pc, #28]	; (8006b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8006b3e:	4808      	ldr	r0, [pc, #32]	; (8006b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b40:	f7ff fd3f 	bl	80065c2 <USBD_GetString>
 8006b44:	e004      	b.n	8006b50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	4904      	ldr	r1, [pc, #16]	; (8006b5c <USBD_FS_ProductStrDescriptor+0x34>)
 8006b4a:	4805      	ldr	r0, [pc, #20]	; (8006b60 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b4c:	f7ff fd39 	bl	80065c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b50:	4b02      	ldr	r3, [pc, #8]	; (8006b5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001574 	.word	0x20001574
 8006b60:	080074f0 	.word	0x080074f0

08006b64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	6039      	str	r1, [r7, #0]
 8006b6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	4904      	ldr	r1, [pc, #16]	; (8006b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b74:	4804      	ldr	r0, [pc, #16]	; (8006b88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b76:	f7ff fd24 	bl	80065c2 <USBD_GetString>
  return USBD_StrDesc;
 8006b7a:	4b02      	ldr	r3, [pc, #8]	; (8006b84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20001574 	.word	0x20001574
 8006b88:	08007508 	.word	0x08007508

08006b8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	6039      	str	r1, [r7, #0]
 8006b96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	221a      	movs	r2, #26
 8006b9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b9e:	f000 f843 	bl	8006c28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ba2:	4b02      	ldr	r3, [pc, #8]	; (8006bac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	2000016c 	.word	0x2000016c

08006bb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	6039      	str	r1, [r7, #0]
 8006bba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006bbc:	79fb      	ldrb	r3, [r7, #7]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d105      	bne.n	8006bce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	4907      	ldr	r1, [pc, #28]	; (8006be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bc6:	4808      	ldr	r0, [pc, #32]	; (8006be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bc8:	f7ff fcfb 	bl	80065c2 <USBD_GetString>
 8006bcc:	e004      	b.n	8006bd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bce:	683a      	ldr	r2, [r7, #0]
 8006bd0:	4904      	ldr	r1, [pc, #16]	; (8006be4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bd2:	4805      	ldr	r0, [pc, #20]	; (8006be8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bd4:	f7ff fcf5 	bl	80065c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bd8:	4b02      	ldr	r3, [pc, #8]	; (8006be4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3708      	adds	r7, #8
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20001574 	.word	0x20001574
 8006be8:	0800751c 	.word	0x0800751c

08006bec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d105      	bne.n	8006c0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4907      	ldr	r1, [pc, #28]	; (8006c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c02:	4808      	ldr	r0, [pc, #32]	; (8006c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c04:	f7ff fcdd 	bl	80065c2 <USBD_GetString>
 8006c08:	e004      	b.n	8006c14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	4904      	ldr	r1, [pc, #16]	; (8006c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c0e:	4805      	ldr	r0, [pc, #20]	; (8006c24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c10:	f7ff fcd7 	bl	80065c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c14:	4b02      	ldr	r3, [pc, #8]	; (8006c20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20001574 	.word	0x20001574
 8006c24:	08007528 	.word	0x08007528

08006c28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c2e:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <Get_SerialNum+0x44>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c34:	4b0e      	ldr	r3, [pc, #56]	; (8006c70 <Get_SerialNum+0x48>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c3a:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <Get_SerialNum+0x4c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4413      	add	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c4e:	2208      	movs	r2, #8
 8006c50:	4909      	ldr	r1, [pc, #36]	; (8006c78 <Get_SerialNum+0x50>)
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f814 	bl	8006c80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c58:	2204      	movs	r2, #4
 8006c5a:	4908      	ldr	r1, [pc, #32]	; (8006c7c <Get_SerialNum+0x54>)
 8006c5c:	68b8      	ldr	r0, [r7, #8]
 8006c5e:	f000 f80f 	bl	8006c80 <IntToUnicode>
  }
}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	1fff7a10 	.word	0x1fff7a10
 8006c70:	1fff7a14 	.word	0x1fff7a14
 8006c74:	1fff7a18 	.word	0x1fff7a18
 8006c78:	2000016e 	.word	0x2000016e
 8006c7c:	2000017e 	.word	0x2000017e

08006c80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b087      	sub	sp, #28
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]
 8006c96:	e027      	b.n	8006ce8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	0f1b      	lsrs	r3, r3, #28
 8006c9c:	2b09      	cmp	r3, #9
 8006c9e:	d80b      	bhi.n	8006cb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	0f1b      	lsrs	r3, r3, #28
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	4619      	mov	r1, r3
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	440b      	add	r3, r1
 8006cb0:	3230      	adds	r2, #48	; 0x30
 8006cb2:	b2d2      	uxtb	r2, r2
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e00a      	b.n	8006cce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	0f1b      	lsrs	r3, r3, #28
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	005b      	lsls	r3, r3, #1
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	440b      	add	r3, r1
 8006cc8:	3237      	adds	r2, #55	; 0x37
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	3301      	adds	r3, #1
 8006cda:	68ba      	ldr	r2, [r7, #8]
 8006cdc:	4413      	add	r3, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ce2:	7dfb      	ldrb	r3, [r7, #23]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	75fb      	strb	r3, [r7, #23]
 8006ce8:	7dfa      	ldrb	r2, [r7, #23]
 8006cea:	79fb      	ldrb	r3, [r7, #7]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d3d3      	bcc.n	8006c98 <IntToUnicode+0x18>
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	371c      	adds	r7, #28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b08a      	sub	sp, #40	; 0x28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d04:	f107 0314 	add.w	r3, r7, #20
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	605a      	str	r2, [r3, #4]
 8006d0e:	609a      	str	r2, [r3, #8]
 8006d10:	60da      	str	r2, [r3, #12]
 8006d12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d1c:	d13a      	bne.n	8006d94 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	4b1e      	ldr	r3, [pc, #120]	; (8006d9c <HAL_PCD_MspInit+0xa0>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	4a1d      	ldr	r2, [pc, #116]	; (8006d9c <HAL_PCD_MspInit+0xa0>)
 8006d28:	f043 0301 	orr.w	r3, r3, #1
 8006d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2e:	4b1b      	ldr	r3, [pc, #108]	; (8006d9c <HAL_PCD_MspInit+0xa0>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	613b      	str	r3, [r7, #16]
 8006d38:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d3a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d40:	2302      	movs	r3, #2
 8006d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d4c:	230a      	movs	r3, #10
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d50:	f107 0314 	add.w	r3, r7, #20
 8006d54:	4619      	mov	r1, r3
 8006d56:	4812      	ldr	r0, [pc, #72]	; (8006da0 <HAL_PCD_MspInit+0xa4>)
 8006d58:	f7fa f966 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d5c:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <HAL_PCD_MspInit+0xa0>)
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	4a0e      	ldr	r2, [pc, #56]	; (8006d9c <HAL_PCD_MspInit+0xa0>)
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	6353      	str	r3, [r2, #52]	; 0x34
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <HAL_PCD_MspInit+0xa0>)
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <HAL_PCD_MspInit+0xa0>)
 8006d72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d76:	6453      	str	r3, [r2, #68]	; 0x44
 8006d78:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <HAL_PCD_MspInit+0xa0>)
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d80:	60fb      	str	r3, [r7, #12]
 8006d82:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d84:	2200      	movs	r2, #0
 8006d86:	2100      	movs	r1, #0
 8006d88:	2043      	movs	r0, #67	; 0x43
 8006d8a:	f7fa f916 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d8e:	2043      	movs	r0, #67	; 0x43
 8006d90:	f7fa f92f 	bl	8000ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d94:	bf00      	nop
 8006d96:	3728      	adds	r7, #40	; 0x28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	40023800 	.word	0x40023800
 8006da0:	40020000 	.word	0x40020000

08006da4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f7fe fc7e 	bl	80056bc <USBD_LL_SetupStage>
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006dda:	78fa      	ldrb	r2, [r7, #3]
 8006ddc:	6879      	ldr	r1, [r7, #4]
 8006dde:	4613      	mov	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	1a9b      	subs	r3, r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	440b      	add	r3, r1
 8006de8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	78fb      	ldrb	r3, [r7, #3]
 8006df0:	4619      	mov	r1, r3
 8006df2:	f7fe fcb6 	bl	8005762 <USBD_LL_DataOutStage>
}
 8006df6:	bf00      	nop
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e10:	78fa      	ldrb	r2, [r7, #3]
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	1a9b      	subs	r3, r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	3348      	adds	r3, #72	; 0x48
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	78fb      	ldrb	r3, [r7, #3]
 8006e24:	4619      	mov	r1, r3
 8006e26:	f7fe fcff 	bl	8005828 <USBD_LL_DataInStage>
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe fe03 	bl	8005a4c <USBD_LL_SOF>
}
 8006e46:	bf00      	nop
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e56:	2301      	movs	r3, #1
 8006e58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d001      	beq.n	8006e66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e62:	f7f9 fdcb 	bl	80009fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e6c:	7bfa      	ldrb	r2, [r7, #15]
 8006e6e:	4611      	mov	r1, r2
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fdb0 	bl	80059d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fe fd69 	bl	8005954 <USBD_LL_Reset>
}
 8006e82:	bf00      	nop
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
	...

08006e8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe fdab 	bl	80059f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6812      	ldr	r2, [r2, #0]
 8006eae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eb2:	f043 0301 	orr.w	r3, r3, #1
 8006eb6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d005      	beq.n	8006ecc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ec0:	4b04      	ldr	r3, [pc, #16]	; (8006ed4 <HAL_PCD_SuspendCallback+0x48>)
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	4a03      	ldr	r2, [pc, #12]	; (8006ed4 <HAL_PCD_SuspendCallback+0x48>)
 8006ec6:	f043 0306 	orr.w	r3, r3, #6
 8006eca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ecc:	bf00      	nop
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	e000ed00 	.word	0xe000ed00

08006ed8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fd9a 	bl	8005a20 <USBD_LL_Resume>
}
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f06:	78fa      	ldrb	r2, [r7, #3]
 8006f08:	4611      	mov	r1, r2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fdc5 	bl	8005a9a <USBD_LL_IsoOUTIncomplete>
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	460b      	mov	r3, r1
 8006f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f2a:	78fa      	ldrb	r2, [r7, #3]
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f7fe fda6 	bl	8005a80 <USBD_LL_IsoINIncomplete>
}
 8006f34:	bf00      	nop
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fdb2 	bl	8005ab4 <USBD_LL_DevConnected>
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fdaf 	bl	8005aca <USBD_LL_DevDisconnected>
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d13c      	bne.n	8006ffe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006f84:	4a20      	ldr	r2, [pc, #128]	; (8007008 <USBD_LL_Init+0x94>)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	; (8007008 <USBD_LL_Init+0x94>)
 8006f90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f94:	4b1c      	ldr	r3, [pc, #112]	; (8007008 <USBD_LL_Init+0x94>)
 8006f96:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f9a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f9c:	4b1a      	ldr	r3, [pc, #104]	; (8007008 <USBD_LL_Init+0x94>)
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006fa2:	4b19      	ldr	r3, [pc, #100]	; (8007008 <USBD_LL_Init+0x94>)
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006fa8:	4b17      	ldr	r3, [pc, #92]	; (8007008 <USBD_LL_Init+0x94>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006fae:	4b16      	ldr	r3, [pc, #88]	; (8007008 <USBD_LL_Init+0x94>)
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006fb4:	4b14      	ldr	r3, [pc, #80]	; (8007008 <USBD_LL_Init+0x94>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006fba:	4b13      	ldr	r3, [pc, #76]	; (8007008 <USBD_LL_Init+0x94>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fc0:	4b11      	ldr	r3, [pc, #68]	; (8007008 <USBD_LL_Init+0x94>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006fc6:	4b10      	ldr	r3, [pc, #64]	; (8007008 <USBD_LL_Init+0x94>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006fcc:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <USBD_LL_Init+0x94>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006fd2:	480d      	ldr	r0, [pc, #52]	; (8007008 <USBD_LL_Init+0x94>)
 8006fd4:	f7fa f9c3 	bl	800135e <HAL_PCD_Init>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006fde:	f7f9 fd0d 	bl	80009fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006fe2:	2180      	movs	r1, #128	; 0x80
 8006fe4:	4808      	ldr	r0, [pc, #32]	; (8007008 <USBD_LL_Init+0x94>)
 8006fe6:	f7fb fb20 	bl	800262a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006fea:	2240      	movs	r2, #64	; 0x40
 8006fec:	2100      	movs	r1, #0
 8006fee:	4806      	ldr	r0, [pc, #24]	; (8007008 <USBD_LL_Init+0x94>)
 8006ff0:	f7fb fad4 	bl	800259c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ff4:	2280      	movs	r2, #128	; 0x80
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	4803      	ldr	r0, [pc, #12]	; (8007008 <USBD_LL_Init+0x94>)
 8006ffa:	f7fb facf 	bl	800259c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3708      	adds	r7, #8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}
 8007008:	20001774 	.word	0x20001774

0800700c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007022:	4618      	mov	r0, r3
 8007024:	f7fa fab8 	bl	8001598 <HAL_PCD_Start>
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	4618      	mov	r0, r3
 8007030:	f000 f92a 	bl	8007288 <USBD_Get_USB_Status>
 8007034:	4603      	mov	r3, r0
 8007036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007038:	7bbb      	ldrb	r3, [r7, #14]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	461a      	mov	r2, r3
 8007050:	4603      	mov	r3, r0
 8007052:	70fb      	strb	r3, [r7, #3]
 8007054:	460b      	mov	r3, r1
 8007056:	70bb      	strb	r3, [r7, #2]
 8007058:	4613      	mov	r3, r2
 800705a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800706a:	78bb      	ldrb	r3, [r7, #2]
 800706c:	883a      	ldrh	r2, [r7, #0]
 800706e:	78f9      	ldrb	r1, [r7, #3]
 8007070:	f7fa fe9c 	bl	8001dac <HAL_PCD_EP_Open>
 8007074:	4603      	mov	r3, r0
 8007076:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	4618      	mov	r0, r3
 800707c:	f000 f904 	bl	8007288 <USBD_Get_USB_Status>
 8007080:	4603      	mov	r3, r0
 8007082:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007084:	7bbb      	ldrb	r3, [r7, #14]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800708e:	b580      	push	{r7, lr}
 8007090:	b084      	sub	sp, #16
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	460b      	mov	r3, r1
 8007098:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fa fee5 	bl	8001e7c <HAL_PCD_EP_Close>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 f8e5 	bl	8007288 <USBD_Get_USB_Status>
 80070be:	4603      	mov	r3, r0
 80070c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fa ffbd 	bl	800206a <HAL_PCD_EP_SetStall>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 f8c6 	bl	8007288 <USBD_Get_USB_Status>
 80070fc:	4603      	mov	r3, r0
 80070fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007100:	7bbb      	ldrb	r3, [r7, #14]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	4611      	mov	r1, r2
 8007128:	4618      	mov	r0, r3
 800712a:	f7fb f802 	bl	8002132 <HAL_PCD_EP_ClrStall>
 800712e:	4603      	mov	r3, r0
 8007130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007132:	7bfb      	ldrb	r3, [r7, #15]
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f8a7 	bl	8007288 <USBD_Get_USB_Status>
 800713a:	4603      	mov	r3, r0
 800713c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800713e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	460b      	mov	r3, r1
 8007152:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800715a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800715c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007160:	2b00      	cmp	r3, #0
 8007162:	da0b      	bge.n	800717c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800716a:	68f9      	ldr	r1, [r7, #12]
 800716c:	4613      	mov	r3, r2
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	440b      	add	r3, r1
 8007176:	333e      	adds	r3, #62	; 0x3e
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	e00b      	b.n	8007194 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007182:	68f9      	ldr	r1, [r7, #12]
 8007184:	4613      	mov	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	1a9b      	subs	r3, r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007192:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071ba:	78fa      	ldrb	r2, [r7, #3]
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f7fa fdcf 	bl	8001d62 <HAL_PCD_SetAddress>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f000 f85c 	bl	8007288 <USBD_Get_USB_Status>
 80071d0:	4603      	mov	r3, r0
 80071d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	460b      	mov	r3, r1
 80071ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80071fc:	7af9      	ldrb	r1, [r7, #11]
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	f7fa fee8 	bl	8001fd6 <HAL_PCD_EP_Transmit>
 8007206:	4603      	mov	r3, r0
 8007208:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800720a:	7dfb      	ldrb	r3, [r7, #23]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 f83b 	bl	8007288 <USBD_Get_USB_Status>
 8007212:	4603      	mov	r3, r0
 8007214:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007216:	7dbb      	ldrb	r3, [r7, #22]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	607a      	str	r2, [r7, #4]
 800722a:	603b      	str	r3, [r7, #0]
 800722c:	460b      	mov	r3, r1
 800722e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007234:	2300      	movs	r3, #0
 8007236:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800723e:	7af9      	ldrb	r1, [r7, #11]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	f7fa fe64 	bl	8001f10 <HAL_PCD_EP_Receive>
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 f81a 	bl	8007288 <USBD_Get_USB_Status>
 8007254:	4603      	mov	r3, r0
 8007256:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007258:	7dbb      	ldrb	r3, [r7, #22]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	460b      	mov	r3, r1
 800726c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	4611      	mov	r1, r2
 8007278:	4618      	mov	r0, r3
 800727a:	f7fa fe94 	bl	8001fa6 <HAL_PCD_EP_GetRxCount>
 800727e:	4603      	mov	r3, r0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	2b03      	cmp	r3, #3
 800729a:	d817      	bhi.n	80072cc <USBD_Get_USB_Status+0x44>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <USBD_Get_USB_Status+0x1c>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072b5 	.word	0x080072b5
 80072a8:	080072bb 	.word	0x080072bb
 80072ac:	080072c1 	.word	0x080072c1
 80072b0:	080072c7 	.word	0x080072c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
    break;
 80072b8:	e00b      	b.n	80072d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	73fb      	strb	r3, [r7, #15]
    break;
 80072be:	e008      	b.n	80072d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
    break;
 80072c4:	e005      	b.n	80072d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	73fb      	strb	r3, [r7, #15]
    break;
 80072ca:	e002      	b.n	80072d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	73fb      	strb	r3, [r7, #15]
    break;
 80072d0:	bf00      	nop
  }
  return usb_status;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <__errno>:
 80072e0:	4b01      	ldr	r3, [pc, #4]	; (80072e8 <__errno+0x8>)
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	20000188 	.word	0x20000188

080072ec <__libc_init_array>:
 80072ec:	b570      	push	{r4, r5, r6, lr}
 80072ee:	4e0d      	ldr	r6, [pc, #52]	; (8007324 <__libc_init_array+0x38>)
 80072f0:	4c0d      	ldr	r4, [pc, #52]	; (8007328 <__libc_init_array+0x3c>)
 80072f2:	1ba4      	subs	r4, r4, r6
 80072f4:	10a4      	asrs	r4, r4, #2
 80072f6:	2500      	movs	r5, #0
 80072f8:	42a5      	cmp	r5, r4
 80072fa:	d109      	bne.n	8007310 <__libc_init_array+0x24>
 80072fc:	4e0b      	ldr	r6, [pc, #44]	; (800732c <__libc_init_array+0x40>)
 80072fe:	4c0c      	ldr	r4, [pc, #48]	; (8007330 <__libc_init_array+0x44>)
 8007300:	f000 f8ea 	bl	80074d8 <_init>
 8007304:	1ba4      	subs	r4, r4, r6
 8007306:	10a4      	asrs	r4, r4, #2
 8007308:	2500      	movs	r5, #0
 800730a:	42a5      	cmp	r5, r4
 800730c:	d105      	bne.n	800731a <__libc_init_array+0x2e>
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007314:	4798      	blx	r3
 8007316:	3501      	adds	r5, #1
 8007318:	e7ee      	b.n	80072f8 <__libc_init_array+0xc>
 800731a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800731e:	4798      	blx	r3
 8007320:	3501      	adds	r5, #1
 8007322:	e7f2      	b.n	800730a <__libc_init_array+0x1e>
 8007324:	08007550 	.word	0x08007550
 8007328:	08007550 	.word	0x08007550
 800732c:	08007550 	.word	0x08007550
 8007330:	08007554 	.word	0x08007554

08007334 <malloc>:
 8007334:	4b02      	ldr	r3, [pc, #8]	; (8007340 <malloc+0xc>)
 8007336:	4601      	mov	r1, r0
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	f000 b861 	b.w	8007400 <_malloc_r>
 800733e:	bf00      	nop
 8007340:	20000188 	.word	0x20000188

08007344 <free>:
 8007344:	4b02      	ldr	r3, [pc, #8]	; (8007350 <free+0xc>)
 8007346:	4601      	mov	r1, r0
 8007348:	6818      	ldr	r0, [r3, #0]
 800734a:	f000 b80b 	b.w	8007364 <_free_r>
 800734e:	bf00      	nop
 8007350:	20000188 	.word	0x20000188

08007354 <memset>:
 8007354:	4402      	add	r2, r0
 8007356:	4603      	mov	r3, r0
 8007358:	4293      	cmp	r3, r2
 800735a:	d100      	bne.n	800735e <memset+0xa>
 800735c:	4770      	bx	lr
 800735e:	f803 1b01 	strb.w	r1, [r3], #1
 8007362:	e7f9      	b.n	8007358 <memset+0x4>

08007364 <_free_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	4605      	mov	r5, r0
 8007368:	2900      	cmp	r1, #0
 800736a:	d045      	beq.n	80073f8 <_free_r+0x94>
 800736c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007370:	1f0c      	subs	r4, r1, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	bfb8      	it	lt
 8007376:	18e4      	addlt	r4, r4, r3
 8007378:	f000 f8ac 	bl	80074d4 <__malloc_lock>
 800737c:	4a1f      	ldr	r2, [pc, #124]	; (80073fc <_free_r+0x98>)
 800737e:	6813      	ldr	r3, [r2, #0]
 8007380:	4610      	mov	r0, r2
 8007382:	b933      	cbnz	r3, 8007392 <_free_r+0x2e>
 8007384:	6063      	str	r3, [r4, #4]
 8007386:	6014      	str	r4, [r2, #0]
 8007388:	4628      	mov	r0, r5
 800738a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800738e:	f000 b8a2 	b.w	80074d6 <__malloc_unlock>
 8007392:	42a3      	cmp	r3, r4
 8007394:	d90c      	bls.n	80073b0 <_free_r+0x4c>
 8007396:	6821      	ldr	r1, [r4, #0]
 8007398:	1862      	adds	r2, r4, r1
 800739a:	4293      	cmp	r3, r2
 800739c:	bf04      	itt	eq
 800739e:	681a      	ldreq	r2, [r3, #0]
 80073a0:	685b      	ldreq	r3, [r3, #4]
 80073a2:	6063      	str	r3, [r4, #4]
 80073a4:	bf04      	itt	eq
 80073a6:	1852      	addeq	r2, r2, r1
 80073a8:	6022      	streq	r2, [r4, #0]
 80073aa:	6004      	str	r4, [r0, #0]
 80073ac:	e7ec      	b.n	8007388 <_free_r+0x24>
 80073ae:	4613      	mov	r3, r2
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	b10a      	cbz	r2, 80073b8 <_free_r+0x54>
 80073b4:	42a2      	cmp	r2, r4
 80073b6:	d9fa      	bls.n	80073ae <_free_r+0x4a>
 80073b8:	6819      	ldr	r1, [r3, #0]
 80073ba:	1858      	adds	r0, r3, r1
 80073bc:	42a0      	cmp	r0, r4
 80073be:	d10b      	bne.n	80073d8 <_free_r+0x74>
 80073c0:	6820      	ldr	r0, [r4, #0]
 80073c2:	4401      	add	r1, r0
 80073c4:	1858      	adds	r0, r3, r1
 80073c6:	4282      	cmp	r2, r0
 80073c8:	6019      	str	r1, [r3, #0]
 80073ca:	d1dd      	bne.n	8007388 <_free_r+0x24>
 80073cc:	6810      	ldr	r0, [r2, #0]
 80073ce:	6852      	ldr	r2, [r2, #4]
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	4401      	add	r1, r0
 80073d4:	6019      	str	r1, [r3, #0]
 80073d6:	e7d7      	b.n	8007388 <_free_r+0x24>
 80073d8:	d902      	bls.n	80073e0 <_free_r+0x7c>
 80073da:	230c      	movs	r3, #12
 80073dc:	602b      	str	r3, [r5, #0]
 80073de:	e7d3      	b.n	8007388 <_free_r+0x24>
 80073e0:	6820      	ldr	r0, [r4, #0]
 80073e2:	1821      	adds	r1, r4, r0
 80073e4:	428a      	cmp	r2, r1
 80073e6:	bf04      	itt	eq
 80073e8:	6811      	ldreq	r1, [r2, #0]
 80073ea:	6852      	ldreq	r2, [r2, #4]
 80073ec:	6062      	str	r2, [r4, #4]
 80073ee:	bf04      	itt	eq
 80073f0:	1809      	addeq	r1, r1, r0
 80073f2:	6021      	streq	r1, [r4, #0]
 80073f4:	605c      	str	r4, [r3, #4]
 80073f6:	e7c7      	b.n	8007388 <_free_r+0x24>
 80073f8:	bd38      	pop	{r3, r4, r5, pc}
 80073fa:	bf00      	nop
 80073fc:	20000210 	.word	0x20000210

08007400 <_malloc_r>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	1ccd      	adds	r5, r1, #3
 8007404:	f025 0503 	bic.w	r5, r5, #3
 8007408:	3508      	adds	r5, #8
 800740a:	2d0c      	cmp	r5, #12
 800740c:	bf38      	it	cc
 800740e:	250c      	movcc	r5, #12
 8007410:	2d00      	cmp	r5, #0
 8007412:	4606      	mov	r6, r0
 8007414:	db01      	blt.n	800741a <_malloc_r+0x1a>
 8007416:	42a9      	cmp	r1, r5
 8007418:	d903      	bls.n	8007422 <_malloc_r+0x22>
 800741a:	230c      	movs	r3, #12
 800741c:	6033      	str	r3, [r6, #0]
 800741e:	2000      	movs	r0, #0
 8007420:	bd70      	pop	{r4, r5, r6, pc}
 8007422:	f000 f857 	bl	80074d4 <__malloc_lock>
 8007426:	4a21      	ldr	r2, [pc, #132]	; (80074ac <_malloc_r+0xac>)
 8007428:	6814      	ldr	r4, [r2, #0]
 800742a:	4621      	mov	r1, r4
 800742c:	b991      	cbnz	r1, 8007454 <_malloc_r+0x54>
 800742e:	4c20      	ldr	r4, [pc, #128]	; (80074b0 <_malloc_r+0xb0>)
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	b91b      	cbnz	r3, 800743c <_malloc_r+0x3c>
 8007434:	4630      	mov	r0, r6
 8007436:	f000 f83d 	bl	80074b4 <_sbrk_r>
 800743a:	6020      	str	r0, [r4, #0]
 800743c:	4629      	mov	r1, r5
 800743e:	4630      	mov	r0, r6
 8007440:	f000 f838 	bl	80074b4 <_sbrk_r>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d124      	bne.n	8007492 <_malloc_r+0x92>
 8007448:	230c      	movs	r3, #12
 800744a:	6033      	str	r3, [r6, #0]
 800744c:	4630      	mov	r0, r6
 800744e:	f000 f842 	bl	80074d6 <__malloc_unlock>
 8007452:	e7e4      	b.n	800741e <_malloc_r+0x1e>
 8007454:	680b      	ldr	r3, [r1, #0]
 8007456:	1b5b      	subs	r3, r3, r5
 8007458:	d418      	bmi.n	800748c <_malloc_r+0x8c>
 800745a:	2b0b      	cmp	r3, #11
 800745c:	d90f      	bls.n	800747e <_malloc_r+0x7e>
 800745e:	600b      	str	r3, [r1, #0]
 8007460:	50cd      	str	r5, [r1, r3]
 8007462:	18cc      	adds	r4, r1, r3
 8007464:	4630      	mov	r0, r6
 8007466:	f000 f836 	bl	80074d6 <__malloc_unlock>
 800746a:	f104 000b 	add.w	r0, r4, #11
 800746e:	1d23      	adds	r3, r4, #4
 8007470:	f020 0007 	bic.w	r0, r0, #7
 8007474:	1ac3      	subs	r3, r0, r3
 8007476:	d0d3      	beq.n	8007420 <_malloc_r+0x20>
 8007478:	425a      	negs	r2, r3
 800747a:	50e2      	str	r2, [r4, r3]
 800747c:	e7d0      	b.n	8007420 <_malloc_r+0x20>
 800747e:	428c      	cmp	r4, r1
 8007480:	684b      	ldr	r3, [r1, #4]
 8007482:	bf16      	itet	ne
 8007484:	6063      	strne	r3, [r4, #4]
 8007486:	6013      	streq	r3, [r2, #0]
 8007488:	460c      	movne	r4, r1
 800748a:	e7eb      	b.n	8007464 <_malloc_r+0x64>
 800748c:	460c      	mov	r4, r1
 800748e:	6849      	ldr	r1, [r1, #4]
 8007490:	e7cc      	b.n	800742c <_malloc_r+0x2c>
 8007492:	1cc4      	adds	r4, r0, #3
 8007494:	f024 0403 	bic.w	r4, r4, #3
 8007498:	42a0      	cmp	r0, r4
 800749a:	d005      	beq.n	80074a8 <_malloc_r+0xa8>
 800749c:	1a21      	subs	r1, r4, r0
 800749e:	4630      	mov	r0, r6
 80074a0:	f000 f808 	bl	80074b4 <_sbrk_r>
 80074a4:	3001      	adds	r0, #1
 80074a6:	d0cf      	beq.n	8007448 <_malloc_r+0x48>
 80074a8:	6025      	str	r5, [r4, #0]
 80074aa:	e7db      	b.n	8007464 <_malloc_r+0x64>
 80074ac:	20000210 	.word	0x20000210
 80074b0:	20000214 	.word	0x20000214

080074b4 <_sbrk_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4c06      	ldr	r4, [pc, #24]	; (80074d0 <_sbrk_r+0x1c>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4605      	mov	r5, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	6023      	str	r3, [r4, #0]
 80074c0:	f7f9 fb96 	bl	8000bf0 <_sbrk>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_sbrk_r+0x1a>
 80074c8:	6823      	ldr	r3, [r4, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_sbrk_r+0x1a>
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	20001b7c 	.word	0x20001b7c

080074d4 <__malloc_lock>:
 80074d4:	4770      	bx	lr

080074d6 <__malloc_unlock>:
 80074d6:	4770      	bx	lr

080074d8 <_init>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr

080074e4 <_fini>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	bf00      	nop
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr
