
Tof.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d744  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000071c  0800d8e4  0800d8e4  0001d8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e000  0800e000  000204a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e000  0800e000  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e008  0800e008  000204a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e008  0800e008  0001e008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e00c  0800e00c  0001e00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  0800e010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de4  200004a0  0800e4b0  000204a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002284  0800e4b0  00022284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278aa  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000042e2  00000000  00000000  00047d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019a0  00000000  00000000  0004c060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017f0  00000000  00000000  0004da00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bcd5  00000000  00000000  0004f1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016c1c  00000000  00000000  0006aec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097fab  00000000  00000000  00081ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  00119b08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d8cc 	.word	0x0800d8cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	0800d8cc 	.word	0x0800d8cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <print_pal_error>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_pal_error(VL53L0X_Error Status){
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];
    VL53L0X_GetPalErrorString(Status, buf);
 800059a:	f107 0208 	add.w	r2, r7, #8
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f007 fbd7 	bl	8007d58 <VL53L0X_GetPalErrorString>
    cdc_printf(buf, Status);
 80005aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f805 	bl	80005c4 <cdc_printf>
}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	; 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <cdc_printf>:

uint8_t msg[1024];

void cdc_printf(const char * fmt, ...){
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, fmt);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	607b      	str	r3, [r7, #4]
    vsprintf((char *)msg, fmt, args);
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6939      	ldr	r1, [r7, #16]
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <cdc_printf+0x3c>)
 80005d8:	f00c fe4a 	bl	800d270 <vsiprintf>
	va_end(args);
	CDC_Transmit_FS(msg, strlen((char *)msg));HAL_Delay(10);
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <cdc_printf+0x3c>)
 80005de:	f7ff fdff 	bl	80001e0 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <cdc_printf+0x3c>)
 80005e8:	f006 ff56 	bl	8007498 <CDC_Transmit_FS>
 80005ec:	200a      	movs	r0, #10
 80005ee:	f000 fcdd 	bl	8000fac <HAL_Delay>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fc:	b004      	add	sp, #16
 80005fe:	4770      	bx	lr
 8000600:	20000520 	.word	0x20000520

08000604 <print_range_status>:

void print_range_status(VL53L0X_RangingMeasurementData_t* pRangingMeasurementData){
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	; 0x30
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

    /*
     * New Range Status: data is valid when pRangingMeasurementData->RangeStatus = 0
     */

    RangeStatus = pRangingMeasurementData->RangeStatus;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7e1b      	ldrb	r3, [r3, #24]
 8000610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    VL53L0X_GetRangeStatusString(RangeStatus, buf);
 8000614:	f107 020c 	add.w	r2, r7, #12
 8000618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fb85 	bl	8007d2e <VL53L0X_GetRangeStatusString>
    cdc_printf("Range Status: %i : %s\r\n", RangeStatus, buf);
 8000624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000628:	f107 020c 	add.w	r2, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <print_range_status+0x38>)
 8000630:	f7ff ffc8 	bl	80005c4 <cdc_printf>

}
 8000634:	bf00      	nop
 8000636:	3730      	adds	r7, #48	; 0x30
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	0800d8e4 	.word	0x0800d8e4

08000640 <rangingTest>:
VL53L0X_Error rangingTest(VL53L0X_Dev_t *pMyDevice)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08e      	sub	sp, #56	; 0x38
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint32_t refSpadCount;
    uint8_t isApertureSpads;
    uint8_t VhvSettings;
    uint8_t PhaseCal;

    if(Status == VL53L0X_ERROR_NONE)
 800064e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000652:	2b00      	cmp	r3, #0
 8000654:	d10d      	bne.n	8000672 <rangingTest+0x32>
    {
        cdc_printf("Call of VL53L0X_StaticInit\r\n");
 8000656:	4867      	ldr	r0, [pc, #412]	; (80007f4 <rangingTest+0x1b4>)
 8000658:	f7ff ffb4 	bl	80005c4 <cdc_printf>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f007 fd09 	bl	8008074 <VL53L0X_StaticInit>
 8000662:	4603      	mov	r3, r0
 8000664:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        print_pal_error(Status);
 8000668:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff ff8f 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000672:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000676:	2b00      	cmp	r3, #0
 8000678:	d112      	bne.n	80006a0 <rangingTest+0x60>
    {
        cdc_printf("Call of VL53L0X_PerformRefCalibration\r\n");
 800067a:	485f      	ldr	r0, [pc, #380]	; (80007f8 <rangingTest+0x1b8>)
 800067c:	f7ff ffa2 	bl	80005c4 <cdc_printf>
        Status = VL53L0X_PerformRefCalibration(pMyDevice,
 8000680:	f107 0209 	add.w	r2, r7, #9
 8000684:	f107 030a 	add.w	r3, r7, #10
 8000688:	4619      	mov	r1, r3
 800068a:	6878      	ldr	r0, [r7, #4]
 800068c:	f008 fc00 	bl	8008e90 <VL53L0X_PerformRefCalibration>
 8000690:	4603      	mov	r3, r0
 8000692:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		&VhvSettings, &PhaseCal); // Device Initialization
        print_pal_error(Status);
 8000696:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff78 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 80006a0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d118      	bne.n	80006da <rangingTest+0x9a>
    {
        cdc_printf("Call of VL53L0X_PerformRefSpadManagement\r\n");
 80006a8:	4854      	ldr	r0, [pc, #336]	; (80007fc <rangingTest+0x1bc>)
 80006aa:	f7ff ff8b 	bl	80005c4 <cdc_printf>
        Status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 80006ae:	f107 020b 	add.w	r2, r7, #11
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	4619      	mov	r1, r3
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f009 f877 	bl	80097ac <VL53L0X_PerformRefSpadManagement>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		&refSpadCount, &isApertureSpads); // Device Initialization
        cdc_printf("refSpadCount = %d, isApertureSpads = %d\r\n", refSpadCount, isApertureSpads);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	7afa      	ldrb	r2, [r7, #11]
 80006c8:	4619      	mov	r1, r3
 80006ca:	484d      	ldr	r0, [pc, #308]	; (8000800 <rangingTest+0x1c0>)
 80006cc:	f7ff ff7a 	bl	80005c4 <cdc_printf>
        print_pal_error(Status);
 80006d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff5b 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 80006da:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10e      	bne.n	8000700 <rangingTest+0xc0>
    {

        // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
        cdc_printf("Call of VL53L0X_SetDeviceMode\r\n");
 80006e2:	4848      	ldr	r0, [pc, #288]	; (8000804 <rangingTest+0x1c4>)
 80006e4:	f7ff ff6e 	bl	80005c4 <cdc_printf>
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 80006e8:	2100      	movs	r1, #0
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f007 fed4 	bl	8008498 <VL53L0X_SetDeviceMode>
 80006f0:	4603      	mov	r3, r0
 80006f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        print_pal_error(Status);
 80006f6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff48 	bl	8000590 <print_pal_error>
    }

    // Enable/Disable Sigma and Signal check
    if (Status == VL53L0X_ERROR_NONE) {
 8000700:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000704:	2b00      	cmp	r3, #0
 8000706:	d107      	bne.n	8000718 <rangingTest+0xd8>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000708:	2201      	movs	r2, #1
 800070a:	2100      	movs	r1, #0
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f008 f943 	bl	8008998 <VL53L0X_SetLimitCheckEnable>
 8000712:	4603      	mov	r3, r0
 8000714:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 8000718:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800071c:	2b00      	cmp	r3, #0
 800071e:	d107      	bne.n	8000730 <rangingTest+0xf0>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000720:	2201      	movs	r2, #1
 8000722:	2101      	movs	r1, #1
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f008 f937 	bl	8008998 <VL53L0X_SetLimitCheckEnable>
 800072a:	4603      	mov	r3, r0
 800072c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8000730:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000734:	2b00      	cmp	r3, #0
 8000736:	d108      	bne.n	800074a <rangingTest+0x10a>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 8000738:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800073c:	2101      	movs	r1, #1
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f008 f9da 	bl	8008af8 <VL53L0X_SetLimitCheckValue>
 8000744:	4603      	mov	r3, r0
 8000746:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        		(FixPoint1616_t)(0.25*65536));
	}
    if (Status == VL53L0X_ERROR_NONE) {
 800074a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800074e:	2b00      	cmp	r3, #0
 8000750:	d108      	bne.n	8000764 <rangingTest+0x124>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 8000752:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000756:	2100      	movs	r1, #0
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f008 f9cd 	bl	8008af8 <VL53L0X_SetLimitCheckValue>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
        		(FixPoint1616_t)(32*65536));
    }
    if (Status == VL53L0X_ERROR_NONE) {
 8000764:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000768:	2b00      	cmp	r3, #0
 800076a:	d107      	bne.n	800077c <rangingTest+0x13c>
        Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice,
 800076c:	f247 5130 	movw	r1, #30000	; 0x7530
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f007 ff0b 	bl	800858c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8000776:	4603      	mov	r3, r0
 8000778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /*
     *  Step  4 : Test ranging mode
     */

    if(Status == VL53L0X_ERROR_NONE)
 800077c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8000780:	2b00      	cmp	r3, #0
 8000782:	d130      	bne.n	80007e6 <rangingTest+0x1a6>
    {
        for(i=0;i<10;i++){
 8000784:	2300      	movs	r3, #0
 8000786:	633b      	str	r3, [r7, #48]	; 0x30
 8000788:	e028      	b.n	80007dc <rangingTest+0x19c>
            cdc_printf("Call of VL53L0X_PerformSingleRangingMeasurement\r\n");
 800078a:	481f      	ldr	r0, [pc, #124]	; (8000808 <rangingTest+0x1c8>)
 800078c:	f7ff ff1a 	bl	80005c4 <cdc_printf>
            Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice,
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f008 fe1c 	bl	80093d4 <VL53L0X_PerformSingleRangingMeasurement>
 800079c:	4603      	mov	r3, r0
 800079e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            		&RangingMeasurementData);

            print_pal_error(Status);
 80007a2:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fef2 	bl	8000590 <print_pal_error>
            print_range_status(&RangingMeasurementData);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ff27 	bl	8000604 <print_range_status>

            VL53L0X_GetLimitCheckCurrent(pMyDevice,
 80007b6:	f107 0310 	add.w	r3, r7, #16
 80007ba:	461a      	mov	r2, r3
 80007bc:	2103      	movs	r1, #3
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f008 fa8a 	bl	8008cd8 <VL53L0X_GetLimitCheckCurrent>
            		VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, &LimitCheckCurrent);

            if (Status != VL53L0X_ERROR_NONE) break;
 80007c4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d10b      	bne.n	80007e4 <rangingTest+0x1a4>

            cdc_printf("Measured distance: %i\r\n\r\n", RangingMeasurementData.RangeMilliMeter);
 80007cc:	8bbb      	ldrh	r3, [r7, #28]
 80007ce:	4619      	mov	r1, r3
 80007d0:	480e      	ldr	r0, [pc, #56]	; (800080c <rangingTest+0x1cc>)
 80007d2:	f7ff fef7 	bl	80005c4 <cdc_printf>
        for(i=0;i<10;i++){
 80007d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007d8:	3301      	adds	r3, #1
 80007da:	633b      	str	r3, [r7, #48]	; 0x30
 80007dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80007de:	2b09      	cmp	r3, #9
 80007e0:	ddd3      	ble.n	800078a <rangingTest+0x14a>
 80007e2:	e000      	b.n	80007e6 <rangingTest+0x1a6>
            if (Status != VL53L0X_ERROR_NONE) break;
 80007e4:	bf00      	nop
        }
    }
    return Status;
 80007e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3738      	adds	r7, #56	; 0x38
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	0800d8fc 	.word	0x0800d8fc
 80007f8:	0800d91c 	.word	0x0800d91c
 80007fc:	0800d944 	.word	0x0800d944
 8000800:	0800d970 	.word	0x0800d970
 8000804:	0800d99c 	.word	0x0800d99c
 8000808:	0800d9bc 	.word	0x0800d9bc
 800080c:	0800d9f0 	.word	0x0800d9f0

08000810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b0f6      	sub	sp, #472	; 0x1d8
 8000814:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fb57 	bl	8000ec8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f8ab 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081e:	f000 f9c7 	bl	8000bb0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000822:	f006 fd73 	bl	800730c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000826:	f000 f93b 	bl	8000aa0 <MX_TIM3_Init>
  MX_TIM9_Init();
 800082a:	f000 f987 	bl	8000b3c <MX_TIM9_Init>
  MX_I2C1_Init();
 800082e:	f000 f909 	bl	8000a44 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  Status = -1;
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <main+0x140>)
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	701a      	strb	r2, [r3, #0]
  VL53L0X_Dev_t MyDevice;
  VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8000838:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800083c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  VL53L0X_Version_t Version;
  VL53L0X_Version_t *pVersion   = &Version;
 8000840:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000844:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  VL53L0X_DeviceInfo_t DeviceInfo;

  // Initialize Comms
  pMyDevice->I2cDevAddr      = 0x52 ;
 8000848:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800084c:	2252      	movs	r2, #82	; 0x52
 800084e:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
  pMyDevice->comms_type      =  1;
 8000852:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000856:	2201      	movs	r2, #1
 8000858:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
  pMyDevice->comms_speed_khz =  400;
 800085c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000860:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000864:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(Status){ // Hold here until You press 'n'
 8000868:	bf00      	nop
 800086a:	4b39      	ldr	r3, [pc, #228]	; (8000950 <main+0x140>)
 800086c:	f993 3000 	ldrsb.w	r3, [r3]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1fa      	bne.n	800086a <main+0x5a>
	  }

	  if(Status == VL53L0X_ERROR_NONE)
 8000874:	4b36      	ldr	r3, [pc, #216]	; (8000950 <main+0x140>)
 8000876:	f993 3000 	ldrsb.w	r3, [r3]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d111      	bne.n	80008a2 <main+0x92>
	    {
	        cdc_printf("Call of VL53L0X_DataInit\r\n");
 800087e:	4835      	ldr	r0, [pc, #212]	; (8000954 <main+0x144>)
 8000880:	f7ff fea0 	bl	80005c4 <cdc_printf>
	        Status = VL53L0X_DataInit(&MyDevice); // Data initialization
 8000884:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000888:	4618      	mov	r0, r3
 800088a:	f007 fa8f 	bl	8007dac <VL53L0X_DataInit>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <main+0x140>)
 8000894:	701a      	strb	r2, [r3, #0]
	        print_pal_error(Status);
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <main+0x140>)
 8000898:	f993 3000 	ldrsb.w	r3, [r3]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe77 	bl	8000590 <print_pal_error>
	    }

	    if(Status == VL53L0X_ERROR_NONE)
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <main+0x140>)
 80008a4:	f993 3000 	ldrsb.w	r3, [r3]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d13a      	bne.n	8000922 <main+0x112>
	    {
	        Status = VL53L0X_GetDeviceInfo(&MyDevice, &DeviceInfo);
 80008ac:	1d3a      	adds	r2, r7, #4
 80008ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f007 fa27 	bl	8007d08 <VL53L0X_GetDeviceInfo>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <main+0x140>)
 80008c0:	701a      	strb	r2, [r3, #0]
	        cdc_printf("SwaggerMan\r\n");
 80008c2:	4825      	ldr	r0, [pc, #148]	; (8000958 <main+0x148>)
 80008c4:	f7ff fe7e 	bl	80005c4 <cdc_printf>
	        if(Status == VL53L0X_ERROR_NONE)
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <main+0x140>)
 80008ca:	f993 3000 	ldrsb.w	r3, [r3]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d121      	bne.n	8000916 <main+0x106>
	        {
	            cdc_printf("VL53L0X_GetDeviceInfo:\r\n");
 80008d2:	4822      	ldr	r0, [pc, #136]	; (800095c <main+0x14c>)
 80008d4:	f7ff fe76 	bl	80005c4 <cdc_printf>
	            cdc_printf("Device Name : %s\r\n", DeviceInfo.Name);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4820      	ldr	r0, [pc, #128]	; (8000960 <main+0x150>)
 80008de:	f7ff fe71 	bl	80005c4 <cdc_printf>
	            cdc_printf("Device Type : %s\r\n", DeviceInfo.Type);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	3320      	adds	r3, #32
 80008e6:	4619      	mov	r1, r3
 80008e8:	481e      	ldr	r0, [pc, #120]	; (8000964 <main+0x154>)
 80008ea:	f7ff fe6b 	bl	80005c4 <cdc_printf>
	            cdc_printf("Device ID : %s\r\n", DeviceInfo.ProductId);
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	3340      	adds	r3, #64	; 0x40
 80008f2:	4619      	mov	r1, r3
 80008f4:	481c      	ldr	r0, [pc, #112]	; (8000968 <main+0x158>)
 80008f6:	f7ff fe65 	bl	80005c4 <cdc_printf>
	            cdc_printf("ProductRevisionMajor : %d\r\n", DeviceInfo.ProductRevisionMajor);
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8000900:	4619      	mov	r1, r3
 8000902:	481a      	ldr	r0, [pc, #104]	; (800096c <main+0x15c>)
 8000904:	f7ff fe5e 	bl	80005c4 <cdc_printf>
	            cdc_printf("ProductRevisionMinor : %d\r\n", DeviceInfo.ProductRevisionMinor);
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800090e:	4619      	mov	r1, r3
 8000910:	4817      	ldr	r0, [pc, #92]	; (8000970 <main+0x160>)
 8000912:	f7ff fe57 	bl	80005c4 <cdc_printf>
	        }
	        print_pal_error(Status);
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <main+0x140>)
 8000918:	f993 3000 	ldrsb.w	r3, [r3]
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fe37 	bl	8000590 <print_pal_error>
	    }


	    if(Status == VL53L0X_ERROR_NONE)
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <main+0x140>)
 8000924:	f993 3000 	ldrsb.w	r3, [r3]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10d      	bne.n	8000948 <main+0x138>
	    {
	        Status = rangingTest(pMyDevice);
 800092c:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 8000930:	f7ff fe86 	bl	8000640 <rangingTest>
 8000934:	4603      	mov	r3, r0
 8000936:	461a      	mov	r2, r3
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <main+0x140>)
 800093a:	701a      	strb	r2, [r3, #0]
	        print_pal_error(Status);
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <main+0x140>)
 800093e:	f993 3000 	ldrsb.w	r3, [r3]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fe24 	bl	8000590 <print_pal_error>
	    }
	    Status = -1;
 8000948:	4b01      	ldr	r3, [pc, #4]	; (8000950 <main+0x140>)
 800094a:	22ff      	movs	r2, #255	; 0xff
 800094c:	701a      	strb	r2, [r3, #0]
	  while(Status){ // Hold here until You press 'n'
 800094e:	e78b      	b.n	8000868 <main+0x58>
 8000950:	20000c74 	.word	0x20000c74
 8000954:	0800da0c 	.word	0x0800da0c
 8000958:	0800da28 	.word	0x0800da28
 800095c:	0800da38 	.word	0x0800da38
 8000960:	0800da54 	.word	0x0800da54
 8000964:	0800da68 	.word	0x0800da68
 8000968:	0800da7c 	.word	0x0800da7c
 800096c:	0800da90 	.word	0x0800da90
 8000970:	0800daac 	.word	0x0800daac

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	; 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00c fb95 	bl	800d0b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <SystemClock_Config+0xc8>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a0:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <SystemClock_Config+0xc8>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	; 0x40
 80009a8:	4b24      	ldr	r3, [pc, #144]	; (8000a3c <SystemClock_Config+0xc8>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <SystemClock_Config+0xcc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a20      	ldr	r2, [pc, #128]	; (8000a40 <SystemClock_Config+0xcc>)
 80009be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <SystemClock_Config+0xcc>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009e4:	2319      	movs	r3, #25
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80009e8:	2390      	movs	r3, #144	; 0x90
 80009ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009f0:	2303      	movs	r3, #3
 80009f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f4:	f107 0320 	add.w	r3, r7, #32
 80009f8:	4618      	mov	r0, r3
 80009fa:	f002 fec3 	bl	8003784 <HAL_RCC_OscConfig>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a04:	f000 f90a 	bl	8000c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a08:	230f      	movs	r3, #15
 8000a0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	2102      	movs	r1, #2
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 f91d 	bl	8003c64 <HAL_RCC_ClockConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a30:	f000 f8f4 	bl	8000c1c <Error_Handler>
  }
}
 8000a34:	bf00      	nop
 8000a36:	3750      	adds	r7, #80	; 0x50
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a4a:	4a13      	ldr	r2, [pc, #76]	; (8000a98 <MX_I2C1_Init+0x54>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a50:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_I2C1_Init+0x58>)
 8000a52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2C1_Init+0x50>)
 8000a82:	f000 fd49 	bl	8001518 <HAL_I2C_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a8c:	f000 f8c6 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200004cc 	.word	0x200004cc
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	00061a80 	.word	0x00061a80

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000abc:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000abe:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <MX_TIM3_Init+0x98>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ac2:	4b1c      	ldr	r3, [pc, #112]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000ae4:	f003 fa76 	bl	8003fd4 <HAL_TIM_Base_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000aee:	f000 f895 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	4619      	mov	r1, r3
 8000afe:	480d      	ldr	r0, [pc, #52]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000b00:	f003 fa93 	bl	800402a <HAL_TIM_ConfigClockSource>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 f887 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4806      	ldr	r0, [pc, #24]	; (8000b34 <MX_TIM3_Init+0x94>)
 8000b1c:	f003 fc56 	bl	80043cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000b26:	f000 f879 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000920 	.word	0x20000920
 8000b38:	40000400 	.word	0x40000400

08000b3c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_TIM9_Init+0x6c>)
 8000b50:	4a16      	ldr	r2, [pc, #88]	; (8000bac <MX_TIM9_Init+0x70>)
 8000b52:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000b54:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <MX_TIM9_Init+0x6c>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_TIM9_Init+0x6c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <MX_TIM9_Init+0x6c>)
 8000b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b66:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <MX_TIM9_Init+0x6c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_TIM9_Init+0x6c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_TIM9_Init+0x6c>)
 8000b76:	f003 fa2d 	bl	8003fd4 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000b80:	f000 f84c 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <MX_TIM9_Init+0x6c>)
 8000b90:	f003 fa4b 	bl	800402a <HAL_TIM_ConfigClockSource>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000b9a:	f000 f83f 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000960 	.word	0x20000960
 8000bac:	40014000 	.word	0x40014000

08000bb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <Error_Handler+0x6>

08000c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c38:	6453      	str	r3, [r2, #68]	; 0x44
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	603b      	str	r3, [r7, #0]
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6413      	str	r3, [r2, #64]	; 0x40
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800

08000c74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a19      	ldr	r2, [pc, #100]	; (8000cf8 <HAL_I2C_MspInit+0x84>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d12b      	bne.n	8000cee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb2:	23c0      	movs	r3, #192	; 0xc0
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb6:	2312      	movs	r3, #18
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <HAL_I2C_MspInit+0x8c>)
 8000cce:	f000 faa1 	bl	8001214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000cdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_I2C_MspInit+0x88>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3728      	adds	r7, #40	; 0x28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40005400 	.word	0x40005400
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020400 	.word	0x40020400

08000d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <HAL_TIM_Base_MspInit+0x64>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10e      	bne.n	8000d34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_TIM_Base_MspInit+0x68>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <HAL_TIM_Base_MspInit+0x68>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_TIM_Base_MspInit+0x68>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000d32:	e012      	b.n	8000d5a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <HAL_TIM_Base_MspInit+0x6c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d10d      	bne.n	8000d5a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <HAL_TIM_Base_MspInit+0x68>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a09      	ldr	r2, [pc, #36]	; (8000d6c <HAL_TIM_Base_MspInit+0x68>)
 8000d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <HAL_TIM_Base_MspInit+0x68>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40014000 	.word	0x40014000

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc0:	f000 f8d4 	bl	8000f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <OTG_FS_IRQHandler+0x10>)
 8000dce:	f001 fca6 	bl	800271e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20001e78 	.word	0x20001e78

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f00c f90c 	bl	800d028 <__errno>
 8000e10:	4602      	mov	r2, r0
 8000e12:	230c      	movs	r3, #12
 8000e14:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20020000 	.word	0x20020000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	200004bc 	.word	0x200004bc
 8000e44:	20002288 	.word	0x20002288

08000e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <SystemInit+0x28>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <SystemInit+0x28>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SystemInit+0x28>)
 8000e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e62:	609a      	str	r2, [r3, #8]
#endif
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e7a:	e003      	b.n	8000e84 <LoopCopyDataInit>

08000e7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e82:	3104      	adds	r1, #4

08000e84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e84:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e8c:	d3f6      	bcc.n	8000e7c <CopyDataInit>
  ldr  r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e90:	e002      	b.n	8000e98 <LoopFillZerobss>

08000e92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e94:	f842 3b04 	str.w	r3, [r2], #4

08000e98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e9c:	d3f9      	bcc.n	8000e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff ffd3 	bl	8000e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f00c f8c7 	bl	800d034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fcb3 	bl	8000810 <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000eb0:	0800e010 	.word	0x0800e010
  ldr  r0, =_sdata
 8000eb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000eb8:	200004a0 	.word	0x200004a0
  ldr  r2, =_sbss
 8000ebc:	200004a0 	.word	0x200004a0
  ldr  r3, = _ebss
 8000ec0:	20002284 	.word	0x20002284

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>
	...

08000ec8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <HAL_Init+0x40>)
 8000ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed8:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_Init+0x40>)
 8000ede:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <HAL_Init+0x40>)
 8000eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	f000 f94d 	bl	8001190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f000 f808 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000efc:	f7ff fe92 	bl	8000c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023c00 	.word	0x40023c00

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x54>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_InitTick+0x58>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f965 	bl	80011fa <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00e      	b.n	8000f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	d80a      	bhi.n	8000f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f48:	f000 f92d 	bl	80011a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f4c:	4a06      	ldr	r2, [pc, #24]	; (8000f68 <HAL_InitTick+0x5c>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e000      	b.n	8000f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000008 	.word	0x20000008
 8000f68:	20000004 	.word	0x20000004

08000f6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_IncTick+0x20>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_IncTick+0x24>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_IncTick+0x24>)
 8000f7e:	6013      	str	r3, [r2, #0]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	200009a0 	.word	0x200009a0

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <HAL_GetTick+0x14>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	200009a0 	.word	0x200009a0

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff ffee 	bl	8000f94 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_Delay+0x40>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffde 	bl	8000f94 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	; (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	; (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001062:	2b00      	cmp	r3, #0
 8001064:	db0b      	blt.n	800107e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	f003 021f 	and.w	r2, r3, #31
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <__NVIC_EnableIRQ+0x38>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	095b      	lsrs	r3, r3, #5
 8001074:	2001      	movs	r0, #1
 8001076:	fa00 f202 	lsl.w	r2, r0, r2
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800115c:	d301      	bcc.n	8001162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115e:	2301      	movs	r3, #1
 8001160:	e00f      	b.n	8001182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001162:	4a0a      	ldr	r2, [pc, #40]	; (800118c <SysTick_Config+0x40>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3b01      	subs	r3, #1
 8001168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800116a:	210f      	movs	r1, #15
 800116c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001170:	f7ff ff8e 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x40>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x40>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f7ff ff29 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b086      	sub	sp, #24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	60b9      	str	r1, [r7, #8]
 80011b0:	607a      	str	r2, [r7, #4]
 80011b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b8:	f7ff ff3e 	bl	8001038 <__NVIC_GetPriorityGrouping>
 80011bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	68b9      	ldr	r1, [r7, #8]
 80011c2:	6978      	ldr	r0, [r7, #20]
 80011c4:	f7ff ff8e 	bl	80010e4 <NVIC_EncodePriority>
 80011c8:	4602      	mov	r2, r0
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	4611      	mov	r1, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff5d 	bl	8001090 <__NVIC_SetPriority>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	4603      	mov	r3, r0
 80011e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff31 	bl	8001054 <__NVIC_EnableIRQ>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ffa2 	bl	800114c <SysTick_Config>
 8001208:	4603      	mov	r3, r0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001214:	b480      	push	{r7}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001226:	2300      	movs	r3, #0
 8001228:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	e159      	b.n	80014e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	429a      	cmp	r2, r3
 800124a:	f040 8148 	bne.w	80014de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d00b      	beq.n	800126e <HAL_GPIO_Init+0x5a>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b02      	cmp	r3, #2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001262:	2b11      	cmp	r3, #17
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b12      	cmp	r3, #18
 800126c:	d130      	bne.n	80012d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012a4:	2201      	movs	r2, #1
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f003 0201 	and.w	r2, r3, #1
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0xfc>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b12      	cmp	r3, #18
 800130e:	d123      	bne.n	8001358 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	08da      	lsrs	r2, r3, #3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3208      	adds	r2, #8
 8001318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	220f      	movs	r2, #15
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	691a      	ldr	r2, [r3, #16]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	08da      	lsrs	r2, r3, #3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3208      	adds	r2, #8
 8001352:	69b9      	ldr	r1, [r7, #24]
 8001354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 80a2 	beq.w	80014de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b56      	ldr	r3, [pc, #344]	; (80014f8 <HAL_GPIO_Init+0x2e4>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <HAL_GPIO_Init+0x2e4>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b53      	ldr	r3, [pc, #332]	; (80014f8 <HAL_GPIO_Init+0x2e4>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b6:	4a51      	ldr	r2, [pc, #324]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a48      	ldr	r2, [pc, #288]	; (8001500 <HAL_GPIO_Init+0x2ec>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x202>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a47      	ldr	r2, [pc, #284]	; (8001504 <HAL_GPIO_Init+0x2f0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x1fe>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_GPIO_Init+0x2f4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x1fa>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_GPIO_Init+0x2f8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x1f6>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a44      	ldr	r2, [pc, #272]	; (8001510 <HAL_GPIO_Init+0x2fc>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x1f2>
 8001402:	2304      	movs	r3, #4
 8001404:	e008      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001406:	2307      	movs	r3, #7
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x204>
 800140a:	2303      	movs	r3, #3
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x204>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x204>
 8001416:	2300      	movs	r3, #0
 8001418:	69fa      	ldr	r2, [r7, #28]
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001428:	4934      	ldr	r1, [pc, #208]	; (80014fc <HAL_GPIO_Init+0x2e8>)
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001436:	4b37      	ldr	r3, [pc, #220]	; (8001514 <HAL_GPIO_Init+0x300>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145a:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <HAL_GPIO_Init+0x300>)
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001460:	4b2c      	ldr	r3, [pc, #176]	; (8001514 <HAL_GPIO_Init+0x300>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001484:	4a23      	ldr	r2, [pc, #140]	; (8001514 <HAL_GPIO_Init+0x300>)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_GPIO_Init+0x300>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ae:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_GPIO_Init+0x300>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_GPIO_Init+0x300>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <HAL_GPIO_Init+0x300>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3301      	adds	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f67f aea2 	bls.w	8001230 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014ec:	bf00      	nop
 80014ee:	3724      	adds	r7, #36	; 0x24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40013800 	.word	0x40013800
 8001500:	40020000 	.word	0x40020000
 8001504:	40020400 	.word	0x40020400
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00
 8001510:	40021000 	.word	0x40021000
 8001514:	40013c00 	.word	0x40013c00

08001518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e11f      	b.n	800176a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fb98 	bl	8000c74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	; 0x24
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800156a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800157a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800157c:	f002 fd16 	bl	8003fac <HAL_RCC_GetPCLK1Freq>
 8001580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a7b      	ldr	r2, [pc, #492]	; (8001774 <HAL_I2C_Init+0x25c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d807      	bhi.n	800159c <HAL_I2C_Init+0x84>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a7a      	ldr	r2, [pc, #488]	; (8001778 <HAL_I2C_Init+0x260>)
 8001590:	4293      	cmp	r3, r2
 8001592:	bf94      	ite	ls
 8001594:	2301      	movls	r3, #1
 8001596:	2300      	movhi	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	e006      	b.n	80015aa <HAL_I2C_Init+0x92>
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4a77      	ldr	r2, [pc, #476]	; (800177c <HAL_I2C_Init+0x264>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	bf94      	ite	ls
 80015a4:	2301      	movls	r3, #1
 80015a6:	2300      	movhi	r3, #0
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e0db      	b.n	800176a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4a72      	ldr	r2, [pc, #456]	; (8001780 <HAL_I2C_Init+0x268>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	0c9b      	lsrs	r3, r3, #18
 80015bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a64      	ldr	r2, [pc, #400]	; (8001774 <HAL_I2C_Init+0x25c>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d802      	bhi.n	80015ec <HAL_I2C_Init+0xd4>
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	3301      	adds	r3, #1
 80015ea:	e009      	b.n	8001600 <HAL_I2C_Init+0xe8>
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015f2:	fb02 f303 	mul.w	r3, r2, r3
 80015f6:	4a63      	ldr	r2, [pc, #396]	; (8001784 <HAL_I2C_Init+0x26c>)
 80015f8:	fba2 2303 	umull	r2, r3, r2, r3
 80015fc:	099b      	lsrs	r3, r3, #6
 80015fe:	3301      	adds	r3, #1
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	430b      	orrs	r3, r1
 8001606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4956      	ldr	r1, [pc, #344]	; (8001774 <HAL_I2C_Init+0x25c>)
 800161c:	428b      	cmp	r3, r1
 800161e:	d80d      	bhi.n	800163c <HAL_I2C_Init+0x124>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1e59      	subs	r1, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	fbb1 f3f3 	udiv	r3, r1, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b04      	cmp	r3, #4
 8001636:	bf38      	it	cc
 8001638:	2304      	movcc	r3, #4
 800163a:	e04f      	b.n	80016dc <HAL_I2C_Init+0x1c4>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d111      	bne.n	8001668 <HAL_I2C_Init+0x150>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	440b      	add	r3, r1
 8001652:	fbb0 f3f3 	udiv	r3, r0, r3
 8001656:	3301      	adds	r3, #1
 8001658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	e012      	b.n	800168e <HAL_I2C_Init+0x176>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1e58      	subs	r0, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6859      	ldr	r1, [r3, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	0099      	lsls	r1, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	fbb0 f3f3 	udiv	r3, r0, r3
 800167e:	3301      	adds	r3, #1
 8001680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf0c      	ite	eq
 8001688:	2301      	moveq	r3, #1
 800168a:	2300      	movne	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Init+0x17e>
 8001692:	2301      	movs	r3, #1
 8001694:	e022      	b.n	80016dc <HAL_I2C_Init+0x1c4>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10e      	bne.n	80016bc <HAL_I2C_Init+0x1a4>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1e58      	subs	r0, r3, #1
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6859      	ldr	r1, [r3, #4]
 80016a6:	460b      	mov	r3, r1
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	440b      	add	r3, r1
 80016ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b0:	3301      	adds	r3, #1
 80016b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ba:	e00f      	b.n	80016dc <HAL_I2C_Init+0x1c4>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e58      	subs	r0, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	440b      	add	r3, r1
 80016ca:	0099      	lsls	r1, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80016d2:	3301      	adds	r3, #1
 80016d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016dc:	6879      	ldr	r1, [r7, #4]
 80016de:	6809      	ldr	r1, [r1, #0]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800170a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6911      	ldr	r1, [r2, #16]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68d2      	ldr	r2, [r2, #12]
 8001716:	4311      	orrs	r1, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	430b      	orrs	r3, r1
 800171e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2220      	movs	r2, #32
 8001756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	000186a0 	.word	0x000186a0
 8001778:	001e847f 	.word	0x001e847f
 800177c:	003d08ff 	.word	0x003d08ff
 8001780:	431bde83 	.word	0x431bde83
 8001784:	10624dd3 	.word	0x10624dd3

08001788 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	4608      	mov	r0, r1
 8001792:	4611      	mov	r1, r2
 8001794:	461a      	mov	r2, r3
 8001796:	4603      	mov	r3, r0
 8001798:	817b      	strh	r3, [r7, #10]
 800179a:	460b      	mov	r3, r1
 800179c:	813b      	strh	r3, [r7, #8]
 800179e:	4613      	mov	r3, r2
 80017a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017a2:	f7ff fbf7 	bl	8000f94 <HAL_GetTick>
 80017a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b20      	cmp	r3, #32
 80017b2:	f040 80d9 	bne.w	8001968 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2319      	movs	r3, #25
 80017bc:	2201      	movs	r2, #1
 80017be:	496d      	ldr	r1, [pc, #436]	; (8001974 <HAL_I2C_Mem_Write+0x1ec>)
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 fc7f 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0cc      	b.n	800196a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d101      	bne.n	80017de <HAL_I2C_Mem_Write+0x56>
 80017da:	2302      	movs	r3, #2
 80017dc:	e0c5      	b.n	800196a <HAL_I2C_Mem_Write+0x1e2>
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2201      	movs	r2, #1
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d007      	beq.n	8001804 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001812:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2221      	movs	r2, #33	; 0x21
 8001818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2240      	movs	r2, #64	; 0x40
 8001820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001834:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4a4d      	ldr	r2, [pc, #308]	; (8001978 <HAL_I2C_Mem_Write+0x1f0>)
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001846:	88f8      	ldrh	r0, [r7, #6]
 8001848:	893a      	ldrh	r2, [r7, #8]
 800184a:	8979      	ldrh	r1, [r7, #10]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	4603      	mov	r3, r0
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 fab6 	bl	8001dc8 <I2C_RequestMemoryWrite>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d052      	beq.n	8001908 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e081      	b.n	800196a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 fd00 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00d      	beq.n	8001892 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	2b04      	cmp	r3, #4
 800187c:	d107      	bne.n	800188e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e06b      	b.n	800196a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	781a      	ldrb	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	3b01      	subs	r3, #1
 80018bc:	b29a      	uxth	r2, r3
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d11b      	bne.n	8001908 <HAL_I2C_Mem_Write+0x180>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d017      	beq.n	8001908 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fe:	b29b      	uxth	r3, r3
 8001900:	3b01      	subs	r3, #1
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1aa      	bne.n	8001866 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fcec 	bl	80022f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00d      	beq.n	800193c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	2b04      	cmp	r3, #4
 8001926:	d107      	bne.n	8001938 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001936:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e016      	b.n	800196a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800194a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	e000      	b.n	800196a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001968:	2302      	movs	r3, #2
  }
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	00100002 	.word	0x00100002
 8001978:	ffff0000 	.word	0xffff0000

0800197c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08c      	sub	sp, #48	; 0x30
 8001980:	af02      	add	r7, sp, #8
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	4608      	mov	r0, r1
 8001986:	4611      	mov	r1, r2
 8001988:	461a      	mov	r2, r3
 800198a:	4603      	mov	r3, r0
 800198c:	817b      	strh	r3, [r7, #10]
 800198e:	460b      	mov	r3, r1
 8001990:	813b      	strh	r3, [r7, #8]
 8001992:	4613      	mov	r3, r2
 8001994:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001996:	f7ff fafd 	bl	8000f94 <HAL_GetTick>
 800199a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	f040 8208 	bne.w	8001dba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2319      	movs	r3, #25
 80019b0:	2201      	movs	r2, #1
 80019b2:	497b      	ldr	r1, [pc, #492]	; (8001ba0 <HAL_I2C_Mem_Read+0x224>)
 80019b4:	68f8      	ldr	r0, [r7, #12]
 80019b6:	f000 fb85 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80019c0:	2302      	movs	r3, #2
 80019c2:	e1fb      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_I2C_Mem_Read+0x56>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e1f4      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d007      	beq.n	80019f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2222      	movs	r2, #34	; 0x22
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4a5b      	ldr	r2, [pc, #364]	; (8001ba4 <HAL_I2C_Mem_Read+0x228>)
 8001a38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a3a:	88f8      	ldrh	r0, [r7, #6]
 8001a3c:	893a      	ldrh	r2, [r7, #8]
 8001a3e:	8979      	ldrh	r1, [r7, #10]
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	4603      	mov	r3, r0
 8001a4a:	68f8      	ldr	r0, [r7, #12]
 8001a4c:	f000 fa52 	bl	8001ef4 <I2C_RequestMemoryRead>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1b0      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d113      	bne.n	8001a8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	623b      	str	r3, [r7, #32]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	623b      	str	r3, [r7, #32]
 8001a76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	e184      	b.n	8001d94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d11b      	bne.n	8001aca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	61fb      	str	r3, [r7, #28]
 8001ab6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	e164      	b.n	8001d94 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d11b      	bne.n	8001b0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001af0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	61bb      	str	r3, [r7, #24]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	e144      	b.n	8001d94 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001b20:	e138      	b.n	8001d94 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	f200 80f1 	bhi.w	8001d0e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d123      	bne.n	8001b7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 fc1b 	bl	8002374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e139      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b7a:	e10b      	b.n	8001d94 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d14e      	bne.n	8001c22 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4906      	ldr	r1, [pc, #24]	; (8001ba8 <HAL_I2C_Mem_Read+0x22c>)
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 fa98 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d008      	beq.n	8001bac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e10e      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
 8001b9e:	bf00      	nop
 8001ba0:	00100002 	.word	0x00100002
 8001ba4:	ffff0000 	.word	0xffff0000
 8001ba8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691a      	ldr	r2, [r3, #16]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c20:	e0b8      	b.n	8001d94 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	9300      	str	r3, [sp, #0]
 8001c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4966      	ldr	r1, [pc, #408]	; (8001dc4 <HAL_I2C_Mem_Read+0x448>)
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 fa49 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0bf      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691a      	ldr	r2, [r3, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	3b01      	subs	r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c84:	2200      	movs	r2, #0
 8001c86:	494f      	ldr	r1, [pc, #316]	; (8001dc4 <HAL_I2C_Mem_Read+0x448>)
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 fa1b 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e091      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d0c:	e042      	b.n	8001d94 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 fb2e 	bl	8002374 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e04c      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d118      	bne.n	8001d94 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f47f aec2 	bne.w	8001b22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e000      	b.n	8001dbc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001dba:	2302      	movs	r3, #2
  }
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3728      	adds	r7, #40	; 0x28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	00010004 	.word	0x00010004

08001dc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af02      	add	r7, sp, #8
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001df0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	6a3b      	ldr	r3, [r7, #32]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f960 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00d      	beq.n	8001e26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e18:	d103      	bne.n	8001e22 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e05f      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	6a3a      	ldr	r2, [r7, #32]
 8001e3a:	492d      	ldr	r1, [pc, #180]	; (8001ef0 <I2C_RequestMemoryWrite+0x128>)
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f998 	bl	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e04c      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fa02 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d107      	bne.n	8001e8a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e02b      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e8e:	88fb      	ldrh	r3, [r7, #6]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d105      	bne.n	8001ea0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e94:	893b      	ldrh	r3, [r7, #8]
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	e021      	b.n	8001ee4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ea0:	893b      	ldrh	r3, [r7, #8]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb0:	6a39      	ldr	r1, [r7, #32]
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f9dc 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d107      	bne.n	8001ed6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e005      	b.n	8001ee6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001eda:	893b      	ldrh	r3, [r7, #8]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	00010002 	.word	0x00010002

08001ef4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b088      	sub	sp, #32
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	4608      	mov	r0, r1
 8001efe:	4611      	mov	r1, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	4603      	mov	r3, r0
 8001f04:	817b      	strh	r3, [r7, #10]
 8001f06:	460b      	mov	r3, r1
 8001f08:	813b      	strh	r3, [r7, #8]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f8c2 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00d      	beq.n	8001f62 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f54:	d103      	bne.n	8001f5e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e0aa      	b.n	80020b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f62:	897b      	ldrh	r3, [r7, #10]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	6a3a      	ldr	r2, [r7, #32]
 8001f76:	4952      	ldr	r1, [pc, #328]	; (80020c0 <I2C_RequestMemoryRead+0x1cc>)
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 f8fa 	bl	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e097      	b.n	80020b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa0:	6a39      	ldr	r1, [r7, #32]
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f964 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00d      	beq.n	8001fca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d107      	bne.n	8001fc6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e076      	b.n	80020b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fd0:	893b      	ldrh	r3, [r7, #8]
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	611a      	str	r2, [r3, #16]
 8001fda:	e021      	b.n	8002020 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001fdc:	893b      	ldrh	r3, [r7, #8]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fec:	6a39      	ldr	r1, [r7, #32]
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 f93e 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00d      	beq.n	8002016 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d107      	bne.n	8002012 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002010:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e050      	b.n	80020b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002016:	893b      	ldrh	r3, [r7, #8]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002022:	6a39      	ldr	r1, [r7, #32]
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f000 f923 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00d      	beq.n	800204c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	2b04      	cmp	r3, #4
 8002036:	d107      	bne.n	8002048 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002046:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e035      	b.n	80020b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800205a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	2200      	movs	r2, #0
 8002064:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f82b 	bl	80020c4 <I2C_WaitOnFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002082:	d103      	bne.n	800208c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e013      	b.n	80020b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002090:	897b      	ldrh	r3, [r7, #10]
 8002092:	b2db      	uxtb	r3, r3
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	6a3a      	ldr	r2, [r7, #32]
 80020a4:	4906      	ldr	r1, [pc, #24]	; (80020c0 <I2C_RequestMemoryRead+0x1cc>)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f863 	bl	8002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e000      	b.n	80020b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	00010002 	.word	0x00010002

080020c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d4:	e025      	b.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020dc:	d021      	beq.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020de:	f7fe ff59 	bl	8000f94 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d302      	bcc.n	80020f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d116      	bne.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2220      	movs	r2, #32
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f043 0220 	orr.w	r2, r3, #32
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e023      	b.n	800216a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b01      	cmp	r3, #1
 800212a:	d10d      	bne.n	8002148 <I2C_WaitOnFlagUntilTimeout+0x84>
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	43da      	mvns	r2, r3
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4013      	ands	r3, r2
 8002138:	b29b      	uxth	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	e00c      	b.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf0c      	ite	eq
 800215a:	2301      	moveq	r3, #1
 800215c:	2300      	movne	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	429a      	cmp	r2, r3
 8002166:	d0b6      	beq.n	80020d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002180:	e051      	b.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	d123      	bne.n	80021da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2220      	movs	r2, #32
 80021b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f043 0204 	orr.w	r2, r3, #4
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e046      	b.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e0:	d021      	beq.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021e2:	f7fe fed7 	bl	8000f94 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d302      	bcc.n	80021f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d116      	bne.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f043 0220 	orr.w	r2, r3, #32
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e020      	b.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	0c1b      	lsrs	r3, r3, #16
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d10c      	bne.n	800224a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	43da      	mvns	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	e00b      	b.n	8002262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	43da      	mvns	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	4013      	ands	r3, r2
 8002256:	b29b      	uxth	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf14      	ite	ne
 800225c:	2301      	movne	r3, #1
 800225e:	2300      	moveq	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d18d      	bne.n	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800227c:	e02d      	b.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f8ce 	bl	8002420 <I2C_IsAcknowledgeFailed>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e02d      	b.n	80022ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002294:	d021      	beq.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002296:	f7fe fe7d 	bl	8000f94 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d302      	bcc.n	80022ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d116      	bne.n	80022da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d1ca      	bne.n	800227e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022fe:	e02d      	b.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f88d 	bl	8002420 <I2C_IsAcknowledgeFailed>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e02d      	b.n	800236c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002316:	d021      	beq.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002318:	f7fe fe3c 	bl	8000f94 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	429a      	cmp	r2, r3
 8002326:	d302      	bcc.n	800232e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f043 0220 	orr.w	r2, r3, #32
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e007      	b.n	800236c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d1ca      	bne.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002380:	e042      	b.n	8002408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b10      	cmp	r3, #16
 800238e:	d119      	bne.n	80023c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0210 	mvn.w	r2, #16
 8002398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e029      	b.n	8002418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c4:	f7fe fde6 	bl	8000f94 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d302      	bcc.n	80023da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e007      	b.n	8002418 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002412:	2b40      	cmp	r3, #64	; 0x40
 8002414:	d1b5      	bne.n	8002382 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002436:	d11b      	bne.n	8002470 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002440:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2220      	movs	r2, #32
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f043 0204 	orr.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e000      	b.n	8002472 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800247e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002480:	b08f      	sub	sp, #60	; 0x3c
 8002482:	af0a      	add	r7, sp, #40	; 0x28
 8002484:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e10f      	b.n	80026b0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f005 f93a 	bl	8007724 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2203      	movs	r2, #3
 80024b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 f8ff 	bl	80046d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	603b      	str	r3, [r7, #0]
 80024da:	687e      	ldr	r6, [r7, #4]
 80024dc:	466d      	mov	r5, sp
 80024de:	f106 0410 	add.w	r4, r6, #16
 80024e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80024f2:	1d33      	adds	r3, r6, #4
 80024f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	f001 ffd6 	bl	80044a8 <USB_CoreInit>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d005      	beq.n	800250e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2202      	movs	r2, #2
 8002506:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e0d0      	b.n	80026b0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f002 f8ed 	bl	80046f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e04a      	b.n	80025b6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002520:	7bfa      	ldrb	r2, [r7, #15]
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	1a9b      	subs	r3, r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	333d      	adds	r3, #61	; 0x3d
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	333c      	adds	r3, #60	; 0x3c
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	b298      	uxth	r0, r3
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3342      	adds	r3, #66	; 0x42
 800255c:	4602      	mov	r2, r0
 800255e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	333f      	adds	r3, #63	; 0x3f
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	3344      	adds	r3, #68	; 0x44
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002588:	7bfa      	ldrb	r2, [r7, #15]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3348      	adds	r3, #72	; 0x48
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	3350      	adds	r3, #80	; 0x50
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3301      	adds	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3af      	bcc.n	8002520 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e044      	b.n	8002650 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025c6:	7bfa      	ldrb	r2, [r7, #15]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80025ee:	7bfa      	ldrb	r2, [r7, #15]
 80025f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	3301      	adds	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	429a      	cmp	r2, r3
 8002658:	d3b5      	bcc.n	80025c6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	687e      	ldr	r6, [r7, #4]
 8002662:	466d      	mov	r5, sp
 8002664:	f106 0410 	add.w	r4, r6, #16
 8002668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800266a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800266c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800266e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002670:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002674:	e885 0003 	stmia.w	r5, {r0, r1}
 8002678:	1d33      	adds	r3, r6, #4
 800267a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800267c:	6838      	ldr	r0, [r7, #0]
 800267e:	f002 f863 	bl	8004748 <USB_DevInit>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d005      	beq.n	8002694 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e00d      	b.n	80026b0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 f8ab 	bl	8005804 <USB_DevDisconnect>

  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <HAL_PCD_Start+0x1c>
 80026d0:	2302      	movs	r3, #2
 80026d2:	e020      	b.n	8002716 <HAL_PCD_Start+0x5e>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d109      	bne.n	80026f8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d005      	beq.n	80026f8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f001 ffd7 	bl	80046b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f003 f85b 	bl	80057c2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800271e:	b590      	push	{r4, r7, lr}
 8002720:	b08d      	sub	sp, #52	; 0x34
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f003 f919 	bl	800596c <USB_GetMode>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	f040 839d 	bne.w	8002e7c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f003 f87d 	bl	8005846 <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 8393 	beq.w	8002e7a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 f874 	bl	8005846 <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d107      	bne.n	8002778 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f002 0202 	and.w	r2, r2, #2
 8002776:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f003 f862 	bl	8005846 <USB_ReadInterrupts>
 8002782:	4603      	mov	r3, r0
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b10      	cmp	r3, #16
 800278a:	d161      	bne.n	8002850 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0210 	bic.w	r2, r2, #16
 800279a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f003 020f 	and.w	r2, r3, #15
 80027a8:	4613      	mov	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	3304      	adds	r3, #4
 80027ba:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	0c5b      	lsrs	r3, r3, #17
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d124      	bne.n	8002812 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d035      	beq.n	8002840 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	091b      	lsrs	r3, r3, #4
 80027dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	6a38      	ldr	r0, [r7, #32]
 80027e8:	f002 fec8 	bl	800557c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f8:	441a      	add	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800280a:	441a      	add	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	619a      	str	r2, [r3, #24]
 8002810:	e016      	b.n	8002840 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	0c5b      	lsrs	r3, r3, #17
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	2b06      	cmp	r3, #6
 800281c:	d110      	bne.n	8002840 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002824:	2208      	movs	r2, #8
 8002826:	4619      	mov	r1, r3
 8002828:	6a38      	ldr	r0, [r7, #32]
 800282a:	f002 fea7 	bl	800557c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800283a:	441a      	add	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0210 	orr.w	r2, r2, #16
 800284e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4618      	mov	r0, r3
 8002856:	f002 fff6 	bl	8005846 <USB_ReadInterrupts>
 800285a:	4603      	mov	r3, r0
 800285c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002860:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002864:	d16e      	bne.n	8002944 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f002 fffc 	bl	800586c <USB_ReadDevAllOutEpInterrupt>
 8002874:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002876:	e062      	b.n	800293e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d057      	beq.n	8002932 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f003 f821 	bl	80058d4 <USB_ReadDevOutEPInterrupt>
 8002892:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028aa:	461a      	mov	r2, r3
 80028ac:	2301      	movs	r3, #1
 80028ae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fdb0 	bl	8003418 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	015a      	lsls	r2, r3, #5
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4413      	add	r3, r2
 80028ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ce:	461a      	mov	r2, r3
 80028d0:	2308      	movs	r3, #8
 80028d2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 feaa 	bl	8003630 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028f2:	461a      	mov	r2, r3
 80028f4:	2310      	movs	r3, #16
 80028f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	4413      	add	r3, r2
 800290a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800290e:	461a      	mov	r2, r3
 8002910:	2320      	movs	r3, #32
 8002912:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	015a      	lsls	r2, r3, #5
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800292a:	461a      	mov	r2, r3
 800292c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002930:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	3301      	adds	r3, #1
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800293e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d199      	bne.n	8002878 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f002 ff7c 	bl	8005846 <USB_ReadInterrupts>
 800294e:	4603      	mov	r3, r0
 8002950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002954:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002958:	f040 80c0 	bne.w	8002adc <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 ff9d 	bl	80058a0 <USB_ReadDevAllInEpInterrupt>
 8002966:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800296c:	e0b2      	b.n	8002ad4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a7 	beq.w	8002ac8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f002 ffc3 	bl	8005910 <USB_ReadDevInEPInterrupt>
 800298a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	2b00      	cmp	r3, #0
 8002994:	d057      	beq.n	8002a46 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	2201      	movs	r2, #1
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	43db      	mvns	r3, r3
 80029b0:	69f9      	ldr	r1, [r7, #28]
 80029b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029b6:	4013      	ands	r3, r2
 80029b8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c6:	461a      	mov	r2, r3
 80029c8:	2301      	movs	r3, #1
 80029ca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d132      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	3348      	adds	r3, #72	; 0x48
 80029e4:	6819      	ldr	r1, [r3, #0]
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4403      	add	r3, r0
 80029f4:	3344      	adds	r3, #68	; 0x44
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4419      	add	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	1a9b      	subs	r3, r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4403      	add	r3, r0
 8002a08:	3348      	adds	r3, #72	; 0x48
 8002a0a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d113      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x31c>
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a16:	4613      	mov	r3, r2
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	1a9b      	subs	r3, r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3350      	adds	r3, #80	; 0x50
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d108      	bne.n	8002a3a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6818      	ldr	r0, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a32:	461a      	mov	r2, r3
 8002a34:	2101      	movs	r1, #1
 8002a36:	f002 ffcb 	bl	80059d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f004 fef0 	bl	8007826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	2308      	movs	r3, #8
 8002a60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2310      	movs	r3, #16
 8002a7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a94:	461a      	mov	r2, r3
 8002a96:	2340      	movs	r3, #64	; 0x40
 8002a98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fc1b 	bl	80032fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f47f af49 	bne.w	800296e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f002 feb0 	bl	8005846 <USB_ReadInterrupts>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002af0:	d122      	bne.n	8002b38 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	69fa      	ldr	r2, [r7, #28]
 8002afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d108      	bne.n	8002b22 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 fe26 	bl	800376c <HAL_PCDEx_LPM_Callback>
 8002b20:	e002      	b.n	8002b28 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f004 feec 	bl	8007900 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 fe82 	bl	8005846 <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b4c:	d112      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d102      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f004 fea8 	bl	80078b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b72:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f002 fe64 	bl	8005846 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b88:	f040 80c7 	bne.w	8002d1a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b9a:	f023 0301 	bic.w	r3, r3, #1
 8002b9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f001 ff32 	bl	8004a10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bb0:	e056      	b.n	8002c60 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bc4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bd6:	0151      	lsls	r1, r2, #5
 8002bd8:	69fa      	ldr	r2, [r7, #28]
 8002bda:	440a      	add	r2, r1
 8002bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002be0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002be4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bf6:	0151      	lsls	r1, r2, #5
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	440a      	add	r2, r1
 8002bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	015a      	lsls	r2, r3, #5
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c12:	461a      	mov	r2, r3
 8002c14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	015a      	lsls	r2, r3, #5
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	4413      	add	r3, r2
 8002c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c2a:	0151      	lsls	r1, r2, #5
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	440a      	add	r2, r1
 8002c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4a:	0151      	lsls	r1, r2, #5
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	440a      	add	r2, r1
 8002c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3a3      	bcc.n	8002bb2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c96:	f043 030b 	orr.w	r3, r3, #11
 8002c9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cac:	f043 030b 	orr.w	r3, r3, #11
 8002cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cb2:	e015      	b.n	8002ce0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cc6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cda:	f043 030b 	orr.w	r3, r3, #11
 8002cde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002cf2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d04:	461a      	mov	r2, r3
 8002d06:	f002 fe63 	bl	80059d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 fd91 	bl	8005846 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2e:	d124      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 fe27 	bl	8005988 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f001 fec7 	bl	8004ad2 <USB_GetDevSpeed>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681c      	ldr	r4, [r3, #0]
 8002d50:	f001 f920 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8002d54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4620      	mov	r0, r4
 8002d60:	f001 fc04 	bl	800456c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f004 fd86 	bl	8007876 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 fd61 	bl	8005846 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d10a      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f004 fd63 	bl	800785a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f002 0208 	and.w	r2, r2, #8
 8002da2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f002 fd4c 	bl	8005846 <USB_ReadInterrupts>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db8:	d10f      	bne.n	8002dda <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f004 fdbb 	bl	8007940 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f002 fd31 	bl	8005846 <USB_ReadInterrupts>
 8002de4:	4603      	mov	r3, r0
 8002de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dee:	d10f      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f004 fd8e 	bl	800791c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f002 fd16 	bl	8005846 <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e24:	d10a      	bne.n	8002e3c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f004 fd9c 	bl	8007964 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 fd00 	bl	8005846 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d115      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f004 fd8c 	bl	8007980 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]
 8002e78:	e000      	b.n	8002e7c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002e7a:	bf00      	nop
    }
  }
}
 8002e7c:	3734      	adds	r7, #52	; 0x34
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}

08002e82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b082      	sub	sp, #8
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_PCD_SetAddress+0x1a>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e013      	b.n	8002ec4 <HAL_PCD_SetAddress+0x42>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 fc5e 	bl	8005776 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	70fb      	strb	r3, [r7, #3]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	803b      	strh	r3, [r7, #0]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	da0f      	bge.n	8002f12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	3338      	adds	r3, #56	; 0x38
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	3304      	adds	r3, #4
 8002f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	705a      	strb	r2, [r3, #1]
 8002f10:	e00f      	b.n	8002f32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 020f 	and.w	r2, r3, #15
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 030f 	and.w	r3, r3, #15
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f3e:	883a      	ldrh	r2, [r7, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	78ba      	ldrb	r2, [r7, #2]
 8002f48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f5c:	78bb      	ldrb	r3, [r7, #2]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d102      	bne.n	8002f68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_EP_Open+0xaa>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e00e      	b.n	8002f94 <HAL_PCD_EP_Open+0xc8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f001 fdc9 	bl	8004b1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f92:	7afb      	ldrb	r3, [r7, #11]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	da0f      	bge.n	8002fd0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 020f 	and.w	r2, r3, #15
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	3338      	adds	r3, #56	; 0x38
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	705a      	strb	r2, [r3, #1]
 8002fce:	e00f      	b.n	8002ff0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 020f 	and.w	r2, r3, #15
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	1a9b      	subs	r3, r3, r2
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_PCD_EP_Close+0x6e>
 8003006:	2302      	movs	r3, #2
 8003008:	e00e      	b.n	8003028 <HAL_PCD_EP_Close+0x8c>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	4618      	mov	r0, r3
 800301a:	f001 fe07 	bl	8004c2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003040:	7afb      	ldrb	r3, [r7, #11]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2200      	movs	r2, #0
 8003070:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	b2da      	uxtb	r2, r3
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d102      	bne.n	800308c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800308c:	7afb      	ldrb	r3, [r7, #11]
 800308e:	f003 030f 	and.w	r3, r3, #15
 8003092:	2b00      	cmp	r3, #0
 8003094:	d109      	bne.n	80030aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	461a      	mov	r2, r3
 80030a2:	6979      	ldr	r1, [r7, #20]
 80030a4:	f002 f8e2 	bl	800526c <USB_EP0StartXfer>
 80030a8:	e008      	b.n	80030bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	6979      	ldr	r1, [r7, #20]
 80030b8:	f001 fe94 	bl	8004de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	460b      	mov	r3, r1
 80030d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030e8:	681b      	ldr	r3, [r3, #0]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
 8003102:	460b      	mov	r3, r1
 8003104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003106:	7afb      	ldrb	r3, [r7, #11]
 8003108:	f003 020f 	and.w	r2, r3, #15
 800310c:	4613      	mov	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	3338      	adds	r3, #56	; 0x38
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	3304      	adds	r3, #4
 800311c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2201      	movs	r2, #1
 8003134:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	b2da      	uxtb	r2, r3
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003150:	7afb      	ldrb	r3, [r7, #11]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	2b00      	cmp	r3, #0
 8003158:	d109      	bne.n	800316e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	6979      	ldr	r1, [r7, #20]
 8003168:	f002 f880 	bl	800526c <USB_EP0StartXfer>
 800316c:	e008      	b.n	8003180 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6979      	ldr	r1, [r7, #20]
 800317c:	f001 fe32 	bl	8004de4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3718      	adds	r7, #24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d901      	bls.n	80031a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e050      	b.n	800324a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	da0f      	bge.n	80031d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	f003 020f 	and.w	r2, r3, #15
 80031b6:	4613      	mov	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	3338      	adds	r3, #56	; 0x38
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4413      	add	r3, r2
 80031c4:	3304      	adds	r3, #4
 80031c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	705a      	strb	r2, [r3, #1]
 80031ce:	e00d      	b.n	80031ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	3304      	adds	r3, #4
 80031e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_PCD_EP_SetStall+0x82>
 8003208:	2302      	movs	r3, #2
 800320a:	e01e      	b.n	800324a <HAL_PCD_EP_SetStall+0xc0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68f9      	ldr	r1, [r7, #12]
 800321a:	4618      	mov	r0, r3
 800321c:	f002 f9d7 	bl	80055ce <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	b2d9      	uxtb	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800323a:	461a      	mov	r2, r3
 800323c:	f002 fbc8 	bl	80059d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	d901      	bls.n	8003270 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e042      	b.n	80032f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da0f      	bge.n	8003298 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3338      	adds	r3, #56	; 0x38
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	705a      	strb	r2, [r3, #1]
 8003296:	e00f      	b.n	80032b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	f003 020f 	and.w	r2, r3, #15
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	3304      	adds	r3, #4
 80032b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032be:	78fb      	ldrb	r3, [r7, #3]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_PCD_EP_ClrStall+0x86>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e00e      	b.n	80032f6 <HAL_PCD_EP_ClrStall+0xa4>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68f9      	ldr	r1, [r7, #12]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 f9df 	bl	80056aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b08a      	sub	sp, #40	; 0x28
 8003302:	af02      	add	r7, sp, #8
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	3338      	adds	r3, #56	; 0x38
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	4413      	add	r3, r2
 8003322:	3304      	adds	r3, #4
 8003324:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	429a      	cmp	r2, r3
 8003330:	d901      	bls.n	8003336 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e06c      	b.n	8003410 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	429a      	cmp	r2, r3
 800334a:	d902      	bls.n	8003352 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3303      	adds	r3, #3
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800335a:	e02b      	b.n	80033b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	429a      	cmp	r2, r3
 8003370:	d902      	bls.n	8003378 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	3303      	adds	r3, #3
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	68d9      	ldr	r1, [r3, #12]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003390:	b2db      	uxtb	r3, r3
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4603      	mov	r3, r0
 8003396:	6978      	ldr	r0, [r7, #20]
 8003398:	f002 f8bb 	bl	8005512 <USB_WritePacket>

    ep->xfer_buff  += len;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	441a      	add	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	699a      	ldr	r2, [r3, #24]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	441a      	add	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d809      	bhi.n	80033de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d203      	bcs.n	80033de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1be      	bne.n	800335c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d811      	bhi.n	800340e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f003 030f 	and.w	r3, r3, #15
 80033f0:	2201      	movs	r2, #1
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	43db      	mvns	r3, r3
 8003404:	6939      	ldr	r1, [r7, #16]
 8003406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800340a:	4013      	ands	r3, r2
 800340c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	333c      	adds	r3, #60	; 0x3c
 8003430:	3304      	adds	r3, #4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	f040 80a0 	bne.w	8003590 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4a72      	ldr	r2, [pc, #456]	; (8003628 <PCD_EP_OutXfrComplete_int+0x210>)
 800345e:	4293      	cmp	r3, r2
 8003460:	f240 80dd 	bls.w	800361e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80d7 	beq.w	800361e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347c:	461a      	mov	r2, r3
 800347e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003482:	6093      	str	r3, [r2, #8]
 8003484:	e0cb      	b.n	800361e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	f003 0320 	and.w	r3, r3, #32
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800349c:	461a      	mov	r2, r3
 800349e:	2320      	movs	r3, #32
 80034a0:	6093      	str	r3, [r2, #8]
 80034a2:	e0bc      	b.n	800361e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f040 80b7 	bne.w	800361e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a5d      	ldr	r2, [pc, #372]	; (8003628 <PCD_EP_OutXfrComplete_int+0x210>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d90f      	bls.n	80034d8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ce:	461a      	mov	r2, r3
 80034d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034d4:	6093      	str	r3, [r2, #8]
 80034d6:	e0a2      	b.n	800361e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034ea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	0159      	lsls	r1, r3, #5
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034fe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4403      	add	r3, r0
 800350e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003512:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4403      	add	r3, r0
 8003536:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4419      	add	r1, r3
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	1a9b      	subs	r3, r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4403      	add	r3, r0
 800354c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003550:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d114      	bne.n	8003582 <PCD_EP_OutXfrComplete_int+0x16a>
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	1a9b      	subs	r3, r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d108      	bne.n	8003582 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800357a:	461a      	mov	r2, r3
 800357c:	2101      	movs	r1, #1
 800357e:	f002 fa27 	bl	80059d0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	4619      	mov	r1, r3
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f004 f931 	bl	80077f0 <HAL_PCD_DataOutStageCallback>
 800358e:	e046      	b.n	800361e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4a26      	ldr	r2, [pc, #152]	; (800362c <PCD_EP_OutXfrComplete_int+0x214>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d124      	bne.n	80035e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ae:	461a      	mov	r2, r3
 80035b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b4:	6093      	str	r3, [r2, #8]
 80035b6:	e032      	b.n	800361e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ce:	461a      	mov	r2, r3
 80035d0:	2320      	movs	r3, #32
 80035d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f004 f908 	bl	80077f0 <HAL_PCD_DataOutStageCallback>
 80035e0:	e01d      	b.n	800361e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d114      	bne.n	8003612 <PCD_EP_OutXfrComplete_int+0x1fa>
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d108      	bne.n	8003612 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800360a:	461a      	mov	r2, r3
 800360c:	2100      	movs	r1, #0
 800360e:	f002 f9df 	bl	80059d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f004 f8e9 	bl	80077f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	4f54300a 	.word	0x4f54300a
 800362c:	4f54310a 	.word	0x4f54310a

08003630 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	333c      	adds	r3, #60	; 0x3c
 8003648:	3304      	adds	r3, #4
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4a15      	ldr	r2, [pc, #84]	; (80036b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d90e      	bls.n	8003684 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367c:	461a      	mov	r2, r3
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f004 f8a1 	bl	80077cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d90c      	bls.n	80036ac <PCD_EP_OutSetupPacket_int+0x7c>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d108      	bne.n	80036ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036a4:	461a      	mov	r2, r3
 80036a6:	2101      	movs	r1, #1
 80036a8:	f002 f992 	bl	80059d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	4f54300a 	.word	0x4f54300a

080036bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
 80036c8:	4613      	mov	r3, r2
 80036ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036da:	883b      	ldrh	r3, [r7, #0]
 80036dc:	0419      	lsls	r1, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
 80036e8:	e028      	b.n	800373c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	0c1b      	lsrs	r3, r3, #16
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4413      	add	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	73fb      	strb	r3, [r7, #15]
 80036fc:	e00d      	b.n	800371a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	3340      	adds	r3, #64	; 0x40
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	4413      	add	r3, r2
 8003712:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	3301      	adds	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	7bfa      	ldrb	r2, [r7, #15]
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	3b01      	subs	r3, #1
 8003720:	429a      	cmp	r2, r3
 8003722:	d3ec      	bcc.n	80036fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003724:	883b      	ldrh	r3, [r7, #0]
 8003726:	0418      	lsls	r0, r3, #16
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6819      	ldr	r1, [r3, #0]
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	3b01      	subs	r3, #1
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4302      	orrs	r2, r0
 8003734:	3340      	adds	r3, #64	; 0x40
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800374a:	b480      	push	{r7}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e25b      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d075      	beq.n	800388e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037a2:	4ba3      	ldr	r3, [pc, #652]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d00c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ae:	4ba0      	ldr	r3, [pc, #640]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d112      	bne.n	80037e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ba:	4b9d      	ldr	r3, [pc, #628]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037c6:	d10b      	bne.n	80037e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	4b99      	ldr	r3, [pc, #612]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d05b      	beq.n	800388c <HAL_RCC_OscConfig+0x108>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d157      	bne.n	800388c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e236      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d106      	bne.n	80037f8 <HAL_RCC_OscConfig+0x74>
 80037ea:	4b91      	ldr	r3, [pc, #580]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a90      	ldr	r2, [pc, #576]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e01d      	b.n	8003834 <HAL_RCC_OscConfig+0xb0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x98>
 8003802:	4b8b      	ldr	r3, [pc, #556]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a8a      	ldr	r2, [pc, #552]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	4b88      	ldr	r3, [pc, #544]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a87      	ldr	r2, [pc, #540]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0xb0>
 800381c:	4b84      	ldr	r3, [pc, #528]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a83      	ldr	r2, [pc, #524]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b81      	ldr	r3, [pc, #516]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a80      	ldr	r2, [pc, #512]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 800382e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d013      	beq.n	8003864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7fd fbaa 	bl	8000f94 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003844:	f7fd fba6 	bl	8000f94 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	; 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e1fb      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003856:	4b76      	ldr	r3, [pc, #472]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0xc0>
 8003862:	e014      	b.n	800388e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fd fb96 	bl	8000f94 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386c:	f7fd fb92 	bl	8000f94 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	; 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e1e7      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387e:	4b6c      	ldr	r3, [pc, #432]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0xe8>
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d063      	beq.n	8003962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a6:	4b62      	ldr	r3, [pc, #392]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d11c      	bne.n	80038ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b2:	4b5f      	ldr	r3, [pc, #380]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d116      	bne.n	80038ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038be:	4b5c      	ldr	r3, [pc, #368]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_RCC_OscConfig+0x152>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e1bb      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	4b56      	ldr	r3, [pc, #344]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4952      	ldr	r1, [pc, #328]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ea:	e03a      	b.n	8003962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f4:	4b4f      	ldr	r3, [pc, #316]	; (8003a34 <HAL_RCC_OscConfig+0x2b0>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fd fb4b 	bl	8000f94 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003902:	f7fd fb47 	bl	8000f94 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e19c      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003914:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4940      	ldr	r1, [pc, #256]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]
 8003934:	e015      	b.n	8003962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCC_OscConfig+0x2b0>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fb2a 	bl	8000f94 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003944:	f7fd fb26 	bl	8000f94 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e17b      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003956:	4b36      	ldr	r3, [pc, #216]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d030      	beq.n	80039d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003976:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <HAL_RCC_OscConfig+0x2b4>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fd fb0a 	bl	8000f94 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003984:	f7fd fb06 	bl	8000f94 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e15b      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003996:	4b26      	ldr	r3, [pc, #152]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x200>
 80039a2:	e015      	b.n	80039d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <HAL_RCC_OscConfig+0x2b4>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039aa:	f7fd faf3 	bl	8000f94 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b2:	f7fd faef 	bl	8000f94 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e144      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80039c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f0      	bne.n	80039b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80a0 	beq.w	8003b1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039de:	2300      	movs	r3, #0
 80039e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e2:	4b13      	ldr	r3, [pc, #76]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fc:	6413      	str	r3, [r2, #64]	; 0x40
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	60bb      	str	r3, [r7, #8]
 8003a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_RCC_OscConfig+0x2b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d121      	bne.n	8003a5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_RCC_OscConfig+0x2b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a07      	ldr	r2, [pc, #28]	; (8003a3c <HAL_RCC_OscConfig+0x2b8>)
 8003a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a26:	f7fd fab5 	bl	8000f94 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	e011      	b.n	8003a52 <HAL_RCC_OscConfig+0x2ce>
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800
 8003a34:	42470000 	.word	0x42470000
 8003a38:	42470e80 	.word	0x42470e80
 8003a3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fd faa8 	bl	8000f94 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e0fd      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	4b81      	ldr	r3, [pc, #516]	; (8003c58 <HAL_RCC_OscConfig+0x4d4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d106      	bne.n	8003a74 <HAL_RCC_OscConfig+0x2f0>
 8003a66:	4b7d      	ldr	r3, [pc, #500]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	4a7c      	ldr	r2, [pc, #496]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003a6c:	f043 0301 	orr.w	r3, r3, #1
 8003a70:	6713      	str	r3, [r2, #112]	; 0x70
 8003a72:	e01c      	b.n	8003aae <HAL_RCC_OscConfig+0x32a>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b05      	cmp	r3, #5
 8003a7a:	d10c      	bne.n	8003a96 <HAL_RCC_OscConfig+0x312>
 8003a7c:	4b77      	ldr	r3, [pc, #476]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	4a76      	ldr	r2, [pc, #472]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003a82:	f043 0304 	orr.w	r3, r3, #4
 8003a86:	6713      	str	r3, [r2, #112]	; 0x70
 8003a88:	4b74      	ldr	r3, [pc, #464]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a73      	ldr	r2, [pc, #460]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
 8003a94:	e00b      	b.n	8003aae <HAL_RCC_OscConfig+0x32a>
 8003a96:	4b71      	ldr	r3, [pc, #452]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	4a70      	ldr	r2, [pc, #448]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa2:	4b6e      	ldr	r3, [pc, #440]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	4a6d      	ldr	r2, [pc, #436]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d015      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fa6d 	bl	8000f94 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003abc:	e00a      	b.n	8003ad4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003abe:	f7fd fa69 	bl	8000f94 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e0bc      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad4:	4b61      	ldr	r3, [pc, #388]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d0ee      	beq.n	8003abe <HAL_RCC_OscConfig+0x33a>
 8003ae0:	e014      	b.n	8003b0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd fa57 	bl	8000f94 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fd fa53 	bl	8000f94 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d901      	bls.n	8003b00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e0a6      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b00:	4b56      	ldr	r3, [pc, #344]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1ee      	bne.n	8003aea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b12:	4b52      	ldr	r3, [pc, #328]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	4a51      	ldr	r2, [pc, #324]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 8092 	beq.w	8003c4c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b28:	4b4c      	ldr	r3, [pc, #304]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 030c 	and.w	r3, r3, #12
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d05c      	beq.n	8003bee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d141      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3c:	4b48      	ldr	r3, [pc, #288]	; (8003c60 <HAL_RCC_OscConfig+0x4dc>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b42:	f7fd fa27 	bl	8000f94 <HAL_GetTick>
 8003b46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b4a:	f7fd fa23 	bl	8000f94 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e078      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5c:	4b3f      	ldr	r3, [pc, #252]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f0      	bne.n	8003b4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	69da      	ldr	r2, [r3, #28]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	431a      	orrs	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	019b      	lsls	r3, r3, #6
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	3b01      	subs	r3, #1
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	061b      	lsls	r3, r3, #24
 8003b8c:	4933      	ldr	r1, [pc, #204]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b92:	4b33      	ldr	r3, [pc, #204]	; (8003c60 <HAL_RCC_OscConfig+0x4dc>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fd f9fc 	bl	8000f94 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fd f9f8 	bl	8000f94 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e04d      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f0      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x41c>
 8003bbe:	e045      	b.n	8003c4c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_RCC_OscConfig+0x4dc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7fd f9e5 	bl	8000f94 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bce:	f7fd f9e1 	bl	8000f94 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e036      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be0:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x44a>
 8003bec:	e02e      	b.n	8003c4c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e029      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <HAL_RCC_OscConfig+0x4d8>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d11c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d115      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c22:	4013      	ands	r3, r2
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10d      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d106      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40007000 	.word	0x40007000
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	42470060 	.word	0x42470060

08003c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e0cc      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c78:	4b68      	ldr	r3, [pc, #416]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d90c      	bls.n	8003ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c86:	4b65      	ldr	r3, [pc, #404]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c8e:	4b63      	ldr	r3, [pc, #396]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d001      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e0b8      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cb8:	4b59      	ldr	r3, [pc, #356]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd0:	4b53      	ldr	r3, [pc, #332]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4a52      	ldr	r2, [pc, #328]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cdc:	4b50      	ldr	r3, [pc, #320]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	494d      	ldr	r1, [pc, #308]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d044      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d107      	bne.n	8003d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b47      	ldr	r3, [pc, #284]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d119      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e07f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d003      	beq.n	8003d22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d107      	bne.n	8003d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d22:	4b3f      	ldr	r3, [pc, #252]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e06f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d32:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e067      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d42:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f023 0203 	bic.w	r2, r3, #3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4934      	ldr	r1, [pc, #208]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d54:	f7fd f91e 	bl	8000f94 <HAL_GetTick>
 8003d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d5a:	e00a      	b.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5c:	f7fd f91a 	bl	8000f94 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e04f      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d72:	4b2b      	ldr	r3, [pc, #172]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 020c 	and.w	r2, r3, #12
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d1eb      	bne.n	8003d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d84:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d20c      	bcs.n	8003dac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	b2d2      	uxtb	r2, r2
 8003d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d001      	beq.n	8003dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e032      	b.n	8003e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d008      	beq.n	8003dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003db8:	4b19      	ldr	r3, [pc, #100]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4916      	ldr	r1, [pc, #88]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0308 	and.w	r3, r3, #8
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d009      	beq.n	8003dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	490e      	ldr	r1, [pc, #56]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dea:	f000 f821 	bl	8003e30 <HAL_RCC_GetSysClockFreq>
 8003dee:	4601      	mov	r1, r0
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	091b      	lsrs	r3, r3, #4
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <HAL_RCC_ClockConfig+0x1c0>)
 8003dfc:	5cd3      	ldrb	r3, [r2, r3]
 8003dfe:	fa21 f303 	lsr.w	r3, r1, r3
 8003e02:	4a09      	ldr	r2, [pc, #36]	; (8003e28 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e06:	4b09      	ldr	r3, [pc, #36]	; (8003e2c <HAL_RCC_ClockConfig+0x1c8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd f87e 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023c00 	.word	0x40023c00
 8003e20:	40023800 	.word	0x40023800
 8003e24:	0800dfb4 	.word	0x0800dfb4
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	20000004 	.word	0x20000004

08003e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	607b      	str	r3, [r7, #4]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	2300      	movs	r3, #0
 8003e40:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e46:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d007      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x32>
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d008      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0x38>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 808d 	bne.w	8003f76 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e5c:	4b4b      	ldr	r3, [pc, #300]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e5e:	60bb      	str	r3, [r7, #8]
       break;
 8003e60:	e08c      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e62:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e64:	60bb      	str	r3, [r7, #8]
      break;
 8003e66:	e089      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e68:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e70:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e72:	4b45      	ldr	r3, [pc, #276]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d023      	beq.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e7e:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	099b      	lsrs	r3, r3, #6
 8003e84:	f04f 0400 	mov.w	r4, #0
 8003e88:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	ea03 0501 	and.w	r5, r3, r1
 8003e94:	ea04 0602 	and.w	r6, r4, r2
 8003e98:	4a3d      	ldr	r2, [pc, #244]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e9a:	fb02 f106 	mul.w	r1, r2, r6
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	fb02 f205 	mul.w	r2, r2, r5
 8003ea4:	440a      	add	r2, r1
 8003ea6:	493a      	ldr	r1, [pc, #232]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ea8:	fba5 0101 	umull	r0, r1, r5, r1
 8003eac:	1853      	adds	r3, r2, r1
 8003eae:	4619      	mov	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f04f 0400 	mov.w	r4, #0
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4623      	mov	r3, r4
 8003eba:	f7fc f9e9 	bl	8000290 <__aeabi_uldivmod>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	e049      	b.n	8003f5a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec6:	4b30      	ldr	r3, [pc, #192]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	099b      	lsrs	r3, r3, #6
 8003ecc:	f04f 0400 	mov.w	r4, #0
 8003ed0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ed4:	f04f 0200 	mov.w	r2, #0
 8003ed8:	ea03 0501 	and.w	r5, r3, r1
 8003edc:	ea04 0602 	and.w	r6, r4, r2
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4632      	mov	r2, r6
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	f04f 0400 	mov.w	r4, #0
 8003eec:	0154      	lsls	r4, r2, #5
 8003eee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ef2:	014b      	lsls	r3, r1, #5
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	1b49      	subs	r1, r1, r5
 8003efa:	eb62 0206 	sbc.w	r2, r2, r6
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	f04f 0400 	mov.w	r4, #0
 8003f06:	0194      	lsls	r4, r2, #6
 8003f08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f0c:	018b      	lsls	r3, r1, #6
 8003f0e:	1a5b      	subs	r3, r3, r1
 8003f10:	eb64 0402 	sbc.w	r4, r4, r2
 8003f14:	f04f 0100 	mov.w	r1, #0
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	00e2      	lsls	r2, r4, #3
 8003f1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f22:	00d9      	lsls	r1, r3, #3
 8003f24:	460b      	mov	r3, r1
 8003f26:	4614      	mov	r4, r2
 8003f28:	195b      	adds	r3, r3, r5
 8003f2a:	eb44 0406 	adc.w	r4, r4, r6
 8003f2e:	f04f 0100 	mov.w	r1, #0
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	02a2      	lsls	r2, r4, #10
 8003f38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f3c:	0299      	lsls	r1, r3, #10
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4614      	mov	r4, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	4621      	mov	r1, r4
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f04f 0400 	mov.w	r4, #0
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4623      	mov	r3, r4
 8003f50:	f7fc f99e 	bl	8000290 <__aeabi_uldivmod>
 8003f54:	4603      	mov	r3, r0
 8003f56:	460c      	mov	r4, r1
 8003f58:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	f003 0303 	and.w	r3, r3, #3
 8003f64:	3301      	adds	r3, #1
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	60bb      	str	r3, [r7, #8]
      break;
 8003f74:	e002      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f76:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003f78:	60bb      	str	r3, [r7, #8]
      break;
 8003f7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	017d7840 	.word	0x017d7840

08003f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	20000000 	.word	0x20000000

08003fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fb0:	f7ff fff0 	bl	8003f94 <HAL_RCC_GetHCLKFreq>
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0a9b      	lsrs	r3, r3, #10
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4a03      	ldr	r2, [pc, #12]	; (8003fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fc2:	5cd3      	ldrb	r3, [r2, r3]
 8003fc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	0800dfc4 	.word	0x0800dfc4

08003fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e01d      	b.n	8004022 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fc fe82 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3304      	adds	r3, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f000 f8c0 	bl	8004198 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b084      	sub	sp, #16
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_TIM_ConfigClockSource+0x18>
 800403e:	2302      	movs	r3, #2
 8004040:	e0a6      	b.n	8004190 <HAL_TIM_ConfigClockSource+0x166>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2202      	movs	r2, #2
 800404e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004060:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004068:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b40      	cmp	r3, #64	; 0x40
 8004078:	d067      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x120>
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d80b      	bhi.n	8004096 <HAL_TIM_ConfigClockSource+0x6c>
 800407e:	2b10      	cmp	r3, #16
 8004080:	d073      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x140>
 8004082:	2b10      	cmp	r3, #16
 8004084:	d802      	bhi.n	800408c <HAL_TIM_ConfigClockSource+0x62>
 8004086:	2b00      	cmp	r3, #0
 8004088:	d06f      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800408a:	e078      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800408c:	2b20      	cmp	r3, #32
 800408e:	d06c      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x140>
 8004090:	2b30      	cmp	r3, #48	; 0x30
 8004092:	d06a      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004094:	e073      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004096:	2b70      	cmp	r3, #112	; 0x70
 8004098:	d00d      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0x8c>
 800409a:	2b70      	cmp	r3, #112	; 0x70
 800409c:	d804      	bhi.n	80040a8 <HAL_TIM_ConfigClockSource+0x7e>
 800409e:	2b50      	cmp	r3, #80	; 0x50
 80040a0:	d033      	beq.n	800410a <HAL_TIM_ConfigClockSource+0xe0>
 80040a2:	2b60      	cmp	r3, #96	; 0x60
 80040a4:	d041      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80040a6:	e06a      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80040a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ac:	d066      	beq.n	800417c <HAL_TIM_ConfigClockSource+0x152>
 80040ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040b2:	d017      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80040b4:	e063      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6899      	ldr	r1, [r3, #8]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f000 f961 	bl	800438c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	609a      	str	r2, [r3, #8]
      break;
 80040e2:	e04c      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6899      	ldr	r1, [r3, #8]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f000 f94a 	bl	800438c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004106:	609a      	str	r2, [r3, #8]
      break;
 8004108:	e039      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	461a      	mov	r2, r3
 8004118:	f000 f8be 	bl	8004298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2150      	movs	r1, #80	; 0x50
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f917 	bl	8004356 <TIM_ITRx_SetConfig>
      break;
 8004128:	e029      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	461a      	mov	r2, r3
 8004138:	f000 f8dd 	bl	80042f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2160      	movs	r1, #96	; 0x60
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f907 	bl	8004356 <TIM_ITRx_SetConfig>
      break;
 8004148:	e019      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	461a      	mov	r2, r3
 8004158:	f000 f89e 	bl	8004298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2140      	movs	r1, #64	; 0x40
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f8f7 	bl	8004356 <TIM_ITRx_SetConfig>
      break;
 8004168:	e009      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f000 f8ee 	bl	8004356 <TIM_ITRx_SetConfig>
      break;
 800417a:	e000      	b.n	800417e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800417c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a34      	ldr	r2, [pc, #208]	; (800427c <TIM_Base_SetConfig+0xe4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d00f      	beq.n	80041d0 <TIM_Base_SetConfig+0x38>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d00b      	beq.n	80041d0 <TIM_Base_SetConfig+0x38>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a31      	ldr	r2, [pc, #196]	; (8004280 <TIM_Base_SetConfig+0xe8>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_Base_SetConfig+0x38>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a30      	ldr	r2, [pc, #192]	; (8004284 <TIM_Base_SetConfig+0xec>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0x38>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a2f      	ldr	r2, [pc, #188]	; (8004288 <TIM_Base_SetConfig+0xf0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d108      	bne.n	80041e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a25      	ldr	r2, [pc, #148]	; (800427c <TIM_Base_SetConfig+0xe4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01b      	beq.n	8004222 <TIM_Base_SetConfig+0x8a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f0:	d017      	beq.n	8004222 <TIM_Base_SetConfig+0x8a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a22      	ldr	r2, [pc, #136]	; (8004280 <TIM_Base_SetConfig+0xe8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d013      	beq.n	8004222 <TIM_Base_SetConfig+0x8a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a21      	ldr	r2, [pc, #132]	; (8004284 <TIM_Base_SetConfig+0xec>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d00f      	beq.n	8004222 <TIM_Base_SetConfig+0x8a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a20      	ldr	r2, [pc, #128]	; (8004288 <TIM_Base_SetConfig+0xf0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00b      	beq.n	8004222 <TIM_Base_SetConfig+0x8a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <TIM_Base_SetConfig+0xf4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d007      	beq.n	8004222 <TIM_Base_SetConfig+0x8a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <TIM_Base_SetConfig+0xf8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <TIM_Base_SetConfig+0xfc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d108      	bne.n	8004234 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4313      	orrs	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <TIM_Base_SetConfig+0xe4>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d103      	bne.n	8004268 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	691a      	ldr	r2, [r3, #16]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	615a      	str	r2, [r3, #20]
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800

08004298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	f023 0201 	bic.w	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f023 030a 	bic.w	r3, r3, #10
 80042d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4313      	orrs	r3, r2
 80042dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b087      	sub	sp, #28
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	f023 0210 	bic.w	r2, r3, #16
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	031b      	lsls	r3, r3, #12
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	4313      	orrs	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004356:	b480      	push	{r7}
 8004358:	b085      	sub	sp, #20
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800436c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800436e:	683a      	ldr	r2, [r7, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4313      	orrs	r3, r2
 8004374:	f043 0307 	orr.w	r3, r3, #7
 8004378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	609a      	str	r2, [r3, #8]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	021a      	lsls	r2, r3, #8
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	609a      	str	r2, [r3, #8]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e050      	b.n	8004486 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1c      	ldr	r2, [pc, #112]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d018      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004430:	d013      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a18      	ldr	r2, [pc, #96]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00e      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a16      	ldr	r2, [pc, #88]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d009      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a15      	ldr	r2, [pc, #84]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d004      	beq.n	800445a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a13      	ldr	r2, [pc, #76]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d10c      	bne.n	8004474 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004460:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4313      	orrs	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40010000 	.word	0x40010000
 8004498:	40000400 	.word	0x40000400
 800449c:	40000800 	.word	0x40000800
 80044a0:	40000c00 	.word	0x40000c00
 80044a4:	40014000 	.word	0x40014000

080044a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044a8:	b084      	sub	sp, #16
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b084      	sub	sp, #16
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	f107 001c 	add.w	r0, r7, #28
 80044b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d122      	bne.n	8004506 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d105      	bne.n	80044fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f001 fac6 	bl	8005a8c <USB_CoreReset>
 8004500:	4603      	mov	r3, r0
 8004502:	73fb      	strb	r3, [r7, #15]
 8004504:	e01a      	b.n	800453c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 faba 	bl	8005a8c <USB_CoreReset>
 8004518:	4603      	mov	r3, r0
 800451a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800451c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	639a      	str	r2, [r3, #56]	; 0x38
 800452e:	e005      	b.n	800453c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004534:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b01      	cmp	r3, #1
 8004540:	d10b      	bne.n	800455a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f043 0206 	orr.w	r2, r3, #6
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f043 0220 	orr.w	r2, r3, #32
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004566:	b004      	add	sp, #16
 8004568:	4770      	bx	lr
	...

0800456c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	4613      	mov	r3, r2
 8004578:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d165      	bne.n	800464c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4a41      	ldr	r2, [pc, #260]	; (8004688 <USB_SetTurnaroundTime+0x11c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d906      	bls.n	8004596 <USB_SetTurnaroundTime+0x2a>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a40      	ldr	r2, [pc, #256]	; (800468c <USB_SetTurnaroundTime+0x120>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d802      	bhi.n	8004596 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004590:	230f      	movs	r3, #15
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e062      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4a3c      	ldr	r2, [pc, #240]	; (800468c <USB_SetTurnaroundTime+0x120>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d906      	bls.n	80045ac <USB_SetTurnaroundTime+0x40>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a3b      	ldr	r2, [pc, #236]	; (8004690 <USB_SetTurnaroundTime+0x124>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d802      	bhi.n	80045ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045a6:	230e      	movs	r3, #14
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e057      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a38      	ldr	r2, [pc, #224]	; (8004690 <USB_SetTurnaroundTime+0x124>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d906      	bls.n	80045c2 <USB_SetTurnaroundTime+0x56>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a37      	ldr	r2, [pc, #220]	; (8004694 <USB_SetTurnaroundTime+0x128>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d802      	bhi.n	80045c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045bc:	230d      	movs	r3, #13
 80045be:	617b      	str	r3, [r7, #20]
 80045c0:	e04c      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	4a33      	ldr	r2, [pc, #204]	; (8004694 <USB_SetTurnaroundTime+0x128>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d906      	bls.n	80045d8 <USB_SetTurnaroundTime+0x6c>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4a32      	ldr	r2, [pc, #200]	; (8004698 <USB_SetTurnaroundTime+0x12c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d802      	bhi.n	80045d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045d2:	230c      	movs	r3, #12
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	e041      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4a2f      	ldr	r2, [pc, #188]	; (8004698 <USB_SetTurnaroundTime+0x12c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d906      	bls.n	80045ee <USB_SetTurnaroundTime+0x82>
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4a2e      	ldr	r2, [pc, #184]	; (800469c <USB_SetTurnaroundTime+0x130>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d802      	bhi.n	80045ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045e8:	230b      	movs	r3, #11
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e036      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4a2a      	ldr	r2, [pc, #168]	; (800469c <USB_SetTurnaroundTime+0x130>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d906      	bls.n	8004604 <USB_SetTurnaroundTime+0x98>
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4a29      	ldr	r2, [pc, #164]	; (80046a0 <USB_SetTurnaroundTime+0x134>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d802      	bhi.n	8004604 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045fe:	230a      	movs	r3, #10
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e02b      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4a26      	ldr	r2, [pc, #152]	; (80046a0 <USB_SetTurnaroundTime+0x134>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d906      	bls.n	800461a <USB_SetTurnaroundTime+0xae>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4a25      	ldr	r2, [pc, #148]	; (80046a4 <USB_SetTurnaroundTime+0x138>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d802      	bhi.n	800461a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004614:	2309      	movs	r3, #9
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e020      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4a21      	ldr	r2, [pc, #132]	; (80046a4 <USB_SetTurnaroundTime+0x138>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d906      	bls.n	8004630 <USB_SetTurnaroundTime+0xc4>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <USB_SetTurnaroundTime+0x13c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d802      	bhi.n	8004630 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800462a:	2308      	movs	r3, #8
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e015      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4a1d      	ldr	r2, [pc, #116]	; (80046a8 <USB_SetTurnaroundTime+0x13c>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d906      	bls.n	8004646 <USB_SetTurnaroundTime+0xda>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4a1c      	ldr	r2, [pc, #112]	; (80046ac <USB_SetTurnaroundTime+0x140>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d802      	bhi.n	8004646 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004640:	2307      	movs	r3, #7
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	e00a      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004646:	2306      	movs	r3, #6
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e007      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800464c:	79fb      	ldrb	r3, [r7, #7]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d102      	bne.n	8004658 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004652:	2309      	movs	r3, #9
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e001      	b.n	800465c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004658:	2309      	movs	r3, #9
 800465a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	029b      	lsls	r3, r3, #10
 8004670:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004674:	431a      	orrs	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	00d8acbf 	.word	0x00d8acbf
 800468c:	00e4e1bf 	.word	0x00e4e1bf
 8004690:	00f423ff 	.word	0x00f423ff
 8004694:	0106737f 	.word	0x0106737f
 8004698:	011a499f 	.word	0x011a499f
 800469c:	01312cff 	.word	0x01312cff
 80046a0:	014ca43f 	.word	0x014ca43f
 80046a4:	016e35ff 	.word	0x016e35ff
 80046a8:	01a6ab1f 	.word	0x01a6ab1f
 80046ac:	01e847ff 	.word	0x01e847ff

080046b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f023 0201 	bic.w	r2, r3, #1
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800470c:	78fb      	ldrb	r3, [r7, #3]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d106      	bne.n	8004720 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	e00b      	b.n	8004738 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	e001      	b.n	8004738 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e003      	b.n	8004740 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004738:	2032      	movs	r0, #50	; 0x32
 800473a:	f7fc fc37 	bl	8000fac <HAL_Delay>

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004748:	b084      	sub	sp, #16
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	e009      	b.n	800477c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3340      	adds	r3, #64	; 0x40
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	2200      	movs	r2, #0
 8004774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	3301      	adds	r3, #1
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	2b0e      	cmp	r3, #14
 8004780:	d9f2      	bls.n	8004768 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d11c      	bne.n	80047c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004796:	f043 0302 	orr.w	r3, r3, #2
 800479a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
 80047c0:	e00b      	b.n	80047da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047e0:	461a      	mov	r2, r3
 80047e2:	2300      	movs	r3, #0
 80047e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ec:	4619      	mov	r1, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f4:	461a      	mov	r2, r3
 80047f6:	680b      	ldr	r3, [r1, #0]
 80047f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10c      	bne.n	800481a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d104      	bne.n	8004810 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004806:	2100      	movs	r1, #0
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f949 	bl	8004aa0 <USB_SetDevSpeed>
 800480e:	e008      	b.n	8004822 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004810:	2101      	movs	r1, #1
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f944 	bl	8004aa0 <USB_SetDevSpeed>
 8004818:	e003      	b.n	8004822 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800481a:	2103      	movs	r1, #3
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f93f 	bl	8004aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004822:	2110      	movs	r1, #16
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f8f3 	bl	8004a10 <USB_FlushTxFifo>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f911 	bl	8004a5c <USB_FlushRxFifo>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	461a      	mov	r2, r3
 800484c:	2300      	movs	r3, #0
 800484e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	461a      	mov	r2, r3
 8004858:	2300      	movs	r3, #0
 800485a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	461a      	mov	r2, r3
 8004864:	2300      	movs	r3, #0
 8004866:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
 800486c:	e043      	b.n	80048f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	015a      	lsls	r2, r3, #5
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	4413      	add	r3, r2
 8004876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004884:	d118      	bne.n	80048b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	461a      	mov	r2, r3
 800489a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	e013      	b.n	80048ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	461a      	mov	r2, r3
 80048b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e008      	b.n	80048ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	015a      	lsls	r2, r3, #5
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c4:	461a      	mov	r2, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d6:	461a      	mov	r2, r3
 80048d8:	2300      	movs	r3, #0
 80048da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	461a      	mov	r2, r3
 80048ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	3301      	adds	r3, #1
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d3b7      	bcc.n	800486e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	e043      	b.n	800498c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800491a:	d118      	bne.n	800494e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10a      	bne.n	8004938 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e013      	b.n	8004960 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004944:	461a      	mov	r2, r3
 8004946:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800494a:	6013      	str	r3, [r2, #0]
 800494c:	e008      	b.n	8004960 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495a:	461a      	mov	r2, r3
 800495c:	2300      	movs	r3, #0
 800495e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	2300      	movs	r3, #0
 8004970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	461a      	mov	r2, r3
 8004980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004984:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	3301      	adds	r3, #1
 800498a:	613b      	str	r3, [r7, #16]
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d3b7      	bcc.n	8004904 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d105      	bne.n	80049c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f043 0210 	orr.w	r2, r3, #16
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <USB_DevInit+0x2c4>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	f043 0208 	orr.w	r2, r3, #8
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f4:	f043 0304 	orr.w	r3, r3, #4
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a08:	b004      	add	sp, #16
 8004a0a:	4770      	bx	lr
 8004a0c:	803c3800 	.word	0x803c3800

08004a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	019b      	lsls	r3, r3, #6
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a09      	ldr	r2, [pc, #36]	; (8004a58 <USB_FlushTxFifo+0x48>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e006      	b.n	8004a4a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f003 0320 	and.w	r3, r3, #32
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	d0f0      	beq.n	8004a2a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	00030d40 	.word	0x00030d40

08004a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <USB_FlushRxFifo+0x40>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e006      	b.n	8004a8e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d0f0      	beq.n	8004a6e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	00030d40 	.word	0x00030d40

08004aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	78fb      	ldrb	r3, [r7, #3]
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
 8004af6:	e00a      	b.n	8004b0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d002      	beq.n	8004b04 <USB_GetDevSpeed+0x32>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d102      	bne.n	8004b0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b04:	2302      	movs	r3, #2
 8004b06:	75fb      	strb	r3, [r7, #23]
 8004b08:	e001      	b.n	8004b0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b0a:	230f      	movs	r3, #15
 8004b0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d13a      	bne.n	8004bae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d155      	bne.n	8004c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	78db      	ldrb	r3, [r3, #3]
 8004b8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	059b      	lsls	r3, r3, #22
 8004b92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b94:	4313      	orrs	r3, r2
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	0151      	lsls	r1, r2, #5
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	440a      	add	r2, r1
 8004b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	e036      	b.n	8004c1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	2101      	movs	r1, #1
 8004bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc4:	041b      	lsls	r3, r3, #16
 8004bc6:	68f9      	ldr	r1, [r7, #12]
 8004bc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d11a      	bne.n	8004c1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	78db      	ldrb	r3, [r3, #3]
 8004c00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c02:	430b      	orrs	r3, r1
 8004c04:	4313      	orrs	r3, r2
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	785b      	ldrb	r3, [r3, #1]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d161      	bne.n	8004d0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c5e:	d11f      	bne.n	8004ca0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	0151      	lsls	r1, r2, #5
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	440a      	add	r2, r1
 8004c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	2101      	movs	r1, #1
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	68f9      	ldr	r1, [r7, #12]
 8004ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	0159      	lsls	r1, r3, #5
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	440b      	add	r3, r1
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	4619      	mov	r1, r3
 8004d04:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <USB_DeactivateEndpoint+0x1b0>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]
 8004d0a:	e060      	b.n	8004dce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d22:	d11f      	bne.n	8004d64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	2101      	movs	r1, #1
 8004d76:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7a:	041b      	lsls	r3, r3, #16
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	68f9      	ldr	r1, [r7, #12]
 8004d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d84:	4013      	ands	r3, r2
 8004d86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	69da      	ldr	r2, [r3, #28]
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	43db      	mvns	r3, r3
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da8:	4013      	ands	r3, r2
 8004daa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	0159      	lsls	r1, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	440b      	add	r3, r1
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <USB_DeactivateEndpoint+0x1b4>)
 8004dca:	4013      	ands	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3714      	adds	r7, #20
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr
 8004ddc:	ec337800 	.word	0xec337800
 8004de0:	eff37800 	.word	0xeff37800

08004de4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	; 0x28
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	4613      	mov	r3, r2
 8004df0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	785b      	ldrb	r3, [r3, #1]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	f040 815c 	bne.w	80050be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d132      	bne.n	8004e74 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	015a      	lsls	r2, r3, #5
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	0151      	lsls	r1, r2, #5
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	440a      	add	r2, r1
 8004e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e6c:	0cdb      	lsrs	r3, r3, #19
 8004e6e:	04db      	lsls	r3, r3, #19
 8004e70:	6113      	str	r3, [r2, #16]
 8004e72:	e074      	b.n	8004f5e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	0cdb      	lsrs	r3, r3, #19
 8004e90:	04db      	lsls	r3, r3, #19
 8004e92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004eb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	6959      	ldr	r1, [r3, #20]
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	440b      	add	r3, r1
 8004ed0:	1e59      	subs	r1, r3, #1
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eda:	04d9      	lsls	r1, r3, #19
 8004edc:	4b9d      	ldr	r3, [pc, #628]	; (8005154 <USB_EPStartXfer+0x370>)
 8004ede:	400b      	ands	r3, r1
 8004ee0:	69b9      	ldr	r1, [r7, #24]
 8004ee2:	0148      	lsls	r0, r1, #5
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	4401      	add	r1, r0
 8004ee8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eec:	4313      	orrs	r3, r2
 8004eee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f06:	69b9      	ldr	r1, [r7, #24]
 8004f08:	0148      	lsls	r0, r1, #5
 8004f0a:	69f9      	ldr	r1, [r7, #28]
 8004f0c:	4401      	add	r1, r0
 8004f0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f12:	4313      	orrs	r3, r2
 8004f14:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	78db      	ldrb	r3, [r3, #3]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d11f      	bne.n	8004f5e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	0151      	lsls	r1, r2, #5
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	440a      	add	r2, r1
 8004f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f38:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f3c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f5c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d14b      	bne.n	8004ffc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	78db      	ldrb	r3, [r3, #3]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d128      	bne.n	8004fda <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d110      	bne.n	8004fba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	e00f      	b.n	8004fda <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	0151      	lsls	r1, r2, #5
 8004fec:	69fa      	ldr	r2, [r7, #28]
 8004fee:	440a      	add	r2, r1
 8004ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ff4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ff8:	6013      	str	r3, [r2, #0]
 8004ffa:	e12f      	b.n	800525c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005016:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800501a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	78db      	ldrb	r3, [r3, #3]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d015      	beq.n	8005050 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8117 	beq.w	800525c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	2101      	movs	r1, #1
 8005040:	fa01 f303 	lsl.w	r3, r1, r3
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800504a:	4313      	orrs	r3, r2
 800504c:	634b      	str	r3, [r1, #52]	; 0x34
 800504e:	e105      	b.n	800525c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505c:	2b00      	cmp	r3, #0
 800505e:	d110      	bne.n	8005082 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	0151      	lsls	r1, r2, #5
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	440a      	add	r2, r1
 8005076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800507a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	e00f      	b.n	80050a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	0151      	lsls	r1, r2, #5
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	440a      	add	r2, r1
 8005098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	68d9      	ldr	r1, [r3, #12]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781a      	ldrb	r2, [r3, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	b298      	uxth	r0, r3
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	4603      	mov	r3, r0
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 fa2b 	bl	8005512 <USB_WritePacket>
 80050bc:	e0ce      	b.n	800525c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d8:	0cdb      	lsrs	r3, r3, #19
 80050da:	04db      	lsls	r3, r3, #19
 80050dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005100:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d126      	bne.n	8005158 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	691a      	ldr	r2, [r3, #16]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005120:	69b9      	ldr	r1, [r7, #24]
 8005122:	0148      	lsls	r0, r1, #5
 8005124:	69f9      	ldr	r1, [r7, #28]
 8005126:	4401      	add	r1, r0
 8005128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800512c:	4313      	orrs	r3, r2
 800512e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	440a      	add	r2, r1
 8005146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800514a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800514e:	6113      	str	r3, [r2, #16]
 8005150:	e036      	b.n	80051c0 <USB_EPStartXfer+0x3dc>
 8005152:	bf00      	nop
 8005154:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4413      	add	r3, r2
 8005162:	1e5a      	subs	r2, r3, #1
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	8afb      	ldrh	r3, [r7, #22]
 800517e:	04d9      	lsls	r1, r3, #19
 8005180:	4b39      	ldr	r3, [pc, #228]	; (8005268 <USB_EPStartXfer+0x484>)
 8005182:	400b      	ands	r3, r1
 8005184:	69b9      	ldr	r1, [r7, #24]
 8005186:	0148      	lsls	r0, r1, #5
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	4401      	add	r1, r0
 800518c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005190:	4313      	orrs	r3, r2
 8005192:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	8af9      	ldrh	r1, [r7, #22]
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b0:	69b9      	ldr	r1, [r7, #24]
 80051b2:	0148      	lsls	r0, r1, #5
 80051b4:	69f9      	ldr	r1, [r7, #28]
 80051b6:	4401      	add	r1, r0
 80051b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051bc:	4313      	orrs	r3, r2
 80051be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051c0:	79fb      	ldrb	r3, [r7, #7]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d10d      	bne.n	80051e2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d009      	beq.n	80051e2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	68d9      	ldr	r1, [r3, #12]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051de:	460a      	mov	r2, r1
 80051e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	78db      	ldrb	r3, [r3, #3]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d128      	bne.n	800523c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d110      	bne.n	800521c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00f      	b.n	800523c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800523a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800525a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	1ff80000 	.word	0x1ff80000

0800526c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	f040 80cd 	bne.w	8005428 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d132      	bne.n	80052fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	0151      	lsls	r1, r2, #5
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	440a      	add	r2, r1
 80052d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	015a      	lsls	r2, r3, #5
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	4413      	add	r3, r2
 80052e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	0151      	lsls	r1, r2, #5
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	440a      	add	r2, r1
 80052f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052f4:	0cdb      	lsrs	r3, r3, #19
 80052f6:	04db      	lsls	r3, r3, #19
 80052f8:	6113      	str	r3, [r2, #16]
 80052fa:	e04e      	b.n	800539a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005316:	0cdb      	lsrs	r3, r3, #19
 8005318:	04db      	lsls	r3, r3, #19
 800531a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	691b      	ldr	r3, [r3, #16]
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005336:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800533a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800533e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	429a      	cmp	r2, r3
 800534a:	d903      	bls.n	8005354 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	693a      	ldr	r2, [r7, #16]
 8005364:	0151      	lsls	r1, r2, #5
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	440a      	add	r2, r1
 800536a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	691a      	ldr	r2, [r3, #16]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800538a:	6939      	ldr	r1, [r7, #16]
 800538c:	0148      	lsls	r0, r1, #5
 800538e:	6979      	ldr	r1, [r7, #20]
 8005390:	4401      	add	r1, r0
 8005392:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005396:	4313      	orrs	r3, r2
 8005398:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d11e      	bne.n	80053de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d009      	beq.n	80053bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	461a      	mov	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e092      	b.n	8005504 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d07e      	beq.n	8005504 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	2101      	movs	r1, #1
 8005418:	fa01 f303 	lsl.w	r3, r1, r3
 800541c:	6979      	ldr	r1, [r7, #20]
 800541e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005422:	4313      	orrs	r3, r2
 8005424:	634b      	str	r3, [r1, #52]	; 0x34
 8005426:	e06d      	b.n	8005504 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	0151      	lsls	r1, r2, #5
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	440a      	add	r2, r1
 800543e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005442:	0cdb      	lsrs	r3, r3, #19
 8005444:	04db      	lsls	r3, r3, #19
 8005446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	693a      	ldr	r2, [r7, #16]
 8005458:	0151      	lsls	r1, r2, #5
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	440a      	add	r2, r1
 800545e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005462:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005466:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800546a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800549a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a8:	691a      	ldr	r2, [r3, #16]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054b2:	6939      	ldr	r1, [r7, #16]
 80054b4:	0148      	lsls	r0, r1, #5
 80054b6:	6979      	ldr	r1, [r7, #20]
 80054b8:	4401      	add	r1, r0
 80054ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054be:	4313      	orrs	r3, r2
 80054c0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80054c2:	79fb      	ldrb	r3, [r7, #7]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d10d      	bne.n	80054e4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	68d9      	ldr	r1, [r3, #12]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e0:	460a      	mov	r2, r1
 80054e2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005502:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005512:	b480      	push	{r7}
 8005514:	b089      	sub	sp, #36	; 0x24
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	4611      	mov	r1, r2
 800551e:	461a      	mov	r2, r3
 8005520:	460b      	mov	r3, r1
 8005522:	71fb      	strb	r3, [r7, #7]
 8005524:	4613      	mov	r3, r2
 8005526:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005530:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005534:	2b00      	cmp	r3, #0
 8005536:	d11a      	bne.n	800556e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005538:	88bb      	ldrh	r3, [r7, #4]
 800553a:	3303      	adds	r3, #3
 800553c:	089b      	lsrs	r3, r3, #2
 800553e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005540:	2300      	movs	r3, #0
 8005542:	61bb      	str	r3, [r7, #24]
 8005544:	e00f      	b.n	8005566 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005546:	79fb      	ldrb	r3, [r7, #7]
 8005548:	031a      	lsls	r2, r3, #12
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	4413      	add	r3, r2
 800554e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005552:	461a      	mov	r2, r3
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6013      	str	r3, [r2, #0]
      pSrc++;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3304      	adds	r3, #4
 800555e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	3301      	adds	r3, #1
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	429a      	cmp	r2, r3
 800556c:	d3eb      	bcc.n	8005546 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3724      	adds	r7, #36	; 0x24
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	; 0x24
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	3303      	adds	r3, #3
 8005596:	089b      	lsrs	r3, r3, #2
 8005598:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800559a:	2300      	movs	r3, #0
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e00b      	b.n	80055b8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	3304      	adds	r3, #4
 80055b0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	3301      	adds	r3, #1
 80055b6:	61bb      	str	r3, [r7, #24]
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3ef      	bcc.n	80055a0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80055c0:	69fb      	ldr	r3, [r7, #28]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3724      	adds	r7, #36	; 0x24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d12c      	bne.n	8005644 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	db12      	blt.n	8005622 <USB_EPSetStall+0x54>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00f      	beq.n	8005622 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	015a      	lsls	r2, r3, #5
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	0151      	lsls	r1, r2, #5
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	440a      	add	r2, r1
 8005618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005620:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	e02b      	b.n	800569c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	db12      	blt.n	800567c <USB_EPSetStall+0xae>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00f      	beq.n	800567c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	0151      	lsls	r1, r2, #5
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	440a      	add	r2, r1
 8005672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005676:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800567a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	0151      	lsls	r1, r2, #5
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	440a      	add	r2, r1
 8005692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800569a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d128      	bne.n	8005718 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	78db      	ldrb	r3, [r3, #3]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d003      	beq.n	80056f6 <USB_EPClearStall+0x4c>
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	78db      	ldrb	r3, [r3, #3]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d138      	bne.n	8005768 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e027      	b.n	8005768 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68ba      	ldr	r2, [r7, #8]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005732:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005736:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	78db      	ldrb	r3, [r3, #3]
 800573c:	2b03      	cmp	r3, #3
 800573e:	d003      	beq.n	8005748 <USB_EPClearStall+0x9e>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d10f      	bne.n	8005768 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005766:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005776:	b480      	push	{r7}
 8005778:	b085      	sub	sp, #20
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	460b      	mov	r3, r1
 8005780:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005794:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005798:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	78fb      	ldrb	r3, [r7, #3]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057b0:	4313      	orrs	r3, r2
 80057b2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b085      	sub	sp, #20
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057dc:	f023 0303 	bic.w	r3, r3, #3
 80057e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057f0:	f023 0302 	bic.w	r3, r3, #2
 80057f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005832:	f043 0302 	orr.w	r3, r3, #2
 8005836:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4013      	ands	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	0c1b      	lsrs	r3, r3, #16
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	4013      	ands	r3, r2
 80058c2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	b29b      	uxth	r3, r3
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	4013      	ands	r3, r2
 8005900:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005902:	68bb      	ldr	r3, [r7, #8]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	460b      	mov	r3, r1
 800591a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	f003 030f 	and.w	r3, r3, #15
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
 8005940:	01db      	lsls	r3, r3, #7
 8005942:	b2db      	uxtb	r3, r3
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4013      	ands	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800595e:	68bb      	ldr	r3, [r7, #8]
}
 8005960:	4618      	mov	r0, r3
 8005962:	371c      	adds	r7, #28
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0301 	and.w	r3, r3, #1
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80059a6:	f023 0307 	bic.w	r3, r3, #7
 80059aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3714      	adds	r7, #20
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
	...

080059d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	460b      	mov	r3, r1
 80059da:	607a      	str	r2, [r7, #4]
 80059dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	333c      	adds	r3, #60	; 0x3c
 80059e6:	3304      	adds	r3, #4
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	4a26      	ldr	r2, [pc, #152]	; (8005a88 <USB_EP0_OutStart+0xb8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d90a      	bls.n	8005a0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a04:	d101      	bne.n	8005a0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e037      	b.n	8005a7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a10:	461a      	mov	r2, r3
 8005a12:	2300      	movs	r3, #0
 8005a14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a38:	f043 0318 	orr.w	r3, r3, #24
 8005a3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a52:	7afb      	ldrb	r3, [r7, #11]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d10f      	bne.n	8005a78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5e:	461a      	mov	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	4f54300a 	.word	0x4f54300a

08005a8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4a13      	ldr	r2, [pc, #76]	; (8005af0 <USB_CoreReset+0x64>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e01b      	b.n	8005ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	daf2      	bge.n	8005a98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a09      	ldr	r2, [pc, #36]	; (8005af0 <USB_CoreReset+0x64>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d901      	bls.n	8005ad4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e006      	b.n	8005ae2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d0f0      	beq.n	8005ac2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	00030d40 	.word	0x00030d40

08005af4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005b04:	f007 faba 	bl	800d07c <malloc>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	e066      	b.n	8005bec <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	7c1b      	ldrb	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d119      	bne.n	8005b62 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b32:	2202      	movs	r2, #2
 8005b34:	2181      	movs	r1, #129	; 0x81
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 ff97 	bl	8007a6a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b46:	2202      	movs	r2, #2
 8005b48:	2101      	movs	r1, #1
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 ff8d 	bl	8007a6a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2210      	movs	r2, #16
 8005b5c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005b60:	e016      	b.n	8005b90 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005b62:	2340      	movs	r3, #64	; 0x40
 8005b64:	2202      	movs	r2, #2
 8005b66:	2181      	movs	r1, #129	; 0x81
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 ff7e 	bl	8007a6a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005b74:	2340      	movs	r3, #64	; 0x40
 8005b76:	2202      	movs	r2, #2
 8005b78:	2101      	movs	r1, #1
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 ff75 	bl	8007a6a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2210      	movs	r2, #16
 8005b8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b90:	2308      	movs	r3, #8
 8005b92:	2203      	movs	r2, #3
 8005b94:	2182      	movs	r1, #130	; 0x82
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f001 ff67 	bl	8007a6a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	7c1b      	ldrb	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d109      	bne.n	8005bda <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f002 f838 	bl	8007c48 <USBD_LL_PrepareReceive>
 8005bd8:	e007      	b.n	8005bea <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	2101      	movs	r1, #1
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f002 f82f 	bl	8007c48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005c04:	2181      	movs	r1, #129	; 0x81
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f001 ff55 	bl	8007ab6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005c12:	2101      	movs	r1, #1
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f001 ff4e 	bl	8007ab6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005c22:	2182      	movs	r1, #130	; 0x82
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 ff46 	bl	8007ab6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00e      	beq.n	8005c62 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c54:	4618      	mov	r0, r3
 8005c56:	f007 fa19 	bl	800d08c <free>
    pdev->pClassData = NULL;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c7c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d03a      	beq.n	8005d0c <USBD_CDC_Setup+0xa0>
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	f040 8097 	bne.w	8005dca <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	88db      	ldrh	r3, [r3, #6]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d029      	beq.n	8005cf8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	b25b      	sxtb	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da11      	bge.n	8005cd2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005cba:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	88d2      	ldrh	r2, [r2, #6]
 8005cc0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005cc2:	6939      	ldr	r1, [r7, #16]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	88db      	ldrh	r3, [r3, #6]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f001 fa9d 	bl	800720a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005cd0:	e082      	b.n	8005dd8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	785a      	ldrb	r2, [r3, #1]
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	88db      	ldrh	r3, [r3, #6]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005ce8:	6939      	ldr	r1, [r7, #16]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	88db      	ldrh	r3, [r3, #6]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 fab6 	bl	8007262 <USBD_CtlPrepareRx>
    break;
 8005cf6:	e06f      	b.n	8005dd8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	7850      	ldrb	r0, [r2, #1]
 8005d04:	2200      	movs	r2, #0
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	4798      	blx	r3
    break;
 8005d0a:	e065      	b.n	8005dd8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	785b      	ldrb	r3, [r3, #1]
 8005d10:	2b0b      	cmp	r3, #11
 8005d12:	d84f      	bhi.n	8005db4 <USBD_CDC_Setup+0x148>
 8005d14:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <USBD_CDC_Setup+0xb0>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d4d 	.word	0x08005d4d
 8005d20:	08005dc3 	.word	0x08005dc3
 8005d24:	08005db5 	.word	0x08005db5
 8005d28:	08005db5 	.word	0x08005db5
 8005d2c:	08005db5 	.word	0x08005db5
 8005d30:	08005db5 	.word	0x08005db5
 8005d34:	08005db5 	.word	0x08005db5
 8005d38:	08005db5 	.word	0x08005db5
 8005d3c:	08005db5 	.word	0x08005db5
 8005d40:	08005db5 	.word	0x08005db5
 8005d44:	08005d75 	.word	0x08005d75
 8005d48:	08005d9d 	.word	0x08005d9d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d107      	bne.n	8005d66 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d56:	f107 030c 	add.w	r3, r7, #12
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fa53 	bl	800720a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005d64:	e030      	b.n	8005dc8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 f9dd 	bl	8007128 <USBD_CtlError>
        ret = USBD_FAIL;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	75fb      	strb	r3, [r7, #23]
      break;
 8005d72:	e029      	b.n	8005dc8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d107      	bne.n	8005d8e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d7e:	f107 030f 	add.w	r3, r7, #15
 8005d82:	2201      	movs	r2, #1
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 fa3f 	bl	800720a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005d8c:	e01c      	b.n	8005dc8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005d8e:	6839      	ldr	r1, [r7, #0]
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f001 f9c9 	bl	8007128 <USBD_CtlError>
        ret = USBD_FAIL;
 8005d96:	2303      	movs	r3, #3
 8005d98:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9a:	e015      	b.n	8005dc8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d00f      	beq.n	8005dc6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 f9bd 	bl	8007128 <USBD_CtlError>
        ret = USBD_FAIL;
 8005dae:	2303      	movs	r3, #3
 8005db0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005db2:	e008      	b.n	8005dc6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 f9b6 	bl	8007128 <USBD_CtlError>
      ret = USBD_FAIL;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005dc0:	e002      	b.n	8005dc8 <USBD_CDC_Setup+0x15c>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e008      	b.n	8005dd8 <USBD_CDC_Setup+0x16c>
      break;
 8005dc6:	bf00      	nop
    }
    break;
 8005dc8:	e006      	b.n	8005dd8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f001 f9ab 	bl	8007128 <USBD_CtlError>
    ret = USBD_FAIL;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	75fb      	strb	r3, [r7, #23]
    break;
 8005dd6:	bf00      	nop
  }

  return (uint8_t)ret;
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop

08005de4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005df6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e049      	b.n	8005e9a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	440b      	add	r3, r1
 8005e1c:	3318      	adds	r3, #24
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d029      	beq.n	8005e78 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	3318      	adds	r3, #24
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	78f9      	ldrb	r1, [r7, #3]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	1a5b      	subs	r3, r3, r1
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4403      	add	r3, r0
 8005e44:	3344      	adds	r3, #68	; 0x44
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e4c:	fb03 f301 	mul.w	r3, r3, r1
 8005e50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d110      	bne.n	8005e78 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005e56:	78fa      	ldrb	r2, [r7, #3]
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	3318      	adds	r3, #24
 8005e66:	2200      	movs	r2, #0
 8005e68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e6a:	78f9      	ldrb	r1, [r7, #3]
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	2200      	movs	r2, #0
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f001 fec8 	bl	8007c06 <USBD_LL_Transmit>
 8005e76:	e00f      	b.n	8005e98 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e015      	b.n	8005ef0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 fede 	bl	8007c8a <USBD_LL_GetRxDataSize>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005eea:	4611      	mov	r1, r2
 8005eec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f06:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d015      	beq.n	8005f3e <USBD_CDC_EP0_RxReady+0x46>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005f18:	2bff      	cmp	r3, #255	; 0xff
 8005f1a:	d010      	beq.n	8005f3e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005f2a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005f32:	b292      	uxth	r2, r2
 8005f34:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	22ff      	movs	r2, #255	; 0xff
 8005f3a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2243      	movs	r2, #67	; 0x43
 8005f54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005f56:	4b03      	ldr	r3, [pc, #12]	; (8005f64 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	20000094 	.word	0x20000094

08005f68 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2243      	movs	r2, #67	; 0x43
 8005f74:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005f76:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	20000050 	.word	0x20000050

08005f88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2243      	movs	r2, #67	; 0x43
 8005f94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005f96:	4b03      	ldr	r3, [pc, #12]	; (8005fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	200000d8 	.word	0x200000d8

08005fa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	220a      	movs	r2, #10
 8005fb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr
 8005fc4:	2000000c 	.word	0x2000000c

08005fc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e004      	b.n	8005fe6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b087      	sub	sp, #28
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	60f8      	str	r0, [r7, #12]
 8005ffa:	60b9      	str	r1, [r7, #8]
 8005ffc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006004:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	371c      	adds	r7, #28
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006034:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800605a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800605c:	2301      	movs	r3, #1
 800605e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800606a:	2303      	movs	r3, #3
 800606c:	e01a      	b.n	80060a4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006074:	2b00      	cmp	r3, #0
 8006076:	d114      	bne.n	80060a2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2201      	movs	r2, #1
 800607c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006096:	2181      	movs	r1, #129	; 0x81
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f001 fdb4 	bl	8007c06 <USBD_LL_Transmit>

    ret = USBD_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e016      	b.n	80060f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	7c1b      	ldrb	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d109      	bne.n	80060e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060dc:	2101      	movs	r1, #1
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f001 fdb2 	bl	8007c48 <USBD_LL_PrepareReceive>
 80060e4:	e007      	b.n	80060f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060ec:	2340      	movs	r3, #64	; 0x40
 80060ee:	2101      	movs	r1, #1
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 fda9 	bl	8007c48 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3710      	adds	r7, #16
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	60f8      	str	r0, [r7, #12]
 8006108:	60b9      	str	r1, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006114:	2303      	movs	r3, #3
 8006116:	e025      	b.n	8006164 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006130:	2b00      	cmp	r3, #0
 8006132:	d003      	beq.n	800613c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	79fa      	ldrb	r2, [r7, #7]
 8006156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f001 fc1f 	bl	800799c <USBD_LL_Init>
 800615e:	4603      	mov	r3, r0
 8006160:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006162:	7dfb      	ldrb	r3, [r7, #23]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006176:	2300      	movs	r3, #0
 8006178:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006180:	2303      	movs	r3, #3
 8006182:	e010      	b.n	80061a6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006194:	f107 020e 	add.w	r2, r7, #14
 8006198:	4610      	mov	r0, r2
 800619a:	4798      	blx	r3
 800619c:	4602      	mov	r2, r0
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f001 fc3c 	bl	8007a34 <USBD_LL_Start>
 80061bc:	4603      	mov	r3, r0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80061e8:	2303      	movs	r3, #3
 80061ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d009      	beq.n	800620a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	78fa      	ldrb	r2, [r7, #3]
 8006200:	4611      	mov	r1, r2
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	4603      	mov	r3, r0
 8006208:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	4611      	mov	r1, r2
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
  }

  return USBD_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 ff2c 	bl	80070b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800626a:	461a      	mov	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	2b01      	cmp	r3, #1
 800627e:	d00e      	beq.n	800629e <USBD_LL_SetupStage+0x5a>
 8006280:	2b01      	cmp	r3, #1
 8006282:	d302      	bcc.n	800628a <USBD_LL_SetupStage+0x46>
 8006284:	2b02      	cmp	r3, #2
 8006286:	d014      	beq.n	80062b2 <USBD_LL_SetupStage+0x6e>
 8006288:	e01d      	b.n	80062c6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006290:	4619      	mov	r1, r3
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fa18 	bl	80066c8 <USBD_StdDevReq>
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
      break;
 800629c:	e020      	b.n	80062e0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa7c 	bl	80067a4 <USBD_StdItfReq>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
      break;
 80062b0:	e016      	b.n	80062e0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062b8:	4619      	mov	r1, r3
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fab8 	bl	8006830 <USBD_StdEPReq>
 80062c0:	4603      	mov	r3, r0
 80062c2:	73fb      	strb	r3, [r7, #15]
      break;
 80062c4:	e00c      	b.n	80062e0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 fc0d 	bl	8007af4 <USBD_LL_StallEP>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
      break;
 80062de:	bf00      	nop
  }

  return ret;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b086      	sub	sp, #24
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	60f8      	str	r0, [r7, #12]
 80062f2:	460b      	mov	r3, r1
 80062f4:	607a      	str	r2, [r7, #4]
 80062f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80062f8:	7afb      	ldrb	r3, [r7, #11]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d137      	bne.n	800636e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006304:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800630c:	2b03      	cmp	r3, #3
 800630e:	d14a      	bne.n	80063a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	429a      	cmp	r2, r3
 800631a:	d913      	bls.n	8006344 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	1ad2      	subs	r2, r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	4293      	cmp	r3, r2
 8006334:	bf28      	it	cs
 8006336:	4613      	movcs	r3, r2
 8006338:	461a      	mov	r2, r3
 800633a:	6879      	ldr	r1, [r7, #4]
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 ffad 	bl	800729c <USBD_CtlContinueRx>
 8006342:	e030      	b.n	80063a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006356:	2b03      	cmp	r3, #3
 8006358:	d105      	bne.n	8006366 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 ffa9 	bl	80072be <USBD_CtlSendStatus>
 800636c:	e01b      	b.n	80063a6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d013      	beq.n	80063a2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006380:	2b03      	cmp	r3, #3
 8006382:	d10e      	bne.n	80063a2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	7afa      	ldrb	r2, [r7, #11]
 800638e:	4611      	mov	r1, r2
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800639e:	7dfb      	ldrb	r3, [r7, #23]
 80063a0:	e002      	b.n	80063a8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e000      	b.n	80063a8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	460b      	mov	r3, r1
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063be:	7afb      	ldrb	r3, [r7, #11]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d16a      	bne.n	800649a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3314      	adds	r3, #20
 80063c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d155      	bne.n	8006480 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d914      	bls.n	800640a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	461a      	mov	r2, r3
 80063f4:	6879      	ldr	r1, [r7, #4]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 ff22 	bl	8007240 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063fc:	2300      	movs	r3, #0
 80063fe:	2200      	movs	r2, #0
 8006400:	2100      	movs	r1, #0
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f001 fc20 	bl	8007c48 <USBD_LL_PrepareReceive>
 8006408:	e03a      	b.n	8006480 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	429a      	cmp	r2, r3
 8006414:	d11c      	bne.n	8006450 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800641e:	429a      	cmp	r2, r3
 8006420:	d316      	bcc.n	8006450 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800642c:	429a      	cmp	r2, r3
 800642e:	d20f      	bcs.n	8006450 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006430:	2200      	movs	r2, #0
 8006432:	2100      	movs	r1, #0
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 ff03 	bl	8007240 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006442:	2300      	movs	r3, #0
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f001 fbfd 	bl	8007c48 <USBD_LL_PrepareReceive>
 800644e:	e017      	b.n	8006480 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006462:	2b03      	cmp	r3, #3
 8006464:	d105      	bne.n	8006472 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006472:	2180      	movs	r1, #128	; 0x80
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f001 fb3d 	bl	8007af4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 ff32 	bl	80072e4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006486:	2b01      	cmp	r3, #1
 8006488:	d123      	bne.n	80064d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fe9b 	bl	80061c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006498:	e01b      	b.n	80064d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d013      	beq.n	80064ce <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d10e      	bne.n	80064ce <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	7afa      	ldrb	r2, [r7, #11]
 80064ba:	4611      	mov	r1, r2
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	4798      	blx	r3
 80064c0:	4603      	mov	r3, r0
 80064c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80064ca:	7dfb      	ldrb	r3, [r7, #23]
 80064cc:	e002      	b.n	80064d4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80064ce:	2303      	movs	r3, #3
 80064d0:	e000      	b.n	80064d4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3718      	adds	r7, #24
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006508:	2b00      	cmp	r3, #0
 800650a:	d009      	beq.n	8006520 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	6852      	ldr	r2, [r2, #4]
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	4611      	mov	r1, r2
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006520:	2340      	movs	r3, #64	; 0x40
 8006522:	2200      	movs	r2, #0
 8006524:	2100      	movs	r1, #0
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f001 fa9f 	bl	8007a6a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800653c:	2340      	movs	r3, #64	; 0x40
 800653e:	2200      	movs	r2, #0
 8006540:	2180      	movs	r1, #128	; 0x80
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fa91 	bl	8007a6a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2240      	movs	r2, #64	; 0x40
 8006552:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	78fa      	ldrb	r2, [r7, #3]
 800656e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2204      	movs	r2, #4
 8006596:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b6:	2b04      	cmp	r3, #4
 80065b8:	d105      	bne.n	80065c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d10b      	bne.n	80065fe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d005      	beq.n	80065fe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	460b      	mov	r3, r1
 800662c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6852      	ldr	r2, [r2, #4]
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	4611      	mov	r1, r2
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
  }

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800668a:	b480      	push	{r7}
 800668c:	b087      	sub	sp, #28
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	3301      	adds	r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80066a8:	8a3b      	ldrh	r3, [r7, #16]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	b21a      	sxth	r2, r3
 80066ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	b21b      	sxth	r3, r3
 80066b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80066b8:	89fb      	ldrh	r3, [r7, #14]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
	...

080066c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d004      	beq.n	80066ec <USBD_StdDevReq+0x24>
 80066e2:	2b40      	cmp	r3, #64	; 0x40
 80066e4:	d002      	beq.n	80066ec <USBD_StdDevReq+0x24>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <USBD_StdDevReq+0x38>
 80066ea:	e050      	b.n	800678e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	4798      	blx	r3
 80066fa:	4603      	mov	r3, r0
 80066fc:	73fb      	strb	r3, [r7, #15]
    break;
 80066fe:	e04b      	b.n	8006798 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	785b      	ldrb	r3, [r3, #1]
 8006704:	2b09      	cmp	r3, #9
 8006706:	d83c      	bhi.n	8006782 <USBD_StdDevReq+0xba>
 8006708:	a201      	add	r2, pc, #4	; (adr r2, 8006710 <USBD_StdDevReq+0x48>)
 800670a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670e:	bf00      	nop
 8006710:	08006765 	.word	0x08006765
 8006714:	08006779 	.word	0x08006779
 8006718:	08006783 	.word	0x08006783
 800671c:	0800676f 	.word	0x0800676f
 8006720:	08006783 	.word	0x08006783
 8006724:	08006743 	.word	0x08006743
 8006728:	08006739 	.word	0x08006739
 800672c:	08006783 	.word	0x08006783
 8006730:	0800675b 	.word	0x0800675b
 8006734:	0800674d 	.word	0x0800674d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f9ce 	bl	8006adc <USBD_GetDescriptor>
      break;
 8006740:	e024      	b.n	800678c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fb33 	bl	8006db0 <USBD_SetAddress>
      break;
 800674a:	e01f      	b.n	800678c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800674c:	6839      	ldr	r1, [r7, #0]
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fb70 	bl	8006e34 <USBD_SetConfig>
 8006754:	4603      	mov	r3, r0
 8006756:	73fb      	strb	r3, [r7, #15]
      break;
 8006758:	e018      	b.n	800678c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fc0d 	bl	8006f7c <USBD_GetConfig>
      break;
 8006762:	e013      	b.n	800678c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fc3c 	bl	8006fe4 <USBD_GetStatus>
      break;
 800676c:	e00e      	b.n	800678c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fc6a 	bl	800704a <USBD_SetFeature>
      break;
 8006776:	e009      	b.n	800678c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc79 	bl	8007072 <USBD_ClrFeature>
      break;
 8006780:	e004      	b.n	800678c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fccf 	bl	8007128 <USBD_CtlError>
      break;
 800678a:	bf00      	nop
    }
    break;
 800678c:	e004      	b.n	8006798 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fcc9 	bl	8007128 <USBD_CtlError>
    break;
 8006796:	bf00      	nop
  }

  return ret;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop

080067a4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	d003      	beq.n	80067c6 <USBD_StdItfReq+0x22>
 80067be:	2b40      	cmp	r3, #64	; 0x40
 80067c0:	d001      	beq.n	80067c6 <USBD_StdItfReq+0x22>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d12a      	bne.n	800681c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067cc:	3b01      	subs	r3, #1
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d81d      	bhi.n	800680e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	889b      	ldrh	r3, [r3, #4]
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d813      	bhi.n	8006804 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	88db      	ldrh	r3, [r3, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d110      	bne.n	8006818 <USBD_StdItfReq+0x74>
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10d      	bne.n	8006818 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fd5e 	bl	80072be <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006802:	e009      	b.n	8006818 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fc8e 	bl	8007128 <USBD_CtlError>
      break;
 800680c:	e004      	b.n	8006818 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fc89 	bl	8007128 <USBD_CtlError>
      break;
 8006816:	e000      	b.n	800681a <USBD_StdItfReq+0x76>
      break;
 8006818:	bf00      	nop
    }
    break;
 800681a:	e004      	b.n	8006826 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fc82 	bl	8007128 <USBD_CtlError>
    break;
 8006824:	bf00      	nop
  }

  return ret;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	889b      	ldrh	r3, [r3, #4]
 8006842:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800684c:	2b20      	cmp	r3, #32
 800684e:	d004      	beq.n	800685a <USBD_StdEPReq+0x2a>
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	d002      	beq.n	800685a <USBD_StdEPReq+0x2a>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00a      	beq.n	800686e <USBD_StdEPReq+0x3e>
 8006858:	e135      	b.n	8006ac6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	4798      	blx	r3
 8006868:	4603      	mov	r3, r0
 800686a:	73fb      	strb	r3, [r7, #15]
    break;
 800686c:	e130      	b.n	8006ad0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d03e      	beq.n	80068f4 <USBD_StdEPReq+0xc4>
 8006876:	2b03      	cmp	r3, #3
 8006878:	d002      	beq.n	8006880 <USBD_StdEPReq+0x50>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d077      	beq.n	800696e <USBD_StdEPReq+0x13e>
 800687e:	e11c      	b.n	8006aba <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006886:	2b02      	cmp	r3, #2
 8006888:	d002      	beq.n	8006890 <USBD_StdEPReq+0x60>
 800688a:	2b03      	cmp	r3, #3
 800688c:	d015      	beq.n	80068ba <USBD_StdEPReq+0x8a>
 800688e:	e02b      	b.n	80068e8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006890:	7bbb      	ldrb	r3, [r7, #14]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00c      	beq.n	80068b0 <USBD_StdEPReq+0x80>
 8006896:	7bbb      	ldrb	r3, [r7, #14]
 8006898:	2b80      	cmp	r3, #128	; 0x80
 800689a:	d009      	beq.n	80068b0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f927 	bl	8007af4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068a6:	2180      	movs	r1, #128	; 0x80
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 f923 	bl	8007af4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80068ae:	e020      	b.n	80068f2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fc38 	bl	8007128 <USBD_CtlError>
        break;
 80068b8:	e01b      	b.n	80068f2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	885b      	ldrh	r3, [r3, #2]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10e      	bne.n	80068e0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80068c2:	7bbb      	ldrb	r3, [r7, #14]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d00b      	beq.n	80068e0 <USBD_StdEPReq+0xb0>
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	2b80      	cmp	r3, #128	; 0x80
 80068cc:	d008      	beq.n	80068e0 <USBD_StdEPReq+0xb0>
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	88db      	ldrh	r3, [r3, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d104      	bne.n	80068e0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80068d6:	7bbb      	ldrb	r3, [r7, #14]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 f90a 	bl	8007af4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fcec 	bl	80072be <USBD_CtlSendStatus>

        break;
 80068e6:	e004      	b.n	80068f2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fc1c 	bl	8007128 <USBD_CtlError>
        break;
 80068f0:	bf00      	nop
      }
      break;
 80068f2:	e0e7      	b.n	8006ac4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d002      	beq.n	8006904 <USBD_StdEPReq+0xd4>
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d015      	beq.n	800692e <USBD_StdEPReq+0xfe>
 8006902:	e02d      	b.n	8006960 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00c      	beq.n	8006924 <USBD_StdEPReq+0xf4>
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	2b80      	cmp	r3, #128	; 0x80
 800690e:	d009      	beq.n	8006924 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 f8ed 	bl	8007af4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800691a:	2180      	movs	r1, #128	; 0x80
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 f8e9 	bl	8007af4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006922:	e023      	b.n	800696c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fbfe 	bl	8007128 <USBD_CtlError>
        break;
 800692c:	e01e      	b.n	800696c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	885b      	ldrh	r3, [r3, #2]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d119      	bne.n	800696a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006936:	7bbb      	ldrb	r3, [r7, #14]
 8006938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006940:	7bbb      	ldrb	r3, [r7, #14]
 8006942:	4619      	mov	r1, r3
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 f8f4 	bl	8007b32 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fcb7 	bl	80072be <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
        }
        break;
 800695e:	e004      	b.n	800696a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fbe0 	bl	8007128 <USBD_CtlError>
        break;
 8006968:	e000      	b.n	800696c <USBD_StdEPReq+0x13c>
        break;
 800696a:	bf00      	nop
      }
      break;
 800696c:	e0aa      	b.n	8006ac4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006974:	2b02      	cmp	r3, #2
 8006976:	d002      	beq.n	800697e <USBD_StdEPReq+0x14e>
 8006978:	2b03      	cmp	r3, #3
 800697a:	d032      	beq.n	80069e2 <USBD_StdEPReq+0x1b2>
 800697c:	e097      	b.n	8006aae <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800697e:	7bbb      	ldrb	r3, [r7, #14]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <USBD_StdEPReq+0x164>
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b80      	cmp	r3, #128	; 0x80
 8006988:	d004      	beq.n	8006994 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fbcb 	bl	8007128 <USBD_CtlError>
          break;
 8006992:	e091      	b.n	8006ab8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006994:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006998:	2b00      	cmp	r3, #0
 800699a:	da0b      	bge.n	80069b4 <USBD_StdEPReq+0x184>
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069a2:	4613      	mov	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	3310      	adds	r3, #16
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	4413      	add	r3, r2
 80069b0:	3304      	adds	r3, #4
 80069b2:	e00b      	b.n	80069cc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80069b4:	7bbb      	ldrb	r3, [r7, #14]
 80069b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069ba:	4613      	mov	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4413      	add	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	4413      	add	r3, r2
 80069ca:	3304      	adds	r3, #4
 80069cc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2202      	movs	r2, #2
 80069d8:	4619      	mov	r1, r3
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fc15 	bl	800720a <USBD_CtlSendData>
        break;
 80069e0:	e06a      	b.n	8006ab8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80069e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	da11      	bge.n	8006a0e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069ea:	7bbb      	ldrb	r3, [r7, #14]
 80069ec:	f003 020f 	and.w	r2, r3, #15
 80069f0:	6879      	ldr	r1, [r7, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	4413      	add	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	440b      	add	r3, r1
 80069fc:	3324      	adds	r3, #36	; 0x24
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d117      	bne.n	8006a34 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fb8e 	bl	8007128 <USBD_CtlError>
            break;
 8006a0c:	e054      	b.n	8006ab8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	f003 020f 	and.w	r2, r3, #15
 8006a14:	6879      	ldr	r1, [r7, #4]
 8006a16:	4613      	mov	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fb7b 	bl	8007128 <USBD_CtlError>
            break;
 8006a32:	e041      	b.n	8006ab8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	da0b      	bge.n	8006a54 <USBD_StdEPReq+0x224>
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	3310      	adds	r3, #16
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	4413      	add	r3, r2
 8006a50:	3304      	adds	r3, #4
 8006a52:	e00b      	b.n	8006a6c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	4413      	add	r3, r2
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <USBD_StdEPReq+0x24a>
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d103      	bne.n	8006a82 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	e00e      	b.n	8006aa0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a82:	7bbb      	ldrb	r3, [r7, #14]
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 f872 	bl	8007b70 <USBD_LL_IsStallEP>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	e002      	b.n	8006aa0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 fbaf 	bl	800720a <USBD_CtlSendData>
          break;
 8006aac:	e004      	b.n	8006ab8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fb39 	bl	8007128 <USBD_CtlError>
        break;
 8006ab6:	bf00      	nop
      }
      break;
 8006ab8:	e004      	b.n	8006ac4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 fb33 	bl	8007128 <USBD_CtlError>
      break;
 8006ac2:	bf00      	nop
    }
    break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fb2d 	bl	8007128 <USBD_CtlError>
    break;
 8006ace:	bf00      	nop
  }

  return ret;
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	885b      	ldrh	r3, [r3, #2]
 8006af6:	0a1b      	lsrs	r3, r3, #8
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	2b06      	cmp	r3, #6
 8006afe:	f200 8128 	bhi.w	8006d52 <USBD_GetDescriptor+0x276>
 8006b02:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <USBD_GetDescriptor+0x2c>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b25 	.word	0x08006b25
 8006b0c:	08006b3d 	.word	0x08006b3d
 8006b10:	08006b7d 	.word	0x08006b7d
 8006b14:	08006d53 	.word	0x08006d53
 8006b18:	08006d53 	.word	0x08006d53
 8006b1c:	08006cf3 	.word	0x08006cf3
 8006b20:	08006d1f 	.word	0x08006d1f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	7c12      	ldrb	r2, [r2, #16]
 8006b30:	f107 0108 	add.w	r1, r7, #8
 8006b34:	4610      	mov	r0, r2
 8006b36:	4798      	blx	r3
 8006b38:	60f8      	str	r0, [r7, #12]
    break;
 8006b3a:	e112      	b.n	8006d62 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	7c1b      	ldrb	r3, [r3, #16]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10d      	bne.n	8006b60 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	f107 0208 	add.w	r2, r7, #8
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
 8006b54:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006b5e:	e100      	b.n	8006d62 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	f107 0208 	add.w	r2, r7, #8
 8006b6c:	4610      	mov	r0, r2
 8006b6e:	4798      	blx	r3
 8006b70:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3301      	adds	r3, #1
 8006b76:	2202      	movs	r2, #2
 8006b78:	701a      	strb	r2, [r3, #0]
    break;
 8006b7a:	e0f2      	b.n	8006d62 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	885b      	ldrh	r3, [r3, #2]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b05      	cmp	r3, #5
 8006b84:	f200 80ac 	bhi.w	8006ce0 <USBD_GetDescriptor+0x204>
 8006b88:	a201      	add	r2, pc, #4	; (adr r2, 8006b90 <USBD_GetDescriptor+0xb4>)
 8006b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8e:	bf00      	nop
 8006b90:	08006ba9 	.word	0x08006ba9
 8006b94:	08006bdd 	.word	0x08006bdd
 8006b98:	08006c11 	.word	0x08006c11
 8006b9c:	08006c45 	.word	0x08006c45
 8006ba0:	08006c79 	.word	0x08006c79
 8006ba4:	08006cad 	.word	0x08006cad
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00b      	beq.n	8006bcc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	7c12      	ldrb	r2, [r2, #16]
 8006bc0:	f107 0108 	add.w	r1, r7, #8
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
 8006bc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bca:	e091      	b.n	8006cf0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 faaa 	bl	8007128 <USBD_CtlError>
        err++;
 8006bd4:	7afb      	ldrb	r3, [r7, #11]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	72fb      	strb	r3, [r7, #11]
      break;
 8006bda:	e089      	b.n	8006cf0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00b      	beq.n	8006c00 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	7c12      	ldrb	r2, [r2, #16]
 8006bf4:	f107 0108 	add.w	r1, r7, #8
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	4798      	blx	r3
 8006bfc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bfe:	e077      	b.n	8006cf0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fa90 	bl	8007128 <USBD_CtlError>
        err++;
 8006c08:	7afb      	ldrb	r3, [r7, #11]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	72fb      	strb	r3, [r7, #11]
      break;
 8006c0e:	e06f      	b.n	8006cf0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00b      	beq.n	8006c34 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	7c12      	ldrb	r2, [r2, #16]
 8006c28:	f107 0108 	add.w	r1, r7, #8
 8006c2c:	4610      	mov	r0, r2
 8006c2e:	4798      	blx	r3
 8006c30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c32:	e05d      	b.n	8006cf0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fa76 	bl	8007128 <USBD_CtlError>
        err++;
 8006c3c:	7afb      	ldrb	r3, [r7, #11]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	72fb      	strb	r3, [r7, #11]
      break;
 8006c42:	e055      	b.n	8006cf0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d00b      	beq.n	8006c68 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	7c12      	ldrb	r2, [r2, #16]
 8006c5c:	f107 0108 	add.w	r1, r7, #8
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c66:	e043      	b.n	8006cf0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa5c 	bl	8007128 <USBD_CtlError>
        err++;
 8006c70:	7afb      	ldrb	r3, [r7, #11]
 8006c72:	3301      	adds	r3, #1
 8006c74:	72fb      	strb	r3, [r7, #11]
      break;
 8006c76:	e03b      	b.n	8006cf0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	7c12      	ldrb	r2, [r2, #16]
 8006c90:	f107 0108 	add.w	r1, r7, #8
 8006c94:	4610      	mov	r0, r2
 8006c96:	4798      	blx	r3
 8006c98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c9a:	e029      	b.n	8006cf0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fa42 	bl	8007128 <USBD_CtlError>
        err++;
 8006ca4:	7afb      	ldrb	r3, [r7, #11]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	72fb      	strb	r3, [r7, #11]
      break;
 8006caa:	e021      	b.n	8006cf0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	7c12      	ldrb	r2, [r2, #16]
 8006cc4:	f107 0108 	add.w	r1, r7, #8
 8006cc8:	4610      	mov	r0, r2
 8006cca:	4798      	blx	r3
 8006ccc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cce:	e00f      	b.n	8006cf0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa28 	bl	8007128 <USBD_CtlError>
        err++;
 8006cd8:	7afb      	ldrb	r3, [r7, #11]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	72fb      	strb	r3, [r7, #11]
      break;
 8006cde:	e007      	b.n	8006cf0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006ce0:	6839      	ldr	r1, [r7, #0]
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fa20 	bl	8007128 <USBD_CtlError>
      err++;
 8006ce8:	7afb      	ldrb	r3, [r7, #11]
 8006cea:	3301      	adds	r3, #1
 8006cec:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006cee:	bf00      	nop
    }
    break;
 8006cf0:	e037      	b.n	8006d62 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	7c1b      	ldrb	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d109      	bne.n	8006d0e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d02:	f107 0208 	add.w	r2, r7, #8
 8006d06:	4610      	mov	r0, r2
 8006d08:	4798      	blx	r3
 8006d0a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006d0c:	e029      	b.n	8006d62 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 fa09 	bl	8007128 <USBD_CtlError>
      err++;
 8006d16:	7afb      	ldrb	r3, [r7, #11]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	72fb      	strb	r3, [r7, #11]
    break;
 8006d1c:	e021      	b.n	8006d62 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	7c1b      	ldrb	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10d      	bne.n	8006d42 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2e:	f107 0208 	add.w	r2, r7, #8
 8006d32:	4610      	mov	r0, r2
 8006d34:	4798      	blx	r3
 8006d36:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	2207      	movs	r2, #7
 8006d3e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006d40:	e00f      	b.n	8006d62 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006d42:	6839      	ldr	r1, [r7, #0]
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f9ef 	bl	8007128 <USBD_CtlError>
      err++;
 8006d4a:	7afb      	ldrb	r3, [r7, #11]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	72fb      	strb	r3, [r7, #11]
    break;
 8006d50:	e007      	b.n	8006d62 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f9e7 	bl	8007128 <USBD_CtlError>
    err++;
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	72fb      	strb	r3, [r7, #11]
    break;
 8006d60:	bf00      	nop
  }

  if (err != 0U)
 8006d62:	7afb      	ldrb	r3, [r7, #11]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d11e      	bne.n	8006da6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	88db      	ldrh	r3, [r3, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d016      	beq.n	8006d9e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006d70:	893b      	ldrh	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00e      	beq.n	8006d94 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	88da      	ldrh	r2, [r3, #6]
 8006d7a:	893b      	ldrh	r3, [r7, #8]
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	bf28      	it	cs
 8006d80:	4613      	movcs	r3, r2
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d86:	893b      	ldrh	r3, [r7, #8]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	68f9      	ldr	r1, [r7, #12]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fa3c 	bl	800720a <USBD_CtlSendData>
 8006d92:	e009      	b.n	8006da8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f9c6 	bl	8007128 <USBD_CtlError>
 8006d9c:	e004      	b.n	8006da8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa8d 	bl	80072be <USBD_CtlSendStatus>
 8006da4:	e000      	b.n	8006da8 <USBD_GetDescriptor+0x2cc>
    return;
 8006da6:	bf00      	nop
    }
  }
}
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop

08006db0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	889b      	ldrh	r3, [r3, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d130      	bne.n	8006e24 <USBD_SetAddress+0x74>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	88db      	ldrh	r3, [r3, #6]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d12c      	bne.n	8006e24 <USBD_SetAddress+0x74>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	2b7f      	cmp	r3, #127	; 0x7f
 8006dd0:	d828      	bhi.n	8006e24 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	885b      	ldrh	r3, [r3, #2]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ddc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006de4:	2b03      	cmp	r3, #3
 8006de6:	d104      	bne.n	8006df2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f99c 	bl	8007128 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006df0:	e01c      	b.n	8006e2c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7bfa      	ldrb	r2, [r7, #15]
 8006df6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fee2 	bl	8007bc8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fa5a 	bl	80072be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e18:	e008      	b.n	8006e2c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e22:	e003      	b.n	8006e2c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f97e 	bl	8007128 <USBD_CtlError>
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	885b      	ldrh	r3, [r3, #2]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	4b4b      	ldr	r3, [pc, #300]	; (8006f78 <USBD_SetConfig+0x144>)
 8006e4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e4c:	4b4a      	ldr	r3, [pc, #296]	; (8006f78 <USBD_SetConfig+0x144>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d905      	bls.n	8006e60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f966 	bl	8007128 <USBD_CtlError>
    return USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e087      	b.n	8006f70 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d002      	beq.n	8006e70 <USBD_SetConfig+0x3c>
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d025      	beq.n	8006eba <USBD_SetConfig+0x86>
 8006e6e:	e071      	b.n	8006f54 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006e70:	4b41      	ldr	r3, [pc, #260]	; (8006f78 <USBD_SetConfig+0x144>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01c      	beq.n	8006eb2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006e78:	4b3f      	ldr	r3, [pc, #252]	; (8006f78 <USBD_SetConfig+0x144>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e82:	4b3d      	ldr	r3, [pc, #244]	; (8006f78 <USBD_SetConfig+0x144>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f7ff f9a7 	bl	80061dc <USBD_SetClassConfig>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f944 	bl	8007128 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006ea0:	e065      	b.n	8006f6e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa0b 	bl	80072be <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2203      	movs	r2, #3
 8006eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006eb0:	e05d      	b.n	8006f6e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fa03 	bl	80072be <USBD_CtlSendStatus>
    break;
 8006eb8:	e059      	b.n	8006f6e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006eba:	4b2f      	ldr	r3, [pc, #188]	; (8006f78 <USBD_SetConfig+0x144>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d112      	bne.n	8006ee8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006eca:	4b2b      	ldr	r3, [pc, #172]	; (8006f78 <USBD_SetConfig+0x144>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	461a      	mov	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ed4:	4b28      	ldr	r3, [pc, #160]	; (8006f78 <USBD_SetConfig+0x144>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7ff f99a 	bl	8006214 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f9ec 	bl	80072be <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006ee6:	e042      	b.n	8006f6e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006ee8:	4b23      	ldr	r3, [pc, #140]	; (8006f78 <USBD_SetConfig+0x144>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d02a      	beq.n	8006f4c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	4619      	mov	r1, r3
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff f988 	bl	8006214 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006f04:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <USBD_SetConfig+0x144>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f0e:	4b1a      	ldr	r3, [pc, #104]	; (8006f78 <USBD_SetConfig+0x144>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f7ff f961 	bl	80061dc <USBD_SetClassConfig>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00f      	beq.n	8006f44 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006f24:	6839      	ldr	r1, [r7, #0]
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f8fe 	bl	8007128 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff f96d 	bl	8006214 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006f42:	e014      	b.n	8006f6e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 f9ba 	bl	80072be <USBD_CtlSendStatus>
    break;
 8006f4a:	e010      	b.n	8006f6e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f9b6 	bl	80072be <USBD_CtlSendStatus>
    break;
 8006f52:	e00c      	b.n	8006f6e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f8e6 	bl	8007128 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f5c:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <USBD_SetConfig+0x144>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff f956 	bl	8006214 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f6c:	bf00      	nop
  }

  return ret;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	200004c0 	.word	0x200004c0

08006f7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	88db      	ldrh	r3, [r3, #6]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d004      	beq.n	8006f98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f8e:	6839      	ldr	r1, [r7, #0]
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 f8c9 	bl	8007128 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006f96:	e021      	b.n	8006fdc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	db17      	blt.n	8006fd2 <USBD_GetConfig+0x56>
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	dd02      	ble.n	8006fac <USBD_GetConfig+0x30>
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d00b      	beq.n	8006fc2 <USBD_GetConfig+0x46>
 8006faa:	e012      	b.n	8006fd2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4619      	mov	r1, r3
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f925 	bl	800720a <USBD_CtlSendData>
      break;
 8006fc0:	e00c      	b.n	8006fdc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3304      	adds	r3, #4
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f91d 	bl	800720a <USBD_CtlSendData>
      break;
 8006fd0:	e004      	b.n	8006fdc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f8a7 	bl	8007128 <USBD_CtlError>
      break;
 8006fda:	bf00      	nop
}
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d81e      	bhi.n	8007038 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88db      	ldrh	r3, [r3, #6]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d004      	beq.n	800700c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007002:	6839      	ldr	r1, [r7, #0]
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f88f 	bl	8007128 <USBD_CtlError>
      break;
 800700a:	e01a      	b.n	8007042 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d005      	beq.n	8007028 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f043 0202 	orr.w	r2, r3, #2
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	330c      	adds	r3, #12
 800702c:	2202      	movs	r2, #2
 800702e:	4619      	mov	r1, r3
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f8ea 	bl	800720a <USBD_CtlSendData>
    break;
 8007036:	e004      	b.n	8007042 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f874 	bl	8007128 <USBD_CtlError>
    break;
 8007040:	bf00      	nop
  }
}
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
 8007052:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	885b      	ldrh	r3, [r3, #2]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d106      	bne.n	800706a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f92a 	bl	80072be <USBD_CtlSendStatus>
  }
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007082:	3b01      	subs	r3, #1
 8007084:	2b02      	cmp	r3, #2
 8007086:	d80b      	bhi.n	80070a0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	885b      	ldrh	r3, [r3, #2]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d10c      	bne.n	80070aa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f910 	bl	80072be <USBD_CtlSendStatus>
      }
      break;
 800709e:	e004      	b.n	80070aa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f840 	bl	8007128 <USBD_CtlError>
      break;
 80070a8:	e000      	b.n	80070ac <USBD_ClrFeature+0x3a>
      break;
 80070aa:	bf00      	nop
  }
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	781a      	ldrb	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3301      	adds	r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	781a      	ldrb	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	3301      	adds	r3, #1
 80070dc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f7ff fad3 	bl	800668a <SWAPBYTE>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	3301      	adds	r3, #1
 80070f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3301      	adds	r3, #1
 80070f6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7ff fac6 	bl	800668a <SWAPBYTE>
 80070fe:	4603      	mov	r3, r0
 8007100:	461a      	mov	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3301      	adds	r3, #1
 800710a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3301      	adds	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fab9 	bl	800668a <SWAPBYTE>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	80da      	strh	r2, [r3, #6]
}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007132:	2180      	movs	r1, #128	; 0x80
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fcdd 	bl	8007af4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800713a:	2100      	movs	r1, #0
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fcd9 	bl	8007af4 <USBD_LL_StallEP>
}
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b086      	sub	sp, #24
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d036      	beq.n	80071ce <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007164:	6938      	ldr	r0, [r7, #16]
 8007166:	f000 f836 	bl	80071d6 <USBD_GetLen>
 800716a:	4603      	mov	r3, r0
 800716c:	3301      	adds	r3, #1
 800716e:	b29b      	uxth	r3, r3
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	b29a      	uxth	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	4413      	add	r3, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	7812      	ldrb	r2, [r2, #0]
 8007182:	701a      	strb	r2, [r3, #0]
  idx++;
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	3301      	adds	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800718a:	7dfb      	ldrb	r3, [r7, #23]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	4413      	add	r3, r2
 8007190:	2203      	movs	r2, #3
 8007192:	701a      	strb	r2, [r3, #0]
  idx++;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	3301      	adds	r3, #1
 8007198:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800719a:	e013      	b.n	80071c4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	68ba      	ldr	r2, [r7, #8]
 80071a0:	4413      	add	r3, r2
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	7812      	ldrb	r2, [r2, #0]
 80071a6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	3301      	adds	r3, #1
 80071ac:	613b      	str	r3, [r7, #16]
    idx++;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	3301      	adds	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071b4:	7dfb      	ldrb	r3, [r7, #23]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	4413      	add	r3, r2
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
    idx++;
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	3301      	adds	r3, #1
 80071c2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1e7      	bne.n	800719c <USBD_GetString+0x52>
 80071cc:	e000      	b.n	80071d0 <USBD_GetString+0x86>
    return;
 80071ce:	bf00      	nop
  }
}
 80071d0:	3718      	adds	r7, #24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b085      	sub	sp, #20
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071e6:	e005      	b.n	80071f4 <USBD_GetLen+0x1e>
  {
    len++;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	3301      	adds	r3, #1
 80071ec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	3301      	adds	r3, #1
 80071f2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1f5      	bne.n	80071e8 <USBD_GetLen+0x12>
  }

  return len;
 80071fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b084      	sub	sp, #16
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2202      	movs	r2, #2
 800721a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	2100      	movs	r1, #0
 8007230:	68f8      	ldr	r0, [r7, #12]
 8007232:	f000 fce8 	bl	8007c06 <USBD_LL_Transmit>

  return USBD_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}

08007240 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68ba      	ldr	r2, [r7, #8]
 8007250:	2100      	movs	r1, #0
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 fcd7 	bl	8007c06 <USBD_LL_Transmit>

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2203      	movs	r2, #3
 8007272:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	2100      	movs	r1, #0
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fcdb 	bl	8007c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	2100      	movs	r1, #0
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fcca 	bl	8007c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2204      	movs	r2, #4
 80072ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80072ce:	2300      	movs	r3, #0
 80072d0:	2200      	movs	r2, #0
 80072d2:	2100      	movs	r1, #0
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fc96 	bl	8007c06 <USBD_LL_Transmit>

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2205      	movs	r2, #5
 80072f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072f4:	2300      	movs	r3, #0
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 fca4 	bl	8007c48 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
	...

0800730c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007310:	2200      	movs	r2, #0
 8007312:	4912      	ldr	r1, [pc, #72]	; (800735c <MX_USB_DEVICE_Init+0x50>)
 8007314:	4812      	ldr	r0, [pc, #72]	; (8007360 <MX_USB_DEVICE_Init+0x54>)
 8007316:	f7fe fef3 	bl	8006100 <USBD_Init>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007320:	f7f9 fc7c 	bl	8000c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007324:	490f      	ldr	r1, [pc, #60]	; (8007364 <MX_USB_DEVICE_Init+0x58>)
 8007326:	480e      	ldr	r0, [pc, #56]	; (8007360 <MX_USB_DEVICE_Init+0x54>)
 8007328:	f7fe ff20 	bl	800616c <USBD_RegisterClass>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007332:	f7f9 fc73 	bl	8000c1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007336:	490c      	ldr	r1, [pc, #48]	; (8007368 <MX_USB_DEVICE_Init+0x5c>)
 8007338:	4809      	ldr	r0, [pc, #36]	; (8007360 <MX_USB_DEVICE_Init+0x54>)
 800733a:	f7fe fe45 	bl	8005fc8 <USBD_CDC_RegisterInterface>
 800733e:	4603      	mov	r3, r0
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007344:	f7f9 fc6a 	bl	8000c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007348:	4805      	ldr	r0, [pc, #20]	; (8007360 <MX_USB_DEVICE_Init+0x54>)
 800734a:	f7fe ff30 	bl	80061ae <USBD_Start>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007354:	f7f9 fc62 	bl	8000c1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007358:	bf00      	nop
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20000130 	.word	0x20000130
 8007360:	200009a4 	.word	0x200009a4
 8007364:	20000018 	.word	0x20000018
 8007368:	2000011c 	.word	0x2000011c

0800736c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007370:	2200      	movs	r2, #0
 8007372:	4905      	ldr	r1, [pc, #20]	; (8007388 <CDC_Init_FS+0x1c>)
 8007374:	4805      	ldr	r0, [pc, #20]	; (800738c <CDC_Init_FS+0x20>)
 8007376:	f7fe fe3c 	bl	8005ff2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800737a:	4905      	ldr	r1, [pc, #20]	; (8007390 <CDC_Init_FS+0x24>)
 800737c:	4803      	ldr	r0, [pc, #12]	; (800738c <CDC_Init_FS+0x20>)
 800737e:	f7fe fe51 	bl	8006024 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007382:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20001478 	.word	0x20001478
 800738c:	200009a4 	.word	0x200009a4
 8007390:	20000c78 	.word	0x20000c78

08007394 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007398:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800739a:	4618      	mov	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	6039      	str	r1, [r7, #0]
 80073ae:	71fb      	strb	r3, [r7, #7]
 80073b0:	4613      	mov	r3, r2
 80073b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073b4:	79fb      	ldrb	r3, [r7, #7]
 80073b6:	2b23      	cmp	r3, #35	; 0x23
 80073b8:	d84a      	bhi.n	8007450 <CDC_Control_FS+0xac>
 80073ba:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <CDC_Control_FS+0x1c>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	08007451 	.word	0x08007451
 80073c4:	08007451 	.word	0x08007451
 80073c8:	08007451 	.word	0x08007451
 80073cc:	08007451 	.word	0x08007451
 80073d0:	08007451 	.word	0x08007451
 80073d4:	08007451 	.word	0x08007451
 80073d8:	08007451 	.word	0x08007451
 80073dc:	08007451 	.word	0x08007451
 80073e0:	08007451 	.word	0x08007451
 80073e4:	08007451 	.word	0x08007451
 80073e8:	08007451 	.word	0x08007451
 80073ec:	08007451 	.word	0x08007451
 80073f0:	08007451 	.word	0x08007451
 80073f4:	08007451 	.word	0x08007451
 80073f8:	08007451 	.word	0x08007451
 80073fc:	08007451 	.word	0x08007451
 8007400:	08007451 	.word	0x08007451
 8007404:	08007451 	.word	0x08007451
 8007408:	08007451 	.word	0x08007451
 800740c:	08007451 	.word	0x08007451
 8007410:	08007451 	.word	0x08007451
 8007414:	08007451 	.word	0x08007451
 8007418:	08007451 	.word	0x08007451
 800741c:	08007451 	.word	0x08007451
 8007420:	08007451 	.word	0x08007451
 8007424:	08007451 	.word	0x08007451
 8007428:	08007451 	.word	0x08007451
 800742c:	08007451 	.word	0x08007451
 8007430:	08007451 	.word	0x08007451
 8007434:	08007451 	.word	0x08007451
 8007438:	08007451 	.word	0x08007451
 800743c:	08007451 	.word	0x08007451
 8007440:	08007451 	.word	0x08007451
 8007444:	08007451 	.word	0x08007451
 8007448:	08007451 	.word	0x08007451
 800744c:	08007451 	.word	0x08007451
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007450:	bf00      	nop
  }

  return (USBD_OK);
 8007452:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (Buf[0] == 'n')
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b6e      	cmp	r3, #110	; 0x6e
 8007470:	d102      	bne.n	8007478 <CDC_Receive_FS+0x18>
	  Status = 0;
 8007472:	4b07      	ldr	r3, [pc, #28]	; (8007490 <CDC_Receive_FS+0x30>)
 8007474:	2200      	movs	r2, #0
 8007476:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007478:	6879      	ldr	r1, [r7, #4]
 800747a:	4806      	ldr	r0, [pc, #24]	; (8007494 <CDC_Receive_FS+0x34>)
 800747c:	f7fe fdd2 	bl	8006024 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007480:	4804      	ldr	r0, [pc, #16]	; (8007494 <CDC_Receive_FS+0x34>)
 8007482:	f7fe fe13 	bl	80060ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007486:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000c74 	.word	0x20000c74
 8007494:	200009a4 	.word	0x200009a4

08007498 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80074a8:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <CDC_Transmit_FS+0x48>)
 80074aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e00b      	b.n	80074d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	461a      	mov	r2, r3
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	4806      	ldr	r0, [pc, #24]	; (80074e0 <CDC_Transmit_FS+0x48>)
 80074c6:	f7fe fd94 	bl	8005ff2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80074ca:	4805      	ldr	r0, [pc, #20]	; (80074e0 <CDC_Transmit_FS+0x48>)
 80074cc:	f7fe fdbe 	bl	800604c <USBD_CDC_TransmitPacket>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	200009a4 	.word	0x200009a4

080074e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	4613      	mov	r3, r2
 80074f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80074f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
	...

08007508 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	4603      	mov	r3, r0
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	2212      	movs	r2, #18
 8007518:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800751a:	4b03      	ldr	r3, [pc, #12]	; (8007528 <USBD_FS_DeviceDescriptor+0x20>)
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	2000014c 	.word	0x2000014c

0800752c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	4603      	mov	r3, r0
 8007534:	6039      	str	r1, [r7, #0]
 8007536:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2204      	movs	r2, #4
 800753c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800753e:	4b03      	ldr	r3, [pc, #12]	; (800754c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	20000160 	.word	0x20000160

08007550 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	6039      	str	r1, [r7, #0]
 800755a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800755c:	79fb      	ldrb	r3, [r7, #7]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d105      	bne.n	800756e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	4907      	ldr	r1, [pc, #28]	; (8007584 <USBD_FS_ProductStrDescriptor+0x34>)
 8007566:	4808      	ldr	r0, [pc, #32]	; (8007588 <USBD_FS_ProductStrDescriptor+0x38>)
 8007568:	f7ff fdef 	bl	800714a <USBD_GetString>
 800756c:	e004      	b.n	8007578 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4904      	ldr	r1, [pc, #16]	; (8007584 <USBD_FS_ProductStrDescriptor+0x34>)
 8007572:	4805      	ldr	r0, [pc, #20]	; (8007588 <USBD_FS_ProductStrDescriptor+0x38>)
 8007574:	f7ff fde9 	bl	800714a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007578:	4b02      	ldr	r3, [pc, #8]	; (8007584 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800757a:	4618      	mov	r0, r3
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20001c78 	.word	0x20001c78
 8007588:	0800dac8 	.word	0x0800dac8

0800758c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
 8007592:	4603      	mov	r3, r0
 8007594:	6039      	str	r1, [r7, #0]
 8007596:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	4904      	ldr	r1, [pc, #16]	; (80075ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800759c:	4804      	ldr	r0, [pc, #16]	; (80075b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800759e:	f7ff fdd4 	bl	800714a <USBD_GetString>
  return USBD_StrDesc;
 80075a2:	4b02      	ldr	r3, [pc, #8]	; (80075ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20001c78 	.word	0x20001c78
 80075b0:	0800dae0 	.word	0x0800dae0

080075b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	4603      	mov	r3, r0
 80075bc:	6039      	str	r1, [r7, #0]
 80075be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	221a      	movs	r2, #26
 80075c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075c6:	f000 f843 	bl	8007650 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075ca:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	20000164 	.word	0x20000164

080075d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
 80075de:	4603      	mov	r3, r0
 80075e0:	6039      	str	r1, [r7, #0]
 80075e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d105      	bne.n	80075f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	4907      	ldr	r1, [pc, #28]	; (800760c <USBD_FS_ConfigStrDescriptor+0x34>)
 80075ee:	4808      	ldr	r0, [pc, #32]	; (8007610 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075f0:	f7ff fdab 	bl	800714a <USBD_GetString>
 80075f4:	e004      	b.n	8007600 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4904      	ldr	r1, [pc, #16]	; (800760c <USBD_FS_ConfigStrDescriptor+0x34>)
 80075fa:	4805      	ldr	r0, [pc, #20]	; (8007610 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075fc:	f7ff fda5 	bl	800714a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007600:	4b02      	ldr	r3, [pc, #8]	; (800760c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007602:	4618      	mov	r0, r3
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20001c78 	.word	0x20001c78
 8007610:	0800daf4 	.word	0x0800daf4

08007614 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	6039      	str	r1, [r7, #0]
 800761e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007620:	79fb      	ldrb	r3, [r7, #7]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4907      	ldr	r1, [pc, #28]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800762a:	4808      	ldr	r0, [pc, #32]	; (800764c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800762c:	f7ff fd8d 	bl	800714a <USBD_GetString>
 8007630:	e004      	b.n	800763c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	4904      	ldr	r1, [pc, #16]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007636:	4805      	ldr	r0, [pc, #20]	; (800764c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007638:	f7ff fd87 	bl	800714a <USBD_GetString>
  }
  return USBD_StrDesc;
 800763c:	4b02      	ldr	r3, [pc, #8]	; (8007648 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20001c78 	.word	0x20001c78
 800764c:	0800db00 	.word	0x0800db00

08007650 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007656:	4b0f      	ldr	r3, [pc, #60]	; (8007694 <Get_SerialNum+0x44>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800765c:	4b0e      	ldr	r3, [pc, #56]	; (8007698 <Get_SerialNum+0x48>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007662:	4b0e      	ldr	r3, [pc, #56]	; (800769c <Get_SerialNum+0x4c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007676:	2208      	movs	r2, #8
 8007678:	4909      	ldr	r1, [pc, #36]	; (80076a0 <Get_SerialNum+0x50>)
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f814 	bl	80076a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007680:	2204      	movs	r2, #4
 8007682:	4908      	ldr	r1, [pc, #32]	; (80076a4 <Get_SerialNum+0x54>)
 8007684:	68b8      	ldr	r0, [r7, #8]
 8007686:	f000 f80f 	bl	80076a8 <IntToUnicode>
  }
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	1fff7a10 	.word	0x1fff7a10
 8007698:	1fff7a14 	.word	0x1fff7a14
 800769c:	1fff7a18 	.word	0x1fff7a18
 80076a0:	20000166 	.word	0x20000166
 80076a4:	20000176 	.word	0x20000176

080076a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	4613      	mov	r3, r2
 80076b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ba:	2300      	movs	r3, #0
 80076bc:	75fb      	strb	r3, [r7, #23]
 80076be:	e027      	b.n	8007710 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	0f1b      	lsrs	r3, r3, #28
 80076c4:	2b09      	cmp	r3, #9
 80076c6:	d80b      	bhi.n	80076e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	0f1b      	lsrs	r3, r3, #28
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4619      	mov	r1, r3
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	440b      	add	r3, r1
 80076d8:	3230      	adds	r2, #48	; 0x30
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	e00a      	b.n	80076f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	0f1b      	lsrs	r3, r3, #28
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	4619      	mov	r1, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	440b      	add	r3, r1
 80076f0:	3237      	adds	r2, #55	; 0x37
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	3301      	adds	r3, #1
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4413      	add	r3, r2
 8007706:	2200      	movs	r2, #0
 8007708:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800770a:	7dfb      	ldrb	r3, [r7, #23]
 800770c:	3301      	adds	r3, #1
 800770e:	75fb      	strb	r3, [r7, #23]
 8007710:	7dfa      	ldrb	r2, [r7, #23]
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	429a      	cmp	r2, r3
 8007716:	d3d3      	bcc.n	80076c0 <IntToUnicode+0x18>
  }
}
 8007718:	bf00      	nop
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	; 0x28
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800772c:	f107 0314 	add.w	r3, r7, #20
 8007730:	2200      	movs	r2, #0
 8007732:	601a      	str	r2, [r3, #0]
 8007734:	605a      	str	r2, [r3, #4]
 8007736:	609a      	str	r2, [r3, #8]
 8007738:	60da      	str	r2, [r3, #12]
 800773a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007744:	d13a      	bne.n	80077bc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007746:	2300      	movs	r3, #0
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <HAL_PCD_MspInit+0xa0>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	4a1d      	ldr	r2, [pc, #116]	; (80077c4 <HAL_PCD_MspInit+0xa0>)
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	6313      	str	r3, [r2, #48]	; 0x30
 8007756:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <HAL_PCD_MspInit+0xa0>)
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	613b      	str	r3, [r7, #16]
 8007760:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007762:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007768:	2302      	movs	r3, #2
 800776a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800776c:	2300      	movs	r3, #0
 800776e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007770:	2303      	movs	r3, #3
 8007772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007774:	230a      	movs	r3, #10
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007778:	f107 0314 	add.w	r3, r7, #20
 800777c:	4619      	mov	r1, r3
 800777e:	4812      	ldr	r0, [pc, #72]	; (80077c8 <HAL_PCD_MspInit+0xa4>)
 8007780:	f7f9 fd48 	bl	8001214 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007784:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <HAL_PCD_MspInit+0xa0>)
 8007786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007788:	4a0e      	ldr	r2, [pc, #56]	; (80077c4 <HAL_PCD_MspInit+0xa0>)
 800778a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778e:	6353      	str	r3, [r2, #52]	; 0x34
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <HAL_PCD_MspInit+0xa0>)
 8007796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007798:	4a0a      	ldr	r2, [pc, #40]	; (80077c4 <HAL_PCD_MspInit+0xa0>)
 800779a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800779e:	6453      	str	r3, [r2, #68]	; 0x44
 80077a0:	4b08      	ldr	r3, [pc, #32]	; (80077c4 <HAL_PCD_MspInit+0xa0>)
 80077a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077a8:	60fb      	str	r3, [r7, #12]
 80077aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077ac:	2200      	movs	r2, #0
 80077ae:	2100      	movs	r1, #0
 80077b0:	2043      	movs	r0, #67	; 0x43
 80077b2:	f7f9 fcf8 	bl	80011a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077b6:	2043      	movs	r0, #67	; 0x43
 80077b8:	f7f9 fd11 	bl	80011de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077bc:	bf00      	nop
 80077be:	3728      	adds	r7, #40	; 0x28
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40023800 	.word	0x40023800
 80077c8:	40020000 	.word	0x40020000

080077cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80077e0:	4619      	mov	r1, r3
 80077e2:	4610      	mov	r0, r2
 80077e4:	f7fe fd2e 	bl	8006244 <USBD_LL_SetupStage>
}
 80077e8:	bf00      	nop
 80077ea:	3708      	adds	r7, #8
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007802:	78fa      	ldrb	r2, [r7, #3]
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	00db      	lsls	r3, r3, #3
 800780a:	1a9b      	subs	r3, r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	78fb      	ldrb	r3, [r7, #3]
 8007818:	4619      	mov	r1, r3
 800781a:	f7fe fd66 	bl	80062ea <USBD_LL_DataOutStage>
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	460b      	mov	r3, r1
 8007830:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	4613      	mov	r3, r2
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	3348      	adds	r3, #72	; 0x48
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	4619      	mov	r1, r3
 800784e:	f7fe fdaf 	bl	80063b0 <USBD_LL_DataInStage>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007868:	4618      	mov	r0, r3
 800786a:	f7fe feb3 	bl	80065d4 <USBD_LL_SOF>
}
 800786e:	bf00      	nop
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800787e:	2301      	movs	r3, #1
 8007880:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d001      	beq.n	800788e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800788a:	f7f9 f9c7 	bl	8000c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007894:	7bfa      	ldrb	r2, [r7, #15]
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f7fe fe60 	bl	800655e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7fe fe19 	bl	80064dc <USBD_LL_Reset>
}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7fe fe5b 	bl	800657e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	6812      	ldr	r2, [r2, #0]
 80078d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078da:	f043 0301 	orr.w	r3, r3, #1
 80078de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <HAL_PCD_SuspendCallback+0x48>)
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	4a03      	ldr	r2, [pc, #12]	; (80078fc <HAL_PCD_SuspendCallback+0x48>)
 80078ee:	f043 0306 	orr.w	r3, r3, #6
 80078f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}
 80078fc:	e000ed00 	.word	0xe000ed00

08007900 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800790e:	4618      	mov	r0, r3
 8007910:	f7fe fe4a 	bl	80065a8 <USBD_LL_Resume>
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	4611      	mov	r1, r2
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fe75 	bl	8006622 <USBD_LL_IsoOUTIncomplete>
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007952:	78fa      	ldrb	r2, [r7, #3]
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fe56 	bl	8006608 <USBD_LL_IsoINIncomplete>
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fe62 	bl	800663c <USBD_LL_DevConnected>
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800798e:	4618      	mov	r0, r3
 8007990:	f7fe fe5f 	bl	8006652 <USBD_LL_DevDisconnected>
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	781b      	ldrb	r3, [r3, #0]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d13c      	bne.n	8007a26 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079ac:	4a20      	ldr	r2, [pc, #128]	; (8007a30 <USBD_LL_Init+0x94>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a1e      	ldr	r2, [pc, #120]	; (8007a30 <USBD_LL_Init+0x94>)
 80079b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079bc:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <USBD_LL_Init+0x94>)
 80079be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079c4:	4b1a      	ldr	r3, [pc, #104]	; (8007a30 <USBD_LL_Init+0x94>)
 80079c6:	2204      	movs	r2, #4
 80079c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079ca:	4b19      	ldr	r3, [pc, #100]	; (8007a30 <USBD_LL_Init+0x94>)
 80079cc:	2202      	movs	r2, #2
 80079ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079d0:	4b17      	ldr	r3, [pc, #92]	; (8007a30 <USBD_LL_Init+0x94>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079d6:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <USBD_LL_Init+0x94>)
 80079d8:	2202      	movs	r2, #2
 80079da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079dc:	4b14      	ldr	r3, [pc, #80]	; (8007a30 <USBD_LL_Init+0x94>)
 80079de:	2200      	movs	r2, #0
 80079e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079e2:	4b13      	ldr	r3, [pc, #76]	; (8007a30 <USBD_LL_Init+0x94>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079e8:	4b11      	ldr	r3, [pc, #68]	; (8007a30 <USBD_LL_Init+0x94>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <USBD_LL_Init+0x94>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80079f4:	4b0e      	ldr	r3, [pc, #56]	; (8007a30 <USBD_LL_Init+0x94>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80079fa:	480d      	ldr	r0, [pc, #52]	; (8007a30 <USBD_LL_Init+0x94>)
 80079fc:	f7fa fd3f 	bl	800247e <HAL_PCD_Init>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a06:	f7f9 f909 	bl	8000c1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a0a:	2180      	movs	r1, #128	; 0x80
 8007a0c:	4808      	ldr	r0, [pc, #32]	; (8007a30 <USBD_LL_Init+0x94>)
 8007a0e:	f7fb fe9c 	bl	800374a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a12:	2240      	movs	r2, #64	; 0x40
 8007a14:	2100      	movs	r1, #0
 8007a16:	4806      	ldr	r0, [pc, #24]	; (8007a30 <USBD_LL_Init+0x94>)
 8007a18:	f7fb fe50 	bl	80036bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a1c:	2280      	movs	r2, #128	; 0x80
 8007a1e:	2101      	movs	r1, #1
 8007a20:	4803      	ldr	r0, [pc, #12]	; (8007a30 <USBD_LL_Init+0x94>)
 8007a22:	f7fb fe4b 	bl	80036bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20001e78 	.word	0x20001e78

08007a34 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fa fe34 	bl	80026b8 <HAL_PCD_Start>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 f92a 	bl	8007cb0 <USBD_Get_USB_Status>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
 8007a72:	4608      	mov	r0, r1
 8007a74:	4611      	mov	r1, r2
 8007a76:	461a      	mov	r2, r3
 8007a78:	4603      	mov	r3, r0
 8007a7a:	70fb      	strb	r3, [r7, #3]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70bb      	strb	r3, [r7, #2]
 8007a80:	4613      	mov	r3, r2
 8007a82:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a92:	78bb      	ldrb	r3, [r7, #2]
 8007a94:	883a      	ldrh	r2, [r7, #0]
 8007a96:	78f9      	ldrb	r1, [r7, #3]
 8007a98:	f7fb fa18 	bl	8002ecc <HAL_PCD_EP_Open>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 f904 	bl	8007cb0 <USBD_Get_USB_Status>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ad0:	78fa      	ldrb	r2, [r7, #3]
 8007ad2:	4611      	mov	r1, r2
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7fb fa61 	bl	8002f9c <HAL_PCD_EP_Close>
 8007ada:	4603      	mov	r3, r0
 8007adc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 f8e5 	bl	8007cb0 <USBD_Get_USB_Status>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b04:	2300      	movs	r3, #0
 8007b06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b0e:	78fa      	ldrb	r2, [r7, #3]
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7fb fb39 	bl	800318a <HAL_PCD_EP_SetStall>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f8c6 	bl	8007cb0 <USBD_Get_USB_Status>
 8007b24:	4603      	mov	r3, r0
 8007b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b4c:	78fa      	ldrb	r2, [r7, #3]
 8007b4e:	4611      	mov	r1, r2
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fb fb7e 	bl	8003252 <HAL_PCD_EP_ClrStall>
 8007b56:	4603      	mov	r3, r0
 8007b58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 f8a7 	bl	8007cb0 <USBD_Get_USB_Status>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b82:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da0b      	bge.n	8007ba4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b92:	68f9      	ldr	r1, [r7, #12]
 8007b94:	4613      	mov	r3, r2
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	333e      	adds	r3, #62	; 0x3e
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	e00b      	b.n	8007bbc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007baa:	68f9      	ldr	r1, [r7, #12]
 8007bac:	4613      	mov	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bba:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3714      	adds	r7, #20
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	4611      	mov	r1, r2
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fb f94b 	bl	8002e82 <HAL_PCD_SetAddress>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bf0:	7bfb      	ldrb	r3, [r7, #15]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f000 f85c 	bl	8007cb0 <USBD_Get_USB_Status>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b086      	sub	sp, #24
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	607a      	str	r2, [r7, #4]
 8007c10:	603b      	str	r3, [r7, #0]
 8007c12:	460b      	mov	r3, r1
 8007c14:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c24:	7af9      	ldrb	r1, [r7, #11]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	f7fb fa64 	bl	80030f6 <HAL_PCD_EP_Transmit>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 f83b 	bl	8007cb0 <USBD_Get_USB_Status>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c3e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	607a      	str	r2, [r7, #4]
 8007c52:	603b      	str	r3, [r7, #0]
 8007c54:	460b      	mov	r3, r1
 8007c56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007c66:	7af9      	ldrb	r1, [r7, #11]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	f7fb f9e0 	bl	8003030 <HAL_PCD_EP_Receive>
 8007c70:	4603      	mov	r3, r0
 8007c72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f81a 	bl	8007cb0 <USBD_Get_USB_Status>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c80:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c9c:	78fa      	ldrb	r2, [r7, #3]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fb fa10 	bl	80030c6 <HAL_PCD_EP_GetRxCount>
 8007ca6:	4603      	mov	r3, r0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cbe:	79fb      	ldrb	r3, [r7, #7]
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d817      	bhi.n	8007cf4 <USBD_Get_USB_Status+0x44>
 8007cc4:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <USBD_Get_USB_Status+0x1c>)
 8007cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cca:	bf00      	nop
 8007ccc:	08007cdd 	.word	0x08007cdd
 8007cd0:	08007ce3 	.word	0x08007ce3
 8007cd4:	08007ce9 	.word	0x08007ce9
 8007cd8:	08007cef 	.word	0x08007cef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce0:	e00b      	b.n	8007cfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce6:	e008      	b.n	8007cfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
    break;
 8007cec:	e005      	b.n	8007cfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf2:	e002      	b.n	8007cfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf8:	bf00      	nop
  }
  return usb_status;
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f004 fc73 	bl	800c604 <VL53L0X_get_device_info>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <VL53L0X_GetRangeStatusString>:
	return Status;
}

VL53L0X_Error VL53L0X_GetRangeStatusString(uint8_t RangeStatus,
	char *pRangeStatusString)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	4603      	mov	r3, r0
 8007d36:	6039      	str	r1, [r7, #0]
 8007d38:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_range_status_string(RangeStatus,
 8007d3e:	79fb      	ldrb	r3, [r7, #7]
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f004 fce2 	bl	800c70c <VL53L0X_get_range_status_string>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
		pRangeStatusString);

	LOG_FUNCTION_END(Status);
	return Status;
 8007d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <VL53L0X_GetPalErrorString>:

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	4603      	mov	r3, r0
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 8007d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f004 fd46 	bl	800c800 <VL53L0X_get_pal_error_string>
 8007d74:	4603      	mov	r3, r0
 8007d76:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 fd1e 	bl	80097d6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <VL53L0X_DataInit>:
	return Status;
}


VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007dac:	b5b0      	push	{r4, r5, r7, lr}
 8007dae:	b096      	sub	sp, #88	; 0x58
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007dba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d107      	bne.n	8007dd2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	2188      	movs	r1, #136	; 0x88
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f005 f847 	bl	800ce5a <VL53L0X_WrByte>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007de0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007dea:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a9e      	ldr	r2, [pc, #632]	; (800806c <VL53L0X_DataInit+0x2c0>)
 8007df2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a9d      	ldr	r2, [pc, #628]	; (8008070 <VL53L0X_DataInit+0x2c4>)
 8007dfa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007e04:	f107 0310 	add.w	r3, r7, #16
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fab4 	bl	8008378 <VL53L0X_GetDeviceParameters>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007e16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d112      	bne.n	8007e44 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007e22:	2300      	movs	r3, #0
 8007e24:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f103 0410 	add.w	r4, r3, #16
 8007e2c:	f107 0510 	add.w	r5, r7, #16
 8007e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2264      	movs	r2, #100	; 0x64
 8007e48:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007e52:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007e5c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007e66:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007e72:	2201      	movs	r2, #1
 8007e74:	2180      	movs	r1, #128	; 0x80
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f004 ffef 	bl	800ce5a <VL53L0X_WrByte>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	461a      	mov	r2, r3
 8007e80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	21ff      	movs	r1, #255	; 0xff
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f004 ffe3 	bl	800ce5a <VL53L0X_WrByte>
 8007e94:	4603      	mov	r3, r0
 8007e96:	461a      	mov	r2, r3
 8007e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f004 ffd7 	bl	800ce5a <VL53L0X_WrByte>
 8007eac:	4603      	mov	r3, r0
 8007eae:	461a      	mov	r2, r3
 8007eb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8007eba:	f107 030f 	add.w	r3, r7, #15
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	2191      	movs	r1, #145	; 0x91
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f005 f847 	bl	800cf56 <VL53L0X_RdByte>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007ed6:	7bfa      	ldrb	r2, [r7, #15]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007ede:	2201      	movs	r2, #1
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f004 ffb9 	bl	800ce5a <VL53L0X_WrByte>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461a      	mov	r2, r3
 8007eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	21ff      	movs	r1, #255	; 0xff
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f004 ffad 	bl	800ce5a <VL53L0X_WrByte>
 8007f00:	4603      	mov	r3, r0
 8007f02:	461a      	mov	r2, r3
 8007f04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2180      	movs	r1, #128	; 0x80
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f004 ffa1 	bl	800ce5a <VL53L0X_WrByte>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f20:	4313      	orrs	r3, r2
 8007f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007f26:	2300      	movs	r3, #0
 8007f28:	653b      	str	r3, [r7, #80]	; 0x50
 8007f2a:	e014      	b.n	8007f56 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007f2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d114      	bne.n	8007f5e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2201      	movs	r2, #1
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fd2b 	bl	8008998 <VL53L0X_SetLimitCheckEnable>
 8007f42:	4603      	mov	r3, r0
 8007f44:	461a      	mov	r2, r3
 8007f46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f52:	3301      	adds	r3, #1
 8007f54:	653b      	str	r3, [r7, #80]	; 0x50
 8007f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f58:	2b05      	cmp	r3, #5
 8007f5a:	dde7      	ble.n	8007f2c <VL53L0X_DataInit+0x180>
 8007f5c:	e000      	b.n	8007f60 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8007f5e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007f60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d107      	bne.n	8007f78 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007f68:	2200      	movs	r2, #0
 8007f6a:	2102      	movs	r1, #2
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fd13 	bl	8008998 <VL53L0X_SetLimitCheckEnable>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007f78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d107      	bne.n	8007f90 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007f80:	2200      	movs	r2, #0
 8007f82:	2103      	movs	r1, #3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fd07 	bl	8008998 <VL53L0X_SetLimitCheckEnable>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007f90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d107      	bne.n	8007fa8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007f98:	2200      	movs	r2, #0
 8007f9a:	2104      	movs	r1, #4
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fcfb 	bl	8008998 <VL53L0X_SetLimitCheckEnable>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007fa8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d107      	bne.n	8007fc0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2105      	movs	r1, #5
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fcef 	bl	8008998 <VL53L0X_SetLimitCheckEnable>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007fc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d108      	bne.n	8007fda <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007fc8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007fcc:	2100      	movs	r1, #0
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 fd92 	bl	8008af8 <VL53L0X_SetLimitCheckValue>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007fda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d108      	bne.n	8007ff4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fe6:	2101      	movs	r1, #1
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fd85 	bl	8008af8 <VL53L0X_SetLimitCheckValue>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ff4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d108      	bne.n	800800e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007ffc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8008000:	2102      	movs	r1, #2
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fd78 	bl	8008af8 <VL53L0X_SetLimitCheckValue>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800800e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008012:	2b00      	cmp	r3, #0
 8008014:	d107      	bne.n	8008026 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008016:	2200      	movs	r2, #0
 8008018:	2103      	movs	r1, #3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fd6c 	bl	8008af8 <VL53L0X_SetLimitCheckValue>
 8008020:	4603      	mov	r3, r0
 8008022:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008026:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10f      	bne.n	800804e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	22ff      	movs	r2, #255	; 0xff
 8008032:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008036:	22ff      	movs	r2, #255	; 0xff
 8008038:	2101      	movs	r1, #1
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f004 ff0d 	bl	800ce5a <VL53L0X_WrByte>
 8008040:	4603      	mov	r3, r0
 8008042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800804e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008052:	2b00      	cmp	r3, #0
 8008054:	d103      	bne.n	800805e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800805e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008062:	4618      	mov	r0, r3
 8008064:	3758      	adds	r7, #88	; 0x58
 8008066:	46bd      	mov	sp, r7
 8008068:	bdb0      	pop	{r4, r5, r7, pc}
 800806a:	bf00      	nop
 800806c:	00016b85 	.word	0x00016b85
 8008070:	000970a4 	.word	0x000970a4

08008074 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8008074:	b5b0      	push	{r4, r5, r7, lr}
 8008076:	b09e      	sub	sp, #120	; 0x78
 8008078:	af02      	add	r7, sp, #8
 800807a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800807c:	2300      	movs	r3, #0
 800807e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8008082:	f107 031c 	add.w	r3, r7, #28
 8008086:	2240      	movs	r2, #64	; 0x40
 8008088:	2100      	movs	r1, #0
 800808a:	4618      	mov	r0, r3
 800808c:	f005 f811 	bl	800d0b2 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80080aa:	2300      	movs	r3, #0
 80080ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80080b0:	2101      	movs	r1, #1
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f002 fad2 	bl	800a65c <VL53L0X_get_info_from_device>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80080c4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80080cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80080d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d80d      	bhi.n	80080f4 <VL53L0X_StaticInit+0x80>
 80080d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d102      	bne.n	80080e6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80080e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080e2:	2b20      	cmp	r3, #32
 80080e4:	d806      	bhi.n	80080f4 <VL53L0X_StaticInit+0x80>
 80080e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10e      	bne.n	800810c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80080ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80080f0:	2b0c      	cmp	r3, #12
 80080f2:	d90b      	bls.n	800810c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80080f4:	f107 0218 	add.w	r2, r7, #24
 80080f8:	f107 0314 	add.w	r3, r7, #20
 80080fc:	4619      	mov	r1, r3
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 fd64 	bl	8009bcc <VL53L0X_perform_ref_spad_management>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800810a:	e009      	b.n	8008120 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800810c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008110:	461a      	mov	r2, r3
 8008112:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f001 ff65 	bl	8009fe4 <VL53L0X_set_reference_spads>
 800811a:	4603      	mov	r3, r0
 800811c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8008120:	4b94      	ldr	r3, [pc, #592]	; (8008374 <VL53L0X_StaticInit+0x300>)
 8008122:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8008124:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10f      	bne.n	800814c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8008132:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8008136:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8008144:	66bb      	str	r3, [r7, #104]	; 0x68
 8008146:	e001      	b.n	800814c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8008148:	4b8a      	ldr	r3, [pc, #552]	; (8008374 <VL53L0X_StaticInit+0x300>)
 800814a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800814c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008150:	2b00      	cmp	r3, #0
 8008152:	d106      	bne.n	8008162 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8008154:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f003 fb9c 	bl	800b894 <VL53L0X_load_tuning_settings>
 800815c:	4603      	mov	r3, r0
 800815e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8008162:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10a      	bne.n	8008180 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800816a:	2300      	movs	r3, #0
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	2304      	movs	r3, #4
 8008170:	2200      	movs	r2, #0
 8008172:	2100      	movs	r1, #0
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 f95d 	bl	8009434 <VL53L0X_SetGpioConfig>
 800817a:	4603      	mov	r3, r0
 800817c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008180:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008184:	2b00      	cmp	r3, #0
 8008186:	d121      	bne.n	80081cc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008188:	2201      	movs	r2, #1
 800818a:	21ff      	movs	r1, #255	; 0xff
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f004 fe64 	bl	800ce5a <VL53L0X_WrByte>
 8008192:	4603      	mov	r3, r0
 8008194:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008198:	f107 031a 	add.w	r3, r7, #26
 800819c:	461a      	mov	r2, r3
 800819e:	2184      	movs	r1, #132	; 0x84
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f004 fef7 	bl	800cf94 <VL53L0X_RdWord>
 80081a6:	4603      	mov	r3, r0
 80081a8:	461a      	mov	r2, r3
 80081aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80081ae:	4313      	orrs	r3, r2
 80081b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80081b4:	2200      	movs	r2, #0
 80081b6:	21ff      	movs	r1, #255	; 0xff
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f004 fe4e 	bl	800ce5a <VL53L0X_WrByte>
 80081be:	4603      	mov	r3, r0
 80081c0:	461a      	mov	r2, r3
 80081c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d105      	bne.n	80081e0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80081d4:	8b7b      	ldrh	r3, [r7, #26]
 80081d6:	011b      	lsls	r3, r3, #4
 80081d8:	461a      	mov	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80081e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d108      	bne.n	80081fa <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80081e8:	f107 031c 	add.w	r3, r7, #28
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f8c2 	bl	8008378 <VL53L0X_GetDeviceParameters>
 80081f4:	4603      	mov	r3, r0
 80081f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80081fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d110      	bne.n	8008224 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8008202:	f107 0319 	add.w	r3, r7, #25
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f9a0 	bl	800854e <VL53L0X_GetFractionEnable>
 800820e:	4603      	mov	r3, r0
 8008210:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8008214:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008218:	2b00      	cmp	r3, #0
 800821a:	d103      	bne.n	8008224 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800821c:	7e7a      	ldrb	r2, [r7, #25]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008224:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10e      	bne.n	800824a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f103 0410 	add.w	r4, r3, #16
 8008232:	f107 051c 	add.w	r5, r7, #28
 8008236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800823a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800823c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800823e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008242:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800824a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800824e:	2b00      	cmp	r3, #0
 8008250:	d111      	bne.n	8008276 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8008252:	f107 0319 	add.w	r3, r7, #25
 8008256:	461a      	mov	r2, r3
 8008258:	2101      	movs	r1, #1
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f004 fe7b 	bl	800cf56 <VL53L0X_RdByte>
 8008260:	4603      	mov	r3, r0
 8008262:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8008266:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800826a:	2b00      	cmp	r3, #0
 800826c:	d103      	bne.n	8008276 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800826e:	7e7a      	ldrb	r2, [r7, #25]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8008276:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800827a:	2b00      	cmp	r3, #0
 800827c:	d107      	bne.n	800828e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800827e:	2200      	movs	r2, #0
 8008280:	2100      	movs	r1, #0
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f9c0 	bl	8008608 <VL53L0X_SetSequenceStepEnable>
 8008288:	4603      	mov	r3, r0
 800828a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800828e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008292:	2b00      	cmp	r3, #0
 8008294:	d107      	bne.n	80082a6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008296:	2200      	movs	r2, #0
 8008298:	2102      	movs	r1, #2
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f9b4 	bl	8008608 <VL53L0X_SetSequenceStepEnable>
 80082a0:	4603      	mov	r3, r0
 80082a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80082a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d103      	bne.n	80082b6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2203      	movs	r2, #3
 80082b2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80082b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d109      	bne.n	80082d2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80082be:	f107 0313 	add.w	r3, r7, #19
 80082c2:	461a      	mov	r2, r3
 80082c4:	2100      	movs	r1, #0
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f986 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d103      	bne.n	80082e2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80082da:	7cfa      	ldrb	r2, [r7, #19]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80082e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d109      	bne.n	80082fe <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80082ea:	f107 0313 	add.w	r3, r7, #19
 80082ee:	461a      	mov	r2, r3
 80082f0:	2101      	movs	r1, #1
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f970 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80082fe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008302:	2b00      	cmp	r3, #0
 8008304:	d103      	bne.n	800830e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008306:	7cfa      	ldrb	r2, [r7, #19]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800830e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008312:	2b00      	cmp	r3, #0
 8008314:	d109      	bne.n	800832a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8008316:	f107 030c 	add.w	r3, r7, #12
 800831a:	461a      	mov	r2, r3
 800831c:	2103      	movs	r1, #3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f002 ff1c 	bl	800b15c <get_sequence_step_timeout>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800832a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800832e:	2b00      	cmp	r3, #0
 8008330:	d103      	bne.n	800833a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800833a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800833e:	2b00      	cmp	r3, #0
 8008340:	d109      	bne.n	8008356 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8008342:	f107 030c 	add.w	r3, r7, #12
 8008346:	461a      	mov	r2, r3
 8008348:	2104      	movs	r1, #4
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f002 ff06 	bl	800b15c <get_sequence_step_timeout>
 8008350:	4603      	mov	r3, r0
 8008352:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008356:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800835a:	2b00      	cmp	r3, #0
 800835c:	d103      	bne.n	8008366 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008366:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800836a:	4618      	mov	r0, r3
 800836c:	3770      	adds	r7, #112	; 0x70
 800836e:	46bd      	mov	sp, r7
 8008370:	bdb0      	pop	{r4, r5, r7, pc}
 8008372:	bf00      	nop
 8008374:	20000180 	.word	0x20000180

08008378 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008382:	2300      	movs	r3, #0
 8008384:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 f8cc 	bl	8008528 <VL53L0X_GetDeviceMode>
 8008390:	4603      	mov	r3, r0
 8008392:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d107      	bne.n	80083ac <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	3308      	adds	r3, #8
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 fa7c 	bl	80088a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80083a8:	4603      	mov	r3, r0
 80083aa:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80083ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2200      	movs	r2, #0
 80083b8:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80083ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d107      	bne.n	80083d2 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	3310      	adds	r3, #16
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fab2 	bl	8008932 <VL53L0X_GetXTalkCompensationRateMegaCps>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80083d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d107      	bne.n	80083ea <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	3314      	adds	r3, #20
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f7ff fccf 	bl	8007d84 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80083ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d134      	bne.n	800845c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80083f2:	2300      	movs	r3, #0
 80083f4:	60bb      	str	r3, [r7, #8]
 80083f6:	e02a      	b.n	800844e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80083f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d12a      	bne.n	8008456 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	b299      	uxth	r1, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3308      	adds	r3, #8
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	4413      	add	r3, r2
 800840e:	3304      	adds	r3, #4
 8008410:	461a      	mov	r2, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fbd2 	bl	8008bbc <VL53L0X_GetLimitCheckValue>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	7bfb      	ldrb	r3, [r7, #15]
 800841e:	4313      	orrs	r3, r2
 8008420:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d117      	bne.n	800845a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	b299      	uxth	r1, r3
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	3318      	adds	r3, #24
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	4413      	add	r3, r2
 8008436:	461a      	mov	r2, r3
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fb39 	bl	8008ab0 <VL53L0X_GetLimitCheckEnable>
 800843e:	4603      	mov	r3, r0
 8008440:	461a      	mov	r2, r3
 8008442:	7bfb      	ldrb	r3, [r7, #15]
 8008444:	4313      	orrs	r3, r2
 8008446:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3301      	adds	r3, #1
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b05      	cmp	r3, #5
 8008452:	ddd1      	ble.n	80083f8 <VL53L0X_GetDeviceParameters+0x80>
 8008454:	e002      	b.n	800845c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800845a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800845c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d107      	bne.n	8008474 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	333c      	adds	r3, #60	; 0x3c
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fcaa 	bl	8008dc4 <VL53L0X_GetWrapAroundCheckEnable>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d107      	bne.n	800848c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	3304      	adds	r3, #4
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f895 	bl	80085b2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800848c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80084a8:	78fb      	ldrb	r3, [r7, #3]
 80084aa:	2b15      	cmp	r3, #21
 80084ac:	d832      	bhi.n	8008514 <VL53L0X_SetDeviceMode+0x7c>
 80084ae:	a201      	add	r2, pc, #4	; (adr r2, 80084b4 <VL53L0X_SetDeviceMode+0x1c>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	0800850d 	.word	0x0800850d
 80084b8:	0800850d 	.word	0x0800850d
 80084bc:	08008515 	.word	0x08008515
 80084c0:	0800850d 	.word	0x0800850d
 80084c4:	08008515 	.word	0x08008515
 80084c8:	08008515 	.word	0x08008515
 80084cc:	08008515 	.word	0x08008515
 80084d0:	08008515 	.word	0x08008515
 80084d4:	08008515 	.word	0x08008515
 80084d8:	08008515 	.word	0x08008515
 80084dc:	08008515 	.word	0x08008515
 80084e0:	08008515 	.word	0x08008515
 80084e4:	08008515 	.word	0x08008515
 80084e8:	08008515 	.word	0x08008515
 80084ec:	08008515 	.word	0x08008515
 80084f0:	08008515 	.word	0x08008515
 80084f4:	08008515 	.word	0x08008515
 80084f8:	08008515 	.word	0x08008515
 80084fc:	08008515 	.word	0x08008515
 8008500:	08008515 	.word	0x08008515
 8008504:	0800850d 	.word	0x0800850d
 8008508:	0800850d 	.word	0x0800850d
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	78fa      	ldrb	r2, [r7, #3]
 8008510:	741a      	strb	r2, [r3, #16]
		break;
 8008512:	e001      	b.n	8008518 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008514:	23f8      	movs	r3, #248	; 0xf8
 8008516:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008532:	2300      	movs	r3, #0
 8008534:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	7c1a      	ldrb	r2, [r3, #16]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800853e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008558:	2300      	movs	r3, #0
 800855a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	2109      	movs	r1, #9
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f004 fcf8 	bl	800cf56 <VL53L0X_RdByte>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800856a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d106      	bne.n	8008580 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	b2da      	uxtb	r2, r3
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008580:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f002 ffe7 	bl	800b570 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80085a2:	4603      	mov	r3, r0
 80085a4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80085a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f003 f8b4 	bl	800b730 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80085cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3710      	adds	r7, #16
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	460b      	mov	r3, r1
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	4619      	mov	r1, r3
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f002 ff86 	bl	800b502 <VL53L0X_get_vcsel_pulse_period>
 80085f6:	4603      	mov	r3, r0
 80085f8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80085fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
	...

08008608 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	460b      	mov	r3, r1
 8008612:	70fb      	strb	r3, [r7, #3]
 8008614:	4613      	mov	r3, r2
 8008616:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008618:	2300      	movs	r3, #0
 800861a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008624:	f107 030f 	add.w	r3, r7, #15
 8008628:	461a      	mov	r2, r3
 800862a:	2101      	movs	r1, #1
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f004 fc92 	bl	800cf56 <VL53L0X_RdByte>
 8008632:	4603      	mov	r3, r0
 8008634:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800863a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d15a      	bne.n	80086f8 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8008642:	78bb      	ldrb	r3, [r7, #2]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d12b      	bne.n	80086a0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	2b04      	cmp	r3, #4
 800864c:	d825      	bhi.n	800869a <VL53L0X_SetSequenceStepEnable+0x92>
 800864e:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	08008669 	.word	0x08008669
 8008658:	08008673 	.word	0x08008673
 800865c:	0800867d 	.word	0x0800867d
 8008660:	08008687 	.word	0x08008687
 8008664:	08008691 	.word	0x08008691
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8008668:	7dbb      	ldrb	r3, [r7, #22]
 800866a:	f043 0310 	orr.w	r3, r3, #16
 800866e:	75bb      	strb	r3, [r7, #22]
				break;
 8008670:	e043      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8008672:	7dbb      	ldrb	r3, [r7, #22]
 8008674:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008678:	75bb      	strb	r3, [r7, #22]
				break;
 800867a:	e03e      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800867c:	7dbb      	ldrb	r3, [r7, #22]
 800867e:	f043 0304 	orr.w	r3, r3, #4
 8008682:	75bb      	strb	r3, [r7, #22]
				break;
 8008684:	e039      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8008686:	7dbb      	ldrb	r3, [r7, #22]
 8008688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800868c:	75bb      	strb	r3, [r7, #22]
				break;
 800868e:	e034      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8008690:	7dbb      	ldrb	r3, [r7, #22]
 8008692:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008696:	75bb      	strb	r3, [r7, #22]
				break;
 8008698:	e02f      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800869a:	23fc      	movs	r3, #252	; 0xfc
 800869c:	75fb      	strb	r3, [r7, #23]
 800869e:	e02c      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80086a0:	78fb      	ldrb	r3, [r7, #3]
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d825      	bhi.n	80086f2 <VL53L0X_SetSequenceStepEnable+0xea>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <VL53L0X_SetSequenceStepEnable+0xa4>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086c1 	.word	0x080086c1
 80086b0:	080086cb 	.word	0x080086cb
 80086b4:	080086d5 	.word	0x080086d5
 80086b8:	080086df 	.word	0x080086df
 80086bc:	080086e9 	.word	0x080086e9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80086c0:	7dbb      	ldrb	r3, [r7, #22]
 80086c2:	f023 0310 	bic.w	r3, r3, #16
 80086c6:	75bb      	strb	r3, [r7, #22]
				break;
 80086c8:	e017      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80086ca:	7dbb      	ldrb	r3, [r7, #22]
 80086cc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80086d0:	75bb      	strb	r3, [r7, #22]
				break;
 80086d2:	e012      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80086d4:	7dbb      	ldrb	r3, [r7, #22]
 80086d6:	f023 0304 	bic.w	r3, r3, #4
 80086da:	75bb      	strb	r3, [r7, #22]
				break;
 80086dc:	e00d      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80086de:	7dbb      	ldrb	r3, [r7, #22]
 80086e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e4:	75bb      	strb	r3, [r7, #22]
				break;
 80086e6:	e008      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80086e8:	7dbb      	ldrb	r3, [r7, #22]
 80086ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ee:	75bb      	strb	r3, [r7, #22]
				break;
 80086f0:	e003      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80086f2:	23fc      	movs	r3, #252	; 0xfc
 80086f4:	75fb      	strb	r3, [r7, #23]
 80086f6:	e000      	b.n	80086fa <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80086f8:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	7dba      	ldrb	r2, [r7, #22]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d01e      	beq.n	8008740 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8008702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d107      	bne.n	800871a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800870a:	7dbb      	ldrb	r3, [r7, #22]
 800870c:	461a      	mov	r2, r3
 800870e:	2101      	movs	r1, #1
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f004 fba2 	bl	800ce5a <VL53L0X_WrByte>
 8008716:	4603      	mov	r3, r0
 8008718:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800871a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d103      	bne.n	800872a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	7dba      	ldrb	r2, [r7, #22]
 8008726:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800872a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008738:	6939      	ldr	r1, [r7, #16]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f7ff ff26 	bl	800858c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008740:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800874c:	b480      	push	{r7}
 800874e:	b087      	sub	sp, #28
 8008750:	af00      	add	r7, sp, #0
 8008752:	60f8      	str	r0, [r7, #12]
 8008754:	607b      	str	r3, [r7, #4]
 8008756:	460b      	mov	r3, r1
 8008758:	72fb      	strb	r3, [r7, #11]
 800875a:	4613      	mov	r3, r2
 800875c:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008768:	7afb      	ldrb	r3, [r7, #11]
 800876a:	2b04      	cmp	r3, #4
 800876c:	d836      	bhi.n	80087dc <sequence_step_enabled+0x90>
 800876e:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <sequence_step_enabled+0x28>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	08008789 	.word	0x08008789
 8008778:	0800879b 	.word	0x0800879b
 800877c:	080087ad 	.word	0x080087ad
 8008780:	080087bf 	.word	0x080087bf
 8008784:	080087d1 	.word	0x080087d1
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008788:	7abb      	ldrb	r3, [r7, #10]
 800878a:	111b      	asrs	r3, r3, #4
 800878c:	b2db      	uxtb	r3, r3
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	b2da      	uxtb	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	701a      	strb	r2, [r3, #0]
		break;
 8008798:	e022      	b.n	80087e0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800879a:	7abb      	ldrb	r3, [r7, #10]
 800879c:	10db      	asrs	r3, r3, #3
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	701a      	strb	r2, [r3, #0]
		break;
 80087aa:	e019      	b.n	80087e0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80087ac:	7abb      	ldrb	r3, [r7, #10]
 80087ae:	109b      	asrs	r3, r3, #2
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	701a      	strb	r2, [r3, #0]
		break;
 80087bc:	e010      	b.n	80087e0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80087be:	7abb      	ldrb	r3, [r7, #10]
 80087c0:	119b      	asrs	r3, r3, #6
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	701a      	strb	r2, [r3, #0]
		break;
 80087ce:	e007      	b.n	80087e0 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80087d0:	7abb      	ldrb	r3, [r7, #10]
 80087d2:	09db      	lsrs	r3, r3, #7
 80087d4:	b2da      	uxtb	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	701a      	strb	r2, [r3, #0]
		break;
 80087da:	e001      	b.n	80087e0 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087dc:	23fc      	movs	r3, #252	; 0xfc
 80087de:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80087e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	371c      	adds	r7, #28
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008802:	f107 030e 	add.w	r3, r7, #14
 8008806:	461a      	mov	r2, r3
 8008808:	2101      	movs	r1, #1
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f004 fba3 	bl	800cf56 <VL53L0X_RdByte>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8008814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d107      	bne.n	800882c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800881c:	7bba      	ldrb	r2, [r7, #14]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	2100      	movs	r1, #0
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff ff92 	bl	800874c <sequence_step_enabled>
 8008828:	4603      	mov	r3, r0
 800882a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800882c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d108      	bne.n	8008846 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008834:	7bba      	ldrb	r2, [r7, #14]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	3302      	adds	r3, #2
 800883a:	2101      	movs	r1, #1
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ff85 	bl	800874c <sequence_step_enabled>
 8008842:	4603      	mov	r3, r0
 8008844:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d108      	bne.n	8008860 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800884e:	7bba      	ldrb	r2, [r7, #14]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	2102      	movs	r1, #2
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff ff78 	bl	800874c <sequence_step_enabled>
 800885c:	4603      	mov	r3, r0
 800885e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d108      	bne.n	800887a <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008868:	7bba      	ldrb	r2, [r7, #14]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	3303      	adds	r3, #3
 800886e:	2103      	movs	r1, #3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f7ff ff6b 	bl	800874c <sequence_step_enabled>
 8008876:	4603      	mov	r3, r0
 8008878:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800887a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d108      	bne.n	8008894 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8008882:	7bba      	ldrb	r2, [r7, #14]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	3304      	adds	r3, #4
 8008888:	2104      	movs	r1, #4
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f7ff ff5e 	bl	800874c <sequence_step_enabled>
 8008890:	4603      	mov	r3, r0
 8008892:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008894:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80088ae:	f107 030c 	add.w	r3, r7, #12
 80088b2:	461a      	mov	r2, r3
 80088b4:	21f8      	movs	r1, #248	; 0xf8
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f004 fb6c 	bl	800cf94 <VL53L0X_RdWord>
 80088bc:	4603      	mov	r3, r0
 80088be:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80088c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d108      	bne.n	80088da <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80088c8:	f107 0308 	add.w	r3, r7, #8
 80088cc:	461a      	mov	r2, r3
 80088ce:	2104      	movs	r1, #4
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f004 fb7e 	bl	800cfd2 <VL53L0X_RdDWord>
 80088d6:	4603      	mov	r3, r0
 80088d8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80088da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10c      	bne.n	80088fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80088e2:	89bb      	ldrh	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	89ba      	ldrh	r2, [r7, #12]
 80088ec:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	7f1b      	ldrb	r3, [r3, #28]
 800891a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	7bba      	ldrb	r2, [r7, #14]
 8008920:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3714      	adds	r7, #20
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b086      	sub	sp, #24
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800893c:	2300      	movs	r3, #0
 800893e:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008940:	f107 030e 	add.w	r3, r7, #14
 8008944:	461a      	mov	r2, r3
 8008946:	2120      	movs	r1, #32
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f004 fb23 	bl	800cf94 <VL53L0X_RdWord>
 800894e:	4603      	mov	r3, r0
 8008950:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008952:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d118      	bne.n	800898c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800895a:	89fb      	ldrh	r3, [r7, #14]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d109      	bne.n	8008974 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	771a      	strb	r2, [r3, #28]
 8008972:	e00b      	b.n	800898c <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8008974:	89fb      	ldrh	r3, [r7, #14]
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	693a      	ldr	r2, [r7, #16]
 8008984:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800898c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3718      	adds	r7, #24
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b086      	sub	sp, #24
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	807b      	strh	r3, [r7, #2]
 80089a4:	4613      	mov	r3, r2
 80089a6:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089a8:	2300      	movs	r3, #0
 80089aa:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80089ac:	2300      	movs	r3, #0
 80089ae:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80089b8:	887b      	ldrh	r3, [r7, #2]
 80089ba:	2b05      	cmp	r3, #5
 80089bc:	d902      	bls.n	80089c4 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089be:	23fc      	movs	r3, #252	; 0xfc
 80089c0:	75fb      	strb	r3, [r7, #23]
 80089c2:	e05b      	b.n	8008a7c <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80089c4:	787b      	ldrb	r3, [r7, #1]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d106      	bne.n	80089d8 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80089ce:	2300      	movs	r3, #0
 80089d0:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80089d2:	2301      	movs	r3, #1
 80089d4:	73bb      	strb	r3, [r7, #14]
 80089d6:	e00a      	b.n	80089ee <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80089d8:	887b      	ldrh	r3, [r7, #2]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	330c      	adds	r3, #12
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	4413      	add	r3, r2
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80089ea:	2301      	movs	r3, #1
 80089ec:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80089ee:	887b      	ldrh	r3, [r7, #2]
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d841      	bhi.n	8008a78 <VL53L0X_SetLimitCheckEnable+0xe0>
 80089f4:	a201      	add	r2, pc, #4	; (adr r2, 80089fc <VL53L0X_SetLimitCheckEnable+0x64>)
 80089f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fa:	bf00      	nop
 80089fc:	08008a15 	.word	0x08008a15
 8008a00:	08008a1f 	.word	0x08008a1f
 8008a04:	08008a35 	.word	0x08008a35
 8008a08:	08008a3f 	.word	0x08008a3f
 8008a0c:	08008a49 	.word	0x08008a49
 8008a10:	08008a61 	.word	0x08008a61

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7bfa      	ldrb	r2, [r7, #15]
 8008a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008a1c:	e02e      	b.n	8008a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	461a      	mov	r2, r3
 8008a26:	2144      	movs	r1, #68	; 0x44
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f004 fa36 	bl	800ce9a <VL53L0X_WrWord>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	75fb      	strb	r3, [r7, #23]

			break;
 8008a32:	e023      	b.n	8008a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	7bfa      	ldrb	r2, [r7, #15]
 8008a38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008a3c:	e01e      	b.n	8008a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	7bfa      	ldrb	r2, [r7, #15]
 8008a42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8008a46:	e019      	b.n	8008a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008a4e:	7b7b      	ldrb	r3, [r7, #13]
 8008a50:	22fe      	movs	r2, #254	; 0xfe
 8008a52:	2160      	movs	r1, #96	; 0x60
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f004 fa40 	bl	800ceda <VL53L0X_UpdateByte>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8008a5e:	e00d      	b.n	8008a7c <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8008a60:	7bbb      	ldrb	r3, [r7, #14]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008a66:	7b7b      	ldrb	r3, [r7, #13]
 8008a68:	22ef      	movs	r2, #239	; 0xef
 8008a6a:	2160      	movs	r1, #96	; 0x60
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f004 fa34 	bl	800ceda <VL53L0X_UpdateByte>
 8008a72:	4603      	mov	r3, r0
 8008a74:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8008a76:	e001      	b.n	8008a7c <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a78:	23fc      	movs	r3, #252	; 0xfc
 8008a7a:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008a7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d10f      	bne.n	8008aa4 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008a84:	787b      	ldrb	r3, [r7, #1]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d106      	bne.n	8008a98 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a8a:	887b      	ldrh	r3, [r7, #2]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4413      	add	r3, r2
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008a96:	e005      	b.n	8008aa4 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008a98:	887b      	ldrh	r3, [r7, #2]
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008ac2:	897b      	ldrh	r3, [r7, #10]
 8008ac4:	2b05      	cmp	r3, #5
 8008ac6:	d905      	bls.n	8008ad4 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008ac8:	23fc      	movs	r3, #252	; 0xfc
 8008aca:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	701a      	strb	r2, [r3, #0]
 8008ad2:	e008      	b.n	8008ae6 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008ad4:	897b      	ldrh	r3, [r7, #10]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ade:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	7dba      	ldrb	r2, [r7, #22]
 8008ae4:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	371c      	adds	r7, #28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	460b      	mov	r3, r1
 8008b02:	607a      	str	r2, [r7, #4]
 8008b04:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008b0a:	897b      	ldrh	r3, [r7, #10]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b14:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008b16:	7dbb      	ldrb	r3, [r7, #22]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d107      	bne.n	8008b2c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b1c:	897b      	ldrh	r3, [r7, #10]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	330c      	adds	r3, #12
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	605a      	str	r2, [r3, #4]
 8008b2a:	e040      	b.n	8008bae <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008b2c:	897b      	ldrh	r3, [r7, #10]
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	d830      	bhi.n	8008b94 <VL53L0X_SetLimitCheckValue+0x9c>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <VL53L0X_SetLimitCheckValue+0x40>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b51 	.word	0x08008b51
 8008b3c:	08008b59 	.word	0x08008b59
 8008b40:	08008b6f 	.word	0x08008b6f
 8008b44:	08008b77 	.word	0x08008b77
 8008b48:	08008b7f 	.word	0x08008b7f
 8008b4c:	08008b7f 	.word	0x08008b7f

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008b56:	e01f      	b.n	8008b98 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	2144      	movs	r1, #68	; 0x44
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f004 f999 	bl	800ce9a <VL53L0X_WrWord>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008b6c:	e014      	b.n	8008b98 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8008b74:	e010      	b.n	8008b98 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008b7c:	e00c      	b.n	8008b98 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	2164      	movs	r1, #100	; 0x64
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f004 f986 	bl	800ce9a <VL53L0X_WrWord>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008b92:	e001      	b.n	8008b98 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b94:	23fc      	movs	r3, #252	; 0xfc
 8008b96:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d106      	bne.n	8008bae <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008ba0:	897b      	ldrh	r3, [r7, #10]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	330c      	adds	r3, #12
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4413      	add	r3, r2
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop

08008bbc <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008bd2:	897b      	ldrh	r3, [r7, #10]
 8008bd4:	2b05      	cmp	r3, #5
 8008bd6:	d847      	bhi.n	8008c68 <VL53L0X_GetLimitCheckValue+0xac>
 8008bd8:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <VL53L0X_GetLimitCheckValue+0x24>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008bf9 	.word	0x08008bf9
 8008be4:	08008c05 	.word	0x08008c05
 8008be8:	08008c2b 	.word	0x08008c2b
 8008bec:	08008c37 	.word	0x08008c37
 8008bf0:	08008c43 	.word	0x08008c43
 8008bf4:	08008c43 	.word	0x08008c43

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfc:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	77bb      	strb	r3, [r7, #30]
		break;
 8008c02:	e033      	b.n	8008c6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008c04:	f107 0316 	add.w	r3, r7, #22
 8008c08:	461a      	mov	r2, r3
 8008c0a:	2144      	movs	r1, #68	; 0x44
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f004 f9c1 	bl	800cf94 <VL53L0X_RdWord>
 8008c12:	4603      	mov	r3, r0
 8008c14:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008c16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d102      	bne.n	8008c24 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008c1e:	8afb      	ldrh	r3, [r7, #22]
 8008c20:	025b      	lsls	r3, r3, #9
 8008c22:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008c24:	2301      	movs	r3, #1
 8008c26:	77bb      	strb	r3, [r7, #30]
		break;
 8008c28:	e020      	b.n	8008c6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	77bb      	strb	r3, [r7, #30]
		break;
 8008c34:	e01a      	b.n	8008c6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	77bb      	strb	r3, [r7, #30]
		break;
 8008c40:	e014      	b.n	8008c6c <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008c42:	f107 0316 	add.w	r3, r7, #22
 8008c46:	461a      	mov	r2, r3
 8008c48:	2164      	movs	r1, #100	; 0x64
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f004 f9a2 	bl	800cf94 <VL53L0X_RdWord>
 8008c50:	4603      	mov	r3, r0
 8008c52:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008c5c:	8afb      	ldrh	r3, [r7, #22]
 8008c5e:	025b      	lsls	r3, r3, #9
 8008c60:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	77bb      	strb	r3, [r7, #30]
		break;
 8008c66:	e001      	b.n	8008c6c <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c68:	23fc      	movs	r3, #252	; 0xfc
 8008c6a:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008c6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d12a      	bne.n	8008cca <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008c74:	7fbb      	ldrb	r3, [r7, #30]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d124      	bne.n	8008cc4 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d110      	bne.n	8008ca2 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008c80:	897b      	ldrh	r3, [r7, #10]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	330c      	adds	r3, #12
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008c94:	897b      	ldrh	r3, [r7, #10]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4413      	add	r3, r2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008ca0:	e013      	b.n	8008cca <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008ca8:	897b      	ldrh	r3, [r7, #10]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	330c      	adds	r3, #12
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008cb6:	897b      	ldrh	r3, [r7, #10]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4413      	add	r3, r2
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008cc2:	e002      	b.n	8008cca <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008cca:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3720      	adds	r7, #32
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop

08008cd8 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckCurrent)
{
 8008cd8:	b4b0      	push	{r4, r5, r7}
 8008cda:	b08d      	sub	sp, #52	; 0x34
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	60f8      	str	r0, [r7, #12]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	607a      	str	r2, [r7, #4]
 8008ce4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008cec:	897b      	ldrh	r3, [r7, #10]
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	d903      	bls.n	8008cfa <VL53L0X_GetLimitCheckCurrent+0x22>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008cf2:	23fc      	movs	r3, #252	; 0xfc
 8008cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008cf8:	e05d      	b.n	8008db6 <VL53L0X_GetLimitCheckCurrent+0xde>
	} else {
		switch (LimitCheckId) {
 8008cfa:	897b      	ldrh	r3, [r7, #10]
 8008cfc:	2b05      	cmp	r3, #5
 8008cfe:	d857      	bhi.n	8008db0 <VL53L0X_GetLimitCheckCurrent+0xd8>
 8008d00:	a201      	add	r2, pc, #4	; (adr r2, 8008d08 <VL53L0X_GetLimitCheckCurrent+0x30>)
 8008d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d06:	bf00      	nop
 8008d08:	08008d21 	.word	0x08008d21
 8008d0c:	08008d2d 	.word	0x08008d2d
 8008d10:	08008d4b 	.word	0x08008d4b
 8008d14:	08008d57 	.word	0x08008d57
 8008d18:	08008d75 	.word	0x08008d75
 8008d1c:	08008d93 	.word	0x08008d93
		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	601a      	str	r2, [r3, #0]

			break;
 8008d2a:	e044      	b.n	8008db6 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f107 0410 	add.w	r4, r7, #16
 8008d32:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008d36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d3a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008d3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8008d42:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	601a      	str	r2, [r3, #0]

			break;
 8008d48:	e035      	b.n	8008db6 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev,
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	601a      	str	r2, [r3, #0]
				LastSignalRefMcps);

			break;
 8008d54:	e02f      	b.n	8008db6 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f107 0410 	add.w	r4, r7, #16
 8008d5c:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008d68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8008d6c:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	601a      	str	r2, [r3, #0]

			break;
 8008d72:	e020      	b.n	8008db6 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f107 0410 	add.w	r4, r7, #16
 8008d7a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d82:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008d86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8008d8a:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	601a      	str	r2, [r3, #0]

			break;
 8008d90:	e011      	b.n	8008db6 <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f107 0410 	add.w	r4, r7, #16
 8008d98:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008da0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008da4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8008da8:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	601a      	str	r2, [r3, #0]

			break;
 8008dae:	e002      	b.n	8008db6 <VL53L0X_GetLimitCheckCurrent+0xde>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008db0:	23fc      	movs	r3, #252	; 0xfc
 8008db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008db6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f

}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3734      	adds	r7, #52	; 0x34
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bcb0      	pop	{r4, r5, r7}
 8008dc2:	4770      	bx	lr

08008dc4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008dd2:	f107 030e 	add.w	r3, r7, #14
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	2101      	movs	r1, #1
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f004 f8bb 	bl	800cf56 <VL53L0X_RdByte>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10e      	bne.n	8008e0a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008dec:	7bba      	ldrb	r2, [r7, #14]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	b25b      	sxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da03      	bge.n	8008e04 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	e002      	b.n	8008e0a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d104      	bne.n	8008e1c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	781a      	ldrb	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008e34:	f107 030e 	add.w	r3, r7, #14
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7ff fb74 	bl	8008528 <VL53L0X_GetDeviceMode>
 8008e40:	4603      	mov	r3, r0
 8008e42:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d107      	bne.n	8008e5c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d104      	bne.n	8008e5c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f898 	bl	8008f88 <VL53L0X_StartMeasurement>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d104      	bne.n	8008e6e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f001 fb3f 	bl	800a4e8 <VL53L0X_measurement_poll_for_completion>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d103      	bne.n	8008e84 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2203      	movs	r2, #3
 8008e80:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3710      	adds	r7, #16
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f001 fae1 	bl	800a46e <VL53L0X_perform_ref_calibration>
 8008eac:	4603      	mov	r3, r0
 8008eae:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008eb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008ed2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008ed4:	7dbb      	ldrb	r3, [r7, #22]
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d005      	beq.n	8008ee6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008eda:	7dbb      	ldrb	r3, [r7, #22]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d002      	beq.n	8008ee6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008ee0:	7dbb      	ldrb	r3, [r7, #22]
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d147      	bne.n	8008f76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008ee6:	f107 030c 	add.w	r3, r7, #12
 8008eea:	f107 0210 	add.w	r2, r7, #16
 8008eee:	2101      	movs	r1, #1
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f000 fbc3 	bl	800967c <VL53L0X_GetInterruptThresholds>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008f00:	d803      	bhi.n	8008f0a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008f02:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008f04:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008f08:	d935      	bls.n	8008f76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008f0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d131      	bne.n	8008f76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d006      	beq.n	8008f26 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008f18:	491a      	ldr	r1, [pc, #104]	; (8008f84 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f002 fcba 	bl	800b894 <VL53L0X_load_tuning_settings>
 8008f20:	4603      	mov	r3, r0
 8008f22:	75fb      	strb	r3, [r7, #23]
 8008f24:	e027      	b.n	8008f76 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008f26:	2204      	movs	r2, #4
 8008f28:	21ff      	movs	r1, #255	; 0xff
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f003 ff95 	bl	800ce5a <VL53L0X_WrByte>
 8008f30:	4603      	mov	r3, r0
 8008f32:	461a      	mov	r2, r3
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	4313      	orrs	r3, r2
 8008f38:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2170      	movs	r1, #112	; 0x70
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f003 ff8b 	bl	800ce5a <VL53L0X_WrByte>
 8008f44:	4603      	mov	r3, r0
 8008f46:	461a      	mov	r2, r3
 8008f48:	7dfb      	ldrb	r3, [r7, #23]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f4e:	2200      	movs	r2, #0
 8008f50:	21ff      	movs	r1, #255	; 0xff
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f003 ff81 	bl	800ce5a <VL53L0X_WrByte>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	7dfb      	ldrb	r3, [r7, #23]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008f62:	2200      	movs	r2, #0
 8008f64:	2180      	movs	r1, #128	; 0x80
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f003 ff77 	bl	800ce5a <VL53L0X_WrByte>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	461a      	mov	r2, r3
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008f76:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	20000274 	.word	0x20000274

08008f88 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008f94:	2301      	movs	r3, #1
 8008f96:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008f98:	f107 030e 	add.w	r3, r7, #14
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fac2 	bl	8008528 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	2180      	movs	r1, #128	; 0x80
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f003 ff56 	bl	800ce5a <VL53L0X_WrByte>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	21ff      	movs	r1, #255	; 0xff
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f003 ff4f 	bl	800ce5a <VL53L0X_WrByte>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f003 ff48 	bl	800ce5a <VL53L0X_WrByte>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	2191      	movs	r1, #145	; 0x91
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f003 ff3e 	bl	800ce5a <VL53L0X_WrByte>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f003 ff37 	bl	800ce5a <VL53L0X_WrByte>
 8008fec:	4603      	mov	r3, r0
 8008fee:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	21ff      	movs	r1, #255	; 0xff
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f003 ff30 	bl	800ce5a <VL53L0X_WrByte>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008ffe:	2200      	movs	r2, #0
 8009000:	2180      	movs	r1, #128	; 0x80
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f003 ff29 	bl	800ce5a <VL53L0X_WrByte>
 8009008:	4603      	mov	r3, r0
 800900a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800900c:	7bbb      	ldrb	r3, [r7, #14]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d037      	beq.n	8009082 <VL53L0X_StartMeasurement+0xfa>
 8009012:	2b03      	cmp	r3, #3
 8009014:	d04f      	beq.n	80090b6 <VL53L0X_StartMeasurement+0x12e>
 8009016:	2b00      	cmp	r3, #0
 8009018:	d167      	bne.n	80090ea <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800901a:	2201      	movs	r2, #1
 800901c:	2100      	movs	r1, #0
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f003 ff1b 	bl	800ce5a <VL53L0X_WrByte>
 8009024:	4603      	mov	r3, r0
 8009026:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8009028:	7bfb      	ldrb	r3, [r7, #15]
 800902a:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800902c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d15d      	bne.n	80090f0 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d008      	beq.n	8009050 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 800903e:	f107 030d 	add.w	r3, r7, #13
 8009042:	461a      	mov	r2, r3
 8009044:	2100      	movs	r1, #0
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f003 ff85 	bl	800cf56 <VL53L0X_RdByte>
 800904c:	4603      	mov	r3, r0
 800904e:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	3301      	adds	r3, #1
 8009054:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009056:	7b7a      	ldrb	r2, [r7, #13]
 8009058:	7bfb      	ldrb	r3, [r7, #15]
 800905a:	4013      	ands	r3, r2
 800905c:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800905e:	7bfa      	ldrb	r2, [r7, #15]
 8009060:	429a      	cmp	r2, r3
 8009062:	d107      	bne.n	8009074 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8009064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d103      	bne.n	8009074 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009072:	d3e1      	bcc.n	8009038 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800907a:	d339      	bcc.n	80090f0 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 800907c:	23f9      	movs	r3, #249	; 0xf9
 800907e:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009080:	e036      	b.n	80090f0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009082:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800908a:	2101      	movs	r1, #1
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f7ff ff15 	bl	8008ebc <VL53L0X_CheckAndLoadInterruptSettings>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009096:	2202      	movs	r2, #2
 8009098:	2100      	movs	r1, #0
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f003 fedd 	bl	800ce5a <VL53L0X_WrByte>
 80090a0:	4603      	mov	r3, r0
 80090a2:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80090a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d123      	bne.n	80090f4 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2204      	movs	r2, #4
 80090b0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80090b4:	e01e      	b.n	80090f4 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80090b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d105      	bne.n	80090ca <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80090be:	2101      	movs	r1, #1
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff fefb 	bl	8008ebc <VL53L0X_CheckAndLoadInterruptSettings>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80090ca:	2204      	movs	r2, #4
 80090cc:	2100      	movs	r1, #0
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f003 fec3 	bl	800ce5a <VL53L0X_WrByte>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80090d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10b      	bne.n	80090f8 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2204      	movs	r2, #4
 80090e4:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80090e8:	e006      	b.n	80090f8 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80090ea:	23f8      	movs	r3, #248	; 0xf8
 80090ec:	75fb      	strb	r3, [r7, #23]
 80090ee:	e004      	b.n	80090fa <VL53L0X_StartMeasurement+0x172>
		break;
 80090f0:	bf00      	nop
 80090f2:	e002      	b.n	80090fa <VL53L0X_StartMeasurement+0x172>
		break;
 80090f4:	bf00      	nop
 80090f6:	e000      	b.n	80090fa <VL53L0X_StartMeasurement+0x172>
		break;
 80090f8:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80090fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3718      	adds	r7, #24
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}

08009106 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b084      	sub	sp, #16
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009110:	2300      	movs	r3, #0
 8009112:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800911a:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	2b04      	cmp	r3, #4
 8009120:	d112      	bne.n	8009148 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8009122:	f107 0308 	add.w	r3, r7, #8
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fb1d 	bl	8009768 <VL53L0X_GetInterruptMaskStatus>
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b04      	cmp	r3, #4
 8009136:	d103      	bne.n	8009140 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	2201      	movs	r2, #1
 800913c:	701a      	strb	r2, [r3, #0]
 800913e:	e01c      	b.n	800917a <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	2200      	movs	r2, #0
 8009144:	701a      	strb	r2, [r3, #0]
 8009146:	e018      	b.n	800917a <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009148:	f107 030d 	add.w	r3, r7, #13
 800914c:	461a      	mov	r2, r3
 800914e:	2114      	movs	r1, #20
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f003 ff00 	bl	800cf56 <VL53L0X_RdByte>
 8009156:	4603      	mov	r3, r0
 8009158:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800915a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10b      	bne.n	800917a <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8009162:	7b7b      	ldrb	r3, [r7, #13]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2201      	movs	r2, #1
 8009170:	701a      	strb	r2, [r3, #0]
 8009172:	e002      	b.n	800917a <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	2200      	movs	r2, #0
 8009178:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800917a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3710      	adds	r7, #16
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
	...

08009188 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009188:	b5b0      	push	{r4, r5, r7, lr}
 800918a:	b096      	sub	sp, #88	; 0x58
 800918c:	af02      	add	r7, sp, #8
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009192:	2300      	movs	r3, #0
 8009194:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009198:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800919c:	230c      	movs	r3, #12
 800919e:	2114      	movs	r1, #20
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f003 fe35 	bl	800ce10 <VL53L0X_ReadMulti>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80091ac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f040 80d2 	bne.w	800935a <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2200      	movs	r2, #0
 80091ba:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80091c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	021b      	lsls	r3, r3, #8
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80091de:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	4413      	add	r3, r2
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	025b      	lsls	r3, r3, #9
 80091f4:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091fa:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80091fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009200:	b29b      	uxth	r3, r3
 8009202:	021b      	lsls	r3, r3, #8
 8009204:	b29a      	uxth	r2, r3
 8009206:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800920a:	b29b      	uxth	r3, r3
 800920c:	4413      	add	r3, r2
 800920e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8009212:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009216:	025b      	lsls	r3, r3, #9
 8009218:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800921e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8009222:	b29b      	uxth	r3, r3
 8009224:	021b      	lsls	r3, r3, #8
 8009226:	b29a      	uxth	r2, r3
 8009228:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800922c:	b29b      	uxth	r3, r3
 800922e:	4413      	add	r3, r2
 8009230:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800923a:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800923c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009240:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800924a:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8009252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8009256:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800925c:	d047      	beq.n	80092ee <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800925e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009260:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009264:	fb02 f303 	mul.w	r3, r2, r3
 8009268:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800926c:	4a58      	ldr	r2, [pc, #352]	; (80093d0 <VL53L0X_GetRangingMeasurementData+0x248>)
 800926e:	fb82 1203 	smull	r1, r2, r2, r3
 8009272:	1192      	asrs	r2, r2, #6
 8009274:	17db      	asrs	r3, r3, #31
 8009276:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009278:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6a1b      	ldr	r3, [r3, #32]
 8009280:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	7f1b      	ldrb	r3, [r3, #28]
 8009286:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800928a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800928e:	2b00      	cmp	r3, #0
 8009290:	d02d      	beq.n	80092ee <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8009292:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009294:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009298:	fb02 f303 	mul.w	r3, r2, r3
 800929c:	121b      	asrs	r3, r3, #8
 800929e:	461a      	mov	r2, r3
				if ((SignalRate
 80092a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d10d      	bne.n	80092c2 <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 80092a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d004      	beq.n	80092b8 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 80092ae:	f242 23b8 	movw	r3, #8888	; 0x22b8
 80092b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80092b6:	e016      	b.n	80092e6 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 80092b8:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 80092bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80092c0:	e011      	b.n	80092e6 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80092c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80092c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092c8:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80092cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80092ce:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80092d2:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80092d6:	121b      	asrs	r3, r3, #8
 80092d8:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80092da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092dc:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80092de:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80092e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80092e6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80092ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80092ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00d      	beq.n	8009312 <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80092f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80092fa:	089b      	lsrs	r3, r3, #2
 80092fc:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8009302:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009306:	b2db      	uxtb	r3, r3
 8009308:	019b      	lsls	r3, r3, #6
 800930a:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	75da      	strb	r2, [r3, #23]
 8009310:	e006      	b.n	8009320 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8009318:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2200      	movs	r2, #0
 800931e:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8009320:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009324:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8009328:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	4613      	mov	r3, r2
 8009334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f002 ff54 	bl	800c1e4 <VL53L0X_get_pal_range_status>
 800933c:	4603      	mov	r3, r0
 800933e:	461a      	mov	r2, r3
 8009340:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009344:	4313      	orrs	r3, r2
 8009346:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800934a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8009352:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800935a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800935e:	2b00      	cmp	r3, #0
 8009360:	d12f      	bne.n	80093c2 <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f107 040c 	add.w	r4, r7, #12
 8009368:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800936c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800936e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009370:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009374:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800937c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8009382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800938a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8009390:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8009396:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800939c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 80093a2:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 80093a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f103 0450 	add.w	r4, r3, #80	; 0x50
 80093b2:	f107 050c 	add.w	r5, r7, #12
 80093b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80093b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80093ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80093be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80093c2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3750      	adds	r7, #80	; 0x50
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bdb0      	pop	{r4, r5, r7, pc}
 80093ce:	bf00      	nop
 80093d0:	10624dd3 	.word	0x10624dd3

080093d4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80093e2:	2100      	movs	r1, #0
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7ff f857 	bl	8008498 <VL53L0X_SetDeviceMode>
 80093ea:	4603      	mov	r3, r0
 80093ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80093ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d104      	bne.n	8009400 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f7ff fd16 	bl	8008e28 <VL53L0X_PerformSingleMeasurement>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d105      	bne.n	8009414 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8009408:	6839      	ldr	r1, [r7, #0]
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f7ff febc 	bl	8009188 <VL53L0X_GetRangingMeasurementData>
 8009410:	4603      	mov	r3, r0
 8009412:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8009414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d105      	bne.n	8009428 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800941c:	2100      	movs	r1, #0
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f962 	bl	80096e8 <VL53L0X_ClearInterruptMask>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8009428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	4608      	mov	r0, r1
 800943e:	4611      	mov	r1, r2
 8009440:	461a      	mov	r2, r3
 8009442:	4603      	mov	r3, r0
 8009444:	70fb      	strb	r3, [r7, #3]
 8009446:	460b      	mov	r3, r1
 8009448:	70bb      	strb	r3, [r7, #2]
 800944a:	4613      	mov	r3, r2
 800944c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800944e:	2300      	movs	r3, #0
 8009450:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8009452:	78fb      	ldrb	r3, [r7, #3]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009458:	23f6      	movs	r3, #246	; 0xf6
 800945a:	73fb      	strb	r3, [r7, #15]
 800945c:	e107      	b.n	800966e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800945e:	78bb      	ldrb	r3, [r7, #2]
 8009460:	2b14      	cmp	r3, #20
 8009462:	d110      	bne.n	8009486 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009464:	7e3b      	ldrb	r3, [r7, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d102      	bne.n	8009470 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800946a:	2310      	movs	r3, #16
 800946c:	73bb      	strb	r3, [r7, #14]
 800946e:	e001      	b.n	8009474 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009470:	2301      	movs	r3, #1
 8009472:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	461a      	mov	r2, r3
 8009478:	2184      	movs	r1, #132	; 0x84
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f003 fced 	bl	800ce5a <VL53L0X_WrByte>
 8009480:	4603      	mov	r3, r0
 8009482:	73fb      	strb	r3, [r7, #15]
 8009484:	e0f3      	b.n	800966e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8009486:	78bb      	ldrb	r3, [r7, #2]
 8009488:	2b15      	cmp	r3, #21
 800948a:	f040 8097 	bne.w	80095bc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800948e:	2201      	movs	r2, #1
 8009490:	21ff      	movs	r1, #255	; 0xff
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f003 fce1 	bl	800ce5a <VL53L0X_WrByte>
 8009498:	4603      	mov	r3, r0
 800949a:	461a      	mov	r2, r3
 800949c:	7bfb      	ldrb	r3, [r7, #15]
 800949e:	4313      	orrs	r3, r2
 80094a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80094a2:	2200      	movs	r2, #0
 80094a4:	2100      	movs	r1, #0
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f003 fcd7 	bl	800ce5a <VL53L0X_WrByte>
 80094ac:	4603      	mov	r3, r0
 80094ae:	461a      	mov	r2, r3
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80094b6:	2200      	movs	r2, #0
 80094b8:	21ff      	movs	r1, #255	; 0xff
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f003 fccd 	bl	800ce5a <VL53L0X_WrByte>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80094ca:	2201      	movs	r2, #1
 80094cc:	2180      	movs	r1, #128	; 0x80
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f003 fcc3 	bl	800ce5a <VL53L0X_WrByte>
 80094d4:	4603      	mov	r3, r0
 80094d6:	461a      	mov	r2, r3
 80094d8:	7bfb      	ldrb	r3, [r7, #15]
 80094da:	4313      	orrs	r3, r2
 80094dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80094de:	2202      	movs	r2, #2
 80094e0:	2185      	movs	r1, #133	; 0x85
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f003 fcb9 	bl	800ce5a <VL53L0X_WrByte>
 80094e8:	4603      	mov	r3, r0
 80094ea:	461a      	mov	r2, r3
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80094f2:	2204      	movs	r2, #4
 80094f4:	21ff      	movs	r1, #255	; 0xff
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f003 fcaf 	bl	800ce5a <VL53L0X_WrByte>
 80094fc:	4603      	mov	r3, r0
 80094fe:	461a      	mov	r2, r3
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4313      	orrs	r3, r2
 8009504:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8009506:	2200      	movs	r2, #0
 8009508:	21cd      	movs	r1, #205	; 0xcd
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f003 fca5 	bl	800ce5a <VL53L0X_WrByte>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4313      	orrs	r3, r2
 8009518:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800951a:	2211      	movs	r2, #17
 800951c:	21cc      	movs	r1, #204	; 0xcc
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f003 fc9b 	bl	800ce5a <VL53L0X_WrByte>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	7bfb      	ldrb	r3, [r7, #15]
 800952a:	4313      	orrs	r3, r2
 800952c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800952e:	2207      	movs	r2, #7
 8009530:	21ff      	movs	r1, #255	; 0xff
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f003 fc91 	bl	800ce5a <VL53L0X_WrByte>
 8009538:	4603      	mov	r3, r0
 800953a:	461a      	mov	r2, r3
 800953c:	7bfb      	ldrb	r3, [r7, #15]
 800953e:	4313      	orrs	r3, r2
 8009540:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8009542:	2200      	movs	r2, #0
 8009544:	21be      	movs	r1, #190	; 0xbe
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f003 fc87 	bl	800ce5a <VL53L0X_WrByte>
 800954c:	4603      	mov	r3, r0
 800954e:	461a      	mov	r2, r3
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	4313      	orrs	r3, r2
 8009554:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8009556:	2206      	movs	r2, #6
 8009558:	21ff      	movs	r1, #255	; 0xff
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f003 fc7d 	bl	800ce5a <VL53L0X_WrByte>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	4313      	orrs	r3, r2
 8009568:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800956a:	2209      	movs	r2, #9
 800956c:	21cc      	movs	r1, #204	; 0xcc
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f003 fc73 	bl	800ce5a <VL53L0X_WrByte>
 8009574:	4603      	mov	r3, r0
 8009576:	461a      	mov	r2, r3
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	4313      	orrs	r3, r2
 800957c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800957e:	2200      	movs	r2, #0
 8009580:	21ff      	movs	r1, #255	; 0xff
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f003 fc69 	bl	800ce5a <VL53L0X_WrByte>
 8009588:	4603      	mov	r3, r0
 800958a:	461a      	mov	r2, r3
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4313      	orrs	r3, r2
 8009590:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009592:	2201      	movs	r2, #1
 8009594:	21ff      	movs	r1, #255	; 0xff
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f003 fc5f 	bl	800ce5a <VL53L0X_WrByte>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80095a6:	2200      	movs	r2, #0
 80095a8:	2100      	movs	r1, #0
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f003 fc55 	bl	800ce5a <VL53L0X_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	461a      	mov	r2, r3
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	73fb      	strb	r3, [r7, #15]
 80095ba:	e058      	b.n	800966e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80095bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d121      	bne.n	8009608 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80095c4:	787b      	ldrb	r3, [r7, #1]
 80095c6:	2b04      	cmp	r3, #4
 80095c8:	d81b      	bhi.n	8009602 <VL53L0X_SetGpioConfig+0x1ce>
 80095ca:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <VL53L0X_SetGpioConfig+0x19c>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095e5 	.word	0x080095e5
 80095d4:	080095eb 	.word	0x080095eb
 80095d8:	080095f1 	.word	0x080095f1
 80095dc:	080095f7 	.word	0x080095f7
 80095e0:	080095fd 	.word	0x080095fd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80095e4:	2300      	movs	r3, #0
 80095e6:	73bb      	strb	r3, [r7, #14]
				break;
 80095e8:	e00f      	b.n	800960a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80095ea:	2301      	movs	r3, #1
 80095ec:	73bb      	strb	r3, [r7, #14]
				break;
 80095ee:	e00c      	b.n	800960a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80095f0:	2302      	movs	r3, #2
 80095f2:	73bb      	strb	r3, [r7, #14]
				break;
 80095f4:	e009      	b.n	800960a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80095f6:	2303      	movs	r3, #3
 80095f8:	73bb      	strb	r3, [r7, #14]
				break;
 80095fa:	e006      	b.n	800960a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80095fc:	2304      	movs	r3, #4
 80095fe:	73bb      	strb	r3, [r7, #14]
				break;
 8009600:	e003      	b.n	800960a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8009602:	23f5      	movs	r3, #245	; 0xf5
 8009604:	73fb      	strb	r3, [r7, #15]
 8009606:	e000      	b.n	800960a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8009608:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800960a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d107      	bne.n	8009622 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	461a      	mov	r2, r3
 8009616:	210a      	movs	r1, #10
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f003 fc1e 	bl	800ce5a <VL53L0X_WrByte>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8009622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10f      	bne.n	800964a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800962a:	7e3b      	ldrb	r3, [r7, #24]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d102      	bne.n	8009636 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	73bb      	strb	r3, [r7, #14]
 8009634:	e001      	b.n	800963a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8009636:	2310      	movs	r3, #16
 8009638:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800963a:	7bbb      	ldrb	r3, [r7, #14]
 800963c:	22ef      	movs	r2, #239	; 0xef
 800963e:	2184      	movs	r1, #132	; 0x84
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f003 fc4a 	bl	800ceda <VL53L0X_UpdateByte>
 8009646:	4603      	mov	r3, r0
 8009648:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800964a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	787a      	ldrb	r2, [r7, #1]
 8009656:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800965a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d105      	bne.n	800966e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009662:	2100      	movs	r1, #0
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 f83f 	bl	80096e8 <VL53L0X_ClearInterruptMask>
 800966a:	4603      	mov	r3, r0
 800966c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800966e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009672:	4618      	mov	r0, r3
 8009674:	3710      	adds	r7, #16
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop

0800967c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	607a      	str	r2, [r7, #4]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	460b      	mov	r3, r1
 800968a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800968c:	2300      	movs	r3, #0
 800968e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009690:	f107 0314 	add.w	r3, r7, #20
 8009694:	461a      	mov	r2, r3
 8009696:	210e      	movs	r1, #14
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f003 fc7b 	bl	800cf94 <VL53L0X_RdWord>
 800969e:	4603      	mov	r3, r0
 80096a0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80096a2:	8abb      	ldrh	r3, [r7, #20]
 80096a4:	045b      	lsls	r3, r3, #17
 80096a6:	461a      	mov	r2, r3
 80096a8:	4b0e      	ldr	r3, [pc, #56]	; (80096e4 <VL53L0X_GetInterruptThresholds+0x68>)
 80096aa:	4013      	ands	r3, r2
 80096ac:	687a      	ldr	r2, [r7, #4]
 80096ae:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80096b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d10f      	bne.n	80096d8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80096b8:	f107 0314 	add.w	r3, r7, #20
 80096bc:	461a      	mov	r2, r3
 80096be:	210c      	movs	r1, #12
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f003 fc67 	bl	800cf94 <VL53L0X_RdWord>
 80096c6:	4603      	mov	r3, r0
 80096c8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80096ca:	8abb      	ldrh	r3, [r7, #20]
 80096cc:	045b      	lsls	r3, r3, #17
 80096ce:	461a      	mov	r2, r3
 80096d0:	4b04      	ldr	r3, [pc, #16]	; (80096e4 <VL53L0X_GetInterruptThresholds+0x68>)
 80096d2:	4013      	ands	r3, r2
		*pThresholdHigh =
 80096d4:	683a      	ldr	r2, [r7, #0]
 80096d6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80096d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	1ffe0000 	.word	0x1ffe0000

080096e8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096f2:	2300      	movs	r3, #0
 80096f4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80096fa:	2201      	movs	r2, #1
 80096fc:	210b      	movs	r1, #11
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f003 fbab 	bl	800ce5a <VL53L0X_WrByte>
 8009704:	4603      	mov	r3, r0
 8009706:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8009708:	2200      	movs	r2, #0
 800970a:	210b      	movs	r1, #11
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f003 fba4 	bl	800ce5a <VL53L0X_WrByte>
 8009712:	4603      	mov	r3, r0
 8009714:	461a      	mov	r2, r3
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	4313      	orrs	r3, r2
 800971a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800971c:	f107 030d 	add.w	r3, r7, #13
 8009720:	461a      	mov	r2, r3
 8009722:	2113      	movs	r1, #19
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f003 fc16 	bl	800cf56 <VL53L0X_RdByte>
 800972a:	4603      	mov	r3, r0
 800972c:	461a      	mov	r2, r3
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	4313      	orrs	r3, r2
 8009732:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	3301      	adds	r3, #1
 8009738:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800973a:	7b7b      	ldrb	r3, [r7, #13]
 800973c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b02      	cmp	r3, #2
 8009748:	d803      	bhi.n	8009752 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800974a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d0d3      	beq.n	80096fa <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d901      	bls.n	800975c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009758:	23f4      	movs	r3, #244	; 0xf4
 800975a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800975c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009772:	2300      	movs	r3, #0
 8009774:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8009776:	f107 030e 	add.w	r3, r7, #14
 800977a:	461a      	mov	r2, r3
 800977c:	2113      	movs	r1, #19
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f003 fbe9 	bl	800cf56 <VL53L0X_RdByte>
 8009784:	4603      	mov	r3, r0
 8009786:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	f003 0207 	and.w	r2, r3, #7
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8009792:	7bbb      	ldrb	r3, [r7, #14]
 8009794:	f003 0318 	and.w	r3, r3, #24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800979c:	23fa      	movs	r3, #250	; 0xfa
 800979e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80097a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b086      	sub	sp, #24
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097b8:	2300      	movs	r3, #0
 80097ba:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	68b9      	ldr	r1, [r7, #8]
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f000 fa03 	bl	8009bcc <VL53L0X_perform_ref_spad_management>
 80097c6:	4603      	mov	r3, r0
 80097c8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80097ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b084      	sub	sp, #16
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80097e4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80097e8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80097ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097ee:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80097f0:	f107 0308 	add.w	r3, r7, #8
 80097f4:	461a      	mov	r2, r3
 80097f6:	2128      	movs	r1, #40	; 0x28
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f003 fbcb 	bl	800cf94 <VL53L0X_RdWord>
 80097fe:	4603      	mov	r3, r0
 8009800:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8009802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d11e      	bne.n	8009848 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800980a:	893b      	ldrh	r3, [r7, #8]
 800980c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009810:	b29b      	uxth	r3, r3
 8009812:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009814:	893b      	ldrh	r3, [r7, #8]
 8009816:	461a      	mov	r2, r3
 8009818:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800981c:	429a      	cmp	r2, r3
 800981e:	dd0b      	ble.n	8009838 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009820:	893a      	ldrh	r2, [r7, #8]
 8009822:	897b      	ldrh	r3, [r7, #10]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	b29b      	uxth	r3, r3
 8009828:	b21b      	sxth	r3, r3
 800982a:	461a      	mov	r2, r3
					* 250;
 800982c:	23fa      	movs	r3, #250	; 0xfa
 800982e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	e007      	b.n	8009848 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009838:	893b      	ldrh	r3, [r7, #8]
 800983a:	b21b      	sxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	23fa      	movs	r3, #250	; 0xfa
 8009840:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8009854:	b480      	push	{r7}
 8009856:	b08b      	sub	sp, #44	; 0x2c
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8009862:	2308      	movs	r3, #8
 8009864:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009870:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	fbb2 f3f3 	udiv	r3, r2, r3
 800987a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	69ba      	ldr	r2, [r7, #24]
 8009880:	fbb3 f2f2 	udiv	r2, r3, r2
 8009884:	69b9      	ldr	r1, [r7, #24]
 8009886:	fb01 f202 	mul.w	r2, r1, r2
 800988a:	1a9b      	subs	r3, r3, r2
 800988c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
 8009892:	e030      	b.n	80098f6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8009894:	2300      	movs	r3, #0
 8009896:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989c:	4413      	add	r3, r2
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80098a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	429a      	cmp	r2, r3
 80098a8:	d11e      	bne.n	80098e8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80098aa:	7ffa      	ldrb	r2, [r7, #31]
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	fa42 f303 	asr.w	r3, r2, r3
 80098b2:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80098b8:	e016      	b.n	80098e8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80098ba:	7ffb      	ldrb	r3, [r7, #31]
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00b      	beq.n	80098dc <get_next_good_spad+0x88>
				success = 1;
 80098c4:	2301      	movs	r3, #1
 80098c6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	fb02 f203 	mul.w	r2, r2, r3
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	4413      	add	r3, r2
 80098d4:	461a      	mov	r2, r3
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	601a      	str	r2, [r3, #0]
				break;
 80098da:	e009      	b.n	80098f0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80098dc:	7ffb      	ldrb	r3, [r7, #31]
 80098de:	085b      	lsrs	r3, r3, #1
 80098e0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80098e2:	6a3b      	ldr	r3, [r7, #32]
 80098e4:	3301      	adds	r3, #1
 80098e6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80098e8:	6a3a      	ldr	r2, [r7, #32]
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d3e4      	bcc.n	80098ba <get_next_good_spad+0x66>
				coarseIndex++) {
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	3301      	adds	r3, #1
 80098f4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80098f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d202      	bcs.n	8009904 <get_next_good_spad+0xb0>
 80098fe:	7fbb      	ldrb	r3, [r7, #30]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d0c7      	beq.n	8009894 <get_next_good_spad+0x40>
		}
	}
}
 8009904:	bf00      	nop
 8009906:	372c      	adds	r7, #44	; 0x2c
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009910:	b480      	push	{r7}
 8009912:	b085      	sub	sp, #20
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009918:	2301      	movs	r3, #1
 800991a:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	099b      	lsrs	r3, r3, #6
 8009920:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009922:	4a07      	ldr	r2, [pc, #28]	; (8009940 <is_aperture+0x30>)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <is_aperture+0x22>
		isAperture = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8009932:	7bfb      	ldrb	r3, [r7, #15]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	2000042c 	.word	0x2000042c

08009944 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009944:	b480      	push	{r7}
 8009946:	b089      	sub	sp, #36	; 0x24
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009950:	2300      	movs	r3, #0
 8009952:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009954:	2308      	movs	r3, #8
 8009956:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009960:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	69ba      	ldr	r2, [r7, #24]
 8009966:	fbb3 f2f2 	udiv	r2, r3, r2
 800996a:	69b9      	ldr	r1, [r7, #24]
 800996c:	fb01 f202 	mul.w	r2, r1, r2
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	429a      	cmp	r2, r3
 800997a:	d302      	bcc.n	8009982 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800997c:	23ce      	movs	r3, #206	; 0xce
 800997e:	77fb      	strb	r3, [r7, #31]
 8009980:	e010      	b.n	80099a4 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	4413      	add	r3, r2
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	b25a      	sxtb	r2, r3
 800998c:	2101      	movs	r1, #1
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	fa01 f303 	lsl.w	r3, r1, r3
 8009994:	b25b      	sxtb	r3, r3
 8009996:	4313      	orrs	r3, r2
 8009998:	b259      	sxtb	r1, r3
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	4413      	add	r3, r2
 80099a0:	b2ca      	uxtb	r2, r1
 80099a2:	701a      	strb	r2, [r3, #0]

	return status;
 80099a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3724      	adds	r7, #36	; 0x24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80099be:	2306      	movs	r3, #6
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	21b0      	movs	r1, #176	; 0xb0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f003 f9fc 	bl	800cdc2 <VL53L0X_WriteMulti>
 80099ca:	4603      	mov	r3, r0
 80099cc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80099ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3710      	adds	r7, #16
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b084      	sub	sp, #16
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
 80099e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80099e4:	2306      	movs	r3, #6
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	21b0      	movs	r1, #176	; 0xb0
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f003 fa10 	bl	800ce10 <VL53L0X_ReadMulti>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80099f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08c      	sub	sp, #48	; 0x30
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	607a      	str	r2, [r7, #4]
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a18:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a1c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009a1e:	2300      	movs	r3, #0
 8009a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a22:	e02b      	b.n	8009a7c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009a24:	f107 031c 	add.w	r3, r7, #28
 8009a28:	6a3a      	ldr	r2, [r7, #32]
 8009a2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ff11 	bl	8009854 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009a32:	69fb      	ldr	r3, [r7, #28]
 8009a34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a38:	d103      	bne.n	8009a42 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009a3a:	23ce      	movs	r3, #206	; 0xce
 8009a3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009a40:	e020      	b.n	8009a84 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	461a      	mov	r2, r3
 8009a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a48:	4413      	add	r3, r2
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff ff60 	bl	8009910 <is_aperture>
 8009a50:	4603      	mov	r3, r0
 8009a52:	461a      	mov	r2, r3
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d003      	beq.n	8009a62 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009a5a:	23ce      	movs	r3, #206	; 0xce
 8009a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009a60:	e010      	b.n	8009a84 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009a66:	6a3a      	ldr	r2, [r7, #32]
 8009a68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a6a:	6838      	ldr	r0, [r7, #0]
 8009a6c:	f7ff ff6a 	bl	8009944 <enable_spad_bit>
		currentSpad++;
 8009a70:	6a3b      	ldr	r3, [r7, #32]
 8009a72:	3301      	adds	r3, #1
 8009a74:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	3301      	adds	r3, #1
 8009a7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d3cf      	bcc.n	8009a24 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8009a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a86:	6a3a      	ldr	r2, [r7, #32]
 8009a88:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009a8a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d106      	bne.n	8009aa0 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f7ff ff8d 	bl	80099b4 <set_ref_spad_map>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009aa0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d121      	bne.n	8009aec <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009aa8:	f107 0314 	add.w	r3, r7, #20
 8009aac:	4619      	mov	r1, r3
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f7ff ff93 	bl	80099da <get_ref_spad_map>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009abe:	e011      	b.n	8009ae4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	4413      	add	r3, r2
 8009ac6:	781a      	ldrb	r2, [r3, #0]
 8009ac8:	f107 0114 	add.w	r1, r7, #20
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	440b      	add	r3, r1
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d003      	beq.n	8009ade <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009ad6:	23ce      	movs	r3, #206	; 0xce
 8009ad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009adc:	e006      	b.n	8009aec <enable_ref_spads+0xec>
			}
			i++;
 8009ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae0:	3301      	adds	r3, #1
 8009ae2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8009ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	d3e9      	bcc.n	8009ac0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009aec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3730      	adds	r7, #48	; 0x30
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b08a      	sub	sp, #40	; 0x28
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009b02:	2300      	movs	r3, #0
 8009b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009b18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d107      	bne.n	8009b30 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009b20:	22c0      	movs	r2, #192	; 0xc0
 8009b22:	2101      	movs	r1, #1
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f003 f998 	bl	800ce5a <VL53L0X_WrByte>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009b30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d108      	bne.n	8009b4a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009b38:	f107 0308 	add.w	r3, r7, #8
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f7ff fc48 	bl	80093d4 <VL53L0X_PerformSingleRangingMeasurement>
 8009b44:	4603      	mov	r3, r0
 8009b46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009b4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d107      	bne.n	8009b62 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009b52:	2201      	movs	r2, #1
 8009b54:	21ff      	movs	r1, #255	; 0xff
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f003 f97f 	bl	800ce5a <VL53L0X_WrByte>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009b62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d107      	bne.n	8009b7a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	21b6      	movs	r1, #182	; 0xb6
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f003 fa10 	bl	800cf94 <VL53L0X_RdWord>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009b7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d107      	bne.n	8009b92 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009b82:	2200      	movs	r2, #0
 8009b84:	21ff      	movs	r1, #255	; 0xff
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f003 f967 	bl	800ce5a <VL53L0X_WrByte>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8009b92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d112      	bne.n	8009bc0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f003 f959 	bl	800ce5a <VL53L0X_WrByte>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009bae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d104      	bne.n	8009bc0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009bbc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009bc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3728      	adds	r7, #40	; 0x28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009bcc:	b590      	push	{r4, r7, lr}
 8009bce:	b09d      	sub	sp, #116	; 0x74
 8009bd0:	af06      	add	r7, sp, #24
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009bde:	23b4      	movs	r3, #180	; 0xb4
 8009be0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009be4:	2303      	movs	r3, #3
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009be8:	232c      	movs	r3, #44	; 0x2c
 8009bea:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009bec:	2300      	movs	r3, #0
 8009bee:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009bf8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009bfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009c06:	2306      	movs	r3, #6
 8009c08:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009c20:	2300      	movs	r3, #0
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8009c30:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009c32:	2300      	movs	r3, #0
 8009c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c36:	e009      	b.n	8009c4c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009c42:	2200      	movs	r2, #0
 8009c44:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c48:	3301      	adds	r3, #1
 8009c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d3f1      	bcc.n	8009c38 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c54:	2201      	movs	r2, #1
 8009c56:	21ff      	movs	r1, #255	; 0xff
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f003 f8fe 	bl	800ce5a <VL53L0X_WrByte>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009c64:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d107      	bne.n	8009c7c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	214f      	movs	r1, #79	; 0x4f
 8009c70:	68f8      	ldr	r0, [r7, #12]
 8009c72:	f003 f8f2 	bl	800ce5a <VL53L0X_WrByte>
 8009c76:	4603      	mov	r3, r0
 8009c78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009c7c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d107      	bne.n	8009c94 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009c84:	222c      	movs	r2, #44	; 0x2c
 8009c86:	214e      	movs	r1, #78	; 0x4e
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f003 f8e6 	bl	800ce5a <VL53L0X_WrByte>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009c94:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d107      	bne.n	8009cac <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	21ff      	movs	r1, #255	; 0xff
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f003 f8da 	bl	800ce5a <VL53L0X_WrByte>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009cac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d109      	bne.n	8009cc8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8009cb4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009cb8:	461a      	mov	r2, r3
 8009cba:	21b6      	movs	r1, #182	; 0xb6
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f003 f8cc 	bl	800ce5a <VL53L0X_WrByte>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8009cc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d107      	bne.n	8009ce0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	2180      	movs	r1, #128	; 0x80
 8009cd4:	68f8      	ldr	r0, [r7, #12]
 8009cd6:	f003 f8c0 	bl	800ce5a <VL53L0X_WrByte>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009ce0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009ce8:	f107 0210 	add.w	r2, r7, #16
 8009cec:	f107 0111 	add.w	r1, r7, #17
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	68f8      	ldr	r0, [r7, #12]
 8009cf4:	f000 fbbb 	bl	800a46e <VL53L0X_perform_ref_calibration>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009cfe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d121      	bne.n	8009d4a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d0c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d14:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009d22:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009d26:	f107 0218 	add.w	r2, r7, #24
 8009d2a:	9204      	str	r2, [sp, #16]
 8009d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d2e:	9203      	str	r2, [sp, #12]
 8009d30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009d32:	9202      	str	r2, [sp, #8]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	4623      	mov	r3, r4
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fe5e 	bl	8009a00 <enable_ref_spads>
 8009d44:	4603      	mov	r3, r0
 8009d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d4a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d174      	bne.n	8009e3c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009d56:	f107 0312 	add.w	r3, r7, #18
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f7ff fecb 	bl	8009af8 <perform_ref_signal_measurement>
 8009d62:	4603      	mov	r3, r0
 8009d64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009d68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d161      	bne.n	8009e34 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009d70:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009d72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d25d      	bcs.n	8009e34 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d7c:	e009      	b.n	8009d92 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009d88:	2200      	movs	r2, #0
 8009d8a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d8e:	3301      	adds	r3, #1
 8009d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d3f1      	bcc.n	8009d7e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009d9a:	e002      	b.n	8009da2 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d9e:	3301      	adds	r3, #1
 8009da0:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009da2:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009da8:	4413      	add	r3, r2
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7ff fdb0 	bl	8009910 <is_aperture>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d103      	bne.n	8009dbe <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8009db6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d3ee      	bcc.n	8009d9c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dc4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009dd2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009dd6:	f107 0218 	add.w	r2, r7, #24
 8009dda:	9204      	str	r2, [sp, #16]
 8009ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009dde:	9203      	str	r2, [sp, #12]
 8009de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009de2:	9202      	str	r2, [sp, #8]
 8009de4:	9301      	str	r3, [sp, #4]
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	4623      	mov	r3, r4
 8009dec:	4602      	mov	r2, r0
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f7ff fe06 	bl	8009a00 <enable_ref_spads>
 8009df4:	4603      	mov	r3, r0
 8009df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009dfa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d11b      	bne.n	8009e3a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009e06:	f107 0312 	add.w	r3, r7, #18
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f7ff fe73 	bl	8009af8 <perform_ref_signal_measurement>
 8009e12:	4603      	mov	r3, r0
 8009e14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009e18:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10c      	bne.n	8009e3a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009e20:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009e22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d208      	bcs.n	8009e3a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e30:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009e32:	e002      	b.n	8009e3a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e38:	e000      	b.n	8009e3c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009e3a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009e3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f040 80af 	bne.w	8009fa4 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009e46:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009e48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	f240 80aa 	bls.w	8009fa4 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e58:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009e60:	f107 031c 	add.w	r3, r7, #28
 8009e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e66:	4618      	mov	r0, r3
 8009e68:	f003 f918 	bl	800d09c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009e6c:	8a7b      	ldrh	r3, [r7, #18]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bfb8      	it	lt
 8009e78:	425b      	neglt	r3, r3
 8009e7a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009e82:	e086      	b.n	8009f92 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009e8a:	f107 0314 	add.w	r3, r7, #20
 8009e8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e92:	f7ff fcdf 	bl	8009854 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e9c:	d103      	bne.n	8009ea6 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009e9e:	23ce      	movs	r3, #206	; 0xce
 8009ea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009ea4:	e07e      	b.n	8009fa4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009ea6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4413      	add	r3, r2
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff fd2e 	bl	8009910 <is_aperture>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d003      	beq.n	8009ec6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009ec4:	e06e      	b.n	8009fa4 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ec8:	3301      	adds	r3, #1
 8009eca:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009ed6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009ed8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7ff fd32 	bl	8009944 <enable_spad_bit>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009ee6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10c      	bne.n	8009f08 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef0:	3301      	adds	r3, #1
 8009ef2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009efa:	4619      	mov	r1, r3
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f7ff fd59 	bl	80099b4 <set_ref_spad_map>
 8009f02:	4603      	mov	r3, r0
 8009f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009f08:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d146      	bne.n	8009f9e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009f10:	f107 0312 	add.w	r3, r7, #18
 8009f14:	4619      	mov	r1, r3
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff fdee 	bl	8009af8 <perform_ref_signal_measurement>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009f22:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d13b      	bne.n	8009fa2 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009f2a:	8a7b      	ldrh	r3, [r7, #18]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfb8      	it	lt
 8009f36:	425b      	neglt	r3, r3
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009f3a:	8a7b      	ldrh	r3, [r7, #18]
 8009f3c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d21c      	bcs.n	8009f7c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d914      	bls.n	8009f74 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009f4a:	f107 031c 	add.w	r3, r7, #28
 8009f4e:	4619      	mov	r1, r3
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7ff fd2f 	bl	80099b4 <set_ref_spad_map>
 8009f56:	4603      	mov	r3, r0
 8009f58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009f62:	f107 011c 	add.w	r1, r7, #28
 8009f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f003 f897 	bl	800d09c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f70:	3b01      	subs	r3, #1
 8009f72:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009f74:	2301      	movs	r3, #1
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7a:	e00a      	b.n	8009f92 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009f86:	f107 031c 	add.w	r3, r7, #28
 8009f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f003 f885 	bl	800d09c <memcpy>
		while (!complete) {
 8009f92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f43f af74 	beq.w	8009e84 <VL53L0X_perform_ref_spad_management+0x2b8>
 8009f9c:	e002      	b.n	8009fa4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009f9e:	bf00      	nop
 8009fa0:	e000      	b.n	8009fa4 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009fa2:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009fa4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d115      	bne.n	8009fd8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fb0:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009fb8:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	781a      	ldrb	r2, [r3, #0]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8009fd8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	375c      	adds	r7, #92	; 0x5c
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd90      	pop	{r4, r7, pc}

08009fe4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009fe4:	b590      	push	{r4, r7, lr}
 8009fe6:	b093      	sub	sp, #76	; 0x4c
 8009fe8:	af06      	add	r7, sp, #24
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	4613      	mov	r3, r2
 8009ff0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009ffc:	23b4      	movs	r3, #180	; 0xb4
 8009ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800a002:	2306      	movs	r3, #6
 800a004:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800a006:	232c      	movs	r3, #44	; 0x2c
 800a008:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a00a:	2201      	movs	r2, #1
 800a00c:	21ff      	movs	r1, #255	; 0xff
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f002 ff23 	bl	800ce5a <VL53L0X_WrByte>
 800a014:	4603      	mov	r3, r0
 800a016:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a01a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d107      	bne.n	800a032 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800a022:	2200      	movs	r2, #0
 800a024:	214f      	movs	r1, #79	; 0x4f
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f002 ff17 	bl	800ce5a <VL53L0X_WrByte>
 800a02c:	4603      	mov	r3, r0
 800a02e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a032:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a036:	2b00      	cmp	r3, #0
 800a038:	d107      	bne.n	800a04a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800a03a:	222c      	movs	r2, #44	; 0x2c
 800a03c:	214e      	movs	r1, #78	; 0x4e
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f002 ff0b 	bl	800ce5a <VL53L0X_WrByte>
 800a044:	4603      	mov	r3, r0
 800a046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a04a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d107      	bne.n	800a062 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a052:	2200      	movs	r2, #0
 800a054:	21ff      	movs	r1, #255	; 0xff
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f002 feff 	bl	800ce5a <VL53L0X_WrByte>
 800a05c:	4603      	mov	r3, r0
 800a05e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a062:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800a06a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a06e:	461a      	mov	r2, r3
 800a070:	21b6      	movs	r1, #182	; 0xb6
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f002 fef1 	bl	800ce5a <VL53L0X_WrByte>
 800a078:	4603      	mov	r3, r0
 800a07a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800a07e:	2300      	movs	r3, #0
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
 800a082:	e009      	b.n	800a098 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	4413      	add	r3, r2
 800a08a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a08e:	2200      	movs	r2, #0
 800a090:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	3301      	adds	r3, #1
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
 800a098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d3f1      	bcc.n	800a084 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d011      	beq.n	800a0ca <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a0a6:	e002      	b.n	800a0ae <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a0ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	4413      	add	r3, r2
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff fc2a 	bl	8009910 <is_aperture>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d103      	bne.n	800a0ca <VL53L0X_set_reference_spads+0xe6>
 800a0c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d3ee      	bcc.n	800a0a8 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800a0d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0da:	79f9      	ldrb	r1, [r7, #7]
 800a0dc:	f107 0214 	add.w	r2, r7, #20
 800a0e0:	9204      	str	r2, [sp, #16]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	9203      	str	r2, [sp, #12]
 800a0e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0e8:	9202      	str	r2, [sp, #8]
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	4623      	mov	r3, r4
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f7ff fc83 	bl	8009a00 <enable_ref_spads>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800a100:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10c      	bne.n	800a122 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	b2da      	uxtb	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	79fa      	ldrb	r2, [r7, #7]
 800a11e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800a122:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a126:	4618      	mov	r0, r3
 800a128:	3734      	adds	r7, #52	; 0x34
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd90      	pop	{r4, r7, pc}

0800a12e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	460b      	mov	r3, r1
 800a138:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a13e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a146:	78fb      	ldrb	r3, [r7, #3]
 800a148:	f043 0301 	orr.w	r3, r3, #1
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	461a      	mov	r2, r3
 800a150:	2100      	movs	r1, #0
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f002 fe81 	bl	800ce5a <VL53L0X_WrByte>
 800a158:	4603      	mov	r3, r0
 800a15a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800a15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d104      	bne.n	800a16e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f9bf 	bl	800a4e8 <VL53L0X_measurement_poll_for_completion>
 800a16a:	4603      	mov	r3, r0
 800a16c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a16e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d105      	bne.n	800a182 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a176:	2100      	movs	r1, #0
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7ff fab5 	bl	80096e8 <VL53L0X_ClearInterruptMask>
 800a17e:	4603      	mov	r3, r0
 800a180:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a18a:	2200      	movs	r2, #0
 800a18c:	2100      	movs	r1, #0
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f002 fe63 	bl	800ce5a <VL53L0X_WrByte>
 800a194:	4603      	mov	r3, r0
 800a196:	73fb      	strb	r3, [r7, #15]

	return Status;
 800a198:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	4608      	mov	r0, r1
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	70fb      	strb	r3, [r7, #3]
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	70bb      	strb	r3, [r7, #2]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	21ff      	movs	r1, #255	; 0xff
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f002 fe45 	bl	800ce5a <VL53L0X_WrByte>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a1da:	2200      	movs	r2, #0
 800a1dc:	2100      	movs	r1, #0
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f002 fe3b 	bl	800ce5a <VL53L0X_WrByte>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	21ff      	movs	r1, #255	; 0xff
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f002 fe31 	bl	800ce5a <VL53L0X_WrByte>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800a202:	78fb      	ldrb	r3, [r7, #3]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d01e      	beq.n	800a246 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800a208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d009      	beq.n	800a224 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a210:	69ba      	ldr	r2, [r7, #24]
 800a212:	21cb      	movs	r1, #203	; 0xcb
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f002 fe9e 	bl	800cf56 <VL53L0X_RdByte>
 800a21a:	4603      	mov	r3, r0
 800a21c:	461a      	mov	r2, r3
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	4313      	orrs	r3, r2
 800a222:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a224:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d02a      	beq.n	800a282 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a22c:	f107 030e 	add.w	r3, r7, #14
 800a230:	461a      	mov	r2, r3
 800a232:	21ee      	movs	r1, #238	; 0xee
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f002 fe8e 	bl	800cf56 <VL53L0X_RdByte>
 800a23a:	4603      	mov	r3, r0
 800a23c:	461a      	mov	r2, r3
 800a23e:	7bfb      	ldrb	r3, [r7, #15]
 800a240:	4313      	orrs	r3, r2
 800a242:	73fb      	strb	r3, [r7, #15]
 800a244:	e01d      	b.n	800a282 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800a246:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d00a      	beq.n	800a264 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a24e:	78bb      	ldrb	r3, [r7, #2]
 800a250:	461a      	mov	r2, r3
 800a252:	21cb      	movs	r1, #203	; 0xcb
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f002 fe00 	bl	800ce5a <VL53L0X_WrByte>
 800a25a:	4603      	mov	r3, r0
 800a25c:	461a      	mov	r2, r3
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	4313      	orrs	r3, r2
 800a262:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a264:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a26c:	787b      	ldrb	r3, [r7, #1]
 800a26e:	2280      	movs	r2, #128	; 0x80
 800a270:	21ee      	movs	r1, #238	; 0xee
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f002 fe31 	bl	800ceda <VL53L0X_UpdateByte>
 800a278:	4603      	mov	r3, r0
 800a27a:	461a      	mov	r2, r3
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	4313      	orrs	r3, r2
 800a280:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a282:	2201      	movs	r2, #1
 800a284:	21ff      	movs	r1, #255	; 0xff
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f002 fde7 	bl	800ce5a <VL53L0X_WrByte>
 800a28c:	4603      	mov	r3, r0
 800a28e:	461a      	mov	r2, r3
 800a290:	7bfb      	ldrb	r3, [r7, #15]
 800a292:	4313      	orrs	r3, r2
 800a294:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a296:	2201      	movs	r2, #1
 800a298:	2100      	movs	r1, #0
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f002 fddd 	bl	800ce5a <VL53L0X_WrByte>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	21ff      	movs	r1, #255	; 0xff
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f002 fdd3 	bl	800ce5a <VL53L0X_WrByte>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	461a      	mov	r2, r3
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	f023 0310 	bic.w	r3, r3, #16
 800a2c4:	b2da      	uxtb	r2, r3
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	701a      	strb	r2, [r3, #0]

	return Status;
 800a2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b08a      	sub	sp, #40	; 0x28
 800a2da:	af04      	add	r7, sp, #16
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	71fb      	strb	r3, [r7, #7]
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a300:	79bb      	ldrb	r3, [r7, #6]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a30c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a30e:	2201      	movs	r2, #1
 800a310:	2101      	movs	r1, #1
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f002 fda1 	bl	800ce5a <VL53L0X_WrByte>
 800a318:	4603      	mov	r3, r0
 800a31a:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a31c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d105      	bne.n	800a330 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a324:	2140      	movs	r1, #64	; 0x40
 800a326:	68f8      	ldr	r0, [r7, #12]
 800a328:	f7ff ff01 	bl	800a12e <VL53L0X_perform_single_ref_calibration>
 800a32c:	4603      	mov	r3, r0
 800a32e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d115      	bne.n	800a364 <VL53L0X_perform_vhv_calibration+0x8e>
 800a338:	79fb      	ldrb	r3, [r7, #7]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d112      	bne.n	800a364 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a33e:	7d39      	ldrb	r1, [r7, #20]
 800a340:	7d7a      	ldrb	r2, [r7, #21]
 800a342:	2300      	movs	r3, #0
 800a344:	9303      	str	r3, [sp, #12]
 800a346:	2301      	movs	r3, #1
 800a348:	9302      	str	r3, [sp, #8]
 800a34a:	f107 0313 	add.w	r3, r7, #19
 800a34e:	9301      	str	r3, [sp, #4]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	9300      	str	r3, [sp, #0]
 800a354:	460b      	mov	r3, r1
 800a356:	2101      	movs	r1, #1
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff ff23 	bl	800a1a4 <VL53L0X_ref_calibration_io>
 800a35e:	4603      	mov	r3, r0
 800a360:	75fb      	strb	r3, [r7, #23]
 800a362:	e002      	b.n	800a36a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	2200      	movs	r2, #0
 800a368:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d112      	bne.n	800a398 <VL53L0X_perform_vhv_calibration+0xc2>
 800a372:	79bb      	ldrb	r3, [r7, #6]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00f      	beq.n	800a398 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a378:	7dbb      	ldrb	r3, [r7, #22]
 800a37a:	461a      	mov	r2, r3
 800a37c:	2101      	movs	r1, #1
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f002 fd6b 	bl	800ce5a <VL53L0X_WrByte>
 800a384:	4603      	mov	r3, r0
 800a386:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a388:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d103      	bne.n	800a398 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	7dba      	ldrb	r2, [r7, #22]
 800a394:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08a      	sub	sp, #40	; 0x28
 800a3a8:	af04      	add	r7, sp, #16
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	71fb      	strb	r3, [r7, #7]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a3ca:	79bb      	ldrb	r3, [r7, #6]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a3d6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a3d8:	2202      	movs	r2, #2
 800a3da:	2101      	movs	r1, #1
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f002 fd3c 	bl	800ce5a <VL53L0X_WrByte>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a3e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d105      	bne.n	800a3fa <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	f7ff fe9c 	bl	800a12e <VL53L0X_perform_single_ref_calibration>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a3fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d115      	bne.n	800a42e <VL53L0X_perform_phase_calibration+0x8a>
 800a402:	79fb      	ldrb	r3, [r7, #7]
 800a404:	2b01      	cmp	r3, #1
 800a406:	d112      	bne.n	800a42e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a408:	7d39      	ldrb	r1, [r7, #20]
 800a40a:	7d7a      	ldrb	r2, [r7, #21]
 800a40c:	2301      	movs	r3, #1
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	2300      	movs	r3, #0
 800a412:	9302      	str	r3, [sp, #8]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	f107 0313 	add.w	r3, r7, #19
 800a41c:	9300      	str	r3, [sp, #0]
 800a41e:	460b      	mov	r3, r1
 800a420:	2101      	movs	r1, #1
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f7ff febe 	bl	800a1a4 <VL53L0X_ref_calibration_io>
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]
 800a42c:	e002      	b.n	800a434 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	2200      	movs	r2, #0
 800a432:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d112      	bne.n	800a462 <VL53L0X_perform_phase_calibration+0xbe>
 800a43c:	79bb      	ldrb	r3, [r7, #6]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d00f      	beq.n	800a462 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a442:	7dbb      	ldrb	r3, [r7, #22]
 800a444:	461a      	mov	r2, r3
 800a446:	2101      	movs	r1, #1
 800a448:	68f8      	ldr	r0, [r7, #12]
 800a44a:	f002 fd06 	bl	800ce5a <VL53L0X_WrByte>
 800a44e:	4603      	mov	r3, r0
 800a450:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a452:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d103      	bne.n	800a462 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	7dba      	ldrb	r2, [r7, #22]
 800a45e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a462:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3718      	adds	r7, #24
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b086      	sub	sp, #24
 800a472:	af00      	add	r7, sp, #0
 800a474:	60f8      	str	r0, [r7, #12]
 800a476:	60b9      	str	r1, [r7, #8]
 800a478:	607a      	str	r2, [r7, #4]
 800a47a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a48a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a48c:	78fa      	ldrb	r2, [r7, #3]
 800a48e:	2300      	movs	r3, #0
 800a490:	68b9      	ldr	r1, [r7, #8]
 800a492:	68f8      	ldr	r0, [r7, #12]
 800a494:	f7ff ff1f 	bl	800a2d6 <VL53L0X_perform_vhv_calibration>
 800a498:	4603      	mov	r3, r0
 800a49a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a49c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d107      	bne.n	800a4b4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a4a4:	78fa      	ldrb	r2, [r7, #3]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	6879      	ldr	r1, [r7, #4]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	f7ff ff7a 	bl	800a3a4 <VL53L0X_perform_phase_calibration>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a4b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10f      	bne.n	800a4dc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a4bc:	7dbb      	ldrb	r3, [r7, #22]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	2101      	movs	r1, #1
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f002 fcc9 	bl	800ce5a <VL53L0X_WrByte>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a4cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d103      	bne.n	800a4dc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	7dba      	ldrb	r2, [r7, #22]
 800a4d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a4dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3718      	adds	r7, #24
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a4fc:	f107 030f 	add.w	r3, r7, #15
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7fe fdff 	bl	8009106 <VL53L0X_GetMeasurementDataReady>
 800a508:	4603      	mov	r3, r0
 800a50a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d110      	bne.n	800a536 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a514:	7bfb      	ldrb	r3, [r7, #15]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d00f      	beq.n	800a53a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	3301      	adds	r3, #1
 800a51e:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a526:	d302      	bcc.n	800a52e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a528:	23f9      	movs	r3, #249	; 0xf9
 800a52a:	75fb      	strb	r3, [r7, #23]
			break;
 800a52c:	e006      	b.n	800a53c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f002 fd6e 	bl	800d010 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a534:	e7e2      	b.n	800a4fc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a536:	bf00      	nop
 800a538:	e000      	b.n	800a53c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800a53a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800a53c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	4603      	mov	r3, r0
 800a550:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a556:	79fb      	ldrb	r3, [r7, #7]
 800a558:	3301      	adds	r3, #1
 800a55a:	b2db      	uxtb	r3, r3
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a560:	7bfb      	ldrb	r3, [r7, #15]
}
 800a562:	4618      	mov	r0, r3
 800a564:	3714      	adds	r7, #20
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800a56e:	b480      	push	{r7}
 800a570:	b085      	sub	sp, #20
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a57a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a57e:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800a580:	e002      	b.n	800a588 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	089b      	lsrs	r3, r3, #2
 800a586:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d8f8      	bhi.n	800a582 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a590:	e017      	b.n	800a5c2 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	4413      	add	r3, r2
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d30b      	bcc.n	800a5b6 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	085b      	lsrs	r3, r3, #1
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	e002      	b.n	800a5bc <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	085b      	lsrs	r3, r3, #1
 800a5ba:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	089b      	lsrs	r3, r3, #2
 800a5c0:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e4      	bne.n	800a592 <VL53L0X_isqrt+0x24>
	}

	return res;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b086      	sub	sp, #24
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2183      	movs	r1, #131	; 0x83
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f002 fc37 	bl	800ce5a <VL53L0X_WrByte>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800a5f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d11e      	bne.n	800a63c <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800a5fe:	2300      	movs	r3, #0
 800a600:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a602:	f107 030f 	add.w	r3, r7, #15
 800a606:	461a      	mov	r2, r3
 800a608:	2183      	movs	r1, #131	; 0x83
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f002 fca3 	bl	800cf56 <VL53L0X_RdByte>
 800a610:	4603      	mov	r3, r0
 800a612:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a614:	7bfb      	ldrb	r3, [r7, #15]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <VL53L0X_device_read_strobe+0x5a>
 800a61a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d106      	bne.n	800a630 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	3301      	adds	r3, #1
 800a626:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a62e:	d3e8      	bcc.n	800a602 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a636:	d301      	bcc.n	800a63c <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a638:	23f9      	movs	r3, #249	; 0xf9
 800a63a:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800a63c:	2201      	movs	r2, #1
 800a63e:	2183      	movs	r1, #131	; 0x83
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f002 fc0a 	bl	800ce5a <VL53L0X_WrByte>
 800a646:	4603      	mov	r3, r0
 800a648:	461a      	mov	r2, r3
 800a64a:	7dfb      	ldrb	r3, [r7, #23]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a650:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a654:	4618      	mov	r0, r3
 800a656:	3718      	adds	r7, #24
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b098      	sub	sp, #96	; 0x60
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	460b      	mov	r3, r1
 800a666:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a668:	2300      	movs	r3, #0
 800a66a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800a66e:	2300      	movs	r3, #0
 800a670:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a67a:	2300      	movs	r3, #0
 800a67c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a67e:	2300      	movs	r3, #0
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a68c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a690:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a696:	2300      	movs	r3, #0
 800a698:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800a69a:	2300      	movs	r3, #0
 800a69c:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a6a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800a6a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a6ac:	2b07      	cmp	r3, #7
 800a6ae:	f000 8408 	beq.w	800aec2 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	2180      	movs	r1, #128	; 0x80
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f002 fbcf 	bl	800ce5a <VL53L0X_WrByte>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	461a      	mov	r2, r3
 800a6c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	21ff      	movs	r1, #255	; 0xff
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f002 fbc3 	bl	800ce5a <VL53L0X_WrByte>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f002 fbb7 	bl	800ce5a <VL53L0X_WrByte>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a6fa:	2206      	movs	r2, #6
 800a6fc:	21ff      	movs	r1, #255	; 0xff
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f002 fbab 	bl	800ce5a <VL53L0X_WrByte>
 800a704:	4603      	mov	r3, r0
 800a706:	461a      	mov	r2, r3
 800a708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a70c:	4313      	orrs	r3, r2
 800a70e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a712:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a716:	461a      	mov	r2, r3
 800a718:	2183      	movs	r1, #131	; 0x83
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f002 fc1b 	bl	800cf56 <VL53L0X_RdByte>
 800a720:	4603      	mov	r3, r0
 800a722:	461a      	mov	r2, r3
 800a724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a728:	4313      	orrs	r3, r2
 800a72a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a72e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a732:	f043 0304 	orr.w	r3, r3, #4
 800a736:	b2db      	uxtb	r3, r3
 800a738:	461a      	mov	r2, r3
 800a73a:	2183      	movs	r1, #131	; 0x83
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f002 fb8c 	bl	800ce5a <VL53L0X_WrByte>
 800a742:	4603      	mov	r3, r0
 800a744:	461a      	mov	r2, r3
 800a746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a74a:	4313      	orrs	r3, r2
 800a74c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a750:	2207      	movs	r2, #7
 800a752:	21ff      	movs	r1, #255	; 0xff
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f002 fb80 	bl	800ce5a <VL53L0X_WrByte>
 800a75a:	4603      	mov	r3, r0
 800a75c:	461a      	mov	r2, r3
 800a75e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a762:	4313      	orrs	r3, r2
 800a764:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a768:	2201      	movs	r2, #1
 800a76a:	2181      	movs	r1, #129	; 0x81
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f002 fb74 	bl	800ce5a <VL53L0X_WrByte>
 800a772:	4603      	mov	r3, r0
 800a774:	461a      	mov	r2, r3
 800a776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a77a:	4313      	orrs	r3, r2
 800a77c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f002 fc45 	bl	800d010 <VL53L0X_PollingDelay>
 800a786:	4603      	mov	r3, r0
 800a788:	461a      	mov	r2, r3
 800a78a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a78e:	4313      	orrs	r3, r2
 800a790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a794:	2201      	movs	r2, #1
 800a796:	2180      	movs	r1, #128	; 0x80
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f002 fb5e 	bl	800ce5a <VL53L0X_WrByte>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a7ac:	78fb      	ldrb	r3, [r7, #3]
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	f000 8098 	beq.w	800a8e8 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a7b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a7bc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f040 8091 	bne.w	800a8e8 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a7c6:	226b      	movs	r2, #107	; 0x6b
 800a7c8:	2194      	movs	r1, #148	; 0x94
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f002 fb45 	bl	800ce5a <VL53L0X_WrByte>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f7ff fef9 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a7f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	2190      	movs	r1, #144	; 0x90
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f002 fbe9 	bl	800cfd2 <VL53L0X_RdDWord>
 800a800:	4603      	mov	r3, r0
 800a802:	461a      	mov	r2, r3
 800a804:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a808:	4313      	orrs	r3, r2
 800a80a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a810:	0a1b      	lsrs	r3, r3, #8
 800a812:	b2db      	uxtb	r3, r3
 800a814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a818:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	0bdb      	lsrs	r3, r3, #15
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a82a:	2224      	movs	r2, #36	; 0x24
 800a82c:	2194      	movs	r1, #148	; 0x94
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f002 fb13 	bl	800ce5a <VL53L0X_WrByte>
 800a834:	4603      	mov	r3, r0
 800a836:	461a      	mov	r2, r3
 800a838:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a83c:	4313      	orrs	r3, r2
 800a83e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff fec7 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800a848:	4603      	mov	r3, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a850:	4313      	orrs	r3, r2
 800a852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a856:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a85a:	461a      	mov	r2, r3
 800a85c:	2190      	movs	r1, #144	; 0x90
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f002 fbb7 	bl	800cfd2 <VL53L0X_RdDWord>
 800a864:	4603      	mov	r3, r0
 800a866:	461a      	mov	r2, r3
 800a868:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a86c:	4313      	orrs	r3, r2
 800a86e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a874:	0e1b      	lsrs	r3, r3, #24
 800a876:	b2db      	uxtb	r3, r3
 800a878:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87c:	0c1b      	lsrs	r3, r3, #16
 800a87e:	b2db      	uxtb	r3, r3
 800a880:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	0a1b      	lsrs	r3, r3, #8
 800a886:	b2db      	uxtb	r3, r3
 800a888:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a890:	2225      	movs	r2, #37	; 0x25
 800a892:	2194      	movs	r1, #148	; 0x94
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f002 fae0 	bl	800ce5a <VL53L0X_WrByte>
 800a89a:	4603      	mov	r3, r0
 800a89c:	461a      	mov	r2, r3
 800a89e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7ff fe94 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a8bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	2190      	movs	r1, #144	; 0x90
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f002 fb84 	bl	800cfd2 <VL53L0X_RdDWord>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8da:	0e1b      	lsrs	r3, r3, #24
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e2:	0c1b      	lsrs	r3, r3, #16
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a8e8:	78fb      	ldrb	r3, [r7, #3]
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 8189 	beq.w	800ac06 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a8f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a8f8:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f040 8182 	bne.w	800ac06 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a902:	2202      	movs	r2, #2
 800a904:	2194      	movs	r1, #148	; 0x94
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f002 faa7 	bl	800ce5a <VL53L0X_WrByte>
 800a90c:	4603      	mov	r3, r0
 800a90e:	461a      	mov	r2, r3
 800a910:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a914:	4313      	orrs	r3, r2
 800a916:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff fe5b 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800a920:	4603      	mov	r3, r0
 800a922:	461a      	mov	r2, r3
 800a924:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a928:	4313      	orrs	r3, r2
 800a92a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a92e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a932:	461a      	mov	r2, r3
 800a934:	2190      	movs	r1, #144	; 0x90
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f002 fb0d 	bl	800cf56 <VL53L0X_RdByte>
 800a93c:	4603      	mov	r3, r0
 800a93e:	461a      	mov	r2, r3
 800a940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a944:	4313      	orrs	r3, r2
 800a946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a94a:	227b      	movs	r2, #123	; 0x7b
 800a94c:	2194      	movs	r1, #148	; 0x94
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f002 fa83 	bl	800ce5a <VL53L0X_WrByte>
 800a954:	4603      	mov	r3, r0
 800a956:	461a      	mov	r2, r3
 800a958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a95c:	4313      	orrs	r3, r2
 800a95e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff fe37 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800a968:	4603      	mov	r3, r0
 800a96a:	461a      	mov	r2, r3
 800a96c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a970:	4313      	orrs	r3, r2
 800a972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a976:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a97a:	461a      	mov	r2, r3
 800a97c:	2190      	movs	r1, #144	; 0x90
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f002 fae9 	bl	800cf56 <VL53L0X_RdByte>
 800a984:	4603      	mov	r3, r0
 800a986:	461a      	mov	r2, r3
 800a988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a98c:	4313      	orrs	r3, r2
 800a98e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a992:	2277      	movs	r2, #119	; 0x77
 800a994:	2194      	movs	r1, #148	; 0x94
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f002 fa5f 	bl	800ce5a <VL53L0X_WrByte>
 800a99c:	4603      	mov	r3, r0
 800a99e:	461a      	mov	r2, r3
 800a9a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f7ff fe13 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a9be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	2190      	movs	r1, #144	; 0x90
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f002 fb03 	bl	800cfd2 <VL53L0X_RdDWord>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	0e5b      	lsrs	r3, r3, #25
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ea:	0c9b      	lsrs	r3, r3, #18
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	0adb      	lsrs	r3, r3, #11
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa00:	b2db      	uxtb	r3, r3
 800aa02:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	b2db      	uxtb	r3, r3
 800aa16:	00db      	lsls	r3, r3, #3
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800aa24:	2278      	movs	r2, #120	; 0x78
 800aa26:	2194      	movs	r1, #148	; 0x94
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f002 fa16 	bl	800ce5a <VL53L0X_WrByte>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	461a      	mov	r2, r3
 800aa32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa36:	4313      	orrs	r3, r2
 800aa38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f7ff fdca 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800aa42:	4603      	mov	r3, r0
 800aa44:	461a      	mov	r2, r3
 800aa46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aa50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa54:	461a      	mov	r2, r3
 800aa56:	2190      	movs	r1, #144	; 0x90
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f002 faba 	bl	800cfd2 <VL53L0X_RdDWord>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	461a      	mov	r2, r3
 800aa62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa66:	4313      	orrs	r3, r2
 800aa68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6e:	0f5b      	lsrs	r3, r3, #29
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa76:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800aa78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa7c:	4413      	add	r3, r2
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800aa82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa84:	0d9b      	lsrs	r3, r3, #22
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa92:	0bdb      	lsrs	r3, r3, #15
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	0a1b      	lsrs	r3, r3, #8
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800aaac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaae:	085b      	lsrs	r3, r3, #1
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	019b      	lsls	r3, r3, #6
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800aacc:	2279      	movs	r2, #121	; 0x79
 800aace:	2194      	movs	r1, #148	; 0x94
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f002 f9c2 	bl	800ce5a <VL53L0X_WrByte>
 800aad6:	4603      	mov	r3, r0
 800aad8:	461a      	mov	r2, r3
 800aada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aade:	4313      	orrs	r3, r2
 800aae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f7ff fd76 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800aaea:	4603      	mov	r3, r0
 800aaec:	461a      	mov	r2, r3
 800aaee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aaf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aafc:	461a      	mov	r2, r3
 800aafe:	2190      	movs	r1, #144	; 0x90
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f002 fa66 	bl	800cfd2 <VL53L0X_RdDWord>
 800ab06:	4603      	mov	r3, r0
 800ab08:	461a      	mov	r2, r3
 800ab0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	0e9b      	lsrs	r3, r3, #26
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab1e:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800ab20:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab24:	4413      	add	r3, r2
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800ab2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab2c:	0cdb      	lsrs	r3, r3, #19
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800ab38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3a:	0b1b      	lsrs	r3, r3, #12
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	095b      	lsrs	r3, r3, #5
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ab66:	227a      	movs	r2, #122	; 0x7a
 800ab68:	2194      	movs	r1, #148	; 0x94
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f002 f975 	bl	800ce5a <VL53L0X_WrByte>
 800ab70:	4603      	mov	r3, r0
 800ab72:	461a      	mov	r2, r3
 800ab74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f7ff fd29 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800ab84:	4603      	mov	r3, r0
 800ab86:	461a      	mov	r2, r3
 800ab88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ab92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab96:	461a      	mov	r2, r3
 800ab98:	2190      	movs	r1, #144	; 0x90
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f002 fa19 	bl	800cfd2 <VL53L0X_RdDWord>
 800aba0:	4603      	mov	r3, r0
 800aba2:	461a      	mov	r2, r3
 800aba4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aba8:	4313      	orrs	r3, r2
 800abaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	0f9b      	lsrs	r3, r3, #30
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abb8:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800abba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abbe:	4413      	add	r3, r2
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800abc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc6:	0ddb      	lsrs	r3, r3, #23
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	0c1b      	lsrs	r3, r3, #16
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe2:	0a5b      	lsrs	r3, r3, #9
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abea:	b2db      	uxtb	r3, r3
 800abec:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	089b      	lsrs	r3, r3, #2
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800ac00:	2300      	movs	r3, #0
 800ac02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800ac06:	78fb      	ldrb	r3, [r7, #3]
 800ac08:	f003 0304 	and.w	r3, r3, #4
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f000 80f1 	beq.w	800adf4 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ac12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ac16:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f040 80ea 	bne.w	800adf4 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ac20:	227b      	movs	r2, #123	; 0x7b
 800ac22:	2194      	movs	r1, #148	; 0x94
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f002 f918 	bl	800ce5a <VL53L0X_WrByte>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac32:	4313      	orrs	r3, r2
 800ac34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7ff fccc 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	461a      	mov	r2, r3
 800ac42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac46:	4313      	orrs	r3, r2
 800ac48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800ac4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ac50:	461a      	mov	r2, r3
 800ac52:	2190      	movs	r1, #144	; 0x90
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f002 f9bc 	bl	800cfd2 <VL53L0X_RdDWord>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac62:	4313      	orrs	r3, r2
 800ac64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800ac68:	227c      	movs	r2, #124	; 0x7c
 800ac6a:	2194      	movs	r1, #148	; 0x94
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f002 f8f4 	bl	800ce5a <VL53L0X_WrByte>
 800ac72:	4603      	mov	r3, r0
 800ac74:	461a      	mov	r2, r3
 800ac76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f7ff fca8 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800ac86:	4603      	mov	r3, r0
 800ac88:	461a      	mov	r2, r3
 800ac8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800ac94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac98:	461a      	mov	r2, r3
 800ac9a:	2190      	movs	r1, #144	; 0x90
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f002 f998 	bl	800cfd2 <VL53L0X_RdDWord>
 800aca2:	4603      	mov	r3, r0
 800aca4:	461a      	mov	r2, r3
 800aca6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acaa:	4313      	orrs	r3, r2
 800acac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800acb0:	2273      	movs	r2, #115	; 0x73
 800acb2:	2194      	movs	r1, #148	; 0x94
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f002 f8d0 	bl	800ce5a <VL53L0X_WrByte>
 800acba:	4603      	mov	r3, r0
 800acbc:	461a      	mov	r2, r3
 800acbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acc2:	4313      	orrs	r3, r2
 800acc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f7ff fc84 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800acce:	4603      	mov	r3, r0
 800acd0:	461a      	mov	r2, r3
 800acd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acd6:	4313      	orrs	r3, r2
 800acd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800acdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ace0:	461a      	mov	r2, r3
 800ace2:	2190      	movs	r1, #144	; 0x90
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f002 f974 	bl	800cfd2 <VL53L0X_RdDWord>
 800acea:	4603      	mov	r3, r0
 800acec:	461a      	mov	r2, r3
 800acee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acf2:	4313      	orrs	r3, r2
 800acf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800acf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfa:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800ad00:	2274      	movs	r2, #116	; 0x74
 800ad02:	2194      	movs	r1, #148	; 0x94
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f002 f8a8 	bl	800ce5a <VL53L0X_WrByte>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	461a      	mov	r2, r3
 800ad0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad12:	4313      	orrs	r3, r2
 800ad14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7ff fc5c 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	461a      	mov	r2, r3
 800ad22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad26:	4313      	orrs	r3, r2
 800ad28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad30:	461a      	mov	r2, r3
 800ad32:	2190      	movs	r1, #144	; 0x90
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f002 f94c 	bl	800cfd2 <VL53L0X_RdDWord>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad42:	4313      	orrs	r3, r2
 800ad44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ad48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad4a:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ad4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ad52:	2275      	movs	r2, #117	; 0x75
 800ad54:	2194      	movs	r1, #148	; 0x94
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f002 f87f 	bl	800ce5a <VL53L0X_WrByte>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	461a      	mov	r2, r3
 800ad60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad64:	4313      	orrs	r3, r2
 800ad66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff fc33 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800ad70:	4603      	mov	r3, r0
 800ad72:	461a      	mov	r2, r3
 800ad74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad78:	4313      	orrs	r3, r2
 800ad7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ad7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ad82:	461a      	mov	r2, r3
 800ad84:	2190      	movs	r1, #144	; 0x90
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f002 f923 	bl	800cfd2 <VL53L0X_RdDWord>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad94:	4313      	orrs	r3, r2
 800ad96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9c:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800ada2:	2276      	movs	r2, #118	; 0x76
 800ada4:	2194      	movs	r1, #148	; 0x94
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f002 f857 	bl	800ce5a <VL53L0X_WrByte>
 800adac:	4603      	mov	r3, r0
 800adae:	461a      	mov	r2, r3
 800adb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adb4:	4313      	orrs	r3, r2
 800adb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f7ff fc0b 	bl	800a5d6 <VL53L0X_device_read_strobe>
 800adc0:	4603      	mov	r3, r0
 800adc2:	461a      	mov	r2, r3
 800adc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adc8:	4313      	orrs	r3, r2
 800adca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800adce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800add2:	461a      	mov	r2, r3
 800add4:	2190      	movs	r1, #144	; 0x90
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f002 f8fb 	bl	800cfd2 <VL53L0X_RdDWord>
 800addc:	4603      	mov	r3, r0
 800adde:	461a      	mov	r2, r3
 800ade0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ade4:	4313      	orrs	r3, r2
 800ade6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800adea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adec:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800adee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800adf0:	4313      	orrs	r3, r2
 800adf2:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800adf4:	2200      	movs	r2, #0
 800adf6:	2181      	movs	r1, #129	; 0x81
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f002 f82e 	bl	800ce5a <VL53L0X_WrByte>
 800adfe:	4603      	mov	r3, r0
 800ae00:	461a      	mov	r2, r3
 800ae02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae06:	4313      	orrs	r3, r2
 800ae08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800ae0c:	2206      	movs	r2, #6
 800ae0e:	21ff      	movs	r1, #255	; 0xff
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f002 f822 	bl	800ce5a <VL53L0X_WrByte>
 800ae16:	4603      	mov	r3, r0
 800ae18:	461a      	mov	r2, r3
 800ae1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800ae24:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800ae28:	461a      	mov	r2, r3
 800ae2a:	2183      	movs	r1, #131	; 0x83
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f002 f892 	bl	800cf56 <VL53L0X_RdByte>
 800ae32:	4603      	mov	r3, r0
 800ae34:	461a      	mov	r2, r3
 800ae36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800ae40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae44:	f023 0304 	bic.w	r3, r3, #4
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	2183      	movs	r1, #131	; 0x83
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f002 f803 	bl	800ce5a <VL53L0X_WrByte>
 800ae54:	4603      	mov	r3, r0
 800ae56:	461a      	mov	r2, r3
 800ae58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ae62:	2201      	movs	r2, #1
 800ae64:	21ff      	movs	r1, #255	; 0xff
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f001 fff7 	bl	800ce5a <VL53L0X_WrByte>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	461a      	mov	r2, r3
 800ae70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae74:	4313      	orrs	r3, r2
 800ae76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f001 ffeb 	bl	800ce5a <VL53L0X_WrByte>
 800ae84:	4603      	mov	r3, r0
 800ae86:	461a      	mov	r2, r3
 800ae88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ae92:	2200      	movs	r2, #0
 800ae94:	21ff      	movs	r1, #255	; 0xff
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f001 ffdf 	bl	800ce5a <VL53L0X_WrByte>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aea4:	4313      	orrs	r3, r2
 800aea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2180      	movs	r1, #128	; 0x80
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f001 ffd3 	bl	800ce5a <VL53L0X_WrByte>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aebc:	4313      	orrs	r3, r2
 800aebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800aec2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f040 808f 	bne.w	800afea <VL53L0X_get_info_from_device+0x98e>
 800aecc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aed0:	2b07      	cmp	r3, #7
 800aed2:	f000 808a 	beq.w	800afea <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800aed6:	78fb      	ldrb	r3, [r7, #3]
 800aed8:	f003 0301 	and.w	r3, r3, #1
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d024      	beq.n	800af2a <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800aee0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aee4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d11e      	bne.n	800af2a <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800aef2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800aefc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800af00:	2300      	movs	r3, #0
 800af02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af04:	e00e      	b.n	800af24 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800af06:	f107 0208 	add.w	r2, r7, #8
 800af0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af0c:	4413      	add	r3, r2
 800af0e:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af14:	4413      	add	r3, r2
 800af16:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800af1a:	460a      	mov	r2, r1
 800af1c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800af1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af20:	3301      	adds	r3, #1
 800af22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af26:	2b05      	cmp	r3, #5
 800af28:	dded      	ble.n	800af06 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800af2a:	78fb      	ldrb	r3, [r7, #3]
 800af2c:	f003 0302 	and.w	r3, r3, #2
 800af30:	2b00      	cmp	r3, #0
 800af32:	d018      	beq.n	800af66 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800af34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af38:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d112      	bne.n	800af66 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af40:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af4a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	33f3      	adds	r3, #243	; 0xf3
 800af58:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800af5a:	f107 0310 	add.w	r3, r7, #16
 800af5e:	4619      	mov	r1, r3
 800af60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af62:	f002 f967 	bl	800d234 <strcpy>

		}

		if (((option & 4) == 4) &&
 800af66:	78fb      	ldrb	r3, [r7, #3]
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d030      	beq.n	800afd2 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800af70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af74:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d12a      	bne.n	800afd2 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800af8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af8e:	025b      	lsls	r3, r3, #9
 800af90:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af96:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800af9a:	2300      	movs	r3, #0
 800af9c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800afa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d011      	beq.n	800afca <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800afa6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800afa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afaa:	1ad3      	subs	r3, r2, r3
 800afac:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800afae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800afb4:	fb02 f303 	mul.w	r3, r2, r3
 800afb8:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800afba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800afbe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800afc2:	425b      	negs	r3, r3
 800afc4:	b29b      	uxth	r3, r3
 800afc6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800afca:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800afd2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800afd6:	78fb      	ldrb	r3, [r7, #3]
 800afd8:	4313      	orrs	r3, r2
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800afe0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800afea:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3760      	adds	r7, #96	; 0x60
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800aff6:	b490      	push	{r4, r7}
 800aff8:	b086      	sub	sp, #24
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	460b      	mov	r3, r1
 800b000:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800b002:	f240 6377 	movw	r3, #1655	; 0x677
 800b006:	f04f 0400 	mov.w	r4, #0
 800b00a:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 800b00e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b012:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800b014:	78fb      	ldrb	r3, [r7, #3]
 800b016:	68fa      	ldr	r2, [r7, #12]
 800b018:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800b01c:	693a      	ldr	r2, [r7, #16]
 800b01e:	fb02 f303 	mul.w	r3, r2, r3
 800b022:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800b024:	68bb      	ldr	r3, [r7, #8]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bc90      	pop	{r4, r7}
 800b02e:	4770      	bx	lr

0800b030 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800b030:	b480      	push	{r7}
 800b032:	b087      	sub	sp, #28
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800b038:	2300      	movs	r3, #0
 800b03a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b040:	2300      	movs	r3, #0
 800b042:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d017      	beq.n	800b07a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	3b01      	subs	r3, #1
 800b04e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b050:	e005      	b.n	800b05e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	085b      	lsrs	r3, r3, #1
 800b056:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b058:	89fb      	ldrh	r3, [r7, #14]
 800b05a:	3301      	adds	r3, #1
 800b05c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1f4      	bne.n	800b052 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b068:	89fb      	ldrh	r3, [r7, #14]
 800b06a:	021b      	lsls	r3, r3, #8
 800b06c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	b29b      	uxth	r3, r3
 800b072:	b2db      	uxtb	r3, r3
 800b074:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b076:	4413      	add	r3, r2
 800b078:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b07a:	8afb      	ldrh	r3, [r7, #22]

}
 800b07c:	4618      	mov	r0, r3
 800b07e:	371c      	adds	r7, #28
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800b088:	b480      	push	{r7}
 800b08a:	b085      	sub	sp, #20
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	4603      	mov	r3, r0
 800b090:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800b092:	2300      	movs	r3, #0
 800b094:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b096:	88fb      	ldrh	r3, [r7, #6]
 800b098:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b09a:	88fa      	ldrh	r2, [r7, #6]
 800b09c:	0a12      	lsrs	r2, r2, #8
 800b09e:	b292      	uxth	r2, r2
 800b0a0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3714      	adds	r7, #20
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f7ff ff93 	bl	800aff6 <VL53L0X_calc_macro_period_ps>
 800b0d0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b0d8:	4a0a      	ldr	r2, [pc, #40]	; (800b104 <VL53L0X_calc_timeout_mclks+0x50>)
 800b0da:	fba2 2303 	umull	r2, r3, r2, r3
 800b0de:	099b      	lsrs	r3, r3, #6
 800b0e0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0e8:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	085b      	lsrs	r3, r3, #1
 800b0f0:	441a      	add	r2, r3
	timeout_period_mclks =
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0f8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800b0fa:	69fb      	ldr	r3, [r7, #28]
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3720      	adds	r7, #32
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	10624dd3 	.word	0x10624dd3

0800b108 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	807b      	strh	r3, [r7, #2]
 800b114:	4613      	mov	r3, r2
 800b116:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b118:	2300      	movs	r3, #0
 800b11a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b11c:	787b      	ldrb	r3, [r7, #1]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff ff68 	bl	800aff6 <VL53L0X_calc_macro_period_ps>
 800b126:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b12e:	4a0a      	ldr	r2, [pc, #40]	; (800b158 <VL53L0X_calc_timeout_us+0x50>)
 800b130:	fba2 2303 	umull	r2, r3, r2, r3
 800b134:	099b      	lsrs	r3, r3, #6
 800b136:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800b138:	887b      	ldrh	r3, [r7, #2]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	fb02 f303 	mul.w	r3, r2, r3
 800b140:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800b144:	4a04      	ldr	r2, [pc, #16]	; (800b158 <VL53L0X_calc_timeout_us+0x50>)
 800b146:	fba2 2303 	umull	r2, r3, r2, r3
 800b14a:	099b      	lsrs	r3, r3, #6
 800b14c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800b14e:	697b      	ldr	r3, [r7, #20]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3718      	adds	r7, #24
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}
 800b158:	10624dd3 	.word	0x10624dd3

0800b15c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08c      	sub	sp, #48	; 0x30
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	460b      	mov	r3, r1
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800b170:	2300      	movs	r3, #0
 800b172:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800b17a:	2300      	movs	r3, #0
 800b17c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800b17e:	2300      	movs	r3, #0
 800b180:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b182:	7afb      	ldrb	r3, [r7, #11]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d005      	beq.n	800b194 <get_sequence_step_timeout+0x38>
 800b188:	7afb      	ldrb	r3, [r7, #11]
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d002      	beq.n	800b194 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b18e:	7afb      	ldrb	r3, [r7, #11]
 800b190:	2b02      	cmp	r3, #2
 800b192:	d128      	bne.n	800b1e6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b194:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b198:	461a      	mov	r2, r3
 800b19a:	2100      	movs	r1, #0
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f7fd fa1b 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800b1a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d109      	bne.n	800b1c4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800b1b0:	f107 0320 	add.w	r3, r7, #32
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	2146      	movs	r1, #70	; 0x46
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f001 fecc 	bl	800cf56 <VL53L0X_RdByte>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800b1c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1c8:	b29b      	uxth	r3, r3
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7ff ff5c 	bl	800b088 <VL53L0X_decode_timeout>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b1d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b1d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b1da:	4619      	mov	r1, r3
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7ff ff93 	bl	800b108 <VL53L0X_calc_timeout_us>
 800b1e2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b1e4:	e092      	b.n	800b30c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b1e6:	7afb      	ldrb	r3, [r7, #11]
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d135      	bne.n	800b258 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b1ec:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7fd f9ef 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b200:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b204:	2b00      	cmp	r3, #0
 800b206:	f040 8081 	bne.w	800b30c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b20a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b20e:	461a      	mov	r2, r3
 800b210:	2100      	movs	r1, #0
 800b212:	68f8      	ldr	r0, [r7, #12]
 800b214:	f7fd f9e0 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b218:	4603      	mov	r3, r0
 800b21a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800b21e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b222:	2b00      	cmp	r3, #0
 800b224:	d109      	bne.n	800b23a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800b226:	f107 031e 	add.w	r3, r7, #30
 800b22a:	461a      	mov	r2, r3
 800b22c:	2151      	movs	r1, #81	; 0x51
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f001 feb0 	bl	800cf94 <VL53L0X_RdWord>
 800b234:	4603      	mov	r3, r0
 800b236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b23a:	8bfb      	ldrh	r3, [r7, #30]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff ff23 	bl	800b088 <VL53L0X_decode_timeout>
 800b242:	4603      	mov	r3, r0
 800b244:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b246:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b24a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b24c:	4619      	mov	r1, r3
 800b24e:	68f8      	ldr	r0, [r7, #12]
 800b250:	f7ff ff5a 	bl	800b108 <VL53L0X_calc_timeout_us>
 800b254:	62b8      	str	r0, [r7, #40]	; 0x28
 800b256:	e059      	b.n	800b30c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d156      	bne.n	800b30c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b25e:	f107 0314 	add.w	r3, r7, #20
 800b262:	4619      	mov	r1, r3
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7fd fac3 	bl	80087f0 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01d      	beq.n	800b2b0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b274:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b278:	461a      	mov	r2, r3
 800b27a:	2100      	movs	r1, #0
 800b27c:	68f8      	ldr	r0, [r7, #12]
 800b27e:	f7fd f9ab 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b282:	4603      	mov	r3, r0
 800b284:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800b288:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d10f      	bne.n	800b2b0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800b290:	f107 031e 	add.w	r3, r7, #30
 800b294:	461a      	mov	r2, r3
 800b296:	2151      	movs	r1, #81	; 0x51
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f001 fe7b 	bl	800cf94 <VL53L0X_RdWord>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b2a4:	8bfb      	ldrh	r3, [r7, #30]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff feee 	bl	800b088 <VL53L0X_decode_timeout>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b2b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d109      	bne.n	800b2cc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b2b8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b2bc:	461a      	mov	r2, r3
 800b2be:	2101      	movs	r1, #1
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7fd f989 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b2cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d10f      	bne.n	800b2f4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800b2d4:	f107 031c 	add.w	r3, r7, #28
 800b2d8:	461a      	mov	r2, r3
 800b2da:	2171      	movs	r1, #113	; 0x71
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f001 fe59 	bl	800cf94 <VL53L0X_RdWord>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b2e8:	8bbb      	ldrh	r3, [r7, #28]
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7ff fecc 	bl	800b088 <VL53L0X_decode_timeout>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b2f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b2f8:	1ad3      	subs	r3, r2, r3
 800b2fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b2fc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b302:	4619      	mov	r1, r3
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f7ff feff 	bl	800b108 <VL53L0X_calc_timeout_us>
 800b30a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b310:	601a      	str	r2, [r3, #0]

	return Status;
 800b312:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b316:	4618      	mov	r0, r3
 800b318:	3730      	adds	r7, #48	; 0x30
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b08a      	sub	sp, #40	; 0x28
 800b322:	af00      	add	r7, sp, #0
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	460b      	mov	r3, r1
 800b328:	607a      	str	r2, [r7, #4]
 800b32a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b32c:	2300      	movs	r3, #0
 800b32e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b332:	7afb      	ldrb	r3, [r7, #11]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d005      	beq.n	800b344 <set_sequence_step_timeout+0x26>
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d002      	beq.n	800b344 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b33e:	7afb      	ldrb	r3, [r7, #11]
 800b340:	2b02      	cmp	r3, #2
 800b342:	d138      	bne.n	800b3b6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b344:	f107 031b 	add.w	r3, r7, #27
 800b348:	461a      	mov	r2, r3
 800b34a:	2100      	movs	r1, #0
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f7fd f943 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b352:	4603      	mov	r3, r0
 800b354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800b358:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d11a      	bne.n	800b396 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b360:	7efb      	ldrb	r3, [r7, #27]
 800b362:	461a      	mov	r2, r3
 800b364:	6879      	ldr	r1, [r7, #4]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	f7ff fea4 	bl	800b0b4 <VL53L0X_calc_timeout_mclks>
 800b36c:	4603      	mov	r3, r0
 800b36e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b370:	8bbb      	ldrh	r3, [r7, #28]
 800b372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b376:	d903      	bls.n	800b380 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b378:	23ff      	movs	r3, #255	; 0xff
 800b37a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b37e:	e004      	b.n	800b38a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b380:	8bbb      	ldrh	r3, [r7, #28]
 800b382:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b384:	3b01      	subs	r3, #1
 800b386:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b38a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b38e:	b29a      	uxth	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f040 80ab 	bne.w	800b4f6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b3a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	2146      	movs	r1, #70	; 0x46
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f001 fd56 	bl	800ce5a <VL53L0X_WrByte>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b3b4:	e09f      	b.n	800b4f6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b3b6:	7afb      	ldrb	r3, [r7, #11]
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	d135      	bne.n	800b428 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b3bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d11b      	bne.n	800b3fc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b3c4:	f107 031b 	add.w	r3, r7, #27
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	2100      	movs	r1, #0
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f7fd f903 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b3d8:	7efb      	ldrb	r3, [r7, #27]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	6879      	ldr	r1, [r7, #4]
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f7ff fe68 	bl	800b0b4 <VL53L0X_calc_timeout_mclks>
 800b3e4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b3e6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b3e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f7ff fe20 	bl	800b030 <VL53L0X_encode_timeout>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b3f4:	8b3a      	ldrh	r2, [r7, #24]
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b3fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b400:	2b00      	cmp	r3, #0
 800b402:	d108      	bne.n	800b416 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b404:	8b3b      	ldrh	r3, [r7, #24]
 800b406:	461a      	mov	r2, r3
 800b408:	2151      	movs	r1, #81	; 0x51
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f001 fd45 	bl	800ce9a <VL53L0X_WrWord>
 800b410:	4603      	mov	r3, r0
 800b412:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b416:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d16b      	bne.n	800b4f6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b426:	e066      	b.n	800b4f6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	2b04      	cmp	r3, #4
 800b42c:	d160      	bne.n	800b4f0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b42e:	f107 0310 	add.w	r3, r7, #16
 800b432:	4619      	mov	r1, r3
 800b434:	68f8      	ldr	r0, [r7, #12]
 800b436:	f7fd f9db 	bl	80087f0 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b43e:	7cfb      	ldrb	r3, [r7, #19]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01d      	beq.n	800b480 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b444:	f107 031b 	add.w	r3, r7, #27
 800b448:	461a      	mov	r2, r3
 800b44a:	2100      	movs	r1, #0
 800b44c:	68f8      	ldr	r0, [r7, #12]
 800b44e:	f7fd f8c3 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b452:	4603      	mov	r3, r0
 800b454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10f      	bne.n	800b480 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b460:	f107 0318 	add.w	r3, r7, #24
 800b464:	461a      	mov	r2, r3
 800b466:	2151      	movs	r1, #81	; 0x51
 800b468:	68f8      	ldr	r0, [r7, #12]
 800b46a:	f001 fd93 	bl	800cf94 <VL53L0X_RdWord>
 800b46e:	4603      	mov	r3, r0
 800b470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b474:	8b3b      	ldrh	r3, [r7, #24]
 800b476:	4618      	mov	r0, r3
 800b478:	f7ff fe06 	bl	800b088 <VL53L0X_decode_timeout>
 800b47c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b47e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b484:	2b00      	cmp	r3, #0
 800b486:	d109      	bne.n	800b49c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b488:	f107 031b 	add.w	r3, r7, #27
 800b48c:	461a      	mov	r2, r3
 800b48e:	2101      	movs	r1, #1
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f7fd f8a1 	bl	80085d8 <VL53L0X_GetVcselPulsePeriod>
 800b496:	4603      	mov	r3, r0
 800b498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b49c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d128      	bne.n	800b4f6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b4a4:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	6879      	ldr	r1, [r7, #4]
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff fe02 	bl	800b0b4 <VL53L0X_calc_timeout_mclks>
 800b4b0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b4b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4b4:	6a3a      	ldr	r2, [r7, #32]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800b4ba:	6a38      	ldr	r0, [r7, #32]
 800b4bc:	f7ff fdb8 	bl	800b030 <VL53L0X_encode_timeout>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800b4c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d108      	bne.n	800b4de <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b4cc:	8bfb      	ldrh	r3, [r7, #30]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	2171      	movs	r1, #113	; 0x71
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f001 fce1 	bl	800ce9a <VL53L0X_WrWord>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b4de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d107      	bne.n	800b4f6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b4ee:	e002      	b.n	800b4f6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b4f0:	23fc      	movs	r3, #252	; 0xfc
 800b4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b4f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3728      	adds	r7, #40	; 0x28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b086      	sub	sp, #24
 800b506:	af00      	add	r7, sp, #0
 800b508:	60f8      	str	r0, [r7, #12]
 800b50a:	460b      	mov	r3, r1
 800b50c:	607a      	str	r2, [r7, #4]
 800b50e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b510:	2300      	movs	r3, #0
 800b512:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b514:	7afb      	ldrb	r3, [r7, #11]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d00a      	beq.n	800b534 <VL53L0X_get_vcsel_pulse_period+0x32>
 800b51e:	e013      	b.n	800b548 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b520:	f107 0316 	add.w	r3, r7, #22
 800b524:	461a      	mov	r2, r3
 800b526:	2150      	movs	r1, #80	; 0x50
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f001 fd14 	bl	800cf56 <VL53L0X_RdByte>
 800b52e:	4603      	mov	r3, r0
 800b530:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b532:	e00b      	b.n	800b54c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b534:	f107 0316 	add.w	r3, r7, #22
 800b538:	461a      	mov	r2, r3
 800b53a:	2170      	movs	r1, #112	; 0x70
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f001 fd0a 	bl	800cf56 <VL53L0X_RdByte>
 800b542:	4603      	mov	r3, r0
 800b544:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b546:	e001      	b.n	800b54c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b548:	23fc      	movs	r3, #252	; 0xfc
 800b54a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d107      	bne.n	800b564 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800b554:	7dbb      	ldrb	r3, [r7, #22]
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe fff6 	bl	800a548 <VL53L0X_decode_vcsel_period>
 800b55c:	4603      	mov	r3, r0
 800b55e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	701a      	strb	r2, [r3, #0]

	return Status;
 800b564:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3718      	adds	r7, #24
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b092      	sub	sp, #72	; 0x48
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b57a:	2300      	movs	r3, #0
 800b57c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b580:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b584:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b586:	f240 7376 	movw	r3, #1910	; 0x776
 800b58a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800b58c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b590:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b592:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b596:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800b598:	f240 234e 	movw	r3, #590	; 0x24e
 800b59c:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800b59e:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b5a4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b5a8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b5aa:	f240 2326 	movw	r3, #550	; 0x226
 800b5ae:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800b5b4:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b5b8:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	6a3b      	ldr	r3, [r7, #32]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d205      	bcs.n	800b5d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b5c6:	23fc      	movs	r3, #252	; 0xfc
 800b5c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800b5cc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b5d0:	e0aa      	b.n	800b728 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800b5d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b5de:	f107 0314 	add.w	r3, r7, #20
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7fd f903 	bl	80087f0 <VL53L0X_GetSequenceStepEnables>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800b5f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d15b      	bne.n	800b6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800b5f8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d105      	bne.n	800b60a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800b5fe:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800b600:	2b00      	cmp	r3, #0
 800b602:	d102      	bne.n	800b60a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800b604:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800b606:	2b00      	cmp	r3, #0
 800b608:	d052      	beq.n	800b6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800b60a:	f107 0310 	add.w	r3, r7, #16
 800b60e:	461a      	mov	r2, r3
 800b610:	2102      	movs	r1, #2
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f7ff fda2 	bl	800b15c <get_sequence_step_timeout>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800b61e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b622:	2b00      	cmp	r3, #0
 800b624:	d002      	beq.n	800b62c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800b626:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b62a:	e07d      	b.n	800b728 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800b62c:	7d3b      	ldrb	r3, [r7, #20]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00f      	beq.n	800b652 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800b632:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800b634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b636:	4413      	add	r3, r2
 800b638:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800b63a:	69fa      	ldr	r2, [r7, #28]
 800b63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63e:	429a      	cmp	r2, r3
 800b640:	d204      	bcs.n	800b64c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800b642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	643b      	str	r3, [r7, #64]	; 0x40
 800b64a:	e002      	b.n	800b652 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b64c:	23fc      	movs	r3, #252	; 0xfc
 800b64e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800b652:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800b65a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b65e:	e063      	b.n	800b728 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800b660:	7dbb      	ldrb	r3, [r7, #22]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d011      	beq.n	800b68a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b66a:	4413      	add	r3, r2
 800b66c:	005b      	lsls	r3, r3, #1
 800b66e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b670:	69fa      	ldr	r2, [r7, #28]
 800b672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b674:	429a      	cmp	r2, r3
 800b676:	d204      	bcs.n	800b682 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b678:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	643b      	str	r3, [r7, #64]	; 0x40
 800b680:	e016      	b.n	800b6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b682:	23fc      	movs	r3, #252	; 0xfc
 800b684:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b688:	e012      	b.n	800b6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800b68a:	7d7b      	ldrb	r3, [r7, #21]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00f      	beq.n	800b6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b694:	4413      	add	r3, r2
 800b696:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b698:	69fa      	ldr	r2, [r7, #28]
 800b69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d204      	bcs.n	800b6aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b6a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	643b      	str	r3, [r7, #64]	; 0x40
 800b6a8:	e002      	b.n	800b6b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b6aa:	23fc      	movs	r3, #252	; 0xfc
 800b6ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b6b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b6b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b6bc:	e034      	b.n	800b728 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800b6be:	7dfb      	ldrb	r3, [r7, #23]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d019      	beq.n	800b6f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800b6c4:	f107 030c 	add.w	r3, r7, #12
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	2103      	movs	r1, #3
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f7ff fd45 	bl	800b15c <get_sequence_step_timeout>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6dc:	4413      	add	r3, r2
 800b6de:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b6e0:	69fa      	ldr	r2, [r7, #28]
 800b6e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d204      	bcs.n	800b6f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800b6e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	643b      	str	r3, [r7, #64]	; 0x40
 800b6f0:	e002      	b.n	800b6f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b6f2:	23fc      	movs	r3, #252	; 0xfc
 800b6f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800b6f8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d111      	bne.n	800b724 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800b700:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00e      	beq.n	800b724 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800b706:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800b70e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b710:	2104      	movs	r1, #4
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f7ff fe03 	bl	800b31e <set_sequence_step_timeout>
 800b718:	4603      	mov	r3, r0
 800b71a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b724:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3748      	adds	r7, #72	; 0x48
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b090      	sub	sp, #64	; 0x40
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b740:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b744:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b746:	f240 7376 	movw	r3, #1910	; 0x776
 800b74a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800b74c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b752:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b756:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800b758:	f240 234e 	movw	r3, #590	; 0x24e
 800b75c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800b75e:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b762:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b764:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b768:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b76a:	f240 2326 	movw	r3, #550	; 0x226
 800b76e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800b774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b778:	441a      	add	r2, r3
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b77e:	f107 0318 	add.w	r3, r7, #24
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7fd f833 	bl	80087f0 <VL53L0X_GetSequenceStepEnables>
 800b78a:	4603      	mov	r3, r0
 800b78c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800b790:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b798:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b79c:	e075      	b.n	800b88a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800b79e:	7e3b      	ldrb	r3, [r7, #24]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d105      	bne.n	800b7b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800b7a4:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d102      	bne.n	800b7b0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800b7aa:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d030      	beq.n	800b812 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800b7b0:	f107 0310 	add.w	r3, r7, #16
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	2102      	movs	r1, #2
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7ff fccf 	bl	800b15c <get_sequence_step_timeout>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b7c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d122      	bne.n	800b812 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800b7cc:	7e3b      	ldrb	r3, [r7, #24]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d007      	beq.n	800b7e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b7d6:	6939      	ldr	r1, [r7, #16]
 800b7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7da:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b7dc:	441a      	add	r2, r3
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b7e2:	7ebb      	ldrb	r3, [r7, #26]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d009      	beq.n	800b7fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b7ec:	6939      	ldr	r1, [r7, #16]
 800b7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f0:	440b      	add	r3, r1
 800b7f2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b7f4:	441a      	add	r2, r3
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	e00a      	b.n	800b812 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b7fc:	7e7b      	ldrb	r3, [r7, #25]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d007      	beq.n	800b812 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b806:	6939      	ldr	r1, [r7, #16]
 800b808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b80c:	441a      	add	r2, r3
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b812:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b816:	2b00      	cmp	r3, #0
 800b818:	d114      	bne.n	800b844 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b81a:	7efb      	ldrb	r3, [r7, #27]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d011      	beq.n	800b844 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b820:	f107 030c 	add.w	r3, r7, #12
 800b824:	461a      	mov	r2, r3
 800b826:	2103      	movs	r1, #3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f7ff fc97 	bl	800b15c <get_sequence_step_timeout>
 800b82e:	4603      	mov	r3, r0
 800b830:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b838:	68f9      	ldr	r1, [r7, #12]
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b83e:	441a      	add	r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b844:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d114      	bne.n	800b876 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b84c:	7f3b      	ldrb	r3, [r7, #28]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d011      	beq.n	800b876 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b852:	f107 0314 	add.w	r3, r7, #20
 800b856:	461a      	mov	r2, r3
 800b858:	2104      	movs	r1, #4
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7ff fc7e 	bl	800b15c <get_sequence_step_timeout>
 800b860:	4603      	mov	r3, r0
 800b862:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b86a:	6979      	ldr	r1, [r7, #20]
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b870:	441a      	add	r2, r3
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b876:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d103      	bne.n	800b886 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b886:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3740      	adds	r7, #64	; 0x40
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b088      	sub	sp, #32
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b8a6:	e0c6      	b.n	800ba36 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	3301      	adds	r3, #1
 800b8b6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b8b8:	7cfb      	ldrb	r3, [r7, #19]
 800b8ba:	2bff      	cmp	r3, #255	; 0xff
 800b8bc:	f040 808d 	bne.w	800b9da <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	747b      	strb	r3, [r7, #17]
			Index++;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b8d0:	7c7b      	ldrb	r3, [r7, #17]
 800b8d2:	2b03      	cmp	r3, #3
 800b8d4:	d87e      	bhi.n	800b9d4 <VL53L0X_load_tuning_settings+0x140>
 800b8d6:	a201      	add	r2, pc, #4	; (adr r2, 800b8dc <VL53L0X_load_tuning_settings+0x48>)
 800b8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8dc:	0800b8ed 	.word	0x0800b8ed
 800b8e0:	0800b927 	.word	0x0800b927
 800b8e4:	0800b961 	.word	0x0800b961
 800b8e8:	0800b99b 	.word	0x0800b99b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	683a      	ldr	r2, [r7, #0]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	743b      	strb	r3, [r7, #16]
				Index++;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	3301      	adds	r3, #1
 800b8fa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	4413      	add	r3, r2
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	3301      	adds	r3, #1
 800b90a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b90c:	7c3b      	ldrb	r3, [r7, #16]
 800b90e:	b29b      	uxth	r3, r3
 800b910:	021b      	lsls	r3, r3, #8
 800b912:	b29a      	uxth	r2, r3
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	b29b      	uxth	r3, r3
 800b918:	4413      	add	r3, r2
 800b91a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	89ba      	ldrh	r2, [r7, #12]
 800b920:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b924:	e087      	b.n	800ba36 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	683a      	ldr	r2, [r7, #0]
 800b92a:	4413      	add	r3, r2
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	743b      	strb	r3, [r7, #16]
				Index++;
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	3301      	adds	r3, #1
 800b934:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	4413      	add	r3, r2
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	3301      	adds	r3, #1
 800b944:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b946:	7c3b      	ldrb	r3, [r7, #16]
 800b948:	b29b      	uxth	r3, r3
 800b94a:	021b      	lsls	r3, r3, #8
 800b94c:	b29a      	uxth	r2, r3
 800b94e:	7bfb      	ldrb	r3, [r7, #15]
 800b950:	b29b      	uxth	r3, r3
 800b952:	4413      	add	r3, r2
 800b954:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	89ba      	ldrh	r2, [r7, #12]
 800b95a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800b95e:	e06a      	b.n	800ba36 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b960:	697b      	ldr	r3, [r7, #20]
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	4413      	add	r3, r2
 800b966:	781b      	ldrb	r3, [r3, #0]
 800b968:	743b      	strb	r3, [r7, #16]
				Index++;
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	3301      	adds	r3, #1
 800b96e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	4413      	add	r3, r2
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	3301      	adds	r3, #1
 800b97e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b980:	7c3b      	ldrb	r3, [r7, #16]
 800b982:	b29b      	uxth	r3, r3
 800b984:	021b      	lsls	r3, r3, #8
 800b986:	b29a      	uxth	r2, r3
 800b988:	7bfb      	ldrb	r3, [r7, #15]
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	4413      	add	r3, r2
 800b98e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	89ba      	ldrh	r2, [r7, #12]
 800b994:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800b998:	e04d      	b.n	800ba36 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	683a      	ldr	r2, [r7, #0]
 800b99e:	4413      	add	r3, r2
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	743b      	strb	r3, [r7, #16]
				Index++;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b9ba:	7c3b      	ldrb	r3, [r7, #16]
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	7bfb      	ldrb	r3, [r7, #15]
 800b9c4:	b29b      	uxth	r3, r3
 800b9c6:	4413      	add	r3, r2
 800b9c8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	89ba      	ldrh	r2, [r7, #12]
 800b9ce:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800b9d2:	e030      	b.n	800ba36 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b9d4:	23fc      	movs	r3, #252	; 0xfc
 800b9d6:	77fb      	strb	r3, [r7, #31]
 800b9d8:	e02d      	b.n	800ba36 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b9da:	7cfb      	ldrb	r3, [r7, #19]
 800b9dc:	2b04      	cmp	r3, #4
 800b9de:	d828      	bhi.n	800ba32 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	683a      	ldr	r2, [r7, #0]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	61bb      	str	r3, [r7, #24]
 800b9f4:	e00f      	b.n	800ba16 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b9f6:	697b      	ldr	r3, [r7, #20]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	7819      	ldrb	r1, [r3, #0]
 800b9fe:	f107 0208 	add.w	r2, r7, #8
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	4413      	add	r3, r2
 800ba06:	460a      	mov	r2, r1
 800ba08:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	3301      	adds	r3, #1
 800ba14:	61bb      	str	r3, [r7, #24]
 800ba16:	7cfb      	ldrb	r3, [r7, #19]
 800ba18:	69ba      	ldr	r2, [r7, #24]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	dbeb      	blt.n	800b9f6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ba1e:	7cfb      	ldrb	r3, [r7, #19]
 800ba20:	f107 0208 	add.w	r2, r7, #8
 800ba24:	7cb9      	ldrb	r1, [r7, #18]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f001 f9cb 	bl	800cdc2 <VL53L0X_WriteMulti>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	77fb      	strb	r3, [r7, #31]
 800ba30:	e001      	b.n	800ba36 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba32:	23fc      	movs	r3, #252	; 0xfc
 800ba34:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	683a      	ldr	r2, [r7, #0]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <VL53L0X_load_tuning_settings+0x1b8>
 800ba42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f43f af2e 	beq.w	800b8a8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ba4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3720      	adds	r7, #32
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba64:	2300      	movs	r3, #0
 800ba66:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ba6e:	f107 0313 	add.w	r3, r7, #19
 800ba72:	4619      	mov	r1, r3
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7fc ff47 	bl	8008908 <VL53L0X_GetXTalkCompensationEnable>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ba7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d111      	bne.n	800baaa <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ba86:	7cfb      	ldrb	r3, [r7, #19]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00e      	beq.n	800baaa <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6a1b      	ldr	r3, [r3, #32]
 800ba90:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	8a9b      	ldrh	r3, [r3, #20]
 800ba96:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800ba98:	69bb      	ldr	r3, [r7, #24]
 800ba9a:	fb02 f303 	mul.w	r3, r2, r3
 800ba9e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	3380      	adds	r3, #128	; 0x80
 800baa4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800baaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3720      	adds	r7, #32
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b086      	sub	sp, #24
 800baba:	af00      	add	r7, sp, #0
 800babc:	60f8      	str	r0, [r7, #12]
 800babe:	60b9      	str	r1, [r7, #8]
 800bac0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bac2:	2300      	movs	r3, #0
 800bac4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800bace:	f107 0310 	add.w	r3, r7, #16
 800bad2:	461a      	mov	r2, r3
 800bad4:	68b9      	ldr	r1, [r7, #8]
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7ff ffbe 	bl	800ba58 <VL53L0X_get_total_xtalk_rate>
 800badc:	4603      	mov	r3, r0
 800bade:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800bae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d105      	bne.n	800baf4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681a      	ldr	r2, [r3, #0]
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	441a      	add	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	601a      	str	r2, [r3, #0]

	return Status;
 800baf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b09a      	sub	sp, #104	; 0x68
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	60f8      	str	r0, [r7, #12]
 800bb08:	60b9      	str	r1, [r7, #8]
 800bb0a:	607a      	str	r2, [r7, #4]
 800bb0c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800bb0e:	2312      	movs	r3, #18
 800bb10:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800bb12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb16:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800bb18:	2342      	movs	r3, #66	; 0x42
 800bb1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800bb1c:	2306      	movs	r3, #6
 800bb1e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800bb20:	2307      	movs	r3, #7
 800bb22:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb24:	2300      	movs	r3, #0
 800bb26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800bb30:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bb38:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800bb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb3e:	fb02 f303 	mul.w	r3, r2, r3
 800bb42:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800bb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb46:	3380      	adds	r3, #128	; 0x80
 800bb48:	0a1b      	lsrs	r3, r3, #8
 800bb4a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800bb4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb50:	fb02 f303 	mul.w	r3, r2, r3
 800bb54:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d01b      	beq.n	800bb98 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	029b      	lsls	r3, r3, #10
 800bb64:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800bb6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb6c:	4413      	add	r3, r2
 800bb6e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800bb70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb78:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800bb7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	005b      	lsls	r3, r3, #1
 800bb80:	4413      	add	r3, r2
 800bb82:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800bb84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bb88:	fb02 f303 	mul.w	r3, r2, r3
 800bb8c:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800bb8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bb94:	0c1b      	lsrs	r3, r3, #16
 800bb96:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bb9c:	fb02 f303 	mul.w	r3, r2, r3
 800bba0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800bba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bba8:	0c1b      	lsrs	r3, r3, #16
 800bbaa:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800bbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbb0:	fb02 f303 	mul.w	r3, r2, r3
 800bbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800bbb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bbbc:	0c1b      	lsrs	r3, r3, #16
 800bbbe:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800bbc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbc2:	085a      	lsrs	r2, r3, #1
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	441a      	add	r2, r3
 800bbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbca:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbce:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800bbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbd4:	fb02 f303 	mul.w	r3, r2, r3
 800bbd8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800bbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbe0:	d302      	bcc.n	800bbe8 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800bbe2:	4b55      	ldr	r3, [pc, #340]	; (800bd38 <VL53L0X_calc_dmax+0x238>)
 800bbe4:	663b      	str	r3, [r7, #96]	; 0x60
 800bbe6:	e016      	b.n	800bc16 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800bbe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbea:	085a      	lsrs	r2, r3, #1
 800bbec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbee:	441a      	add	r2, r3
 800bbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbf6:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800bbf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bbfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbfc:	fb02 f303 	mul.w	r3, r2, r3
 800bc00:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800bc02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc04:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bc08:	0c1b      	lsrs	r3, r3, #16
 800bc0a:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800bc0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc10:	fb02 f303 	mul.w	r3, r2, r3
 800bc14:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800bc16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc18:	039b      	lsls	r3, r3, #14
 800bc1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bc1e:	4a47      	ldr	r2, [pc, #284]	; (800bd3c <VL53L0X_calc_dmax+0x23c>)
 800bc20:	fba2 2303 	umull	r2, r3, r2, r3
 800bc24:	099b      	lsrs	r3, r3, #6
 800bc26:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800bc28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc2c:	fb02 f303 	mul.w	r3, r2, r3
 800bc30:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800bc32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc36:	fb02 f303 	mul.w	r3, r2, r3
 800bc3a:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	091b      	lsrs	r3, r3, #4
 800bc42:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800bc44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800bc4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc4e:	4613      	mov	r3, r2
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	4413      	add	r3, r2
 800bc54:	011b      	lsls	r3, r3, #4
 800bc56:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bc5e:	0b9b      	lsrs	r3, r3, #14
 800bc60:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800bc62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc66:	4413      	add	r3, r2
 800bc68:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800bc6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc6c:	085b      	lsrs	r3, r3, #1
 800bc6e:	69ba      	ldr	r2, [r7, #24]
 800bc70:	4413      	add	r3, r2
 800bc72:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800bc74:	69ba      	ldr	r2, [r7, #24]
 800bc76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc78:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc7c:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	039b      	lsls	r3, r3, #14
 800bc82:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	69ba      	ldr	r2, [r7, #24]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800bc8e:	69ba      	ldr	r2, [r7, #24]
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc96:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc9c:	fb02 f303 	mul.w	r3, r2, r3
 800bca0:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bca8:	4a24      	ldr	r2, [pc, #144]	; (800bd3c <VL53L0X_calc_dmax+0x23c>)
 800bcaa:	fba2 2303 	umull	r2, r3, r2, r3
 800bcae:	099b      	lsrs	r3, r3, #6
 800bcb0:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800bcb2:	69bb      	ldr	r3, [r7, #24]
 800bcb4:	011b      	lsls	r3, r3, #4
 800bcb6:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bcbe:	4a1f      	ldr	r2, [pc, #124]	; (800bd3c <VL53L0X_calc_dmax+0x23c>)
 800bcc0:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc4:	099b      	lsrs	r3, r3, #6
 800bcc6:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800bcc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcca:	3380      	adds	r3, #128	; 0x80
 800bccc:	0a1b      	lsrs	r3, r3, #8
 800bcce:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d008      	beq.n	800bce8 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	085a      	lsrs	r2, r3, #1
 800bcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcdc:	441a      	add	r2, r3
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce4:	65bb      	str	r3, [r7, #88]	; 0x58
 800bce6:	e001      	b.n	800bcec <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800bcec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bcee:	f7fe fc3e 	bl	800a56e <VL53L0X_isqrt>
 800bcf2:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800bcf4:	69bb      	ldr	r3, [r7, #24]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d008      	beq.n	800bd0c <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	085a      	lsrs	r2, r3, #1
 800bcfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd00:	441a      	add	r2, r3
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd08:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd0a:	e001      	b.n	800bd10 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800bd10:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bd12:	f7fe fc2c 	bl	800a56e <VL53L0X_isqrt>
 800bd16:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800bd18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd1a:	693a      	ldr	r2, [r7, #16]
 800bd1c:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d902      	bls.n	800bd2c <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800bd26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bd2a:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800bd2c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3768      	adds	r7, #104	; 0x68
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	fff00000 	.word	0xfff00000
 800bd3c:	10624dd3 	.word	0x10624dd3

0800bd40 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b0b4      	sub	sp, #208	; 0xd0
 800bd44:	af04      	add	r7, sp, #16
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800bd4e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800bd52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800bd56:	f44f 7316 	mov.w	r3, #600	; 0x258
 800bd5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800bd5e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800bd62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800bd66:	f241 235c 	movw	r3, #4700	; 0x125c
 800bd6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800bd6e:	4b9e      	ldr	r3, [pc, #632]	; (800bfe8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800bd70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800bd74:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800bd78:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800bd7a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800bd7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd86:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800bd88:	4b98      	ldr	r3, [pc, #608]	; (800bfec <VL53L0X_calc_sigma_estimate+0x2ac>)
 800bd8a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800bd8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd90:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800bd92:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800bd96:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800bd98:	f240 6377 	movw	r3, #1655	; 0x677
 800bd9c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6a1b      	ldr	r3, [r3, #32]
 800bda8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bdb2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800bdb6:	0c1b      	lsrs	r3, r3, #16
 800bdb8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800bdc0:	f107 0310 	add.w	r3, r7, #16
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	68b9      	ldr	r1, [r7, #8]
 800bdc8:	68f8      	ldr	r0, [r7, #12]
 800bdca:	f7ff fe74 	bl	800bab6 <VL53L0X_get_total_signal_rate>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800bdd4:	f107 0314 	add.w	r3, r7, #20
 800bdd8:	461a      	mov	r2, r3
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	68f8      	ldr	r0, [r7, #12]
 800bdde:	f7ff fe3b 	bl	800ba58 <VL53L0X_get_total_xtalk_rate>
 800bde2:	4603      	mov	r3, r0
 800bde4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bdee:	fb02 f303 	mul.w	r3, r2, r3
 800bdf2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800bdf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdf6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bdfa:	0c1b      	lsrs	r3, r3, #16
 800bdfc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be04:	fb02 f303 	mul.w	r3, r2, r3
 800be08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800be0c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800be10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be12:	429a      	cmp	r2, r3
 800be14:	d902      	bls.n	800be1c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800be16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800be18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800be1c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800be20:	2b00      	cmp	r3, #0
 800be22:	d168      	bne.n	800bef6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800be2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800be34:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800be38:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800be3c:	461a      	mov	r2, r3
 800be3e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	f7ff f936 	bl	800b0b4 <VL53L0X_calc_timeout_mclks>
 800be48:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800be50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800be5a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800be5e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800be62:	461a      	mov	r2, r3
 800be64:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7ff f923 	bl	800b0b4 <VL53L0X_calc_timeout_mclks>
 800be6e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800be70:	2303      	movs	r3, #3
 800be72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800be76:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800be7a:	2b08      	cmp	r3, #8
 800be7c:	d102      	bne.n	800be84 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800be7e:	2302      	movs	r3, #2
 800be80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800be84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800be86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be88:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800be8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800be8e:	fb02 f303 	mul.w	r3, r2, r3
 800be92:	02db      	lsls	r3, r3, #11
 800be94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800be98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800be9c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bea0:	4a53      	ldr	r2, [pc, #332]	; (800bff0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bea2:	fba2 2303 	umull	r2, r3, r2, r3
 800bea6:	099b      	lsrs	r3, r3, #6
 800bea8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800beac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800beb0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800beb2:	fb02 f303 	mul.w	r3, r2, r3
 800beb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800beba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bebe:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bec2:	4a4b      	ldr	r2, [pc, #300]	; (800bff0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bec4:	fba2 2303 	umull	r2, r3, r2, r3
 800bec8:	099b      	lsrs	r3, r3, #6
 800beca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	3380      	adds	r3, #128	; 0x80
 800bed2:	0a1b      	lsrs	r3, r3, #8
 800bed4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bedc:	fb02 f303 	mul.w	r3, r2, r3
 800bee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800bee4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bee8:	3380      	adds	r3, #128	; 0x80
 800beea:	0a1b      	lsrs	r3, r3, #8
 800beec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	021b      	lsls	r3, r3, #8
 800bef4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800bef6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800befa:	2b00      	cmp	r3, #0
 800befc:	d002      	beq.n	800bf04 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800befe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800bf02:	e165      	b.n	800c1d0 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800bf04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10c      	bne.n	800bf24 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf10:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bf18:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]
 800bf22:	e153      	b.n	800c1cc <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800bf24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800bf32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf36:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800bf38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bf3a:	041a      	lsls	r2, r3, #16
 800bf3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800bf46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bf4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d902      	bls.n	800bf56 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800bf50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bf52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800bf56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800bf5a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bf5e:	fb02 f303 	mul.w	r3, r2, r3
 800bf62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800bf66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	005b      	lsls	r3, r3, #1
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7fe fafb 	bl	800a56e <VL53L0X_isqrt>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	891b      	ldrh	r3, [r3, #8]
 800bf82:	461a      	mov	r2, r3
 800bf84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf86:	fb02 f303 	mul.w	r3, r2, r3
 800bf8a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800bf8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf8e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800bf90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bf94:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800bf96:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800bf98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800bf9c:	4a14      	ldr	r2, [pc, #80]	; (800bff0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bf9e:	fba2 2303 	umull	r2, r3, r2, r3
 800bfa2:	099b      	lsrs	r3, r3, #6
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800bfa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfa8:	041b      	lsls	r3, r3, #16
 800bfaa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bfae:	4a10      	ldr	r2, [pc, #64]	; (800bff0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bfb0:	fba2 2303 	umull	r2, r3, r2, r3
 800bfb4:	099b      	lsrs	r3, r3, #6
 800bfb6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800bfb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800bfbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	bfb8      	it	lt
 800bfca:	425b      	neglt	r3, r3
 800bfcc:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800bfce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfd0:	021b      	lsls	r3, r3, #8
 800bfd2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	7e1b      	ldrb	r3, [r3, #24]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00b      	beq.n	800bff4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800bfdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bfe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bfe4:	e035      	b.n	800c052 <VL53L0X_calc_sigma_estimate+0x312>
 800bfe6:	bf00      	nop
 800bfe8:	028f87ae 	.word	0x028f87ae
 800bfec:	0006999a 	.word	0x0006999a
 800bff0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800bff4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bffa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800c002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c004:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c008:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c00c:	fb02 f303 	mul.w	r3, r2, r3
 800c010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c014:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c01a:	4413      	add	r3, r2
 800c01c:	0c1b      	lsrs	r3, r3, #16
 800c01e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800c022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c026:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c02a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800c02e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c032:	085b      	lsrs	r3, r3, #1
 800c034:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800c038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c03c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c040:	fb02 f303 	mul.w	r3, r2, r3
 800c044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800c048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c04c:	0b9b      	lsrs	r3, r3, #14
 800c04e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c058:	fb02 f303 	mul.w	r3, r2, r3
 800c05c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c064:	0c1b      	lsrs	r3, r3, #16
 800c066:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c06c:	fb02 f303 	mul.w	r3, r2, r3
 800c070:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800c072:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c07e:	0c1b      	lsrs	r3, r3, #16
 800c080:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c086:	fb02 f303 	mul.w	r3, r2, r3
 800c08a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	4413      	add	r3, r2
 800c092:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c096:	f7fe fa6a 	bl	800a56e <VL53L0X_isqrt>
 800c09a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	041b      	lsls	r3, r3, #16
 800c0a0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	3332      	adds	r3, #50	; 0x32
 800c0a6:	4a4c      	ldr	r2, [pc, #304]	; (800c1d8 <VL53L0X_calc_sigma_estimate+0x498>)
 800c0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ac:	095a      	lsrs	r2, r3, #5
 800c0ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c0b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c0bc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c0c0:	fb02 f303 	mul.w	r3, r2, r3
 800c0c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c0c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c0cc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c0d0:	3308      	adds	r3, #8
 800c0d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800c0d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c0da:	4a40      	ldr	r2, [pc, #256]	; (800c1dc <VL53L0X_calc_sigma_estimate+0x49c>)
 800c0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e0:	0b5b      	lsrs	r3, r3, #13
 800c0e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c0e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c0ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d902      	bls.n	800c0f6 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c0f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800c0f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c0fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c0fe:	4413      	add	r3, r2
 800c100:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800c104:	4a36      	ldr	r2, [pc, #216]	; (800c1e0 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800c106:	fba2 2303 	umull	r2, r3, r2, r3
 800c10a:	099b      	lsrs	r3, r3, #6
 800c10c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800c10e:	6a3b      	ldr	r3, [r7, #32]
 800c110:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800c112:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c116:	441a      	add	r2, r3
 800c118:	6a3b      	ldr	r3, [r7, #32]
 800c11a:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800c11e:	4618      	mov	r0, r3
 800c120:	f7fe fa25 	bl	800a56e <VL53L0X_isqrt>
 800c124:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	021b      	lsls	r3, r3, #8
 800c12a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c132:	4a2b      	ldr	r2, [pc, #172]	; (800c1e0 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800c134:	fba2 2303 	umull	r2, r3, r2, r3
 800c138:	099b      	lsrs	r3, r3, #6
 800c13a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c13c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c140:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c144:	fb02 f303 	mul.w	r3, r2, r3
 800c148:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	69fa      	ldr	r2, [r7, #28]
 800c14e:	fb02 f303 	mul.w	r3, r2, r3
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	4413      	add	r3, r2
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7fe fa07 	bl	800a56e <VL53L0X_isqrt>
 800c160:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c168:	fb02 f303 	mul.w	r3, r2, r3
 800c16c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c172:	2b00      	cmp	r3, #0
 800c174:	d009      	beq.n	800c18a <VL53L0X_calc_sigma_estimate+0x44a>
 800c176:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d005      	beq.n	800c18a <VL53L0X_calc_sigma_estimate+0x44a>
 800c17e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c182:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c186:	429a      	cmp	r2, r3
 800c188:	d903      	bls.n	800c192 <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c18a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c18e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c198:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800c1a4:	6939      	ldr	r1, [r7, #16]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	9303      	str	r3, [sp, #12]
 800c1aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c1ae:	9302      	str	r3, [sp, #8]
 800c1b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1b8:	9300      	str	r3, [sp, #0]
 800c1ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c1c0:	68f8      	ldr	r0, [r7, #12]
 800c1c2:	f7ff fc9d 	bl	800bb00 <VL53L0X_calc_dmax>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c1cc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	37c0      	adds	r7, #192	; 0xc0
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}
 800c1d8:	51eb851f 	.word	0x51eb851f
 800c1dc:	d1b71759 	.word	0xd1b71759
 800c1e0:	10624dd3 	.word	0x10624dd3

0800c1e4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b090      	sub	sp, #64	; 0x40
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	60f8      	str	r0, [r7, #12]
 800c1ec:	607a      	str	r2, [r7, #4]
 800c1ee:	461a      	mov	r2, r3
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	72fb      	strb	r3, [r7, #11]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c204:	2300      	movs	r3, #0
 800c206:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c20a:	2300      	movs	r3, #0
 800c20c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c216:	2300      	movs	r3, #0
 800c218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c222:	2300      	movs	r3, #0
 800c224:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c236:	7afb      	ldrb	r3, [r7, #11]
 800c238:	10db      	asrs	r3, r3, #3
 800c23a:	b2db      	uxtb	r3, r3
 800c23c:	f003 030f 	and.w	r3, r3, #15
 800c240:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c244:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d017      	beq.n	800c27c <VL53L0X_get_pal_range_status+0x98>
 800c24c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c250:	2b05      	cmp	r3, #5
 800c252:	d013      	beq.n	800c27c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c254:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c258:	2b07      	cmp	r3, #7
 800c25a:	d00f      	beq.n	800c27c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c25c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c260:	2b0c      	cmp	r3, #12
 800c262:	d00b      	beq.n	800c27c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c264:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c268:	2b0d      	cmp	r3, #13
 800c26a:	d007      	beq.n	800c27c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c26c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c270:	2b0e      	cmp	r3, #14
 800c272:	d003      	beq.n	800c27c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c274:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c278:	2b0f      	cmp	r3, #15
 800c27a:	d103      	bne.n	800c284 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c27c:	2301      	movs	r3, #1
 800c27e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c282:	e002      	b.n	800c28a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c284:	2300      	movs	r3, #0
 800c286:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c28a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d109      	bne.n	800c2a6 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c292:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c296:	461a      	mov	r2, r3
 800c298:	2100      	movs	r1, #0
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f7fc fc08 	bl	8008ab0 <VL53L0X_GetLimitCheckEnable>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c2a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d02e      	beq.n	800c30c <VL53L0X_get_pal_range_status+0x128>
 800c2ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d12a      	bne.n	800c30c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c2b6:	f107 0310 	add.w	r3, r7, #16
 800c2ba:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c2be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f7ff fd3d 	bl	800bd40 <VL53L0X_calc_sigma_estimate>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c2cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d103      	bne.n	800c2dc <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2da:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c2dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d113      	bne.n	800c30c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c2e4:	f107 0320 	add.w	r3, r7, #32
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f7fc fc65 	bl	8008bbc <VL53L0X_GetLimitCheckValue>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c2f8:	6a3b      	ldr	r3, [r7, #32]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d006      	beq.n	800c30c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c2fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c300:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c302:	429a      	cmp	r2, r3
 800c304:	d902      	bls.n	800c30c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c306:	2301      	movs	r3, #1
 800c308:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c30c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c310:	2b00      	cmp	r3, #0
 800c312:	d109      	bne.n	800c328 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c314:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c318:	461a      	mov	r2, r3
 800c31a:	2102      	movs	r1, #2
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	f7fc fbc7 	bl	8008ab0 <VL53L0X_GetLimitCheckEnable>
 800c322:	4603      	mov	r3, r0
 800c324:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c328:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d044      	beq.n	800c3ba <VL53L0X_get_pal_range_status+0x1d6>
 800c330:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c334:	2b00      	cmp	r3, #0
 800c336:	d140      	bne.n	800c3ba <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c338:	f107 031c 	add.w	r3, r7, #28
 800c33c:	461a      	mov	r2, r3
 800c33e:	2102      	movs	r1, #2
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f7fc fc3b 	bl	8008bbc <VL53L0X_GetLimitCheckValue>
 800c346:	4603      	mov	r3, r0
 800c348:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800c34c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c350:	2b00      	cmp	r3, #0
 800c352:	d107      	bne.n	800c364 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c354:	2201      	movs	r2, #1
 800c356:	21ff      	movs	r1, #255	; 0xff
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f000 fd7e 	bl	800ce5a <VL53L0X_WrByte>
 800c35e:	4603      	mov	r3, r0
 800c360:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c364:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d109      	bne.n	800c380 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c36c:	f107 0316 	add.w	r3, r7, #22
 800c370:	461a      	mov	r2, r3
 800c372:	21b6      	movs	r1, #182	; 0xb6
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f000 fe0d 	bl	800cf94 <VL53L0X_RdWord>
 800c37a:	4603      	mov	r3, r0
 800c37c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800c380:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c384:	2b00      	cmp	r3, #0
 800c386:	d107      	bne.n	800c398 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c388:	2200      	movs	r2, #0
 800c38a:	21ff      	movs	r1, #255	; 0xff
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 fd64 	bl	800ce5a <VL53L0X_WrByte>
 800c392:	4603      	mov	r3, r0
 800c394:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c398:	8afb      	ldrh	r3, [r7, #22]
 800c39a:	025b      	lsls	r3, r3, #9
 800c39c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3a2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d006      	beq.n	800c3ba <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c3ac:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c3ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d902      	bls.n	800c3ba <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c3ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d109      	bne.n	800c3d6 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c3c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	2103      	movs	r1, #3
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f7fc fb70 	bl	8008ab0 <VL53L0X_GetLimitCheckEnable>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c3d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d023      	beq.n	800c426 <VL53L0X_get_pal_range_status+0x242>
 800c3de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d11f      	bne.n	800c426 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c3e6:	893b      	ldrh	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c3f0:	e005      	b.n	800c3fe <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	021a      	lsls	r2, r3, #8
 800c3f6:	893b      	ldrh	r3, [r7, #8]
 800c3f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3fc:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c3fe:	f107 0318 	add.w	r3, r7, #24
 800c402:	461a      	mov	r2, r3
 800c404:	2103      	movs	r1, #3
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f7fc fbd8 	bl	8008bbc <VL53L0X_GetLimitCheckValue>
 800c40c:	4603      	mov	r3, r0
 800c40e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d006      	beq.n	800c426 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c418:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c41a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d202      	bcs.n	800c426 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c420:	2301      	movs	r3, #1
 800c422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c426:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d14a      	bne.n	800c4c4 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c42e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c432:	2b01      	cmp	r3, #1
 800c434:	d103      	bne.n	800c43e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c438:	22ff      	movs	r2, #255	; 0xff
 800c43a:	701a      	strb	r2, [r3, #0]
 800c43c:	e042      	b.n	800c4c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c43e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c442:	2b01      	cmp	r3, #1
 800c444:	d007      	beq.n	800c456 <VL53L0X_get_pal_range_status+0x272>
 800c446:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d003      	beq.n	800c456 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c44e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c452:	2b03      	cmp	r3, #3
 800c454:	d103      	bne.n	800c45e <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c458:	2205      	movs	r2, #5
 800c45a:	701a      	strb	r2, [r3, #0]
 800c45c:	e032      	b.n	800c4c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c45e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c462:	2b06      	cmp	r3, #6
 800c464:	d003      	beq.n	800c46e <VL53L0X_get_pal_range_status+0x28a>
 800c466:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c46a:	2b09      	cmp	r3, #9
 800c46c:	d103      	bne.n	800c476 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c470:	2204      	movs	r2, #4
 800c472:	701a      	strb	r2, [r3, #0]
 800c474:	e026      	b.n	800c4c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c476:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c47a:	2b08      	cmp	r3, #8
 800c47c:	d007      	beq.n	800c48e <VL53L0X_get_pal_range_status+0x2aa>
 800c47e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c482:	2b0a      	cmp	r3, #10
 800c484:	d003      	beq.n	800c48e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c486:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d103      	bne.n	800c496 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800c48e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c490:	2203      	movs	r2, #3
 800c492:	701a      	strb	r2, [r3, #0]
 800c494:	e016      	b.n	800c4c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800c496:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c49a:	2b04      	cmp	r3, #4
 800c49c:	d003      	beq.n	800c4a6 <VL53L0X_get_pal_range_status+0x2c2>
 800c49e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d103      	bne.n	800c4ae <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800c4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	701a      	strb	r2, [r3, #0]
 800c4ac:	e00a      	b.n	800c4c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800c4ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d103      	bne.n	800c4be <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800c4b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	701a      	strb	r2, [r3, #0]
 800c4bc:	e002      	b.n	800c4c4 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800c4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800c4c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4c6:	781b      	ldrb	r3, [r3, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d102      	bne.n	800c4d2 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c4d2:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	2101      	movs	r1, #1
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f7fc fae8 	bl	8008ab0 <VL53L0X_GetLimitCheckEnable>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800c4e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d14f      	bne.n	800c58e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c4ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <VL53L0X_get_pal_range_status+0x31a>
 800c4f6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d103      	bne.n	800c506 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800c4fe:	2301      	movs	r3, #1
 800c500:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c504:	e002      	b.n	800c50c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c512:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800c516:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c51a:	2b04      	cmp	r3, #4
 800c51c:	d003      	beq.n	800c526 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c51e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c522:	2b00      	cmp	r3, #0
 800c524:	d103      	bne.n	800c52e <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800c526:	2301      	movs	r3, #1
 800c528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c52c:	e002      	b.n	800c534 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c53a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c53e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c542:	2b00      	cmp	r3, #0
 800c544:	d003      	beq.n	800c54e <VL53L0X_get_pal_range_status+0x36a>
 800c546:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d103      	bne.n	800c556 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c54e:	2301      	movs	r3, #1
 800c550:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c554:	e002      	b.n	800c55c <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c562:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d003      	beq.n	800c576 <VL53L0X_get_pal_range_status+0x392>
 800c56e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c572:	2b01      	cmp	r3, #1
 800c574:	d103      	bne.n	800c57e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c576:	2301      	movs	r3, #1
 800c578:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c57c:	e002      	b.n	800c584 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c58a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c58e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800c592:	4618      	mov	r0, r3
 800c594:	3740      	adds	r7, #64	; 0x40
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b086      	sub	sp, #24
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	60f8      	str	r0, [r7, #12]
 800c5a2:	60b9      	str	r1, [r7, #8]
 800c5a4:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800c5aa:	2102      	movs	r1, #2
 800c5ac:	68f8      	ldr	r0, [r7, #12]
 800c5ae:	f7fe f855 	bl	800a65c <VL53L0X_get_info_from_device>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800c5b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d11c      	bne.n	800c5f8 <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800c5c4:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800c5c6:	7dbb      	ldrb	r3, [r7, #22]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d107      	bne.n	800c5dc <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	3340      	adds	r3, #64	; 0x40
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	701a      	strb	r2, [r3, #0]
 800c5da:	e00d      	b.n	800c5f8 <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	33f3      	adds	r3, #243	; 0xf3
 800c5ea:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	3340      	adds	r3, #64	; 0x40
 800c5f0:	6939      	ldr	r1, [r7, #16]
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 fe1e 	bl	800d234 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c5f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3718      	adds	r7, #24
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800c604:	b5b0      	push	{r4, r5, r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c60e:	2300      	movs	r3, #0
 800c610:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800c612:	f107 030d 	add.w	r3, r7, #13
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	4619      	mov	r1, r3
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f7ff ffbd 	bl	800c59a <VL53L0X_check_part_used>
 800c620:	4603      	mov	r3, r0
 800c622:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800c624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d13b      	bne.n	800c6a4 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800c62c:	7b7b      	ldrb	r3, [r7, #13]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d108      	bne.n	800c644 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	4a30      	ldr	r2, [pc, #192]	; (800c6f8 <VL53L0X_get_device_info+0xf4>)
 800c636:	461c      	mov	r4, r3
 800c638:	4613      	mov	r3, r2
 800c63a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c63c:	6020      	str	r0, [r4, #0]
 800c63e:	6061      	str	r1, [r4, #4]
 800c640:	60a2      	str	r2, [r4, #8]
 800c642:	e027      	b.n	800c694 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800c644:	7b7b      	ldrb	r3, [r7, #13]
 800c646:	2b22      	cmp	r3, #34	; 0x22
 800c648:	d80b      	bhi.n	800c662 <VL53L0X_get_device_info+0x5e>
 800c64a:	7b7b      	ldrb	r3, [r7, #13]
 800c64c:	2b20      	cmp	r3, #32
 800c64e:	d008      	beq.n	800c662 <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	4a2a      	ldr	r2, [pc, #168]	; (800c6fc <VL53L0X_get_device_info+0xf8>)
 800c654:	461c      	mov	r4, r3
 800c656:	4613      	mov	r3, r2
 800c658:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c65a:	6020      	str	r0, [r4, #0]
 800c65c:	6061      	str	r1, [r4, #4]
 800c65e:	60a2      	str	r2, [r4, #8]
 800c660:	e018      	b.n	800c694 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800c662:	7b7b      	ldrb	r3, [r7, #13]
 800c664:	2b26      	cmp	r3, #38	; 0x26
 800c666:	d808      	bhi.n	800c67a <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	4a25      	ldr	r2, [pc, #148]	; (800c700 <VL53L0X_get_device_info+0xfc>)
 800c66c:	461c      	mov	r4, r3
 800c66e:	4613      	mov	r3, r2
 800c670:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c672:	6020      	str	r0, [r4, #0]
 800c674:	6061      	str	r1, [r4, #4]
 800c676:	60a2      	str	r2, [r4, #8]
 800c678:	e00c      	b.n	800c694 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	4a21      	ldr	r2, [pc, #132]	; (800c704 <VL53L0X_get_device_info+0x100>)
 800c67e:	461d      	mov	r5, r3
 800c680:	4614      	mov	r4, r2
 800c682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c684:	6028      	str	r0, [r5, #0]
 800c686:	6069      	str	r1, [r5, #4]
 800c688:	60aa      	str	r2, [r5, #8]
 800c68a:	60eb      	str	r3, [r5, #12]
 800c68c:	6820      	ldr	r0, [r4, #0]
 800c68e:	6128      	str	r0, [r5, #16]
 800c690:	7923      	ldrb	r3, [r4, #4]
 800c692:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	3320      	adds	r3, #32
 800c698:	491b      	ldr	r1, [pc, #108]	; (800c708 <VL53L0X_get_device_info+0x104>)
 800c69a:	461a      	mov	r2, r3
 800c69c:	460b      	mov	r3, r1
 800c69e:	cb03      	ldmia	r3!, {r0, r1}
 800c6a0:	6010      	str	r0, [r2, #0]
 800c6a2:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d108      	bne.n	800c6be <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	3360      	adds	r3, #96	; 0x60
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	21c0      	movs	r1, #192	; 0xc0
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fc4e 	bl	800cf56 <VL53L0X_RdByte>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d112      	bne.n	800c6ec <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800c6c6:	f107 030e 	add.w	r3, r7, #14
 800c6ca:	461a      	mov	r2, r3
 800c6cc:	21c2      	movs	r1, #194	; 0xc2
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fc41 	bl	800cf56 <VL53L0X_RdByte>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	091b      	lsrs	r3, r3, #4
 800c6e4:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800c6ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bdb0      	pop	{r4, r5, r7, pc}
 800c6f8:	0800db10 	.word	0x0800db10
 800c6fc:	0800db1c 	.word	0x0800db1c
 800c700:	0800db28 	.word	0x0800db28
 800c704:	0800db34 	.word	0x0800db34
 800c708:	0800db4c 	.word	0x0800db4c

0800c70c <VL53L0X_get_range_status_string>:
	return Status;
}

VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
		char *pRangeStatusString)
{
 800c70c:	b490      	push	{r4, r7}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	4603      	mov	r3, r0
 800c714:	6039      	str	r1, [r7, #0]
 800c716:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c718:	2300      	movs	r3, #0
 800c71a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (RangeStatus) {
 800c71c:	79fb      	ldrb	r3, [r7, #7]
 800c71e:	2b05      	cmp	r3, #5
 800c720:	d850      	bhi.n	800c7c4 <VL53L0X_get_range_status_string+0xb8>
 800c722:	a201      	add	r2, pc, #4	; (adr r2, 800c728 <VL53L0X_get_range_status_string+0x1c>)
 800c724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c728:	0800c741 	.word	0x0800c741
 800c72c:	0800c753 	.word	0x0800c753
 800c730:	0800c76b 	.word	0x0800c76b
 800c734:	0800c77d 	.word	0x0800c77d
 800c738:	0800c797 	.word	0x0800c797
 800c73c:	0800c7af 	.word	0x0800c7af
	case 0:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	4a28      	ldr	r2, [pc, #160]	; (800c7e4 <VL53L0X_get_range_status_string+0xd8>)
 800c744:	461c      	mov	r4, r3
 800c746:	4613      	mov	r3, r2
 800c748:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c74a:	6020      	str	r0, [r4, #0]
 800c74c:	6061      	str	r1, [r4, #4]
 800c74e:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_RANGEVALID);
	break;
 800c750:	e041      	b.n	800c7d6 <VL53L0X_get_range_status_string+0xca>
	case 1:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	4924      	ldr	r1, [pc, #144]	; (800c7e8 <VL53L0X_get_range_status_string+0xdc>)
 800c756:	461a      	mov	r2, r3
 800c758:	460b      	mov	r3, r1
 800c75a:	cb03      	ldmia	r3!, {r0, r1}
 800c75c:	6010      	str	r0, [r2, #0]
 800c75e:	6051      	str	r1, [r2, #4]
 800c760:	8819      	ldrh	r1, [r3, #0]
 800c762:	789b      	ldrb	r3, [r3, #2]
 800c764:	8111      	strh	r1, [r2, #8]
 800c766:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_SIGMA);
	break;
 800c768:	e035      	b.n	800c7d6 <VL53L0X_get_range_status_string+0xca>
	case 2:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	4a1f      	ldr	r2, [pc, #124]	; (800c7ec <VL53L0X_get_range_status_string+0xe0>)
 800c76e:	461c      	mov	r4, r3
 800c770:	4613      	mov	r3, r2
 800c772:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c774:	6020      	str	r0, [r4, #0]
 800c776:	6061      	str	r1, [r4, #4]
 800c778:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_SIGNAL);
	break;
 800c77a:	e02c      	b.n	800c7d6 <VL53L0X_get_range_status_string+0xca>
	case 3:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	4a1c      	ldr	r2, [pc, #112]	; (800c7f0 <VL53L0X_get_range_status_string+0xe4>)
 800c780:	461c      	mov	r4, r3
 800c782:	4613      	mov	r3, r2
 800c784:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c786:	6020      	str	r0, [r4, #0]
 800c788:	6061      	str	r1, [r4, #4]
 800c78a:	60a2      	str	r2, [r4, #8]
 800c78c:	881a      	ldrh	r2, [r3, #0]
 800c78e:	789b      	ldrb	r3, [r3, #2]
 800c790:	81a2      	strh	r2, [r4, #12]
 800c792:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_RANGESTATUS_MINRANGE);
	break;
 800c794:	e01f      	b.n	800c7d6 <VL53L0X_get_range_status_string+0xca>
	case 4:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	4916      	ldr	r1, [pc, #88]	; (800c7f4 <VL53L0X_get_range_status_string+0xe8>)
 800c79a:	461a      	mov	r2, r3
 800c79c:	460b      	mov	r3, r1
 800c79e:	cb03      	ldmia	r3!, {r0, r1}
 800c7a0:	6010      	str	r0, [r2, #0]
 800c7a2:	6051      	str	r1, [r2, #4]
 800c7a4:	8819      	ldrh	r1, [r3, #0]
 800c7a6:	789b      	ldrb	r3, [r3, #2]
 800c7a8:	8111      	strh	r1, [r2, #8]
 800c7aa:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_PHASE);
	break;
 800c7ac:	e013      	b.n	800c7d6 <VL53L0X_get_range_status_string+0xca>
	case 5:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	4a11      	ldr	r2, [pc, #68]	; (800c7f8 <VL53L0X_get_range_status_string+0xec>)
 800c7b2:	461c      	mov	r4, r3
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c7b8:	6020      	str	r0, [r4, #0]
 800c7ba:	6061      	str	r1, [r4, #4]
 800c7bc:	60a2      	str	r2, [r4, #8]
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	81a3      	strh	r3, [r4, #12]
			VL53L0X_STRING_RANGESTATUS_HW);
	break;
 800c7c2:	e008      	b.n	800c7d6 <VL53L0X_get_range_status_string+0xca>

	default: /**/
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	490d      	ldr	r1, [pc, #52]	; (800c7fc <VL53L0X_get_range_status_string+0xf0>)
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	460b      	mov	r3, r1
 800c7cc:	cb03      	ldmia	r3!, {r0, r1}
 800c7ce:	6010      	str	r0, [r2, #0]
 800c7d0:	6051      	str	r1, [r2, #4]
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	8113      	strh	r3, [r2, #8]
				VL53L0X_STRING_RANGESTATUS_NONE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c7d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bc90      	pop	{r4, r7}
 800c7e2:	4770      	bx	lr
 800c7e4:	0800dcbc 	.word	0x0800dcbc
 800c7e8:	0800dcc8 	.word	0x0800dcc8
 800c7ec:	0800dcd4 	.word	0x0800dcd4
 800c7f0:	0800dce0 	.word	0x0800dce0
 800c7f4:	0800dcf0 	.word	0x0800dcf0
 800c7f8:	0800dcfc 	.word	0x0800dcfc
 800c7fc:	0800db54 	.word	0x0800db54

0800c800 <VL53L0X_get_pal_error_string>:

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 800c800:	b4b0      	push	{r4, r5, r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	4603      	mov	r3, r0
 800c808:	6039      	str	r1, [r7, #0]
 800c80a:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c80c:	2300      	movs	r3, #0
 800c80e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 800c810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c814:	3363      	adds	r3, #99	; 0x63
 800c816:	2b63      	cmp	r3, #99	; 0x63
 800c818:	f200 81b9 	bhi.w	800cb8e <VL53L0X_get_pal_error_string+0x38e>
 800c81c:	a201      	add	r2, pc, #4	; (adr r2, 800c824 <VL53L0X_get_pal_error_string+0x24>)
 800c81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c822:	bf00      	nop
 800c824:	0800cb73 	.word	0x0800cb73
 800c828:	0800cb8f 	.word	0x0800cb8f
 800c82c:	0800cb8f 	.word	0x0800cb8f
 800c830:	0800cb8f 	.word	0x0800cb8f
 800c834:	0800cb8f 	.word	0x0800cb8f
 800c838:	0800cb8f 	.word	0x0800cb8f
 800c83c:	0800cb8f 	.word	0x0800cb8f
 800c840:	0800cb8f 	.word	0x0800cb8f
 800c844:	0800cb8f 	.word	0x0800cb8f
 800c848:	0800cb8f 	.word	0x0800cb8f
 800c84c:	0800cb8f 	.word	0x0800cb8f
 800c850:	0800cb8f 	.word	0x0800cb8f
 800c854:	0800cb8f 	.word	0x0800cb8f
 800c858:	0800cb8f 	.word	0x0800cb8f
 800c85c:	0800cb8f 	.word	0x0800cb8f
 800c860:	0800cb8f 	.word	0x0800cb8f
 800c864:	0800cb8f 	.word	0x0800cb8f
 800c868:	0800cb8f 	.word	0x0800cb8f
 800c86c:	0800cb8f 	.word	0x0800cb8f
 800c870:	0800cb8f 	.word	0x0800cb8f
 800c874:	0800cb8f 	.word	0x0800cb8f
 800c878:	0800cb8f 	.word	0x0800cb8f
 800c87c:	0800cb8f 	.word	0x0800cb8f
 800c880:	0800cb8f 	.word	0x0800cb8f
 800c884:	0800cb8f 	.word	0x0800cb8f
 800c888:	0800cb8f 	.word	0x0800cb8f
 800c88c:	0800cb8f 	.word	0x0800cb8f
 800c890:	0800cb8f 	.word	0x0800cb8f
 800c894:	0800cb8f 	.word	0x0800cb8f
 800c898:	0800cb8f 	.word	0x0800cb8f
 800c89c:	0800cb8f 	.word	0x0800cb8f
 800c8a0:	0800cb8f 	.word	0x0800cb8f
 800c8a4:	0800cb8f 	.word	0x0800cb8f
 800c8a8:	0800cb8f 	.word	0x0800cb8f
 800c8ac:	0800cb8f 	.word	0x0800cb8f
 800c8b0:	0800cb8f 	.word	0x0800cb8f
 800c8b4:	0800cb8f 	.word	0x0800cb8f
 800c8b8:	0800cb8f 	.word	0x0800cb8f
 800c8bc:	0800cb8f 	.word	0x0800cb8f
 800c8c0:	0800cb8f 	.word	0x0800cb8f
 800c8c4:	0800cb8f 	.word	0x0800cb8f
 800c8c8:	0800cb8f 	.word	0x0800cb8f
 800c8cc:	0800cb8f 	.word	0x0800cb8f
 800c8d0:	0800cb8f 	.word	0x0800cb8f
 800c8d4:	0800cb8f 	.word	0x0800cb8f
 800c8d8:	0800cb8f 	.word	0x0800cb8f
 800c8dc:	0800cb8f 	.word	0x0800cb8f
 800c8e0:	0800cb8f 	.word	0x0800cb8f
 800c8e4:	0800cb8f 	.word	0x0800cb8f
 800c8e8:	0800cb55 	.word	0x0800cb55
 800c8ec:	0800cb8f 	.word	0x0800cb8f
 800c8f0:	0800cb8f 	.word	0x0800cb8f
 800c8f4:	0800cb8f 	.word	0x0800cb8f
 800c8f8:	0800cb8f 	.word	0x0800cb8f
 800c8fc:	0800cb8f 	.word	0x0800cb8f
 800c900:	0800cb8f 	.word	0x0800cb8f
 800c904:	0800cb8f 	.word	0x0800cb8f
 800c908:	0800cb8f 	.word	0x0800cb8f
 800c90c:	0800cb8f 	.word	0x0800cb8f
 800c910:	0800cb33 	.word	0x0800cb33
 800c914:	0800cb8f 	.word	0x0800cb8f
 800c918:	0800cb8f 	.word	0x0800cb8f
 800c91c:	0800cb8f 	.word	0x0800cb8f
 800c920:	0800cb8f 	.word	0x0800cb8f
 800c924:	0800cb8f 	.word	0x0800cb8f
 800c928:	0800cb8f 	.word	0x0800cb8f
 800c92c:	0800cb8f 	.word	0x0800cb8f
 800c930:	0800cb8f 	.word	0x0800cb8f
 800c934:	0800cb8f 	.word	0x0800cb8f
 800c938:	0800cb17 	.word	0x0800cb17
 800c93c:	0800cb8f 	.word	0x0800cb8f
 800c940:	0800cb8f 	.word	0x0800cb8f
 800c944:	0800cb8f 	.word	0x0800cb8f
 800c948:	0800cb8f 	.word	0x0800cb8f
 800c94c:	0800cb8f 	.word	0x0800cb8f
 800c950:	0800cb8f 	.word	0x0800cb8f
 800c954:	0800cb8f 	.word	0x0800cb8f
 800c958:	0800cb8f 	.word	0x0800cb8f
 800c95c:	0800cb8f 	.word	0x0800cb8f
 800c960:	0800cafd 	.word	0x0800cafd
 800c964:	0800cb8f 	.word	0x0800cb8f
 800c968:	0800cb8f 	.word	0x0800cb8f
 800c96c:	0800cb8f 	.word	0x0800cb8f
 800c970:	0800cb8f 	.word	0x0800cb8f
 800c974:	0800cb8f 	.word	0x0800cb8f
 800c978:	0800cb8f 	.word	0x0800cb8f
 800c97c:	0800cb8f 	.word	0x0800cb8f
 800c980:	0800ca49 	.word	0x0800ca49
 800c984:	0800cadf 	.word	0x0800cadf
 800c988:	0800cac7 	.word	0x0800cac7
 800c98c:	0800caaf 	.word	0x0800caaf
 800c990:	0800ca91 	.word	0x0800ca91
 800c994:	0800ca77 	.word	0x0800ca77
 800c998:	0800ca65 	.word	0x0800ca65
 800c99c:	0800ca31 	.word	0x0800ca31
 800c9a0:	0800ca13 	.word	0x0800ca13
 800c9a4:	0800c9ff 	.word	0x0800c9ff
 800c9a8:	0800c9e7 	.word	0x0800c9e7
 800c9ac:	0800c9c9 	.word	0x0800c9c9
 800c9b0:	0800c9b5 	.word	0x0800c9b5
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	4980      	ldr	r1, [pc, #512]	; (800cbb8 <VL53L0X_get_pal_error_string+0x3b8>)
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	cb03      	ldmia	r3!, {r0, r1}
 800c9be:	6010      	str	r0, [r2, #0]
 800c9c0:	6051      	str	r1, [r2, #4]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 800c9c6:	e0f0      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	4a7c      	ldr	r2, [pc, #496]	; (800cbbc <VL53L0X_get_pal_error_string+0x3bc>)
 800c9cc:	461d      	mov	r5, r3
 800c9ce:	4614      	mov	r4, r2
 800c9d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9d2:	6028      	str	r0, [r5, #0]
 800c9d4:	6069      	str	r1, [r5, #4]
 800c9d6:	60aa      	str	r2, [r5, #8]
 800c9d8:	60eb      	str	r3, [r5, #12]
 800c9da:	cc03      	ldmia	r4!, {r0, r1}
 800c9dc:	6128      	str	r0, [r5, #16]
 800c9de:	6169      	str	r1, [r5, #20]
 800c9e0:	8823      	ldrh	r3, [r4, #0]
 800c9e2:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 800c9e4:	e0e1      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	4a75      	ldr	r2, [pc, #468]	; (800cbc0 <VL53L0X_get_pal_error_string+0x3c0>)
 800c9ea:	461d      	mov	r5, r3
 800c9ec:	4614      	mov	r4, r2
 800c9ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9f0:	6028      	str	r0, [r5, #0]
 800c9f2:	6069      	str	r1, [r5, #4]
 800c9f4:	60aa      	str	r2, [r5, #8]
 800c9f6:	60eb      	str	r3, [r5, #12]
 800c9f8:	8823      	ldrh	r3, [r4, #0]
 800c9fa:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 800c9fc:	e0d5      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	4a70      	ldr	r2, [pc, #448]	; (800cbc4 <VL53L0X_get_pal_error_string+0x3c4>)
 800ca02:	461c      	mov	r4, r3
 800ca04:	4615      	mov	r5, r2
 800ca06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca08:	6020      	str	r0, [r4, #0]
 800ca0a:	6061      	str	r1, [r4, #4]
 800ca0c:	60a2      	str	r2, [r4, #8]
 800ca0e:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 800ca10:	e0cb      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	4a6c      	ldr	r2, [pc, #432]	; (800cbc8 <VL53L0X_get_pal_error_string+0x3c8>)
 800ca16:	461d      	mov	r5, r3
 800ca18:	4614      	mov	r4, r2
 800ca1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca1c:	6028      	str	r0, [r5, #0]
 800ca1e:	6069      	str	r1, [r5, #4]
 800ca20:	60aa      	str	r2, [r5, #8]
 800ca22:	60eb      	str	r3, [r5, #12]
 800ca24:	cc03      	ldmia	r4!, {r0, r1}
 800ca26:	6128      	str	r0, [r5, #16]
 800ca28:	6169      	str	r1, [r5, #20]
 800ca2a:	7823      	ldrb	r3, [r4, #0]
 800ca2c:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 800ca2e:	e0bc      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	4a66      	ldr	r2, [pc, #408]	; (800cbcc <VL53L0X_get_pal_error_string+0x3cc>)
 800ca34:	461d      	mov	r5, r3
 800ca36:	4614      	mov	r4, r2
 800ca38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca3a:	6028      	str	r0, [r5, #0]
 800ca3c:	6069      	str	r1, [r5, #4]
 800ca3e:	60aa      	str	r2, [r5, #8]
 800ca40:	60eb      	str	r3, [r5, #12]
 800ca42:	6820      	ldr	r0, [r4, #0]
 800ca44:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 800ca46:	e0b0      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	4a61      	ldr	r2, [pc, #388]	; (800cbd0 <VL53L0X_get_pal_error_string+0x3d0>)
 800ca4c:	461d      	mov	r5, r3
 800ca4e:	4614      	mov	r4, r2
 800ca50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca52:	6028      	str	r0, [r5, #0]
 800ca54:	6069      	str	r1, [r5, #4]
 800ca56:	60aa      	str	r2, [r5, #8]
 800ca58:	60eb      	str	r3, [r5, #12]
 800ca5a:	6820      	ldr	r0, [r4, #0]
 800ca5c:	6128      	str	r0, [r5, #16]
 800ca5e:	88a3      	ldrh	r3, [r4, #4]
 800ca60:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 800ca62:	e0a2      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	4a5b      	ldr	r2, [pc, #364]	; (800cbd4 <VL53L0X_get_pal_error_string+0x3d4>)
 800ca68:	461c      	mov	r4, r3
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca6e:	6020      	str	r0, [r4, #0]
 800ca70:	6061      	str	r1, [r4, #4]
 800ca72:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 800ca74:	e099      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	4a57      	ldr	r2, [pc, #348]	; (800cbd8 <VL53L0X_get_pal_error_string+0x3d8>)
 800ca7a:	461c      	mov	r4, r3
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ca80:	6020      	str	r0, [r4, #0]
 800ca82:	6061      	str	r1, [r4, #4]
 800ca84:	60a2      	str	r2, [r4, #8]
 800ca86:	881a      	ldrh	r2, [r3, #0]
 800ca88:	789b      	ldrb	r3, [r3, #2]
 800ca8a:	81a2      	strh	r2, [r4, #12]
 800ca8c:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 800ca8e:	e08c      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	4a52      	ldr	r2, [pc, #328]	; (800cbdc <VL53L0X_get_pal_error_string+0x3dc>)
 800ca94:	461d      	mov	r5, r3
 800ca96:	4614      	mov	r4, r2
 800ca98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca9a:	6028      	str	r0, [r5, #0]
 800ca9c:	6069      	str	r1, [r5, #4]
 800ca9e:	60aa      	str	r2, [r5, #8]
 800caa0:	60eb      	str	r3, [r5, #12]
 800caa2:	cc03      	ldmia	r4!, {r0, r1}
 800caa4:	6128      	str	r0, [r5, #16]
 800caa6:	6169      	str	r1, [r5, #20]
 800caa8:	7823      	ldrb	r3, [r4, #0]
 800caaa:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 800caac:	e07d      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	4a4b      	ldr	r2, [pc, #300]	; (800cbe0 <VL53L0X_get_pal_error_string+0x3e0>)
 800cab2:	461d      	mov	r5, r3
 800cab4:	4614      	mov	r4, r2
 800cab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cab8:	6028      	str	r0, [r5, #0]
 800caba:	6069      	str	r1, [r5, #4]
 800cabc:	60aa      	str	r2, [r5, #8]
 800cabe:	60eb      	str	r3, [r5, #12]
 800cac0:	7823      	ldrb	r3, [r4, #0]
 800cac2:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 800cac4:	e071      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	4a46      	ldr	r2, [pc, #280]	; (800cbe4 <VL53L0X_get_pal_error_string+0x3e4>)
 800caca:	461d      	mov	r5, r3
 800cacc:	4614      	mov	r4, r2
 800cace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cad0:	6028      	str	r0, [r5, #0]
 800cad2:	6069      	str	r1, [r5, #4]
 800cad4:	60aa      	str	r2, [r5, #8]
 800cad6:	60eb      	str	r3, [r5, #12]
 800cad8:	8823      	ldrh	r3, [r4, #0]
 800cada:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 800cadc:	e065      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	4a41      	ldr	r2, [pc, #260]	; (800cbe8 <VL53L0X_get_pal_error_string+0x3e8>)
 800cae2:	461d      	mov	r5, r3
 800cae4:	4614      	mov	r4, r2
 800cae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cae8:	6028      	str	r0, [r5, #0]
 800caea:	6069      	str	r1, [r5, #4]
 800caec:	60aa      	str	r2, [r5, #8]
 800caee:	60eb      	str	r3, [r5, #12]
 800caf0:	cc03      	ldmia	r4!, {r0, r1}
 800caf2:	6128      	str	r0, [r5, #16]
 800caf4:	6169      	str	r1, [r5, #20]
 800caf6:	7823      	ldrb	r3, [r4, #0]
 800caf8:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 800cafa:	e056      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	4a3b      	ldr	r2, [pc, #236]	; (800cbec <VL53L0X_get_pal_error_string+0x3ec>)
 800cb00:	461d      	mov	r5, r3
 800cb02:	4614      	mov	r4, r2
 800cb04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb06:	6028      	str	r0, [r5, #0]
 800cb08:	6069      	str	r1, [r5, #4]
 800cb0a:	60aa      	str	r2, [r5, #8]
 800cb0c:	60eb      	str	r3, [r5, #12]
 800cb0e:	cc03      	ldmia	r4!, {r0, r1}
 800cb10:	6128      	str	r0, [r5, #16]
 800cb12:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 800cb14:	e049      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	4a35      	ldr	r2, [pc, #212]	; (800cbf0 <VL53L0X_get_pal_error_string+0x3f0>)
 800cb1a:	461d      	mov	r5, r3
 800cb1c:	4614      	mov	r4, r2
 800cb1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb20:	6028      	str	r0, [r5, #0]
 800cb22:	6069      	str	r1, [r5, #4]
 800cb24:	60aa      	str	r2, [r5, #8]
 800cb26:	60eb      	str	r3, [r5, #12]
 800cb28:	6820      	ldr	r0, [r4, #0]
 800cb2a:	6128      	str	r0, [r5, #16]
 800cb2c:	88a3      	ldrh	r3, [r4, #4]
 800cb2e:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 800cb30:	e03b      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	4a2f      	ldr	r2, [pc, #188]	; (800cbf4 <VL53L0X_get_pal_error_string+0x3f4>)
 800cb36:	461c      	mov	r4, r3
 800cb38:	4615      	mov	r5, r2
 800cb3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb3c:	6020      	str	r0, [r4, #0]
 800cb3e:	6061      	str	r1, [r4, #4]
 800cb40:	60a2      	str	r2, [r4, #8]
 800cb42:	60e3      	str	r3, [r4, #12]
 800cb44:	6828      	ldr	r0, [r5, #0]
 800cb46:	6120      	str	r0, [r4, #16]
 800cb48:	88ab      	ldrh	r3, [r5, #4]
 800cb4a:	79aa      	ldrb	r2, [r5, #6]
 800cb4c:	82a3      	strh	r3, [r4, #20]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 800cb52:	e02a      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	4a28      	ldr	r2, [pc, #160]	; (800cbf8 <VL53L0X_get_pal_error_string+0x3f8>)
 800cb58:	461d      	mov	r5, r3
 800cb5a:	4614      	mov	r4, r2
 800cb5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb5e:	6028      	str	r0, [r5, #0]
 800cb60:	6069      	str	r1, [r5, #4]
 800cb62:	60aa      	str	r2, [r5, #8]
 800cb64:	60eb      	str	r3, [r5, #12]
 800cb66:	cc03      	ldmia	r4!, {r0, r1}
 800cb68:	6128      	str	r0, [r5, #16]
 800cb6a:	6169      	str	r1, [r5, #20]
 800cb6c:	8823      	ldrh	r3, [r4, #0]
 800cb6e:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 800cb70:	e01b      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	4a21      	ldr	r2, [pc, #132]	; (800cbfc <VL53L0X_get_pal_error_string+0x3fc>)
 800cb76:	461d      	mov	r5, r3
 800cb78:	4614      	mov	r4, r2
 800cb7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb7c:	6028      	str	r0, [r5, #0]
 800cb7e:	6069      	str	r1, [r5, #4]
 800cb80:	60aa      	str	r2, [r5, #8]
 800cb82:	60eb      	str	r3, [r5, #12]
 800cb84:	6820      	ldr	r0, [r4, #0]
 800cb86:	6128      	str	r0, [r5, #16]
 800cb88:	88a3      	ldrh	r3, [r4, #4]
 800cb8a:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 800cb8c:	e00d      	b.n	800cbaa <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	4a1b      	ldr	r2, [pc, #108]	; (800cc00 <VL53L0X_get_pal_error_string+0x400>)
 800cb92:	461d      	mov	r5, r3
 800cb94:	4614      	mov	r4, r2
 800cb96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb98:	6028      	str	r0, [r5, #0]
 800cb9a:	6069      	str	r1, [r5, #4]
 800cb9c:	60aa      	str	r2, [r5, #8]
 800cb9e:	60eb      	str	r3, [r5, #12]
 800cba0:	8823      	ldrh	r3, [r4, #0]
 800cba2:	78a2      	ldrb	r2, [r4, #2]
 800cba4:	822b      	strh	r3, [r5, #16]
 800cba6:	4613      	mov	r3, r2
 800cba8:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cbaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bcb0      	pop	{r4, r5, r7}
 800cbb6:	4770      	bx	lr
 800cbb8:	0800dd0c 	.word	0x0800dd0c
 800cbbc:	0800dd18 	.word	0x0800dd18
 800cbc0:	0800dd34 	.word	0x0800dd34
 800cbc4:	0800dd48 	.word	0x0800dd48
 800cbc8:	0800dd58 	.word	0x0800dd58
 800cbcc:	0800dd74 	.word	0x0800dd74
 800cbd0:	0800dd88 	.word	0x0800dd88
 800cbd4:	0800dda0 	.word	0x0800dda0
 800cbd8:	0800ddac 	.word	0x0800ddac
 800cbdc:	0800ddbc 	.word	0x0800ddbc
 800cbe0:	0800ddd8 	.word	0x0800ddd8
 800cbe4:	0800ddec 	.word	0x0800ddec
 800cbe8:	0800de00 	.word	0x0800de00
 800cbec:	0800de1c 	.word	0x0800de1c
 800cbf0:	0800de34 	.word	0x0800de34
 800cbf4:	0800de4c 	.word	0x0800de4c
 800cbf8:	0800de64 	.word	0x0800de64
 800cbfc:	0800de80 	.word	0x0800de80
 800cc00:	0800dca8 	.word	0x0800dca8

0800cc04 <VL53L0X_write_multi>:
	*/
    return 0;
}

int32_t VL53L0X_write_multi(uint8_t address, uint8_t reg, uint8_t *pdata, int32_t count)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b08a      	sub	sp, #40	; 0x28
 800cc08:	af04      	add	r7, sp, #16
 800cc0a:	60ba      	str	r2, [r7, #8]
 800cc0c:	607b      	str	r3, [r7, #4]
 800cc0e:	4603      	mov	r3, r0
 800cc10:	73fb      	strb	r3, [r7, #15]
 800cc12:	460b      	mov	r3, r1
 800cc14:	73bb      	strb	r3, [r7, #14]

	int32_t status = HAL_I2C_Mem_Write(&hi2c1, address, reg, 1, pdata, count, HAL_MAX_DELAY);
 800cc16:	7bfb      	ldrb	r3, [r7, #15]
 800cc18:	b299      	uxth	r1, r3
 800cc1a:	7bbb      	ldrb	r3, [r7, #14]
 800cc1c:	b298      	uxth	r0, r3
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	b29b      	uxth	r3, r3
 800cc22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc26:	9202      	str	r2, [sp, #8]
 800cc28:	9301      	str	r3, [sp, #4]
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	9300      	str	r3, [sp, #0]
 800cc2e:	2301      	movs	r3, #1
 800cc30:	4602      	mov	r2, r0
 800cc32:	4805      	ldr	r0, [pc, #20]	; (800cc48 <VL53L0X_write_multi+0x44>)
 800cc34:	f7f4 fda8 	bl	8001788 <HAL_I2C_Mem_Write>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	617b      	str	r3, [r7, #20]
	return status;
 800cc3c:	697b      	ldr	r3, [r7, #20]
    }

    return status;
    */

}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3718      	adds	r7, #24
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	200004cc 	.word	0x200004cc

0800cc4c <VL53L0X_read_multi>:

int32_t VL53L0X_read_multi(uint8_t address, uint8_t index, uint8_t *pdata, int32_t count)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b08a      	sub	sp, #40	; 0x28
 800cc50:	af04      	add	r7, sp, #16
 800cc52:	60ba      	str	r2, [r7, #8]
 800cc54:	607b      	str	r3, [r7, #4]
 800cc56:	4603      	mov	r3, r0
 800cc58:	73fb      	strb	r3, [r7, #15]
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	73bb      	strb	r3, [r7, #14]
    int32_t status = STATUS_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Mem_Read(&hi2c1, address, index, 1, pdata, count, HAL_MAX_DELAY);
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
 800cc64:	b299      	uxth	r1, r3
 800cc66:	7bbb      	ldrb	r3, [r7, #14]
 800cc68:	b298      	uxth	r0, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	b29b      	uxth	r3, r3
 800cc6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc72:	9202      	str	r2, [sp, #8]
 800cc74:	9301      	str	r3, [sp, #4]
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	9300      	str	r3, [sp, #0]
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	4805      	ldr	r0, [pc, #20]	; (800cc94 <VL53L0X_read_multi+0x48>)
 800cc80:	f7f4 fe7c 	bl	800197c <HAL_I2C_Mem_Read>
 800cc84:	4603      	mov	r3, r0
 800cc86:	617b      	str	r3, [r7, #20]
    return status;
 800cc88:	697b      	ldr	r3, [r7, #20]
    trace_i2c("Read  reg : 0x%04X, Val : 0x%s\n", index, value_as_str);
#endif

    return status;
    */
}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	200004cc 	.word	0x200004cc

0800cc98 <VL53L0X_write_byte>:


int32_t VL53L0X_write_byte(uint8_t address, uint8_t index, uint8_t data)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	71fb      	strb	r3, [r7, #7]
 800cca2:	460b      	mov	r3, r1
 800cca4:	71bb      	strb	r3, [r7, #6]
 800cca6:	4613      	mov	r3, r2
 800cca8:	717b      	strb	r3, [r7, #5]
    int32_t status = STATUS_OK;
 800ccaa:	2300      	movs	r3, #0
 800ccac:	60fb      	str	r3, [r7, #12]
    const int32_t cbyte_count = 1;
 800ccae:	2301      	movs	r3, #1
 800ccb0:	60bb      	str	r3, [r7, #8]

    status = VL53L0X_write_multi(address, index, &data, cbyte_count);
 800ccb2:	1d7a      	adds	r2, r7, #5
 800ccb4:	79b9      	ldrb	r1, [r7, #6]
 800ccb6:	79f8      	ldrb	r0, [r7, #7]
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	f7ff ffa3 	bl	800cc04 <VL53L0X_write_multi>
 800ccbe:	60f8      	str	r0, [r7, #12]

    return status;
 800ccc0:	68fb      	ldr	r3, [r7, #12]

}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3710      	adds	r7, #16
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <VL53L0X_write_word>:


int32_t VL53L0X_write_word(uint8_t address, uint8_t index, uint16_t data)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b084      	sub	sp, #16
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	71fb      	strb	r3, [r7, #7]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	71bb      	strb	r3, [r7, #6]
 800ccd8:	4613      	mov	r3, r2
 800ccda:	80bb      	strh	r3, [r7, #4]
    int32_t status = STATUS_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]

    uint8_t  buffer[BYTES_PER_WORD];

    // Split 16-bit word into MS and LS uint8_t
    buffer[0] = (uint8_t)(data >> 8);
 800cce0:	88bb      	ldrh	r3, [r7, #4]
 800cce2:	0a1b      	lsrs	r3, r3, #8
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	723b      	strb	r3, [r7, #8]
    buffer[1] = (uint8_t)(data &  0x00FF);
 800ccea:	88bb      	ldrh	r3, [r7, #4]
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	727b      	strb	r3, [r7, #9]
    status = VL53L0X_write_multi(address, index, buffer, 2);
 800ccf0:	f107 0208 	add.w	r2, r7, #8
 800ccf4:	79b9      	ldrb	r1, [r7, #6]
 800ccf6:	79f8      	ldrb	r0, [r7, #7]
 800ccf8:	2302      	movs	r3, #2
 800ccfa:	f7ff ff83 	bl	800cc04 <VL53L0X_write_multi>
 800ccfe:	60f8      	str	r0, [r7, #12]
    return status;
 800cd00:	68fb      	ldr	r3, [r7, #12]
    else
    {
        status = VL53L0X_write_multi(address, index, buffer, BYTES_PER_WORD);
    }
    */
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3710      	adds	r7, #16
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}

0800cd0a <VL53L0X_read_byte>:

}


int32_t VL53L0X_read_byte(uint8_t address, uint8_t index, uint8_t *pdata)
{
 800cd0a:	b580      	push	{r7, lr}
 800cd0c:	b084      	sub	sp, #16
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	4603      	mov	r3, r0
 800cd12:	603a      	str	r2, [r7, #0]
 800cd14:	71fb      	strb	r3, [r7, #7]
 800cd16:	460b      	mov	r3, r1
 800cd18:	71bb      	strb	r3, [r7, #6]
    int32_t status = STATUS_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
    int32_t cbyte_count = 1;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	60bb      	str	r3, [r7, #8]

    status = VL53L0X_read_multi(address, index, pdata, cbyte_count);
 800cd22:	79b9      	ldrb	r1, [r7, #6]
 800cd24:	79f8      	ldrb	r0, [r7, #7]
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	f7ff ff8f 	bl	800cc4c <VL53L0X_read_multi>
 800cd2e:	60f8      	str	r0, [r7, #12]

    return status;
 800cd30:	68fb      	ldr	r3, [r7, #12]

}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <VL53L0X_read_word>:


int32_t VL53L0X_read_word(uint8_t address, uint8_t index, uint16_t *pdata)
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b084      	sub	sp, #16
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	4603      	mov	r3, r0
 800cd42:	603a      	str	r2, [r7, #0]
 800cd44:	71fb      	strb	r3, [r7, #7]
 800cd46:	460b      	mov	r3, r1
 800cd48:	71bb      	strb	r3, [r7, #6]
    int32_t  status = STATUS_OK;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60fb      	str	r3, [r7, #12]
	uint8_t  buffer[BYTES_PER_WORD];

    status = VL53L0X_read_multi(address, index, buffer, BYTES_PER_WORD);
 800cd4e:	f107 0208 	add.w	r2, r7, #8
 800cd52:	79b9      	ldrb	r1, [r7, #6]
 800cd54:	79f8      	ldrb	r0, [r7, #7]
 800cd56:	2302      	movs	r3, #2
 800cd58:	f7ff ff78 	bl	800cc4c <VL53L0X_read_multi>
 800cd5c:	60f8      	str	r0, [r7, #12]
	*pdata = ((uint16_t)buffer[0]<<8) + (uint16_t)buffer[1];
 800cd5e:	7a3b      	ldrb	r3, [r7, #8]
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	021b      	lsls	r3, r3, #8
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	7a7b      	ldrb	r3, [r7, #9]
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	4413      	add	r3, r2
 800cd6c:	b29a      	uxth	r2, r3
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	801a      	strh	r2, [r3, #0]

    return status;
 800cd72:	68fb      	ldr	r3, [r7, #12]

}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(uint8_t address, uint8_t index, uint32_t *pdata)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	4603      	mov	r3, r0
 800cd84:	603a      	str	r2, [r7, #0]
 800cd86:	71fb      	strb	r3, [r7, #7]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	71bb      	strb	r3, [r7, #6]
    int32_t status = STATUS_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	60fb      	str	r3, [r7, #12]
	uint8_t  buffer[4];

    status = VL53L0X_read_multi(address, index, buffer, 4);
 800cd90:	f107 0208 	add.w	r2, r7, #8
 800cd94:	79b9      	ldrb	r1, [r7, #6]
 800cd96:	79f8      	ldrb	r0, [r7, #7]
 800cd98:	2304      	movs	r3, #4
 800cd9a:	f7ff ff57 	bl	800cc4c <VL53L0X_read_multi>
 800cd9e:	60f8      	str	r0, [r7, #12]
    *pdata = ((uint32_t)buffer[0]<<24) + ((uint32_t)buffer[1]<<16) + ((uint32_t)buffer[2]<<8) + (uint32_t)buffer[3];
 800cda0:	7a3b      	ldrb	r3, [r7, #8]
 800cda2:	061a      	lsls	r2, r3, #24
 800cda4:	7a7b      	ldrb	r3, [r7, #9]
 800cda6:	041b      	lsls	r3, r3, #16
 800cda8:	441a      	add	r2, r3
 800cdaa:	7abb      	ldrb	r3, [r7, #10]
 800cdac:	021b      	lsls	r3, r3, #8
 800cdae:	4413      	add	r3, r2
 800cdb0:	7afa      	ldrb	r2, [r7, #11]
 800cdb2:	441a      	add	r2, r3
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	601a      	str	r2, [r3, #0]

    return status;
 800cdb8:	68fb      	ldr	r3, [r7, #12]

}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b088      	sub	sp, #32
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	60f8      	str	r0, [r7, #12]
 800cdca:	607a      	str	r2, [r7, #4]
 800cdcc:	603b      	str	r3, [r7, #0]
 800cdce:	460b      	mov	r3, r1
 800cdd0:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	2b3f      	cmp	r3, #63	; 0x3f
 800cdde:	d901      	bls.n	800cde4 <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cde0:	23fc      	movs	r3, #252	; 0xfc
 800cde2:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cdea:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(deviceAddress, index, pdata, count);
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	7af9      	ldrb	r1, [r7, #11]
 800cdf0:	7df8      	ldrb	r0, [r7, #23]
 800cdf2:	687a      	ldr	r2, [r7, #4]
 800cdf4:	f7ff ff06 	bl	800cc04 <VL53L0X_write_multi>
 800cdf8:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d001      	beq.n	800ce04 <VL53L0X_WriteMulti+0x42>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce00:	23ec      	movs	r3, #236	; 0xec
 800ce02:	77fb      	strb	r3, [r7, #31]

    return Status;
 800ce04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3720      	adds	r7, #32
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce20:	2300      	movs	r3, #0
 800ce22:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	2b3f      	cmp	r3, #63	; 0x3f
 800ce28:	d901      	bls.n	800ce2e <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce2a:	23fc      	movs	r3, #252	; 0xfc
 800ce2c:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ce34:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count);
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	7af9      	ldrb	r1, [r7, #11]
 800ce3a:	7db8      	ldrb	r0, [r7, #22]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	f7ff ff05 	bl	800cc4c <VL53L0X_read_multi>
 800ce42:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <VL53L0X_ReadMulti+0x3e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce4a:	23ec      	movs	r3, #236	; 0xec
 800ce4c:	75fb      	strb	r3, [r7, #23]

    return Status;
 800ce4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3718      	adds	r7, #24
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	460b      	mov	r3, r1
 800ce64:	70fb      	strb	r3, [r7, #3]
 800ce66:	4613      	mov	r3, r2
 800ce68:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ce74:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800ce76:	78ba      	ldrb	r2, [r7, #2]
 800ce78:	78f9      	ldrb	r1, [r7, #3]
 800ce7a:	7bbb      	ldrb	r3, [r7, #14]
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7ff ff0b 	bl	800cc98 <VL53L0X_write_byte>
 800ce82:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d001      	beq.n	800ce8e <VL53L0X_WrByte+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce8a:	23ec      	movs	r3, #236	; 0xec
 800ce8c:	73fb      	strb	r3, [r7, #15]

    return Status;
 800ce8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}

0800ce9a <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 800ce9a:	b580      	push	{r7, lr}
 800ce9c:	b084      	sub	sp, #16
 800ce9e:	af00      	add	r7, sp, #0
 800cea0:	6078      	str	r0, [r7, #4]
 800cea2:	460b      	mov	r3, r1
 800cea4:	70fb      	strb	r3, [r7, #3]
 800cea6:	4613      	mov	r3, r2
 800cea8:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ceb4:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(deviceAddress, index, data);
 800ceb6:	883a      	ldrh	r2, [r7, #0]
 800ceb8:	78f9      	ldrb	r1, [r7, #3]
 800ceba:	7bbb      	ldrb	r3, [r7, #14]
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7ff ff04 	bl	800ccca <VL53L0X_write_word>
 800cec2:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <VL53L0X_WrWord+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ceca:	23ec      	movs	r3, #236	; 0xec
 800cecc:	73fb      	strb	r3, [r7, #15]

    return Status;
 800cece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b086      	sub	sp, #24
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
 800cee2:	4608      	mov	r0, r1
 800cee4:	4611      	mov	r1, r2
 800cee6:	461a      	mov	r2, r3
 800cee8:	4603      	mov	r3, r0
 800ceea:	70fb      	strb	r3, [r7, #3]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70bb      	strb	r3, [r7, #2]
 800cef0:	4613      	mov	r3, r2
 800cef2:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cef4:	2300      	movs	r3, #0
 800cef6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cefe:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
 800cf00:	f107 020f 	add.w	r2, r7, #15
 800cf04:	78f9      	ldrb	r1, [r7, #3]
 800cf06:	7dbb      	ldrb	r3, [r7, #22]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff fefe 	bl	800cd0a <VL53L0X_read_byte>
 800cf0e:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d001      	beq.n	800cf1a <VL53L0X_UpdateByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf16:	23ec      	movs	r3, #236	; 0xec
 800cf18:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 800cf1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d113      	bne.n	800cf4a <VL53L0X_UpdateByte+0x70>
        data = (data & AndData) | OrData;
 800cf22:	7bfa      	ldrb	r2, [r7, #15]
 800cf24:	78bb      	ldrb	r3, [r7, #2]
 800cf26:	4013      	ands	r3, r2
 800cf28:	b2da      	uxtb	r2, r3
 800cf2a:	787b      	ldrb	r3, [r7, #1]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800cf32:	7bfa      	ldrb	r2, [r7, #15]
 800cf34:	78f9      	ldrb	r1, [r7, #3]
 800cf36:	7dbb      	ldrb	r3, [r7, #22]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7ff fead 	bl	800cc98 <VL53L0X_write_byte>
 800cf3e:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d001      	beq.n	800cf4a <VL53L0X_UpdateByte+0x70>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf46:	23ec      	movs	r3, #236	; 0xec
 800cf48:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800cf4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b086      	sub	sp, #24
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	60f8      	str	r0, [r7, #12]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	607a      	str	r2, [r7, #4]
 800cf62:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf64:	2300      	movs	r3, #0
 800cf66:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cf6e:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
 800cf70:	7af9      	ldrb	r1, [r7, #11]
 800cf72:	7dbb      	ldrb	r3, [r7, #22]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7ff fec7 	bl	800cd0a <VL53L0X_read_byte>
 800cf7c:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <VL53L0X_RdByte+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf84:	23ec      	movs	r3, #236	; 0xec
 800cf86:	75fb      	strb	r3, [r7, #23]

    return Status;
 800cf88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3718      	adds	r7, #24
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cfac:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(deviceAddress, index, data);
 800cfae:	7af9      	ldrb	r1, [r7, #11]
 800cfb0:	7dbb      	ldrb	r3, [r7, #22]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff fec0 	bl	800cd3a <VL53L0X_read_word>
 800cfba:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <VL53L0X_RdWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cfc2:	23ec      	movs	r3, #236	; 0xec
 800cfc4:	75fb      	strb	r3, [r7, #23]

    return Status;
 800cfc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3718      	adds	r7, #24
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b086      	sub	sp, #24
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	60f8      	str	r0, [r7, #12]
 800cfda:	460b      	mov	r3, r1
 800cfdc:	607a      	str	r2, [r7, #4]
 800cfde:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cfea:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
 800cfec:	7af9      	ldrb	r1, [r7, #11]
 800cfee:	7dbb      	ldrb	r3, [r7, #22]
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7ff fec2 	bl	800cd7c <VL53L0X_read_dword>
 800cff8:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d001      	beq.n	800d004 <VL53L0X_RdDWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800d000:	23ec      	movs	r3, #236	; 0xec
 800d002:	75fb      	strb	r3, [r7, #23]

    return Status;
 800d004:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3718      	adds	r7, #24
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
        WaitForSingleObject(hEvent,cTimeout_ms);
    }

    LOG_FUNCTION_END(status);
*/
    return 0;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	370c      	adds	r7, #12
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
	...

0800d028 <__errno>:
 800d028:	4b01      	ldr	r3, [pc, #4]	; (800d030 <__errno+0x8>)
 800d02a:	6818      	ldr	r0, [r3, #0]
 800d02c:	4770      	bx	lr
 800d02e:	bf00      	nop
 800d030:	2000043c 	.word	0x2000043c

0800d034 <__libc_init_array>:
 800d034:	b570      	push	{r4, r5, r6, lr}
 800d036:	4e0d      	ldr	r6, [pc, #52]	; (800d06c <__libc_init_array+0x38>)
 800d038:	4c0d      	ldr	r4, [pc, #52]	; (800d070 <__libc_init_array+0x3c>)
 800d03a:	1ba4      	subs	r4, r4, r6
 800d03c:	10a4      	asrs	r4, r4, #2
 800d03e:	2500      	movs	r5, #0
 800d040:	42a5      	cmp	r5, r4
 800d042:	d109      	bne.n	800d058 <__libc_init_array+0x24>
 800d044:	4e0b      	ldr	r6, [pc, #44]	; (800d074 <__libc_init_array+0x40>)
 800d046:	4c0c      	ldr	r4, [pc, #48]	; (800d078 <__libc_init_array+0x44>)
 800d048:	f000 fc40 	bl	800d8cc <_init>
 800d04c:	1ba4      	subs	r4, r4, r6
 800d04e:	10a4      	asrs	r4, r4, #2
 800d050:	2500      	movs	r5, #0
 800d052:	42a5      	cmp	r5, r4
 800d054:	d105      	bne.n	800d062 <__libc_init_array+0x2e>
 800d056:	bd70      	pop	{r4, r5, r6, pc}
 800d058:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d05c:	4798      	blx	r3
 800d05e:	3501      	adds	r5, #1
 800d060:	e7ee      	b.n	800d040 <__libc_init_array+0xc>
 800d062:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d066:	4798      	blx	r3
 800d068:	3501      	adds	r5, #1
 800d06a:	e7f2      	b.n	800d052 <__libc_init_array+0x1e>
 800d06c:	0800e008 	.word	0x0800e008
 800d070:	0800e008 	.word	0x0800e008
 800d074:	0800e008 	.word	0x0800e008
 800d078:	0800e00c 	.word	0x0800e00c

0800d07c <malloc>:
 800d07c:	4b02      	ldr	r3, [pc, #8]	; (800d088 <malloc+0xc>)
 800d07e:	4601      	mov	r1, r0
 800d080:	6818      	ldr	r0, [r3, #0]
 800d082:	f000 b86d 	b.w	800d160 <_malloc_r>
 800d086:	bf00      	nop
 800d088:	2000043c 	.word	0x2000043c

0800d08c <free>:
 800d08c:	4b02      	ldr	r3, [pc, #8]	; (800d098 <free+0xc>)
 800d08e:	4601      	mov	r1, r0
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	f000 b817 	b.w	800d0c4 <_free_r>
 800d096:	bf00      	nop
 800d098:	2000043c 	.word	0x2000043c

0800d09c <memcpy>:
 800d09c:	b510      	push	{r4, lr}
 800d09e:	1e43      	subs	r3, r0, #1
 800d0a0:	440a      	add	r2, r1
 800d0a2:	4291      	cmp	r1, r2
 800d0a4:	d100      	bne.n	800d0a8 <memcpy+0xc>
 800d0a6:	bd10      	pop	{r4, pc}
 800d0a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0b0:	e7f7      	b.n	800d0a2 <memcpy+0x6>

0800d0b2 <memset>:
 800d0b2:	4402      	add	r2, r0
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d100      	bne.n	800d0bc <memset+0xa>
 800d0ba:	4770      	bx	lr
 800d0bc:	f803 1b01 	strb.w	r1, [r3], #1
 800d0c0:	e7f9      	b.n	800d0b6 <memset+0x4>
	...

0800d0c4 <_free_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	2900      	cmp	r1, #0
 800d0ca:	d045      	beq.n	800d158 <_free_r+0x94>
 800d0cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0d0:	1f0c      	subs	r4, r1, #4
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	bfb8      	it	lt
 800d0d6:	18e4      	addlt	r4, r4, r3
 800d0d8:	f000 f8d4 	bl	800d284 <__malloc_lock>
 800d0dc:	4a1f      	ldr	r2, [pc, #124]	; (800d15c <_free_r+0x98>)
 800d0de:	6813      	ldr	r3, [r2, #0]
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	b933      	cbnz	r3, 800d0f2 <_free_r+0x2e>
 800d0e4:	6063      	str	r3, [r4, #4]
 800d0e6:	6014      	str	r4, [r2, #0]
 800d0e8:	4628      	mov	r0, r5
 800d0ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0ee:	f000 b8ca 	b.w	800d286 <__malloc_unlock>
 800d0f2:	42a3      	cmp	r3, r4
 800d0f4:	d90c      	bls.n	800d110 <_free_r+0x4c>
 800d0f6:	6821      	ldr	r1, [r4, #0]
 800d0f8:	1862      	adds	r2, r4, r1
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	bf04      	itt	eq
 800d0fe:	681a      	ldreq	r2, [r3, #0]
 800d100:	685b      	ldreq	r3, [r3, #4]
 800d102:	6063      	str	r3, [r4, #4]
 800d104:	bf04      	itt	eq
 800d106:	1852      	addeq	r2, r2, r1
 800d108:	6022      	streq	r2, [r4, #0]
 800d10a:	6004      	str	r4, [r0, #0]
 800d10c:	e7ec      	b.n	800d0e8 <_free_r+0x24>
 800d10e:	4613      	mov	r3, r2
 800d110:	685a      	ldr	r2, [r3, #4]
 800d112:	b10a      	cbz	r2, 800d118 <_free_r+0x54>
 800d114:	42a2      	cmp	r2, r4
 800d116:	d9fa      	bls.n	800d10e <_free_r+0x4a>
 800d118:	6819      	ldr	r1, [r3, #0]
 800d11a:	1858      	adds	r0, r3, r1
 800d11c:	42a0      	cmp	r0, r4
 800d11e:	d10b      	bne.n	800d138 <_free_r+0x74>
 800d120:	6820      	ldr	r0, [r4, #0]
 800d122:	4401      	add	r1, r0
 800d124:	1858      	adds	r0, r3, r1
 800d126:	4282      	cmp	r2, r0
 800d128:	6019      	str	r1, [r3, #0]
 800d12a:	d1dd      	bne.n	800d0e8 <_free_r+0x24>
 800d12c:	6810      	ldr	r0, [r2, #0]
 800d12e:	6852      	ldr	r2, [r2, #4]
 800d130:	605a      	str	r2, [r3, #4]
 800d132:	4401      	add	r1, r0
 800d134:	6019      	str	r1, [r3, #0]
 800d136:	e7d7      	b.n	800d0e8 <_free_r+0x24>
 800d138:	d902      	bls.n	800d140 <_free_r+0x7c>
 800d13a:	230c      	movs	r3, #12
 800d13c:	602b      	str	r3, [r5, #0]
 800d13e:	e7d3      	b.n	800d0e8 <_free_r+0x24>
 800d140:	6820      	ldr	r0, [r4, #0]
 800d142:	1821      	adds	r1, r4, r0
 800d144:	428a      	cmp	r2, r1
 800d146:	bf04      	itt	eq
 800d148:	6811      	ldreq	r1, [r2, #0]
 800d14a:	6852      	ldreq	r2, [r2, #4]
 800d14c:	6062      	str	r2, [r4, #4]
 800d14e:	bf04      	itt	eq
 800d150:	1809      	addeq	r1, r1, r0
 800d152:	6021      	streq	r1, [r4, #0]
 800d154:	605c      	str	r4, [r3, #4]
 800d156:	e7c7      	b.n	800d0e8 <_free_r+0x24>
 800d158:	bd38      	pop	{r3, r4, r5, pc}
 800d15a:	bf00      	nop
 800d15c:	200004c4 	.word	0x200004c4

0800d160 <_malloc_r>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	1ccd      	adds	r5, r1, #3
 800d164:	f025 0503 	bic.w	r5, r5, #3
 800d168:	3508      	adds	r5, #8
 800d16a:	2d0c      	cmp	r5, #12
 800d16c:	bf38      	it	cc
 800d16e:	250c      	movcc	r5, #12
 800d170:	2d00      	cmp	r5, #0
 800d172:	4606      	mov	r6, r0
 800d174:	db01      	blt.n	800d17a <_malloc_r+0x1a>
 800d176:	42a9      	cmp	r1, r5
 800d178:	d903      	bls.n	800d182 <_malloc_r+0x22>
 800d17a:	230c      	movs	r3, #12
 800d17c:	6033      	str	r3, [r6, #0]
 800d17e:	2000      	movs	r0, #0
 800d180:	bd70      	pop	{r4, r5, r6, pc}
 800d182:	f000 f87f 	bl	800d284 <__malloc_lock>
 800d186:	4a21      	ldr	r2, [pc, #132]	; (800d20c <_malloc_r+0xac>)
 800d188:	6814      	ldr	r4, [r2, #0]
 800d18a:	4621      	mov	r1, r4
 800d18c:	b991      	cbnz	r1, 800d1b4 <_malloc_r+0x54>
 800d18e:	4c20      	ldr	r4, [pc, #128]	; (800d210 <_malloc_r+0xb0>)
 800d190:	6823      	ldr	r3, [r4, #0]
 800d192:	b91b      	cbnz	r3, 800d19c <_malloc_r+0x3c>
 800d194:	4630      	mov	r0, r6
 800d196:	f000 f83d 	bl	800d214 <_sbrk_r>
 800d19a:	6020      	str	r0, [r4, #0]
 800d19c:	4629      	mov	r1, r5
 800d19e:	4630      	mov	r0, r6
 800d1a0:	f000 f838 	bl	800d214 <_sbrk_r>
 800d1a4:	1c43      	adds	r3, r0, #1
 800d1a6:	d124      	bne.n	800d1f2 <_malloc_r+0x92>
 800d1a8:	230c      	movs	r3, #12
 800d1aa:	6033      	str	r3, [r6, #0]
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f000 f86a 	bl	800d286 <__malloc_unlock>
 800d1b2:	e7e4      	b.n	800d17e <_malloc_r+0x1e>
 800d1b4:	680b      	ldr	r3, [r1, #0]
 800d1b6:	1b5b      	subs	r3, r3, r5
 800d1b8:	d418      	bmi.n	800d1ec <_malloc_r+0x8c>
 800d1ba:	2b0b      	cmp	r3, #11
 800d1bc:	d90f      	bls.n	800d1de <_malloc_r+0x7e>
 800d1be:	600b      	str	r3, [r1, #0]
 800d1c0:	50cd      	str	r5, [r1, r3]
 800d1c2:	18cc      	adds	r4, r1, r3
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	f000 f85e 	bl	800d286 <__malloc_unlock>
 800d1ca:	f104 000b 	add.w	r0, r4, #11
 800d1ce:	1d23      	adds	r3, r4, #4
 800d1d0:	f020 0007 	bic.w	r0, r0, #7
 800d1d4:	1ac3      	subs	r3, r0, r3
 800d1d6:	d0d3      	beq.n	800d180 <_malloc_r+0x20>
 800d1d8:	425a      	negs	r2, r3
 800d1da:	50e2      	str	r2, [r4, r3]
 800d1dc:	e7d0      	b.n	800d180 <_malloc_r+0x20>
 800d1de:	428c      	cmp	r4, r1
 800d1e0:	684b      	ldr	r3, [r1, #4]
 800d1e2:	bf16      	itet	ne
 800d1e4:	6063      	strne	r3, [r4, #4]
 800d1e6:	6013      	streq	r3, [r2, #0]
 800d1e8:	460c      	movne	r4, r1
 800d1ea:	e7eb      	b.n	800d1c4 <_malloc_r+0x64>
 800d1ec:	460c      	mov	r4, r1
 800d1ee:	6849      	ldr	r1, [r1, #4]
 800d1f0:	e7cc      	b.n	800d18c <_malloc_r+0x2c>
 800d1f2:	1cc4      	adds	r4, r0, #3
 800d1f4:	f024 0403 	bic.w	r4, r4, #3
 800d1f8:	42a0      	cmp	r0, r4
 800d1fa:	d005      	beq.n	800d208 <_malloc_r+0xa8>
 800d1fc:	1a21      	subs	r1, r4, r0
 800d1fe:	4630      	mov	r0, r6
 800d200:	f000 f808 	bl	800d214 <_sbrk_r>
 800d204:	3001      	adds	r0, #1
 800d206:	d0cf      	beq.n	800d1a8 <_malloc_r+0x48>
 800d208:	6025      	str	r5, [r4, #0]
 800d20a:	e7db      	b.n	800d1c4 <_malloc_r+0x64>
 800d20c:	200004c4 	.word	0x200004c4
 800d210:	200004c8 	.word	0x200004c8

0800d214 <_sbrk_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4c06      	ldr	r4, [pc, #24]	; (800d230 <_sbrk_r+0x1c>)
 800d218:	2300      	movs	r3, #0
 800d21a:	4605      	mov	r5, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	6023      	str	r3, [r4, #0]
 800d220:	f7f3 fddc 	bl	8000ddc <_sbrk>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_sbrk_r+0x1a>
 800d228:	6823      	ldr	r3, [r4, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_sbrk_r+0x1a>
 800d22c:	602b      	str	r3, [r5, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	20002280 	.word	0x20002280

0800d234 <strcpy>:
 800d234:	4603      	mov	r3, r0
 800d236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d23a:	f803 2b01 	strb.w	r2, [r3], #1
 800d23e:	2a00      	cmp	r2, #0
 800d240:	d1f9      	bne.n	800d236 <strcpy+0x2>
 800d242:	4770      	bx	lr

0800d244 <_vsiprintf_r>:
 800d244:	b500      	push	{lr}
 800d246:	b09b      	sub	sp, #108	; 0x6c
 800d248:	9100      	str	r1, [sp, #0]
 800d24a:	9104      	str	r1, [sp, #16]
 800d24c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d250:	9105      	str	r1, [sp, #20]
 800d252:	9102      	str	r1, [sp, #8]
 800d254:	4905      	ldr	r1, [pc, #20]	; (800d26c <_vsiprintf_r+0x28>)
 800d256:	9103      	str	r1, [sp, #12]
 800d258:	4669      	mov	r1, sp
 800d25a:	f000 f86f 	bl	800d33c <_svfiprintf_r>
 800d25e:	9b00      	ldr	r3, [sp, #0]
 800d260:	2200      	movs	r2, #0
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	b01b      	add	sp, #108	; 0x6c
 800d266:	f85d fb04 	ldr.w	pc, [sp], #4
 800d26a:	bf00      	nop
 800d26c:	ffff0208 	.word	0xffff0208

0800d270 <vsiprintf>:
 800d270:	4613      	mov	r3, r2
 800d272:	460a      	mov	r2, r1
 800d274:	4601      	mov	r1, r0
 800d276:	4802      	ldr	r0, [pc, #8]	; (800d280 <vsiprintf+0x10>)
 800d278:	6800      	ldr	r0, [r0, #0]
 800d27a:	f7ff bfe3 	b.w	800d244 <_vsiprintf_r>
 800d27e:	bf00      	nop
 800d280:	2000043c 	.word	0x2000043c

0800d284 <__malloc_lock>:
 800d284:	4770      	bx	lr

0800d286 <__malloc_unlock>:
 800d286:	4770      	bx	lr

0800d288 <__ssputs_r>:
 800d288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	688e      	ldr	r6, [r1, #8]
 800d28e:	429e      	cmp	r6, r3
 800d290:	4682      	mov	sl, r0
 800d292:	460c      	mov	r4, r1
 800d294:	4690      	mov	r8, r2
 800d296:	4699      	mov	r9, r3
 800d298:	d837      	bhi.n	800d30a <__ssputs_r+0x82>
 800d29a:	898a      	ldrh	r2, [r1, #12]
 800d29c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d2a0:	d031      	beq.n	800d306 <__ssputs_r+0x7e>
 800d2a2:	6825      	ldr	r5, [r4, #0]
 800d2a4:	6909      	ldr	r1, [r1, #16]
 800d2a6:	1a6f      	subs	r7, r5, r1
 800d2a8:	6965      	ldr	r5, [r4, #20]
 800d2aa:	2302      	movs	r3, #2
 800d2ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2b0:	fb95 f5f3 	sdiv	r5, r5, r3
 800d2b4:	f109 0301 	add.w	r3, r9, #1
 800d2b8:	443b      	add	r3, r7
 800d2ba:	429d      	cmp	r5, r3
 800d2bc:	bf38      	it	cc
 800d2be:	461d      	movcc	r5, r3
 800d2c0:	0553      	lsls	r3, r2, #21
 800d2c2:	d530      	bpl.n	800d326 <__ssputs_r+0x9e>
 800d2c4:	4629      	mov	r1, r5
 800d2c6:	f7ff ff4b 	bl	800d160 <_malloc_r>
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	b950      	cbnz	r0, 800d2e4 <__ssputs_r+0x5c>
 800d2ce:	230c      	movs	r3, #12
 800d2d0:	f8ca 3000 	str.w	r3, [sl]
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2da:	81a3      	strh	r3, [r4, #12]
 800d2dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e4:	463a      	mov	r2, r7
 800d2e6:	6921      	ldr	r1, [r4, #16]
 800d2e8:	f7ff fed8 	bl	800d09c <memcpy>
 800d2ec:	89a3      	ldrh	r3, [r4, #12]
 800d2ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2f6:	81a3      	strh	r3, [r4, #12]
 800d2f8:	6126      	str	r6, [r4, #16]
 800d2fa:	6165      	str	r5, [r4, #20]
 800d2fc:	443e      	add	r6, r7
 800d2fe:	1bed      	subs	r5, r5, r7
 800d300:	6026      	str	r6, [r4, #0]
 800d302:	60a5      	str	r5, [r4, #8]
 800d304:	464e      	mov	r6, r9
 800d306:	454e      	cmp	r6, r9
 800d308:	d900      	bls.n	800d30c <__ssputs_r+0x84>
 800d30a:	464e      	mov	r6, r9
 800d30c:	4632      	mov	r2, r6
 800d30e:	4641      	mov	r1, r8
 800d310:	6820      	ldr	r0, [r4, #0]
 800d312:	f000 fa93 	bl	800d83c <memmove>
 800d316:	68a3      	ldr	r3, [r4, #8]
 800d318:	1b9b      	subs	r3, r3, r6
 800d31a:	60a3      	str	r3, [r4, #8]
 800d31c:	6823      	ldr	r3, [r4, #0]
 800d31e:	441e      	add	r6, r3
 800d320:	6026      	str	r6, [r4, #0]
 800d322:	2000      	movs	r0, #0
 800d324:	e7dc      	b.n	800d2e0 <__ssputs_r+0x58>
 800d326:	462a      	mov	r2, r5
 800d328:	f000 faa1 	bl	800d86e <_realloc_r>
 800d32c:	4606      	mov	r6, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	d1e2      	bne.n	800d2f8 <__ssputs_r+0x70>
 800d332:	6921      	ldr	r1, [r4, #16]
 800d334:	4650      	mov	r0, sl
 800d336:	f7ff fec5 	bl	800d0c4 <_free_r>
 800d33a:	e7c8      	b.n	800d2ce <__ssputs_r+0x46>

0800d33c <_svfiprintf_r>:
 800d33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d340:	461d      	mov	r5, r3
 800d342:	898b      	ldrh	r3, [r1, #12]
 800d344:	061f      	lsls	r7, r3, #24
 800d346:	b09d      	sub	sp, #116	; 0x74
 800d348:	4680      	mov	r8, r0
 800d34a:	460c      	mov	r4, r1
 800d34c:	4616      	mov	r6, r2
 800d34e:	d50f      	bpl.n	800d370 <_svfiprintf_r+0x34>
 800d350:	690b      	ldr	r3, [r1, #16]
 800d352:	b96b      	cbnz	r3, 800d370 <_svfiprintf_r+0x34>
 800d354:	2140      	movs	r1, #64	; 0x40
 800d356:	f7ff ff03 	bl	800d160 <_malloc_r>
 800d35a:	6020      	str	r0, [r4, #0]
 800d35c:	6120      	str	r0, [r4, #16]
 800d35e:	b928      	cbnz	r0, 800d36c <_svfiprintf_r+0x30>
 800d360:	230c      	movs	r3, #12
 800d362:	f8c8 3000 	str.w	r3, [r8]
 800d366:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d36a:	e0c8      	b.n	800d4fe <_svfiprintf_r+0x1c2>
 800d36c:	2340      	movs	r3, #64	; 0x40
 800d36e:	6163      	str	r3, [r4, #20]
 800d370:	2300      	movs	r3, #0
 800d372:	9309      	str	r3, [sp, #36]	; 0x24
 800d374:	2320      	movs	r3, #32
 800d376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d37a:	2330      	movs	r3, #48	; 0x30
 800d37c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d380:	9503      	str	r5, [sp, #12]
 800d382:	f04f 0b01 	mov.w	fp, #1
 800d386:	4637      	mov	r7, r6
 800d388:	463d      	mov	r5, r7
 800d38a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d38e:	b10b      	cbz	r3, 800d394 <_svfiprintf_r+0x58>
 800d390:	2b25      	cmp	r3, #37	; 0x25
 800d392:	d13e      	bne.n	800d412 <_svfiprintf_r+0xd6>
 800d394:	ebb7 0a06 	subs.w	sl, r7, r6
 800d398:	d00b      	beq.n	800d3b2 <_svfiprintf_r+0x76>
 800d39a:	4653      	mov	r3, sl
 800d39c:	4632      	mov	r2, r6
 800d39e:	4621      	mov	r1, r4
 800d3a0:	4640      	mov	r0, r8
 800d3a2:	f7ff ff71 	bl	800d288 <__ssputs_r>
 800d3a6:	3001      	adds	r0, #1
 800d3a8:	f000 80a4 	beq.w	800d4f4 <_svfiprintf_r+0x1b8>
 800d3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3ae:	4453      	add	r3, sl
 800d3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800d3b2:	783b      	ldrb	r3, [r7, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f000 809d 	beq.w	800d4f4 <_svfiprintf_r+0x1b8>
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3c4:	9304      	str	r3, [sp, #16]
 800d3c6:	9307      	str	r3, [sp, #28]
 800d3c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3cc:	931a      	str	r3, [sp, #104]	; 0x68
 800d3ce:	462f      	mov	r7, r5
 800d3d0:	2205      	movs	r2, #5
 800d3d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d3d6:	4850      	ldr	r0, [pc, #320]	; (800d518 <_svfiprintf_r+0x1dc>)
 800d3d8:	f7f2 ff0a 	bl	80001f0 <memchr>
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	b9d0      	cbnz	r0, 800d416 <_svfiprintf_r+0xda>
 800d3e0:	06d9      	lsls	r1, r3, #27
 800d3e2:	bf44      	itt	mi
 800d3e4:	2220      	movmi	r2, #32
 800d3e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3ea:	071a      	lsls	r2, r3, #28
 800d3ec:	bf44      	itt	mi
 800d3ee:	222b      	movmi	r2, #43	; 0x2b
 800d3f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3f4:	782a      	ldrb	r2, [r5, #0]
 800d3f6:	2a2a      	cmp	r2, #42	; 0x2a
 800d3f8:	d015      	beq.n	800d426 <_svfiprintf_r+0xea>
 800d3fa:	9a07      	ldr	r2, [sp, #28]
 800d3fc:	462f      	mov	r7, r5
 800d3fe:	2000      	movs	r0, #0
 800d400:	250a      	movs	r5, #10
 800d402:	4639      	mov	r1, r7
 800d404:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d408:	3b30      	subs	r3, #48	; 0x30
 800d40a:	2b09      	cmp	r3, #9
 800d40c:	d94d      	bls.n	800d4aa <_svfiprintf_r+0x16e>
 800d40e:	b1b8      	cbz	r0, 800d440 <_svfiprintf_r+0x104>
 800d410:	e00f      	b.n	800d432 <_svfiprintf_r+0xf6>
 800d412:	462f      	mov	r7, r5
 800d414:	e7b8      	b.n	800d388 <_svfiprintf_r+0x4c>
 800d416:	4a40      	ldr	r2, [pc, #256]	; (800d518 <_svfiprintf_r+0x1dc>)
 800d418:	1a80      	subs	r0, r0, r2
 800d41a:	fa0b f000 	lsl.w	r0, fp, r0
 800d41e:	4318      	orrs	r0, r3
 800d420:	9004      	str	r0, [sp, #16]
 800d422:	463d      	mov	r5, r7
 800d424:	e7d3      	b.n	800d3ce <_svfiprintf_r+0x92>
 800d426:	9a03      	ldr	r2, [sp, #12]
 800d428:	1d11      	adds	r1, r2, #4
 800d42a:	6812      	ldr	r2, [r2, #0]
 800d42c:	9103      	str	r1, [sp, #12]
 800d42e:	2a00      	cmp	r2, #0
 800d430:	db01      	blt.n	800d436 <_svfiprintf_r+0xfa>
 800d432:	9207      	str	r2, [sp, #28]
 800d434:	e004      	b.n	800d440 <_svfiprintf_r+0x104>
 800d436:	4252      	negs	r2, r2
 800d438:	f043 0302 	orr.w	r3, r3, #2
 800d43c:	9207      	str	r2, [sp, #28]
 800d43e:	9304      	str	r3, [sp, #16]
 800d440:	783b      	ldrb	r3, [r7, #0]
 800d442:	2b2e      	cmp	r3, #46	; 0x2e
 800d444:	d10c      	bne.n	800d460 <_svfiprintf_r+0x124>
 800d446:	787b      	ldrb	r3, [r7, #1]
 800d448:	2b2a      	cmp	r3, #42	; 0x2a
 800d44a:	d133      	bne.n	800d4b4 <_svfiprintf_r+0x178>
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	1d1a      	adds	r2, r3, #4
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	9203      	str	r2, [sp, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	bfb8      	it	lt
 800d458:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d45c:	3702      	adds	r7, #2
 800d45e:	9305      	str	r3, [sp, #20]
 800d460:	4d2e      	ldr	r5, [pc, #184]	; (800d51c <_svfiprintf_r+0x1e0>)
 800d462:	7839      	ldrb	r1, [r7, #0]
 800d464:	2203      	movs	r2, #3
 800d466:	4628      	mov	r0, r5
 800d468:	f7f2 fec2 	bl	80001f0 <memchr>
 800d46c:	b138      	cbz	r0, 800d47e <_svfiprintf_r+0x142>
 800d46e:	2340      	movs	r3, #64	; 0x40
 800d470:	1b40      	subs	r0, r0, r5
 800d472:	fa03 f000 	lsl.w	r0, r3, r0
 800d476:	9b04      	ldr	r3, [sp, #16]
 800d478:	4303      	orrs	r3, r0
 800d47a:	3701      	adds	r7, #1
 800d47c:	9304      	str	r3, [sp, #16]
 800d47e:	7839      	ldrb	r1, [r7, #0]
 800d480:	4827      	ldr	r0, [pc, #156]	; (800d520 <_svfiprintf_r+0x1e4>)
 800d482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d486:	2206      	movs	r2, #6
 800d488:	1c7e      	adds	r6, r7, #1
 800d48a:	f7f2 feb1 	bl	80001f0 <memchr>
 800d48e:	2800      	cmp	r0, #0
 800d490:	d038      	beq.n	800d504 <_svfiprintf_r+0x1c8>
 800d492:	4b24      	ldr	r3, [pc, #144]	; (800d524 <_svfiprintf_r+0x1e8>)
 800d494:	bb13      	cbnz	r3, 800d4dc <_svfiprintf_r+0x1a0>
 800d496:	9b03      	ldr	r3, [sp, #12]
 800d498:	3307      	adds	r3, #7
 800d49a:	f023 0307 	bic.w	r3, r3, #7
 800d49e:	3308      	adds	r3, #8
 800d4a0:	9303      	str	r3, [sp, #12]
 800d4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a4:	444b      	add	r3, r9
 800d4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800d4a8:	e76d      	b.n	800d386 <_svfiprintf_r+0x4a>
 800d4aa:	fb05 3202 	mla	r2, r5, r2, r3
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	460f      	mov	r7, r1
 800d4b2:	e7a6      	b.n	800d402 <_svfiprintf_r+0xc6>
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	3701      	adds	r7, #1
 800d4b8:	9305      	str	r3, [sp, #20]
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	250a      	movs	r5, #10
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4c4:	3a30      	subs	r2, #48	; 0x30
 800d4c6:	2a09      	cmp	r2, #9
 800d4c8:	d903      	bls.n	800d4d2 <_svfiprintf_r+0x196>
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d0c8      	beq.n	800d460 <_svfiprintf_r+0x124>
 800d4ce:	9105      	str	r1, [sp, #20]
 800d4d0:	e7c6      	b.n	800d460 <_svfiprintf_r+0x124>
 800d4d2:	fb05 2101 	mla	r1, r5, r1, r2
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	4607      	mov	r7, r0
 800d4da:	e7f0      	b.n	800d4be <_svfiprintf_r+0x182>
 800d4dc:	ab03      	add	r3, sp, #12
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	4622      	mov	r2, r4
 800d4e2:	4b11      	ldr	r3, [pc, #68]	; (800d528 <_svfiprintf_r+0x1ec>)
 800d4e4:	a904      	add	r1, sp, #16
 800d4e6:	4640      	mov	r0, r8
 800d4e8:	f3af 8000 	nop.w
 800d4ec:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d4f0:	4681      	mov	r9, r0
 800d4f2:	d1d6      	bne.n	800d4a2 <_svfiprintf_r+0x166>
 800d4f4:	89a3      	ldrh	r3, [r4, #12]
 800d4f6:	065b      	lsls	r3, r3, #25
 800d4f8:	f53f af35 	bmi.w	800d366 <_svfiprintf_r+0x2a>
 800d4fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4fe:	b01d      	add	sp, #116	; 0x74
 800d500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d504:	ab03      	add	r3, sp, #12
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	4622      	mov	r2, r4
 800d50a:	4b07      	ldr	r3, [pc, #28]	; (800d528 <_svfiprintf_r+0x1ec>)
 800d50c:	a904      	add	r1, sp, #16
 800d50e:	4640      	mov	r0, r8
 800d510:	f000 f882 	bl	800d618 <_printf_i>
 800d514:	e7ea      	b.n	800d4ec <_svfiprintf_r+0x1b0>
 800d516:	bf00      	nop
 800d518:	0800dfcc 	.word	0x0800dfcc
 800d51c:	0800dfd2 	.word	0x0800dfd2
 800d520:	0800dfd6 	.word	0x0800dfd6
 800d524:	00000000 	.word	0x00000000
 800d528:	0800d289 	.word	0x0800d289

0800d52c <_printf_common>:
 800d52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d530:	4691      	mov	r9, r2
 800d532:	461f      	mov	r7, r3
 800d534:	688a      	ldr	r2, [r1, #8]
 800d536:	690b      	ldr	r3, [r1, #16]
 800d538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d53c:	4293      	cmp	r3, r2
 800d53e:	bfb8      	it	lt
 800d540:	4613      	movlt	r3, r2
 800d542:	f8c9 3000 	str.w	r3, [r9]
 800d546:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d54a:	4606      	mov	r6, r0
 800d54c:	460c      	mov	r4, r1
 800d54e:	b112      	cbz	r2, 800d556 <_printf_common+0x2a>
 800d550:	3301      	adds	r3, #1
 800d552:	f8c9 3000 	str.w	r3, [r9]
 800d556:	6823      	ldr	r3, [r4, #0]
 800d558:	0699      	lsls	r1, r3, #26
 800d55a:	bf42      	ittt	mi
 800d55c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d560:	3302      	addmi	r3, #2
 800d562:	f8c9 3000 	strmi.w	r3, [r9]
 800d566:	6825      	ldr	r5, [r4, #0]
 800d568:	f015 0506 	ands.w	r5, r5, #6
 800d56c:	d107      	bne.n	800d57e <_printf_common+0x52>
 800d56e:	f104 0a19 	add.w	sl, r4, #25
 800d572:	68e3      	ldr	r3, [r4, #12]
 800d574:	f8d9 2000 	ldr.w	r2, [r9]
 800d578:	1a9b      	subs	r3, r3, r2
 800d57a:	42ab      	cmp	r3, r5
 800d57c:	dc28      	bgt.n	800d5d0 <_printf_common+0xa4>
 800d57e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d582:	6822      	ldr	r2, [r4, #0]
 800d584:	3300      	adds	r3, #0
 800d586:	bf18      	it	ne
 800d588:	2301      	movne	r3, #1
 800d58a:	0692      	lsls	r2, r2, #26
 800d58c:	d42d      	bmi.n	800d5ea <_printf_common+0xbe>
 800d58e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d592:	4639      	mov	r1, r7
 800d594:	4630      	mov	r0, r6
 800d596:	47c0      	blx	r8
 800d598:	3001      	adds	r0, #1
 800d59a:	d020      	beq.n	800d5de <_printf_common+0xb2>
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	68e5      	ldr	r5, [r4, #12]
 800d5a0:	f8d9 2000 	ldr.w	r2, [r9]
 800d5a4:	f003 0306 	and.w	r3, r3, #6
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	bf08      	it	eq
 800d5ac:	1aad      	subeq	r5, r5, r2
 800d5ae:	68a3      	ldr	r3, [r4, #8]
 800d5b0:	6922      	ldr	r2, [r4, #16]
 800d5b2:	bf0c      	ite	eq
 800d5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5b8:	2500      	movne	r5, #0
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	bfc4      	itt	gt
 800d5be:	1a9b      	subgt	r3, r3, r2
 800d5c0:	18ed      	addgt	r5, r5, r3
 800d5c2:	f04f 0900 	mov.w	r9, #0
 800d5c6:	341a      	adds	r4, #26
 800d5c8:	454d      	cmp	r5, r9
 800d5ca:	d11a      	bne.n	800d602 <_printf_common+0xd6>
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	e008      	b.n	800d5e2 <_printf_common+0xb6>
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	4652      	mov	r2, sl
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	47c0      	blx	r8
 800d5da:	3001      	adds	r0, #1
 800d5dc:	d103      	bne.n	800d5e6 <_printf_common+0xba>
 800d5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5e6:	3501      	adds	r5, #1
 800d5e8:	e7c3      	b.n	800d572 <_printf_common+0x46>
 800d5ea:	18e1      	adds	r1, r4, r3
 800d5ec:	1c5a      	adds	r2, r3, #1
 800d5ee:	2030      	movs	r0, #48	; 0x30
 800d5f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5f4:	4422      	add	r2, r4
 800d5f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5fe:	3302      	adds	r3, #2
 800d600:	e7c5      	b.n	800d58e <_printf_common+0x62>
 800d602:	2301      	movs	r3, #1
 800d604:	4622      	mov	r2, r4
 800d606:	4639      	mov	r1, r7
 800d608:	4630      	mov	r0, r6
 800d60a:	47c0      	blx	r8
 800d60c:	3001      	adds	r0, #1
 800d60e:	d0e6      	beq.n	800d5de <_printf_common+0xb2>
 800d610:	f109 0901 	add.w	r9, r9, #1
 800d614:	e7d8      	b.n	800d5c8 <_printf_common+0x9c>
	...

0800d618 <_printf_i>:
 800d618:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d61c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d620:	460c      	mov	r4, r1
 800d622:	7e09      	ldrb	r1, [r1, #24]
 800d624:	b085      	sub	sp, #20
 800d626:	296e      	cmp	r1, #110	; 0x6e
 800d628:	4617      	mov	r7, r2
 800d62a:	4606      	mov	r6, r0
 800d62c:	4698      	mov	r8, r3
 800d62e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d630:	f000 80b3 	beq.w	800d79a <_printf_i+0x182>
 800d634:	d822      	bhi.n	800d67c <_printf_i+0x64>
 800d636:	2963      	cmp	r1, #99	; 0x63
 800d638:	d036      	beq.n	800d6a8 <_printf_i+0x90>
 800d63a:	d80a      	bhi.n	800d652 <_printf_i+0x3a>
 800d63c:	2900      	cmp	r1, #0
 800d63e:	f000 80b9 	beq.w	800d7b4 <_printf_i+0x19c>
 800d642:	2958      	cmp	r1, #88	; 0x58
 800d644:	f000 8083 	beq.w	800d74e <_printf_i+0x136>
 800d648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d64c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d650:	e032      	b.n	800d6b8 <_printf_i+0xa0>
 800d652:	2964      	cmp	r1, #100	; 0x64
 800d654:	d001      	beq.n	800d65a <_printf_i+0x42>
 800d656:	2969      	cmp	r1, #105	; 0x69
 800d658:	d1f6      	bne.n	800d648 <_printf_i+0x30>
 800d65a:	6820      	ldr	r0, [r4, #0]
 800d65c:	6813      	ldr	r3, [r2, #0]
 800d65e:	0605      	lsls	r5, r0, #24
 800d660:	f103 0104 	add.w	r1, r3, #4
 800d664:	d52a      	bpl.n	800d6bc <_printf_i+0xa4>
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6011      	str	r1, [r2, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	da03      	bge.n	800d676 <_printf_i+0x5e>
 800d66e:	222d      	movs	r2, #45	; 0x2d
 800d670:	425b      	negs	r3, r3
 800d672:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d676:	486f      	ldr	r0, [pc, #444]	; (800d834 <_printf_i+0x21c>)
 800d678:	220a      	movs	r2, #10
 800d67a:	e039      	b.n	800d6f0 <_printf_i+0xd8>
 800d67c:	2973      	cmp	r1, #115	; 0x73
 800d67e:	f000 809d 	beq.w	800d7bc <_printf_i+0x1a4>
 800d682:	d808      	bhi.n	800d696 <_printf_i+0x7e>
 800d684:	296f      	cmp	r1, #111	; 0x6f
 800d686:	d020      	beq.n	800d6ca <_printf_i+0xb2>
 800d688:	2970      	cmp	r1, #112	; 0x70
 800d68a:	d1dd      	bne.n	800d648 <_printf_i+0x30>
 800d68c:	6823      	ldr	r3, [r4, #0]
 800d68e:	f043 0320 	orr.w	r3, r3, #32
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	e003      	b.n	800d69e <_printf_i+0x86>
 800d696:	2975      	cmp	r1, #117	; 0x75
 800d698:	d017      	beq.n	800d6ca <_printf_i+0xb2>
 800d69a:	2978      	cmp	r1, #120	; 0x78
 800d69c:	d1d4      	bne.n	800d648 <_printf_i+0x30>
 800d69e:	2378      	movs	r3, #120	; 0x78
 800d6a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d6a4:	4864      	ldr	r0, [pc, #400]	; (800d838 <_printf_i+0x220>)
 800d6a6:	e055      	b.n	800d754 <_printf_i+0x13c>
 800d6a8:	6813      	ldr	r3, [r2, #0]
 800d6aa:	1d19      	adds	r1, r3, #4
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	6011      	str	r1, [r2, #0]
 800d6b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e08c      	b.n	800d7d6 <_printf_i+0x1be>
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	6011      	str	r1, [r2, #0]
 800d6c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6c4:	bf18      	it	ne
 800d6c6:	b21b      	sxthne	r3, r3
 800d6c8:	e7cf      	b.n	800d66a <_printf_i+0x52>
 800d6ca:	6813      	ldr	r3, [r2, #0]
 800d6cc:	6825      	ldr	r5, [r4, #0]
 800d6ce:	1d18      	adds	r0, r3, #4
 800d6d0:	6010      	str	r0, [r2, #0]
 800d6d2:	0628      	lsls	r0, r5, #24
 800d6d4:	d501      	bpl.n	800d6da <_printf_i+0xc2>
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	e002      	b.n	800d6e0 <_printf_i+0xc8>
 800d6da:	0668      	lsls	r0, r5, #25
 800d6dc:	d5fb      	bpl.n	800d6d6 <_printf_i+0xbe>
 800d6de:	881b      	ldrh	r3, [r3, #0]
 800d6e0:	4854      	ldr	r0, [pc, #336]	; (800d834 <_printf_i+0x21c>)
 800d6e2:	296f      	cmp	r1, #111	; 0x6f
 800d6e4:	bf14      	ite	ne
 800d6e6:	220a      	movne	r2, #10
 800d6e8:	2208      	moveq	r2, #8
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6f0:	6865      	ldr	r5, [r4, #4]
 800d6f2:	60a5      	str	r5, [r4, #8]
 800d6f4:	2d00      	cmp	r5, #0
 800d6f6:	f2c0 8095 	blt.w	800d824 <_printf_i+0x20c>
 800d6fa:	6821      	ldr	r1, [r4, #0]
 800d6fc:	f021 0104 	bic.w	r1, r1, #4
 800d700:	6021      	str	r1, [r4, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d13d      	bne.n	800d782 <_printf_i+0x16a>
 800d706:	2d00      	cmp	r5, #0
 800d708:	f040 808e 	bne.w	800d828 <_printf_i+0x210>
 800d70c:	4665      	mov	r5, ip
 800d70e:	2a08      	cmp	r2, #8
 800d710:	d10b      	bne.n	800d72a <_printf_i+0x112>
 800d712:	6823      	ldr	r3, [r4, #0]
 800d714:	07db      	lsls	r3, r3, #31
 800d716:	d508      	bpl.n	800d72a <_printf_i+0x112>
 800d718:	6923      	ldr	r3, [r4, #16]
 800d71a:	6862      	ldr	r2, [r4, #4]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	bfde      	ittt	le
 800d720:	2330      	movle	r3, #48	; 0x30
 800d722:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d726:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d72a:	ebac 0305 	sub.w	r3, ip, r5
 800d72e:	6123      	str	r3, [r4, #16]
 800d730:	f8cd 8000 	str.w	r8, [sp]
 800d734:	463b      	mov	r3, r7
 800d736:	aa03      	add	r2, sp, #12
 800d738:	4621      	mov	r1, r4
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7ff fef6 	bl	800d52c <_printf_common>
 800d740:	3001      	adds	r0, #1
 800d742:	d14d      	bne.n	800d7e0 <_printf_i+0x1c8>
 800d744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d748:	b005      	add	sp, #20
 800d74a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d74e:	4839      	ldr	r0, [pc, #228]	; (800d834 <_printf_i+0x21c>)
 800d750:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d754:	6813      	ldr	r3, [r2, #0]
 800d756:	6821      	ldr	r1, [r4, #0]
 800d758:	1d1d      	adds	r5, r3, #4
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	6015      	str	r5, [r2, #0]
 800d75e:	060a      	lsls	r2, r1, #24
 800d760:	d50b      	bpl.n	800d77a <_printf_i+0x162>
 800d762:	07ca      	lsls	r2, r1, #31
 800d764:	bf44      	itt	mi
 800d766:	f041 0120 	orrmi.w	r1, r1, #32
 800d76a:	6021      	strmi	r1, [r4, #0]
 800d76c:	b91b      	cbnz	r3, 800d776 <_printf_i+0x15e>
 800d76e:	6822      	ldr	r2, [r4, #0]
 800d770:	f022 0220 	bic.w	r2, r2, #32
 800d774:	6022      	str	r2, [r4, #0]
 800d776:	2210      	movs	r2, #16
 800d778:	e7b7      	b.n	800d6ea <_printf_i+0xd2>
 800d77a:	064d      	lsls	r5, r1, #25
 800d77c:	bf48      	it	mi
 800d77e:	b29b      	uxthmi	r3, r3
 800d780:	e7ef      	b.n	800d762 <_printf_i+0x14a>
 800d782:	4665      	mov	r5, ip
 800d784:	fbb3 f1f2 	udiv	r1, r3, r2
 800d788:	fb02 3311 	mls	r3, r2, r1, r3
 800d78c:	5cc3      	ldrb	r3, [r0, r3]
 800d78e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d792:	460b      	mov	r3, r1
 800d794:	2900      	cmp	r1, #0
 800d796:	d1f5      	bne.n	800d784 <_printf_i+0x16c>
 800d798:	e7b9      	b.n	800d70e <_printf_i+0xf6>
 800d79a:	6813      	ldr	r3, [r2, #0]
 800d79c:	6825      	ldr	r5, [r4, #0]
 800d79e:	6961      	ldr	r1, [r4, #20]
 800d7a0:	1d18      	adds	r0, r3, #4
 800d7a2:	6010      	str	r0, [r2, #0]
 800d7a4:	0628      	lsls	r0, r5, #24
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	d501      	bpl.n	800d7ae <_printf_i+0x196>
 800d7aa:	6019      	str	r1, [r3, #0]
 800d7ac:	e002      	b.n	800d7b4 <_printf_i+0x19c>
 800d7ae:	066a      	lsls	r2, r5, #25
 800d7b0:	d5fb      	bpl.n	800d7aa <_printf_i+0x192>
 800d7b2:	8019      	strh	r1, [r3, #0]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	6123      	str	r3, [r4, #16]
 800d7b8:	4665      	mov	r5, ip
 800d7ba:	e7b9      	b.n	800d730 <_printf_i+0x118>
 800d7bc:	6813      	ldr	r3, [r2, #0]
 800d7be:	1d19      	adds	r1, r3, #4
 800d7c0:	6011      	str	r1, [r2, #0]
 800d7c2:	681d      	ldr	r5, [r3, #0]
 800d7c4:	6862      	ldr	r2, [r4, #4]
 800d7c6:	2100      	movs	r1, #0
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	f7f2 fd11 	bl	80001f0 <memchr>
 800d7ce:	b108      	cbz	r0, 800d7d4 <_printf_i+0x1bc>
 800d7d0:	1b40      	subs	r0, r0, r5
 800d7d2:	6060      	str	r0, [r4, #4]
 800d7d4:	6863      	ldr	r3, [r4, #4]
 800d7d6:	6123      	str	r3, [r4, #16]
 800d7d8:	2300      	movs	r3, #0
 800d7da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7de:	e7a7      	b.n	800d730 <_printf_i+0x118>
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	462a      	mov	r2, r5
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	47c0      	blx	r8
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	d0aa      	beq.n	800d744 <_printf_i+0x12c>
 800d7ee:	6823      	ldr	r3, [r4, #0]
 800d7f0:	079b      	lsls	r3, r3, #30
 800d7f2:	d413      	bmi.n	800d81c <_printf_i+0x204>
 800d7f4:	68e0      	ldr	r0, [r4, #12]
 800d7f6:	9b03      	ldr	r3, [sp, #12]
 800d7f8:	4298      	cmp	r0, r3
 800d7fa:	bfb8      	it	lt
 800d7fc:	4618      	movlt	r0, r3
 800d7fe:	e7a3      	b.n	800d748 <_printf_i+0x130>
 800d800:	2301      	movs	r3, #1
 800d802:	464a      	mov	r2, r9
 800d804:	4639      	mov	r1, r7
 800d806:	4630      	mov	r0, r6
 800d808:	47c0      	blx	r8
 800d80a:	3001      	adds	r0, #1
 800d80c:	d09a      	beq.n	800d744 <_printf_i+0x12c>
 800d80e:	3501      	adds	r5, #1
 800d810:	68e3      	ldr	r3, [r4, #12]
 800d812:	9a03      	ldr	r2, [sp, #12]
 800d814:	1a9b      	subs	r3, r3, r2
 800d816:	42ab      	cmp	r3, r5
 800d818:	dcf2      	bgt.n	800d800 <_printf_i+0x1e8>
 800d81a:	e7eb      	b.n	800d7f4 <_printf_i+0x1dc>
 800d81c:	2500      	movs	r5, #0
 800d81e:	f104 0919 	add.w	r9, r4, #25
 800d822:	e7f5      	b.n	800d810 <_printf_i+0x1f8>
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1ac      	bne.n	800d782 <_printf_i+0x16a>
 800d828:	7803      	ldrb	r3, [r0, #0]
 800d82a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d82e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d832:	e76c      	b.n	800d70e <_printf_i+0xf6>
 800d834:	0800dfdd 	.word	0x0800dfdd
 800d838:	0800dfee 	.word	0x0800dfee

0800d83c <memmove>:
 800d83c:	4288      	cmp	r0, r1
 800d83e:	b510      	push	{r4, lr}
 800d840:	eb01 0302 	add.w	r3, r1, r2
 800d844:	d807      	bhi.n	800d856 <memmove+0x1a>
 800d846:	1e42      	subs	r2, r0, #1
 800d848:	4299      	cmp	r1, r3
 800d84a:	d00a      	beq.n	800d862 <memmove+0x26>
 800d84c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d850:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d854:	e7f8      	b.n	800d848 <memmove+0xc>
 800d856:	4283      	cmp	r3, r0
 800d858:	d9f5      	bls.n	800d846 <memmove+0xa>
 800d85a:	1881      	adds	r1, r0, r2
 800d85c:	1ad2      	subs	r2, r2, r3
 800d85e:	42d3      	cmn	r3, r2
 800d860:	d100      	bne.n	800d864 <memmove+0x28>
 800d862:	bd10      	pop	{r4, pc}
 800d864:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d868:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d86c:	e7f7      	b.n	800d85e <memmove+0x22>

0800d86e <_realloc_r>:
 800d86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d870:	4607      	mov	r7, r0
 800d872:	4614      	mov	r4, r2
 800d874:	460e      	mov	r6, r1
 800d876:	b921      	cbnz	r1, 800d882 <_realloc_r+0x14>
 800d878:	4611      	mov	r1, r2
 800d87a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d87e:	f7ff bc6f 	b.w	800d160 <_malloc_r>
 800d882:	b922      	cbnz	r2, 800d88e <_realloc_r+0x20>
 800d884:	f7ff fc1e 	bl	800d0c4 <_free_r>
 800d888:	4625      	mov	r5, r4
 800d88a:	4628      	mov	r0, r5
 800d88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d88e:	f000 f814 	bl	800d8ba <_malloc_usable_size_r>
 800d892:	42a0      	cmp	r0, r4
 800d894:	d20f      	bcs.n	800d8b6 <_realloc_r+0x48>
 800d896:	4621      	mov	r1, r4
 800d898:	4638      	mov	r0, r7
 800d89a:	f7ff fc61 	bl	800d160 <_malloc_r>
 800d89e:	4605      	mov	r5, r0
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d0f2      	beq.n	800d88a <_realloc_r+0x1c>
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4622      	mov	r2, r4
 800d8a8:	f7ff fbf8 	bl	800d09c <memcpy>
 800d8ac:	4631      	mov	r1, r6
 800d8ae:	4638      	mov	r0, r7
 800d8b0:	f7ff fc08 	bl	800d0c4 <_free_r>
 800d8b4:	e7e9      	b.n	800d88a <_realloc_r+0x1c>
 800d8b6:	4635      	mov	r5, r6
 800d8b8:	e7e7      	b.n	800d88a <_realloc_r+0x1c>

0800d8ba <_malloc_usable_size_r>:
 800d8ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8be:	1f18      	subs	r0, r3, #4
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	bfbc      	itt	lt
 800d8c4:	580b      	ldrlt	r3, [r1, r0]
 800d8c6:	18c0      	addlt	r0, r0, r3
 800d8c8:	4770      	bx	lr
	...

0800d8cc <_init>:
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	bf00      	nop
 800d8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8d2:	bc08      	pop	{r3}
 800d8d4:	469e      	mov	lr, r3
 800d8d6:	4770      	bx	lr

0800d8d8 <_fini>:
 800d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8da:	bf00      	nop
 800d8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8de:	bc08      	pop	{r3}
 800d8e0:	469e      	mov	lr, r3
 800d8e2:	4770      	bx	lr
