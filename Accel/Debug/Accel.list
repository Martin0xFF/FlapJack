
Accel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084fc  080084fc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  080084fc  080084fc  000184fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008504  08008504  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008504  08008504  00018504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008508  08008508  00018508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800850c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de0  200001e8  080086f4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fc8  080086f4  00021fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c590  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003424  00000000  00000000  0003c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e0  00000000  00000000  00040f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019cbe  00000000  00000000  000420e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011331  00000000  00000000  0005bd9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009108e  00000000  00000000  0006d0cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000fe15d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005418  00000000  00000000  000fe1d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008428 	.word	0x08008428

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	08008428 	.word	0x08008428

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <cdc_printf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t msg[1024];

void cdc_printf(const char * fmt, ...){
 8000590:	b40f      	push	{r0, r1, r2, r3}
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
	// Make a simple function to print to usb
	va_list args;
	va_start(args, fmt);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	607b      	str	r3, [r7, #4]
    vsprintf((char *)msg, fmt, args);
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	6939      	ldr	r1, [r7, #16]
 80005a2:	480a      	ldr	r0, [pc, #40]	; (80005cc <cdc_printf+0x3c>)
 80005a4:	f007 fc08 	bl	8007db8 <vsiprintf>
	va_end(args);
	CDC_Transmit_FS(msg, strlen((char *)msg));HAL_Delay(100); // We need to add a little delay or else the databuffer gets overwritten
 80005a8:	4808      	ldr	r0, [pc, #32]	; (80005cc <cdc_printf+0x3c>)
 80005aa:	f7ff fe19 	bl	80001e0 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4619      	mov	r1, r3
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <cdc_printf+0x3c>)
 80005b4:	f006 feb8 	bl	8007328 <CDC_Transmit_FS>
 80005b8:	2064      	movs	r0, #100	; 0x64
 80005ba:	f000 fc3f 	bl	8000e3c <HAL_Delay>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c8:	b004      	add	sp, #16
 80005ca:	4770      	bx	lr
 80005cc:	20000268 	.word	0x20000268

080005d0 <ag_set_acel_config>:

int ag_get_gyro_config(uint16_t dev_addr, uint8_t *config){
	return HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, MPU_GCF, 1, config, 1, HAL_MAX_DELAY);
}

int ag_set_acel_config(uint16_t dev_addr, uint8_t *config){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af04      	add	r7, sp, #16
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	80fb      	strh	r3, [r7, #6]
	// for more info

	// Set scale on bits 4 and bits 3
	// 0:2g, 1:4g, 2:8g, 3:16g[m/(s^2)] See data sheet for more info
	// Bits 2-0 Don't matter
	return HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, MPU_ACF, 1, config, 1, HAL_MAX_DELAY);
 80005dc:	88fb      	ldrh	r3, [r7, #6]
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	b299      	uxth	r1, r3
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	2301      	movs	r3, #1
 80005ea:	9301      	str	r3, [sp, #4]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	2301      	movs	r3, #1
 80005f2:	221c      	movs	r2, #28
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <ag_set_acel_config+0x34>)
 80005f6:	f001 f80f 	bl	8001618 <HAL_I2C_Mem_Write>
 80005fa:	4603      	mov	r3, r0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000214 	.word	0x20000214

08000608 <ag_get_data>:
int ag_get_acel_config(uint16_t dev_addr, uint8_t *config){
	return HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, MPU_ACF, 1, config, 1, HAL_MAX_DELAY);
}


int ag_get_data(uint16_t dev_addr, int16_t *x, int16_t *y, int16_t *z, int16_t *t, int16_t *a, int16_t *b, int16_t *g){
 8000608:	b580      	push	{r7, lr}
 800060a:	b08c      	sub	sp, #48	; 0x30
 800060c:	af04      	add	r7, sp, #16
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4603      	mov	r3, r0
 8000616:	81fb      	strh	r3, [r7, #14]
	uint8_t status = 0;
 8000618:	2300      	movs	r3, #0
 800061a:	77fb      	strb	r3, [r7, #31]
	uint8_t d[14] = {0} ;
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	819a      	strh	r2, [r3, #12]
	status = HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, MPU_DAT, 1, d, 14, HAL_MAX_DELAY);
 800062a:	89fb      	ldrh	r3, [r7, #14]
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	b299      	uxth	r1, r3
 8000630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	230e      	movs	r3, #14
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	2301      	movs	r3, #1
 8000642:	223b      	movs	r2, #59	; 0x3b
 8000644:	4824      	ldr	r0, [pc, #144]	; (80006d8 <ag_get_data+0xd0>)
 8000646:	f001 f8e1 	bl	800180c <HAL_I2C_Mem_Read>
 800064a:	4603      	mov	r3, r0
 800064c:	77fb      	strb	r3, [r7, #31]
	*x = (uint16_t)d[0]<<8 | (uint16_t)d[1];
 800064e:	7c3b      	ldrb	r3, [r7, #16]
 8000650:	021b      	lsls	r3, r3, #8
 8000652:	b21a      	sxth	r2, r3
 8000654:	7c7b      	ldrb	r3, [r7, #17]
 8000656:	b21b      	sxth	r3, r3
 8000658:	4313      	orrs	r3, r2
 800065a:	b21a      	sxth	r2, r3
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	801a      	strh	r2, [r3, #0]
	*y = (uint16_t)d[2]<<8 | (uint16_t)d[3];
 8000660:	7cbb      	ldrb	r3, [r7, #18]
 8000662:	021b      	lsls	r3, r3, #8
 8000664:	b21a      	sxth	r2, r3
 8000666:	7cfb      	ldrb	r3, [r7, #19]
 8000668:	b21b      	sxth	r3, r3
 800066a:	4313      	orrs	r3, r2
 800066c:	b21a      	sxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	801a      	strh	r2, [r3, #0]
	*z = (uint16_t)d[4]<<8 | (uint16_t)d[5];
 8000672:	7d3b      	ldrb	r3, [r7, #20]
 8000674:	021b      	lsls	r3, r3, #8
 8000676:	b21a      	sxth	r2, r3
 8000678:	7d7b      	ldrb	r3, [r7, #21]
 800067a:	b21b      	sxth	r3, r3
 800067c:	4313      	orrs	r3, r2
 800067e:	b21a      	sxth	r2, r3
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	801a      	strh	r2, [r3, #0]

	*t = (uint16_t)d[6]<<8 | (uint16_t)d[7];
 8000684:	7dbb      	ldrb	r3, [r7, #22]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	b21a      	sxth	r2, r3
 800068a:	7dfb      	ldrb	r3, [r7, #23]
 800068c:	b21b      	sxth	r3, r3
 800068e:	4313      	orrs	r3, r2
 8000690:	b21a      	sxth	r2, r3
 8000692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000694:	801a      	strh	r2, [r3, #0]

	*a = (uint16_t)d[8]<<8 | (uint16_t)d[9];
 8000696:	7e3b      	ldrb	r3, [r7, #24]
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	b21a      	sxth	r2, r3
 800069c:	7e7b      	ldrb	r3, [r7, #25]
 800069e:	b21b      	sxth	r3, r3
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b21a      	sxth	r2, r3
 80006a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a6:	801a      	strh	r2, [r3, #0]
	*b = (uint16_t)d[10]<<8 | (uint16_t)d[11];
 80006a8:	7ebb      	ldrb	r3, [r7, #26]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	7efb      	ldrb	r3, [r7, #27]
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006b8:	801a      	strh	r2, [r3, #0]
	*g = (uint16_t)d[12]<<8 | (uint16_t)d[13];
 80006ba:	7f3b      	ldrb	r3, [r7, #28]
 80006bc:	021b      	lsls	r3, r3, #8
 80006be:	b21a      	sxth	r2, r3
 80006c0:	7f7b      	ldrb	r3, [r7, #29]
 80006c2:	b21b      	sxth	r3, r3
 80006c4:	4313      	orrs	r3, r2
 80006c6:	b21a      	sxth	r2, r3
 80006c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ca:	801a      	strh	r2, [r3, #0]

	return status;
 80006cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000214 	.word	0x20000214

080006dc <ag_pwr_mgmt>:

int ag_pwr_mgmt(uint16_t dev_addr, uint8_t *config1, uint8_t *config2){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af04      	add	r7, sp, #16
 80006e2:	4603      	mov	r3, r0
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	81fb      	strh	r3, [r7, #14]
	// bit4 - na
	// bit3 - set to 1 disable temperature sensor
	// bit2-0 - set clock, just have this set to 0
	// Register 2
	// Just set this byte to zero, or it will put everything in standby mode
	int status = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
	status = HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, MPU_PW1, 1, config1, 1, HAL_MAX_DELAY);
 80006ee:	89fb      	ldrh	r3, [r7, #14]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	b299      	uxth	r1, r3
 80006f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006f8:	9302      	str	r3, [sp, #8]
 80006fa:	2301      	movs	r3, #1
 80006fc:	9301      	str	r3, [sp, #4]
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2301      	movs	r3, #1
 8000704:	226b      	movs	r2, #107	; 0x6b
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <ag_pwr_mgmt+0x40>)
 8000708:	f000 ff86 	bl	8001618 <HAL_I2C_Mem_Write>
 800070c:	4603      	mov	r3, r0
 800070e:	617b      	str	r3, [r7, #20]
	//return status | HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, MPU_PW2, 1, config2, 1, HAL_MAX_DELAY);
	return status;
 8000710:	697b      	ldr	r3, [r7, #20]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3718      	adds	r7, #24
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000214 	.word	0x20000214

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08a      	sub	sp, #40	; 0x28
 8000724:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000726:	f000 fb17 	bl	8000d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072a:	f000 f86b 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072e:	f000 f987 	bl	8000a40 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000732:	f006 fd33 	bl	800719c <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000736:	f000 f8fb 	bl	8000930 <MX_TIM3_Init>
  MX_TIM9_Init();
 800073a:	f000 f947 	bl	80009cc <MX_TIM9_Init>
  MX_I2C1_Init();
 800073e:	f000 f8c9 	bl	80008d4 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  Status = -1;
 8000742:	4b2d      	ldr	r3, [pc, #180]	; (80007f8 <main+0xd8>)
 8000744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000748:	601a      	str	r2, [r3, #0]
  uint8_t data;
  uint8_t gyro_scale = 7; // set to 7 so has same sample speed as accelerometer
 800074a:	2307      	movs	r3, #7
 800074c:	75fb      	strb	r3, [r7, #23]
  uint8_t pwr_config = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	75bb      	strb	r3, [r7, #22]
  uint8_t accel_config = 0x08;
 8000752:	2308      	movs	r3, #8
 8000754:	757b      	strb	r3, [r7, #21]
  int16_t xreading = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	827b      	strh	r3, [r7, #18]
  int16_t yreading = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	823b      	strh	r3, [r7, #16]
  int16_t zreading = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	81fb      	strh	r3, [r7, #14]

  int16_t treading = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	81bb      	strh	r3, [r7, #12]

  int16_t areading = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	817b      	strh	r3, [r7, #10]
  int16_t breading = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	813b      	strh	r3, [r7, #8]
  int16_t greading = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	80fb      	strh	r3, [r7, #6]


  ag_pwr_mgmt(MPU_DEV, &pwr_config, &pwr_config);
 8000772:	f107 0216 	add.w	r2, r7, #22
 8000776:	f107 0316 	add.w	r3, r7, #22
 800077a:	4619      	mov	r1, r3
 800077c:	2068      	movs	r0, #104	; 0x68
 800077e:	f7ff ffad 	bl	80006dc <ag_pwr_mgmt>
  ag_set_acel_config(MPU_DEV, &accel_config);
 8000782:	f107 0315 	add.w	r3, r7, #21
 8000786:	4619      	mov	r1, r3
 8000788:	2068      	movs	r0, #104	; 0x68
 800078a:	f7ff ff21 	bl	80005d0 <ag_set_acel_config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(Status){ // Hold here until You press 'n'
 800078e:	bf00      	nop
 8000790:	4b19      	ldr	r3, [pc, #100]	; (80007f8 <main+0xd8>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1fb      	bne.n	8000790 <main+0x70>
	  }

	ag_get_data(MPU_DEV, &xreading, &yreading, &zreading, &treading, &areading, &breading, &greading);
 8000798:	f107 000e 	add.w	r0, r7, #14
 800079c:	f107 0210 	add.w	r2, r7, #16
 80007a0:	f107 0112 	add.w	r1, r7, #18
 80007a4:	1dbb      	adds	r3, r7, #6
 80007a6:	9303      	str	r3, [sp, #12]
 80007a8:	f107 0308 	add.w	r3, r7, #8
 80007ac:	9302      	str	r3, [sp, #8]
 80007ae:	f107 030a 	add.w	r3, r7, #10
 80007b2:	9301      	str	r3, [sp, #4]
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	9300      	str	r3, [sp, #0]
 80007ba:	4603      	mov	r3, r0
 80007bc:	2068      	movs	r0, #104	; 0x68
 80007be:	f7ff ff23 	bl	8000608 <ag_get_data>
	cdc_printf("x:%d y:%d z:%d\r\n", xreading, yreading, zreading);//, areading, breading, greading, treading);
 80007c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007c6:	4619      	mov	r1, r3
 80007c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80007cc:	461a      	mov	r2, r3
 80007ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80007d2:	480a      	ldr	r0, [pc, #40]	; (80007fc <main+0xdc>)
 80007d4:	f7ff fedc 	bl	8000590 <cdc_printf>
	cdc_printf("a:%d b:%d g:%d\r\n", areading, breading, greading);
 80007d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80007dc:	4619      	mov	r1, r3
 80007de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80007e2:	461a      	mov	r2, r3
 80007e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e8:	4805      	ldr	r0, [pc, #20]	; (8000800 <main+0xe0>)
 80007ea:	f7ff fed1 	bl	8000590 <cdc_printf>


    Status = -1; // Set the status to -1 so we wait until user issues new read command
 80007ee:	4b02      	ldr	r3, [pc, #8]	; (80007f8 <main+0xd8>)
 80007f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007f4:	601a      	str	r2, [r3, #0]
	  while(Status){ // Hold here until You press 'n'
 80007f6:	e7ca      	b.n	800078e <main+0x6e>
 80007f8:	2000011c 	.word	0x2000011c
 80007fc:	08008440 	.word	0x08008440
 8000800:	08008454 	.word	0x08008454

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b094      	sub	sp, #80	; 0x50
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f007 f9fa 	bl	8007c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	4b27      	ldr	r3, [pc, #156]	; (80008cc <SystemClock_Config+0xc8>)
 800082e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000830:	4a26      	ldr	r2, [pc, #152]	; (80008cc <SystemClock_Config+0xc8>)
 8000832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000836:	6413      	str	r3, [r2, #64]	; 0x40
 8000838:	4b24      	ldr	r3, [pc, #144]	; (80008cc <SystemClock_Config+0xc8>)
 800083a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <SystemClock_Config+0xcc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <SystemClock_Config+0xcc>)
 800084e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <SystemClock_Config+0xcc>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000860:	2301      	movs	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086a:	2302      	movs	r3, #2
 800086c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000874:	2319      	movs	r3, #25
 8000876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000878:	2390      	movs	r3, #144	; 0x90
 800087a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800087c:	2302      	movs	r3, #2
 800087e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000880:	2303      	movs	r3, #3
 8000882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4618      	mov	r0, r3
 800088a:	f002 fec3 	bl	8003614 <HAL_RCC_OscConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000894:	f000 f90a 	bl	8000aac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000898:	230f      	movs	r3, #15
 800089a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2102      	movs	r1, #2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f003 f91d 	bl	8003af4 <HAL_RCC_ClockConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008c0:	f000 f8f4 	bl	8000aac <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	; 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40007000 	.word	0x40007000

080008d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_I2C1_Init+0x50>)
 80008da:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_I2C1_Init+0x54>)
 80008dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_I2C1_Init+0x50>)
 80008e0:	4a12      	ldr	r2, [pc, #72]	; (800092c <MX_I2C1_Init+0x58>)
 80008e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_I2C1_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_I2C1_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_I2C1_Init+0x50>)
 80008f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <MX_I2C1_Init+0x50>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_I2C1_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_I2C1_Init+0x50>)
 8000912:	f000 fd49 	bl	80013a8 <HAL_I2C_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800091c:	f000 f8c6 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000214 	.word	0x20000214
 8000928:	40005400 	.word	0x40005400
 800092c:	00061a80 	.word	0x00061a80

08000930 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_TIM3_Init+0x94>)
 800094e:	4a1e      	ldr	r2, [pc, #120]	; (80009c8 <MX_TIM3_Init+0x98>)
 8000950:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_TIM3_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM3_Init+0x94>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_TIM3_Init+0x94>)
 8000960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000964:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_TIM3_Init+0x94>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_TIM3_Init+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000972:	4814      	ldr	r0, [pc, #80]	; (80009c4 <MX_TIM3_Init+0x94>)
 8000974:	f003 fa76 	bl	8003e64 <HAL_TIM_Base_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800097e:	f000 f895 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000982:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4619      	mov	r1, r3
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_TIM3_Init+0x94>)
 8000990:	f003 fa93 	bl	8003eba <HAL_TIM_ConfigClockSource>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 f887 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a6:	463b      	mov	r3, r7
 80009a8:	4619      	mov	r1, r3
 80009aa:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_TIM3_Init+0x94>)
 80009ac:	f003 fc56 	bl	800425c <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009b6:	f000 f879 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000668 	.word	0x20000668
 80009c8:	40000400 	.word	0x40000400

080009cc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <MX_TIM9_Init+0x6c>)
 80009e0:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <MX_TIM9_Init+0x70>)
 80009e2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_TIM9_Init+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_TIM9_Init+0x6c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_TIM9_Init+0x6c>)
 80009f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_TIM9_Init+0x6c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_TIM9_Init+0x6c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <MX_TIM9_Init+0x6c>)
 8000a06:	f003 fa2d 	bl	8003e64 <HAL_TIM_Base_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000a10:	f000 f84c 	bl	8000aac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a18:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	; (8000a38 <MX_TIM9_Init+0x6c>)
 8000a20:	f003 fa4b 	bl	8003eba <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000a2a:	f000 f83f 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200006a8 	.word	0x200006a8
 8000a3c:	40014000 	.word	0x40014000

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_GPIO_Init+0x68>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <Error_Handler+0x6>

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x4c>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800

08000b04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <HAL_I2C_MspInit+0x84>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12b      	bne.n	8000b7e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	4a17      	ldr	r2, [pc, #92]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	; 0x30
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b42:	23c0      	movs	r3, #192	; 0xc0
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b46:	2312      	movs	r3, #18
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b52:	2304      	movs	r3, #4
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <HAL_I2C_MspInit+0x8c>)
 8000b5e:	f000 faa1 	bl	80010a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_I2C_MspInit+0x88>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	; 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020400 	.word	0x40020400

08000b94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a15      	ldr	r2, [pc, #84]	; (8000bf8 <HAL_TIM_Base_MspInit+0x64>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10e      	bne.n	8000bc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a13      	ldr	r2, [pc, #76]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000bc2:	e012      	b.n	8000bea <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	; (8000c00 <HAL_TIM_Base_MspInit+0x6c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d10d      	bne.n	8000bea <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a09      	ldr	r2, [pc, #36]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <HAL_TIM_Base_MspInit+0x68>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
}
 8000bea:	bf00      	nop
 8000bec:	3714      	adds	r7, #20
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40000400 	.word	0x40000400
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40014000 	.word	0x40014000

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c08:	e7fe      	b.n	8000c08 <NMI_Handler+0x4>

08000c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0e:	e7fe      	b.n	8000c0e <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <MemManage_Handler+0x4>

08000c16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c50:	f000 f8d4 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <OTG_FS_IRQHandler+0x10>)
 8000c5e:	f001 fca6 	bl	80025ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20001bbc 	.word	0x20001bbc

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f006 ff7c 	bl	8007b98 <__errno>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20020000 	.word	0x20020000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	20000204 	.word	0x20000204
 8000cd4:	20001fc8 	.word	0x20001fc8

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <SystemInit+0x28>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <SystemInit+0x28>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <SystemInit+0x28>)
 8000cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cf2:	609a      	str	r2, [r3, #8]
#endif
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d0a:	e003      	b.n	8000d14 <LoopCopyDataInit>

08000d0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d12:	3104      	adds	r1, #4

08000d14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d1c:	d3f6      	bcc.n	8000d0c <CopyDataInit>
  ldr  r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d20:	e002      	b.n	8000d28 <LoopFillZerobss>

08000d22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d24:	f842 3b04 	str.w	r3, [r2], #4

08000d28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d2c:	d3f9      	bcc.n	8000d22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d2e:	f7ff ffd3 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f006 ff37 	bl	8007ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fcf3 	bl	8000720 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d40:	0800850c 	.word	0x0800850c
  ldr  r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d48:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8000d4c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8000d50:	20001fc8 	.word	0x20001fc8

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	; (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f94d 	bl	8001020 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f808 	bl	8000d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fe92 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_InitTick+0x54>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x58>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f965 	bl	800108a <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dd8:	f000 f92d 	bl	8001036 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x5c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000000 	.word	0x20000000
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200006e8 	.word	0x200006e8

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	200006e8 	.word	0x200006e8

08000e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff ffee 	bl	8000e24 <HAL_GetTick>
 8000e48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e54:	d005      	beq.n	8000e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <HAL_Delay+0x40>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e62:	bf00      	nop
 8000e64:	f7ff ffde 	bl	8000e24 <HAL_GetTick>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	68fa      	ldr	r2, [r7, #12]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d8f7      	bhi.n	8000e64 <HAL_Delay+0x28>
  {
  }
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000008 	.word	0x20000008

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db0b      	blt.n	8000f0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	f003 021f 	and.w	r2, r3, #31
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <__NVIC_EnableIRQ+0x38>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	095b      	lsrs	r3, r3, #5
 8000f04:	2001      	movs	r0, #1
 8000f06:	fa00 f202 	lsl.w	r2, r0, r2
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100

08000f20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	6039      	str	r1, [r7, #0]
 8000f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	db0a      	blt.n	8000f4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	490c      	ldr	r1, [pc, #48]	; (8000f6c <__NVIC_SetPriority+0x4c>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	0112      	lsls	r2, r2, #4
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	440b      	add	r3, r1
 8000f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f48:	e00a      	b.n	8000f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4908      	ldr	r1, [pc, #32]	; (8000f70 <__NVIC_SetPriority+0x50>)
 8000f50:	79fb      	ldrb	r3, [r7, #7]
 8000f52:	f003 030f 	and.w	r3, r3, #15
 8000f56:	3b04      	subs	r3, #4
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	761a      	strb	r2, [r3, #24]
}
 8000f60:	bf00      	nop
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f1c3 0307 	rsb	r3, r3, #7
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	bf28      	it	cs
 8000f92:	2304      	movcs	r3, #4
 8000f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3304      	adds	r3, #4
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d902      	bls.n	8000fa4 <NVIC_EncodePriority+0x30>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3b03      	subs	r3, #3
 8000fa2:	e000      	b.n	8000fa6 <NVIC_EncodePriority+0x32>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43da      	mvns	r2, r3
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43d9      	mvns	r1, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	4313      	orrs	r3, r2
         );
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3724      	adds	r7, #36	; 0x24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
	...

08000fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fec:	d301      	bcc.n	8000ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e00f      	b.n	8001012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <SysTick_Config+0x40>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001000:	f7ff ff8e 	bl	8000f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <SysTick_Config+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <SysTick_Config+0x40>)
 800100c:	2207      	movs	r2, #7
 800100e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	e000e010 	.word	0xe000e010

08001020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff29 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001036:	b580      	push	{r7, lr}
 8001038:	b086      	sub	sp, #24
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001048:	f7ff ff3e 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800104c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	6978      	ldr	r0, [r7, #20]
 8001054:	f7ff ff8e 	bl	8000f74 <NVIC_EncodePriority>
 8001058:	4602      	mov	r2, r0
 800105a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff5d 	bl	8000f20 <__NVIC_SetPriority>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff31 	bl	8000ee4 <__NVIC_EnableIRQ>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa2 	bl	8000fdc <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	e159      	b.n	8001374 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c0:	2201      	movs	r2, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	429a      	cmp	r2, r3
 80010da:	f040 8148 	bne.w	800136e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d00b      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d007      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f2:	2b11      	cmp	r3, #17
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b12      	cmp	r3, #18
 80010fc:	d130      	bne.n	8001160 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	2203      	movs	r2, #3
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	68da      	ldr	r2, [r3, #12]
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	f003 0201 	and.w	r2, r3, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	689a      	ldr	r2, [r3, #8]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0xfc>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b12      	cmp	r3, #18
 800119e:	d123      	bne.n	80011e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	691a      	ldr	r2, [r3, #16]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	08da      	lsrs	r2, r3, #3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3208      	adds	r2, #8
 80011e2:	69b9      	ldr	r1, [r7, #24]
 80011e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	fa02 f303 	lsl.w	r3, r2, r3
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 0203 	and.w	r2, r3, #3
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80a2 	beq.w	800136e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b56      	ldr	r3, [pc, #344]	; (8001388 <HAL_GPIO_Init+0x2e4>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	4a55      	ldr	r2, [pc, #340]	; (8001388 <HAL_GPIO_Init+0x2e4>)
 8001234:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001238:	6453      	str	r3, [r2, #68]	; 0x44
 800123a:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_GPIO_Init+0x2e4>)
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001246:	4a51      	ldr	r2, [pc, #324]	; (800138c <HAL_GPIO_Init+0x2e8>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	220f      	movs	r2, #15
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a48      	ldr	r2, [pc, #288]	; (8001390 <HAL_GPIO_Init+0x2ec>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d019      	beq.n	80012a6 <HAL_GPIO_Init+0x202>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a47      	ldr	r2, [pc, #284]	; (8001394 <HAL_GPIO_Init+0x2f0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d013      	beq.n	80012a2 <HAL_GPIO_Init+0x1fe>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a46      	ldr	r2, [pc, #280]	; (8001398 <HAL_GPIO_Init+0x2f4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d00d      	beq.n	800129e <HAL_GPIO_Init+0x1fa>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a45      	ldr	r2, [pc, #276]	; (800139c <HAL_GPIO_Init+0x2f8>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_GPIO_Init+0x1f6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a44      	ldr	r2, [pc, #272]	; (80013a0 <HAL_GPIO_Init+0x2fc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d101      	bne.n	8001296 <HAL_GPIO_Init+0x1f2>
 8001292:	2304      	movs	r3, #4
 8001294:	e008      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 8001296:	2307      	movs	r3, #7
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129a:	2303      	movs	r3, #3
 800129c:	e004      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 800129e:	2302      	movs	r3, #2
 80012a0:	e002      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a2:	2301      	movs	r3, #1
 80012a4:	e000      	b.n	80012a8 <HAL_GPIO_Init+0x204>
 80012a6:	2300      	movs	r3, #0
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	f002 0203 	and.w	r2, r2, #3
 80012ae:	0092      	lsls	r2, r2, #2
 80012b0:	4093      	lsls	r3, r2
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b8:	4934      	ldr	r1, [pc, #208]	; (800138c <HAL_GPIO_Init+0x2e8>)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012c6:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <HAL_GPIO_Init+0x300>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ea:	4a2e      	ldr	r2, [pc, #184]	; (80013a4 <HAL_GPIO_Init+0x300>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <HAL_GPIO_Init+0x300>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001314:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <HAL_GPIO_Init+0x300>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800131a:	4b22      	ldr	r3, [pc, #136]	; (80013a4 <HAL_GPIO_Init+0x300>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <HAL_GPIO_Init+0x300>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001344:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_GPIO_Init+0x300>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001368:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_GPIO_Init+0x300>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3301      	adds	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	f67f aea2 	bls.w	80010c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800137c:	bf00      	nop
 800137e:	3724      	adds	r7, #36	; 0x24
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	40023800 	.word	0x40023800
 800138c:	40013800 	.word	0x40013800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40020800 	.word	0x40020800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40013c00 	.word	0x40013c00

080013a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e11f      	b.n	80015fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d106      	bne.n	80013d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fb98 	bl	8000b04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2224      	movs	r2, #36	; 0x24
 80013d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800140a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800140c:	f002 fd16 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 8001410:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a7b      	ldr	r2, [pc, #492]	; (8001604 <HAL_I2C_Init+0x25c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d807      	bhi.n	800142c <HAL_I2C_Init+0x84>
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4a7a      	ldr	r2, [pc, #488]	; (8001608 <HAL_I2C_Init+0x260>)
 8001420:	4293      	cmp	r3, r2
 8001422:	bf94      	ite	ls
 8001424:	2301      	movls	r3, #1
 8001426:	2300      	movhi	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	e006      	b.n	800143a <HAL_I2C_Init+0x92>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4a77      	ldr	r2, [pc, #476]	; (800160c <HAL_I2C_Init+0x264>)
 8001430:	4293      	cmp	r3, r2
 8001432:	bf94      	ite	ls
 8001434:	2301      	movls	r3, #1
 8001436:	2300      	movhi	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e0db      	b.n	80015fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4a72      	ldr	r2, [pc, #456]	; (8001610 <HAL_I2C_Init+0x268>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	0c9b      	lsrs	r3, r3, #18
 800144c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	430a      	orrs	r2, r1
 8001460:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6a1b      	ldr	r3, [r3, #32]
 8001468:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a64      	ldr	r2, [pc, #400]	; (8001604 <HAL_I2C_Init+0x25c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d802      	bhi.n	800147c <HAL_I2C_Init+0xd4>
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	3301      	adds	r3, #1
 800147a:	e009      	b.n	8001490 <HAL_I2C_Init+0xe8>
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001482:	fb02 f303 	mul.w	r3, r2, r3
 8001486:	4a63      	ldr	r2, [pc, #396]	; (8001614 <HAL_I2C_Init+0x26c>)
 8001488:	fba2 2303 	umull	r2, r3, r2, r3
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	3301      	adds	r3, #1
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	430b      	orrs	r3, r1
 8001496:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	4956      	ldr	r1, [pc, #344]	; (8001604 <HAL_I2C_Init+0x25c>)
 80014ac:	428b      	cmp	r3, r1
 80014ae:	d80d      	bhi.n	80014cc <HAL_I2C_Init+0x124>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e59      	subs	r1, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	bf38      	it	cc
 80014c8:	2304      	movcc	r3, #4
 80014ca:	e04f      	b.n	800156c <HAL_I2C_Init+0x1c4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d111      	bne.n	80014f8 <HAL_I2C_Init+0x150>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	e012      	b.n	800151e <HAL_I2C_Init+0x176>
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1e58      	subs	r0, r3, #1
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6859      	ldr	r1, [r3, #4]
 8001500:	460b      	mov	r3, r1
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	440b      	add	r3, r1
 8001506:	0099      	lsls	r1, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	fbb0 f3f3 	udiv	r3, r0, r3
 800150e:	3301      	adds	r3, #1
 8001510:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001514:	2b00      	cmp	r3, #0
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_I2C_Init+0x17e>
 8001522:	2301      	movs	r3, #1
 8001524:	e022      	b.n	800156c <HAL_I2C_Init+0x1c4>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10e      	bne.n	800154c <HAL_I2C_Init+0x1a4>
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1e58      	subs	r0, r3, #1
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6859      	ldr	r1, [r3, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	440b      	add	r3, r1
 800153c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800154a:	e00f      	b.n	800156c <HAL_I2C_Init+0x1c4>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	1e58      	subs	r0, r3, #1
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6859      	ldr	r1, [r3, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	0099      	lsls	r1, r3, #2
 800155c:	440b      	add	r3, r1
 800155e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001562:	3301      	adds	r3, #1
 8001564:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001568:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	6809      	ldr	r1, [r1, #0]
 8001570:	4313      	orrs	r3, r2
 8001572:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69da      	ldr	r2, [r3, #28]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800159a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6911      	ldr	r1, [r2, #16]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68d2      	ldr	r2, [r2, #12]
 80015a6:	4311      	orrs	r1, r2
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f042 0201 	orr.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	000186a0 	.word	0x000186a0
 8001608:	001e847f 	.word	0x001e847f
 800160c:	003d08ff 	.word	0x003d08ff
 8001610:	431bde83 	.word	0x431bde83
 8001614:	10624dd3 	.word	0x10624dd3

08001618 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af02      	add	r7, sp, #8
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	4608      	mov	r0, r1
 8001622:	4611      	mov	r1, r2
 8001624:	461a      	mov	r2, r3
 8001626:	4603      	mov	r3, r0
 8001628:	817b      	strh	r3, [r7, #10]
 800162a:	460b      	mov	r3, r1
 800162c:	813b      	strh	r3, [r7, #8]
 800162e:	4613      	mov	r3, r2
 8001630:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001632:	f7ff fbf7 	bl	8000e24 <HAL_GetTick>
 8001636:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b20      	cmp	r3, #32
 8001642:	f040 80d9 	bne.w	80017f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	2319      	movs	r3, #25
 800164c:	2201      	movs	r2, #1
 800164e:	496d      	ldr	r1, [pc, #436]	; (8001804 <HAL_I2C_Mem_Write+0x1ec>)
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 fc7f 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800165c:	2302      	movs	r3, #2
 800165e:	e0cc      	b.n	80017fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_I2C_Mem_Write+0x56>
 800166a:	2302      	movs	r3, #2
 800166c:	e0c5      	b.n	80017fa <HAL_I2C_Mem_Write+0x1e2>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b01      	cmp	r3, #1
 8001682:	d007      	beq.n	8001694 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2221      	movs	r2, #33	; 0x21
 80016a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a3a      	ldr	r2, [r7, #32]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80016c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_I2C_Mem_Write+0x1f0>)
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016d6:	88f8      	ldrh	r0, [r7, #6]
 80016d8:	893a      	ldrh	r2, [r7, #8]
 80016da:	8979      	ldrh	r1, [r7, #10]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	4603      	mov	r3, r0
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fab6 	bl	8001c58 <I2C_RequestMemoryWrite>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d052      	beq.n	8001798 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e081      	b.n	80017fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f6:	697a      	ldr	r2, [r7, #20]
 80016f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fd00 	bl	8002100 <I2C_WaitOnTXEFlagUntilTimeout>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d00d      	beq.n	8001722 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	2b04      	cmp	r3, #4
 800170c:	d107      	bne.n	800171e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800171c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e06b      	b.n	80017fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	781a      	ldrb	r2, [r3, #0]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	1c5a      	adds	r2, r3, #1
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173c:	3b01      	subs	r3, #1
 800173e:	b29a      	uxth	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001748:	b29b      	uxth	r3, r3
 800174a:	3b01      	subs	r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b04      	cmp	r3, #4
 800175e:	d11b      	bne.n	8001798 <HAL_I2C_Mem_Write+0x180>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d017      	beq.n	8001798 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	781a      	ldrb	r2, [r3, #0]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001782:	3b01      	subs	r3, #1
 8001784:	b29a      	uxth	r2, r3
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178e:	b29b      	uxth	r3, r3
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1aa      	bne.n	80016f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 fcec 	bl	8002182 <I2C_WaitOnBTFFlagUntilTimeout>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00d      	beq.n	80017cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	2b04      	cmp	r3, #4
 80017b6:	d107      	bne.n	80017c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e016      	b.n	80017fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2220      	movs	r2, #32
 80017e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	00100002 	.word	0x00100002
 8001808:	ffff0000 	.word	0xffff0000

0800180c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af02      	add	r7, sp, #8
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4603      	mov	r3, r0
 800181c:	817b      	strh	r3, [r7, #10]
 800181e:	460b      	mov	r3, r1
 8001820:	813b      	strh	r3, [r7, #8]
 8001822:	4613      	mov	r3, r2
 8001824:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001826:	f7ff fafd 	bl	8000e24 <HAL_GetTick>
 800182a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b20      	cmp	r3, #32
 8001836:	f040 8208 	bne.w	8001c4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2319      	movs	r3, #25
 8001840:	2201      	movs	r2, #1
 8001842:	497b      	ldr	r1, [pc, #492]	; (8001a30 <HAL_I2C_Mem_Read+0x224>)
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 fb85 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001850:	2302      	movs	r3, #2
 8001852:	e1fb      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_I2C_Mem_Read+0x56>
 800185e:	2302      	movs	r3, #2
 8001860:	e1f4      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d007      	beq.n	8001888 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f042 0201 	orr.w	r2, r2, #1
 8001886:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001896:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2222      	movs	r2, #34	; 0x22
 800189c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2240      	movs	r2, #64	; 0x40
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29a      	uxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	4a5b      	ldr	r2, [pc, #364]	; (8001a34 <HAL_I2C_Mem_Read+0x228>)
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018ca:	88f8      	ldrh	r0, [r7, #6]
 80018cc:	893a      	ldrh	r2, [r7, #8]
 80018ce:	8979      	ldrh	r1, [r7, #10]
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	4603      	mov	r3, r0
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fa52 	bl	8001d84 <I2C_RequestMemoryRead>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1b0      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d113      	bne.n	800191a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	695b      	ldr	r3, [r3, #20]
 80018fc:	623b      	str	r3, [r7, #32]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	623b      	str	r3, [r7, #32]
 8001906:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e184      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191e:	2b01      	cmp	r3, #1
 8001920:	d11b      	bne.n	800195a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001930:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e164      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195e:	2b02      	cmp	r3, #2
 8001960:	d11b      	bne.n	800199a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001970:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001980:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695b      	ldr	r3, [r3, #20]
 800198c:	61bb      	str	r3, [r7, #24]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	61bb      	str	r3, [r7, #24]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	e144      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019b0:	e138      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	f200 80f1 	bhi.w	8001b9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d123      	bne.n	8001a0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019c8:	68f8      	ldr	r0, [r7, #12]
 80019ca:	f000 fc1b 	bl	8002204 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e139      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691a      	ldr	r2, [r3, #16]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a0a:	e10b      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d14e      	bne.n	8001ab2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4906      	ldr	r1, [pc, #24]	; (8001a38 <HAL_I2C_Mem_Read+0x22c>)
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f000 fa98 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d008      	beq.n	8001a3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e10e      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
 8001a2e:	bf00      	nop
 8001a30:	00100002 	.word	0x00100002
 8001a34:	ffff0000 	.word	0xffff0000
 8001a38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	3b01      	subs	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691a      	ldr	r2, [r3, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ab0:	e0b8      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab8:	2200      	movs	r2, #0
 8001aba:	4966      	ldr	r1, [pc, #408]	; (8001c54 <HAL_I2C_Mem_Read+0x448>)
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fa49 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0bf      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ada:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af8:	3b01      	subs	r3, #1
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b14:	2200      	movs	r2, #0
 8001b16:	494f      	ldr	r1, [pc, #316]	; (8001c54 <HAL_I2C_Mem_Read+0x448>)
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fa1b 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e091      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691a      	ldr	r2, [r3, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	b2d2      	uxtb	r2, r2
 8001b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	3b01      	subs	r3, #1
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b86:	3b01      	subs	r3, #1
 8001b88:	b29a      	uxth	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b9c:	e042      	b.n	8001c24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fb2e 	bl	8002204 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e04c      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	1c5a      	adds	r2, r3, #1
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d118      	bne.n	8001c24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f47f aec2 	bne.w	80019b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e000      	b.n	8001c4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
  }
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3728      	adds	r7, #40	; 0x28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	00010004 	.word	0x00010004

08001c58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	4608      	mov	r0, r1
 8001c62:	4611      	mov	r1, r2
 8001c64:	461a      	mov	r2, r3
 8001c66:	4603      	mov	r3, r0
 8001c68:	817b      	strh	r3, [r7, #10]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	813b      	strh	r3, [r7, #8]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f960 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00d      	beq.n	8001cb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ca8:	d103      	bne.n	8001cb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e05f      	b.n	8001d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cb6:	897b      	ldrh	r3, [r7, #10]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	6a3a      	ldr	r2, [r7, #32]
 8001cca:	492d      	ldr	r1, [pc, #180]	; (8001d80 <I2C_RequestMemoryWrite+0x128>)
 8001ccc:	68f8      	ldr	r0, [r7, #12]
 8001cce:	f000 f998 	bl	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e04c      	b.n	8001d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	6a39      	ldr	r1, [r7, #32]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 fa02 	bl	8002100 <I2C_WaitOnTXEFlagUntilTimeout>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00d      	beq.n	8001d1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	2b04      	cmp	r3, #4
 8001d08:	d107      	bne.n	8001d1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e02b      	b.n	8001d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d105      	bne.n	8001d30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d24:	893b      	ldrh	r3, [r7, #8]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	e021      	b.n	8001d74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d30:	893b      	ldrh	r3, [r7, #8]
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d40:	6a39      	ldr	r1, [r7, #32]
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f9dc 	bl	8002100 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00d      	beq.n	8001d6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	d107      	bne.n	8001d66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e005      	b.n	8001d76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d6a:	893b      	ldrh	r3, [r7, #8]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	00010002 	.word	0x00010002

08001d84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af02      	add	r7, sp, #8
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	4608      	mov	r0, r1
 8001d8e:	4611      	mov	r1, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	817b      	strh	r3, [r7, #10]
 8001d96:	460b      	mov	r3, r1
 8001d98:	813b      	strh	r3, [r7, #8]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001dac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f8c2 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00d      	beq.n	8001df2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de4:	d103      	bne.n	8001dee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e0aa      	b.n	8001f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	6a3a      	ldr	r2, [r7, #32]
 8001e06:	4952      	ldr	r1, [pc, #328]	; (8001f50 <I2C_RequestMemoryRead+0x1cc>)
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f8fa 	bl	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e097      	b.n	8001f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e30:	6a39      	ldr	r1, [r7, #32]
 8001e32:	68f8      	ldr	r0, [r7, #12]
 8001e34:	f000 f964 	bl	8002100 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00d      	beq.n	8001e5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d107      	bne.n	8001e56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e076      	b.n	8001f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d105      	bne.n	8001e6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e60:	893b      	ldrh	r3, [r7, #8]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	e021      	b.n	8001eb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e6c:	893b      	ldrh	r3, [r7, #8]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f93e 	bl	8002100 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00d      	beq.n	8001ea6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d107      	bne.n	8001ea2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e050      	b.n	8001f48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea6:	893b      	ldrh	r3, [r7, #8]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eb2:	6a39      	ldr	r1, [r7, #32]
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 f923 	bl	8002100 <I2C_WaitOnTXEFlagUntilTimeout>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00d      	beq.n	8001edc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d107      	bne.n	8001ed8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e035      	b.n	8001f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f82b 	bl	8001f54 <I2C_WaitOnFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00d      	beq.n	8001f20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f12:	d103      	bne.n	8001f1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e013      	b.n	8001f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f20:	897b      	ldrh	r3, [r7, #10]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	6a3a      	ldr	r2, [r7, #32]
 8001f34:	4906      	ldr	r1, [pc, #24]	; (8001f50 <I2C_RequestMemoryRead+0x1cc>)
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f863 	bl	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	00010002 	.word	0x00010002

08001f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f64:	e025      	b.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f6c:	d021      	beq.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6e:	f7fe ff59 	bl	8000e24 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d302      	bcc.n	8001f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d116      	bne.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f043 0220 	orr.w	r2, r3, #32
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e023      	b.n	8001ffa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10d      	bne.n	8001fd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	43da      	mvns	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf0c      	ite	eq
 8001fce:	2301      	moveq	r3, #1
 8001fd0:	2300      	movne	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	e00c      	b.n	8001ff2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	43da      	mvns	r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d0b6      	beq.n	8001f66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002010:	e051      	b.n	80020b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002020:	d123      	bne.n	800206a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002030:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800203a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2220      	movs	r2, #32
 8002046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f043 0204 	orr.w	r2, r3, #4
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e046      	b.n	80020f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002070:	d021      	beq.n	80020b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002072:	f7fe fed7 	bl	8000e24 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	429a      	cmp	r2, r3
 8002080:	d302      	bcc.n	8002088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d116      	bne.n	80020b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f043 0220 	orr.w	r2, r3, #32
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e020      	b.n	80020f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	0c1b      	lsrs	r3, r3, #16
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10c      	bne.n	80020da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	4013      	ands	r3, r2
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	e00b      	b.n	80020f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	43da      	mvns	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	4013      	ands	r3, r2
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf14      	ite	ne
 80020ec:	2301      	movne	r3, #1
 80020ee:	2300      	moveq	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d18d      	bne.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800210c:	e02d      	b.n	800216a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f8ce 	bl	80022b0 <I2C_IsAcknowledgeFailed>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e02d      	b.n	800217a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002124:	d021      	beq.n	800216a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002126:	f7fe fe7d 	bl	8000e24 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	d302      	bcc.n	800213c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d116      	bne.n	800216a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f043 0220 	orr.w	r2, r3, #32
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e007      	b.n	800217a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d1ca      	bne.n	800210e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800218e:	e02d      	b.n	80021ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f88d 	bl	80022b0 <I2C_IsAcknowledgeFailed>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e02d      	b.n	80021fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021a6:	d021      	beq.n	80021ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a8:	f7fe fe3c 	bl	8000e24 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d302      	bcc.n	80021be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d116      	bne.n	80021ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2220      	movs	r2, #32
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f043 0220 	orr.w	r2, r3, #32
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e007      	b.n	80021fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	d1ca      	bne.n	8002190 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002210:	e042      	b.n	8002298 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b10      	cmp	r3, #16
 800221e:	d119      	bne.n	8002254 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f06f 0210 	mvn.w	r2, #16
 8002228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e029      	b.n	80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002254:	f7fe fde6 	bl	8000e24 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d116      	bne.n	8002298 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f043 0220 	orr.w	r2, r3, #32
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e007      	b.n	80022a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a2:	2b40      	cmp	r3, #64	; 0x40
 80022a4:	d1b5      	bne.n	8002212 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c6:	d11b      	bne.n	8002300 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f043 0204 	orr.w	r2, r3, #4
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800230e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002310:	b08f      	sub	sp, #60	; 0x3c
 8002312:	af0a      	add	r7, sp, #40	; 0x28
 8002314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e10f      	b.n	8002540 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f005 f93a 	bl	80075b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2203      	movs	r2, #3
 8002344:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d102      	bne.n	800235a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f002 f8ff 	bl	8004562 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	687e      	ldr	r6, [r7, #4]
 800236c:	466d      	mov	r5, sp
 800236e:	f106 0410 	add.w	r4, r6, #16
 8002372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800237e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002382:	1d33      	adds	r3, r6, #4
 8002384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	f001 ffd6 	bl	8004338 <USB_CoreInit>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d005      	beq.n	800239e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2202      	movs	r2, #2
 8002396:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e0d0      	b.n	8002540 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2100      	movs	r1, #0
 80023a4:	4618      	mov	r0, r3
 80023a6:	f002 f8ed 	bl	8004584 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	e04a      	b.n	8002446 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023b0:	7bfa      	ldrb	r2, [r7, #15]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	333d      	adds	r3, #61	; 0x3d
 80023c0:	2201      	movs	r2, #1
 80023c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4613      	mov	r3, r2
 80023ca:	00db      	lsls	r3, r3, #3
 80023cc:	1a9b      	subs	r3, r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	333c      	adds	r3, #60	; 0x3c
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023d8:	7bfa      	ldrb	r2, [r7, #15]
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	b298      	uxth	r0, r3
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3342      	adds	r3, #66	; 0x42
 80023ec:	4602      	mov	r2, r0
 80023ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	333f      	adds	r3, #63	; 0x3f
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002404:	7bfa      	ldrb	r2, [r7, #15]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3344      	adds	r3, #68	; 0x44
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	1a9b      	subs	r3, r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	3348      	adds	r3, #72	; 0x48
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800242c:	7bfa      	ldrb	r2, [r7, #15]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3350      	adds	r3, #80	; 0x50
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002440:	7bfb      	ldrb	r3, [r7, #15]
 8002442:	3301      	adds	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	7bfa      	ldrb	r2, [r7, #15]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	429a      	cmp	r2, r3
 800244e:	d3af      	bcc.n	80023b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e044      	b.n	80024e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	1a9b      	subs	r3, r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002468:	2200      	movs	r2, #0
 800246a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	4613      	mov	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	1a9b      	subs	r3, r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	440b      	add	r3, r1
 800247a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002482:	7bfa      	ldrb	r2, [r7, #15]
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	1a9b      	subs	r3, r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024aa:	2200      	movs	r2, #0
 80024ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024ae:	7bfa      	ldrb	r2, [r7, #15]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	3301      	adds	r3, #1
 80024de:	73fb      	strb	r3, [r7, #15]
 80024e0:	7bfa      	ldrb	r2, [r7, #15]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d3b5      	bcc.n	8002456 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	603b      	str	r3, [r7, #0]
 80024f0:	687e      	ldr	r6, [r7, #4]
 80024f2:	466d      	mov	r5, sp
 80024f4:	f106 0410 	add.w	r4, r6, #16
 80024f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002500:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002504:	e885 0003 	stmia.w	r5, {r0, r1}
 8002508:	1d33      	adds	r3, r6, #4
 800250a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800250c:	6838      	ldr	r0, [r7, #0]
 800250e:	f002 f863 	bl	80045d8 <USB_DevInit>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e00d      	b.n	8002540 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 f8ab 	bl	8005694 <USB_DevDisconnect>

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002548 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_PCD_Start+0x1c>
 8002560:	2302      	movs	r3, #2
 8002562:	e020      	b.n	80025a6 <HAL_PCD_Start+0x5e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	2b01      	cmp	r3, #1
 8002572:	d109      	bne.n	8002588 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002578:	2b01      	cmp	r3, #1
 800257a:	d005      	beq.n	8002588 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f001 ffd7 	bl	8004540 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 f85b 	bl	8005652 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ae:	b590      	push	{r4, r7, lr}
 80025b0:	b08d      	sub	sp, #52	; 0x34
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 f919 	bl	80057fc <USB_GetMode>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 839d 	bne.w	8002d0c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 f87d 	bl	80056d6 <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8393 	beq.w	8002d0a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 f874 	bl	80056d6 <USB_ReadInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d107      	bne.n	8002608 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f002 0202 	and.w	r2, r2, #2
 8002606:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f003 f862 	bl	80056d6 <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f003 0310 	and.w	r3, r3, #16
 8002618:	2b10      	cmp	r3, #16
 800261a:	d161      	bne.n	80026e0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0210 	bic.w	r2, r2, #16
 800262a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800262c:	6a3b      	ldr	r3, [r7, #32]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f003 020f 	and.w	r2, r3, #15
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4413      	add	r3, r2
 8002648:	3304      	adds	r3, #4
 800264a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	0c5b      	lsrs	r3, r3, #17
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	2b02      	cmp	r3, #2
 8002656:	d124      	bne.n	80026a2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d035      	beq.n	80026d0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800266e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	6a38      	ldr	r0, [r7, #32]
 8002678:	f002 fec8 	bl	800540c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002688:	441a      	add	r2, r3
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800269a:	441a      	add	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	619a      	str	r2, [r3, #24]
 80026a0:	e016      	b.n	80026d0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	0c5b      	lsrs	r3, r3, #17
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d110      	bne.n	80026d0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026b4:	2208      	movs	r2, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	6a38      	ldr	r0, [r7, #32]
 80026ba:	f002 fea7 	bl	800540c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	699a      	ldr	r2, [r3, #24]
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ca:	441a      	add	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0210 	orr.w	r2, r2, #16
 80026de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f002 fff6 	bl	80056d6 <USB_ReadInterrupts>
 80026ea:	4603      	mov	r3, r0
 80026ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026f4:	d16e      	bne.n	80027d4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 fffc 	bl	80056fc <USB_ReadDevAllOutEpInterrupt>
 8002704:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002706:	e062      	b.n	80027ce <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d057      	beq.n	80027c2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f003 f821 	bl	8005764 <USB_ReadDevOutEPInterrupt>
 8002722:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	2301      	movs	r3, #1
 800273e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fdb0 	bl	80032a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00c      	beq.n	800276c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	015a      	lsls	r2, r3, #5
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4413      	add	r3, r2
 800275a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275e:	461a      	mov	r2, r3
 8002760:	2308      	movs	r3, #8
 8002762:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002764:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 feaa 	bl	80034c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	015a      	lsls	r2, r3, #5
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	4413      	add	r3, r2
 800277e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002782:	461a      	mov	r2, r3
 8002784:	2310      	movs	r3, #16
 8002786:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b00      	cmp	r3, #0
 8002790:	d008      	beq.n	80027a4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800279e:	461a      	mov	r2, r3
 80027a0:	2320      	movs	r3, #32
 80027a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ba:	461a      	mov	r2, r3
 80027bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	3301      	adds	r3, #1
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d199      	bne.n	8002708 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 ff7c 	bl	80056d6 <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027e8:	f040 80c0 	bne.w	800296c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 ff9d 	bl	8005730 <USB_ReadDevAllInEpInterrupt>
 80027f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80027fc:	e0b2      	b.n	8002964 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80a7 	beq.w	8002958 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f002 ffc3 	bl	80057a0 <USB_ReadDevInEPInterrupt>
 800281a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d057      	beq.n	80028d6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	2201      	movs	r2, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	43db      	mvns	r3, r3
 8002840:	69f9      	ldr	r1, [r7, #28]
 8002842:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002846:	4013      	ands	r3, r2
 8002848:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002856:	461a      	mov	r2, r3
 8002858:	2301      	movs	r3, #1
 800285a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d132      	bne.n	80028ca <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3348      	adds	r3, #72	; 0x48
 8002874:	6819      	ldr	r1, [r3, #0]
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	1a9b      	subs	r3, r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4403      	add	r3, r0
 8002884:	3344      	adds	r3, #68	; 0x44
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4419      	add	r1, r3
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288e:	4613      	mov	r3, r2
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4403      	add	r3, r0
 8002898:	3348      	adds	r3, #72	; 0x48
 800289a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d113      	bne.n	80028ca <HAL_PCD_IRQHandler+0x31c>
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3350      	adds	r3, #80	; 0x50
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d108      	bne.n	80028ca <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80028c2:	461a      	mov	r2, r3
 80028c4:	2101      	movs	r1, #1
 80028c6:	f002 ffcb 	bl	8005860 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4619      	mov	r1, r3
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f004 fef0 	bl	80076b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ec:	461a      	mov	r2, r3
 80028ee:	2308      	movs	r3, #8
 80028f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002908:	461a      	mov	r2, r3
 800290a:	2310      	movs	r3, #16
 800290c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002924:	461a      	mov	r2, r3
 8002926:	2340      	movs	r3, #64	; 0x40
 8002928:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002940:	461a      	mov	r2, r3
 8002942:	2302      	movs	r3, #2
 8002944:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fc1b 	bl	800318e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	3301      	adds	r3, #1
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f af49 	bne.w	80027fe <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f002 feb0 	bl	80056d6 <USB_ReadInterrupts>
 8002976:	4603      	mov	r3, r0
 8002978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800297c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002980:	d122      	bne.n	80029c8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	69fa      	ldr	r2, [r7, #28]
 800298c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002990:	f023 0301 	bic.w	r3, r3, #1
 8002994:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800299c:	2b01      	cmp	r3, #1
 800299e:	d108      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80029a8:	2100      	movs	r1, #0
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fe26 	bl	80035fc <HAL_PCDEx_LPM_Callback>
 80029b0:	e002      	b.n	80029b8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f004 feec 	bl	8007790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80029c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fe82 	bl	80056d6 <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029dc:	d112      	bne.n	8002a04 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d102      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f004 fea8 	bl	8007744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a02:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f002 fe64 	bl	80056d6 <USB_ReadInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a18:	f040 80c7 	bne.w	8002baa <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2110      	movs	r1, #16
 8002a36:	4618      	mov	r0, r3
 8002a38:	f001 ff32 	bl	80048a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a40:	e056      	b.n	8002af0 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a54:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a58:	015a      	lsls	r2, r3, #5
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a66:	0151      	lsls	r1, r2, #5
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	440a      	add	r2, r1
 8002a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a74:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a86:	0151      	lsls	r1, r2, #5
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	440a      	add	r2, r1
 8002a8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a98:	015a      	lsls	r2, r3, #5
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aa8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002aba:	0151      	lsls	r1, r2, #5
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	440a      	add	r2, r1
 8002ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ac4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ac8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ada:	0151      	lsls	r1, r2, #5
 8002adc:	69fa      	ldr	r2, [r7, #28]
 8002ade:	440a      	add	r2, r1
 8002ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002ae4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ae8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aec:	3301      	adds	r3, #1
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d3a3      	bcc.n	8002a42 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b08:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b20:	69fa      	ldr	r2, [r7, #28]
 8002b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b26:	f043 030b 	orr.w	r3, r3, #11
 8002b2a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b3c:	f043 030b 	orr.w	r3, r3, #11
 8002b40:	6453      	str	r3, [r2, #68]	; 0x44
 8002b42:	e015      	b.n	8002b70 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	69fa      	ldr	r2, [r7, #28]
 8002b4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b56:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b6a:	f043 030b 	orr.w	r3, r3, #11
 8002b6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	69fa      	ldr	r2, [r7, #28]
 8002b7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b7e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b94:	461a      	mov	r2, r3
 8002b96:	f002 fe63 	bl	8005860 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f002 fd91 	bl	80056d6 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bbe:	d124      	bne.n	8002c0a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 fe27 	bl	8005818 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 fec7 	bl	8004962 <USB_GetDevSpeed>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681c      	ldr	r4, [r3, #0]
 8002be0:	f001 f920 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8002be4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	461a      	mov	r2, r3
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f001 fc04 	bl	80043fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f004 fd86 	bl	8007706 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695a      	ldr	r2, [r3, #20]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f002 fd61 	bl	80056d6 <USB_ReadInterrupts>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d10a      	bne.n	8002c34 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f004 fd63 	bl	80076ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f002 0208 	and.w	r2, r2, #8
 8002c32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f002 fd4c 	bl	80056d6 <USB_ReadInterrupts>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c48:	d10f      	bne.n	8002c6a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f004 fdbb 	bl	80077d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695a      	ldr	r2, [r3, #20]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 fd31 	bl	80056d6 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f004 fd8e 	bl	80077ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f002 fd16 	bl	80056d6 <USB_ReadInterrupts>
 8002caa:	4603      	mov	r3, r0
 8002cac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d10a      	bne.n	8002ccc <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f004 fd9c 	bl	80077f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 fd00 	bl	80056d6 <USB_ReadInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d115      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f004 fd8c 	bl	8007810 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	605a      	str	r2, [r3, #4]
 8002d08:	e000      	b.n	8002d0c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002d0a:	bf00      	nop
    }
  }
}
 8002d0c:	3734      	adds	r7, #52	; 0x34
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}

08002d12 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b082      	sub	sp, #8
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_PCD_SetAddress+0x1a>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e013      	b.n	8002d54 <HAL_PCD_SetAddress+0x42>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f002 fc5e 	bl	8005606 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	4608      	mov	r0, r1
 8002d66:	4611      	mov	r1, r2
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	70fb      	strb	r3, [r7, #3]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	803b      	strh	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	da0f      	bge.n	8002da2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 020f 	and.w	r2, r3, #15
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	3338      	adds	r3, #56	; 0x38
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	705a      	strb	r2, [r3, #1]
 8002da0:	e00f      	b.n	8002dc2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	f003 020f 	and.w	r2, r3, #15
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	3304      	adds	r3, #4
 8002dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dce:	883a      	ldrh	r2, [r7, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	78ba      	ldrb	r2, [r7, #2]
 8002dd8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	785b      	ldrb	r3, [r3, #1]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002dec:	78bb      	ldrb	r3, [r7, #2]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d102      	bne.n	8002df8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_PCD_EP_Open+0xaa>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e00e      	b.n	8002e24 <HAL_PCD_EP_Open+0xc8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 fdc9 	bl	80049ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002e22:	7afb      	ldrb	r3, [r7, #11]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	da0f      	bge.n	8002e60 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	f003 020f 	and.w	r2, r3, #15
 8002e46:	4613      	mov	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	3338      	adds	r3, #56	; 0x38
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4413      	add	r3, r2
 8002e54:	3304      	adds	r3, #4
 8002e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	705a      	strb	r2, [r3, #1]
 8002e5e:	e00f      	b.n	8002e80 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e60:	78fb      	ldrb	r3, [r7, #3]
 8002e62:	f003 020f 	and.w	r2, r3, #15
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	3304      	adds	r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e80:	78fb      	ldrb	r3, [r7, #3]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d101      	bne.n	8002e9a <HAL_PCD_EP_Close+0x6e>
 8002e96:	2302      	movs	r3, #2
 8002e98:	e00e      	b.n	8002eb8 <HAL_PCD_EP_Close+0x8c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68f9      	ldr	r1, [r7, #12]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f001 fe07 	bl	8004abc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ed0:	7afb      	ldrb	r3, [r7, #11]
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ee2:	68fa      	ldr	r2, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2200      	movs	r2, #0
 8002f00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d102      	bne.n	8002f1c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1c:	7afb      	ldrb	r3, [r7, #11]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	6979      	ldr	r1, [r7, #20]
 8002f34:	f002 f8e2 	bl	80050fc <USB_EP0StartXfer>
 8002f38:	e008      	b.n	8002f4c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	461a      	mov	r2, r3
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	f001 fe94 	bl	8004c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002f78:	681b      	ldr	r3, [r3, #0]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b086      	sub	sp, #24
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	603b      	str	r3, [r7, #0]
 8002f92:	460b      	mov	r3, r1
 8002f94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f96:	7afb      	ldrb	r3, [r7, #11]
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	3338      	adds	r3, #56	; 0x38
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4413      	add	r3, r2
 8002faa:	3304      	adds	r3, #4
 8002fac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d109      	bne.n	8002ffe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6979      	ldr	r1, [r7, #20]
 8002ff8:	f002 f880 	bl	80050fc <USB_EP0StartXfer>
 8002ffc:	e008      	b.n	8003010 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	b2db      	uxtb	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6979      	ldr	r1, [r7, #20]
 800300c:	f001 fe32 	bl	8004c74 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	429a      	cmp	r2, r3
 8003032:	d901      	bls.n	8003038 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e050      	b.n	80030da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303c:	2b00      	cmp	r3, #0
 800303e:	da0f      	bge.n	8003060 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 020f 	and.w	r2, r3, #15
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	3338      	adds	r3, #56	; 0x38
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	705a      	strb	r2, [r3, #1]
 800305e:	e00d      	b.n	800307c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	3304      	adds	r3, #4
 8003074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2201      	movs	r2, #1
 8003080:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	b2da      	uxtb	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_PCD_EP_SetStall+0x82>
 8003098:	2302      	movs	r3, #2
 800309a:	e01e      	b.n	80030da <HAL_PCD_EP_SetStall+0xc0>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68f9      	ldr	r1, [r7, #12]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f002 f9d7 	bl	800545e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10a      	bne.n	80030d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	b2d9      	uxtb	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030ca:	461a      	mov	r2, r3
 80030cc:	f002 fbc8 	bl	8005860 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	460b      	mov	r3, r1
 80030ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 020f 	and.w	r2, r3, #15
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d901      	bls.n	8003100 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e042      	b.n	8003186 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003104:	2b00      	cmp	r3, #0
 8003106:	da0f      	bge.n	8003128 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	f003 020f 	and.w	r2, r3, #15
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	3338      	adds	r3, #56	; 0x38
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2201      	movs	r2, #1
 8003124:	705a      	strb	r2, [r3, #1]
 8003126:	e00f      	b.n	8003148 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_PCD_EP_ClrStall+0x86>
 8003164:	2302      	movs	r3, #2
 8003166:	e00e      	b.n	8003186 <HAL_PCD_EP_ClrStall+0xa4>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	4618      	mov	r0, r3
 8003178:	f002 f9df 	bl	800553a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b08a      	sub	sp, #40	; 0x28
 8003192:	af02      	add	r7, sp, #8
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	3338      	adds	r3, #56	; 0x38
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	3304      	adds	r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	699a      	ldr	r2, [r3, #24]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d901      	bls.n	80031c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e06c      	b.n	80032a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d902      	bls.n	80031e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3303      	adds	r3, #3
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031ea:	e02b      	b.n	8003244 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	695a      	ldr	r2, [r3, #20]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d902      	bls.n	8003208 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	3303      	adds	r3, #3
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68d9      	ldr	r1, [r3, #12]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003220:	b2db      	uxtb	r3, r3
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	4603      	mov	r3, r0
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f002 f8bb 	bl	80053a2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	441a      	add	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	441a      	add	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	b29b      	uxth	r3, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	429a      	cmp	r2, r3
 8003258:	d809      	bhi.n	800326e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003262:	429a      	cmp	r2, r3
 8003264:	d203      	bcs.n	800326e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1be      	bne.n	80031ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	695a      	ldr	r2, [r3, #20]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	429a      	cmp	r2, r3
 8003278:	d811      	bhi.n	800329e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	f003 030f 	and.w	r3, r3, #15
 8003280:	2201      	movs	r2, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	43db      	mvns	r3, r3
 8003294:	6939      	ldr	r1, [r7, #16]
 8003296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800329a:	4013      	ands	r3, r2
 800329c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	333c      	adds	r3, #60	; 0x3c
 80032c0:	3304      	adds	r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	f040 80a0 	bne.w	8003420 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d015      	beq.n	8003316 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a72      	ldr	r2, [pc, #456]	; (80034b8 <PCD_EP_OutXfrComplete_int+0x210>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	f240 80dd 	bls.w	80034ae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80d7 	beq.w	80034ae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	461a      	mov	r2, r3
 800330e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003312:	6093      	str	r3, [r2, #8]
 8003314:	e0cb      	b.n	80034ae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d009      	beq.n	8003334 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	461a      	mov	r2, r3
 800332e:	2320      	movs	r3, #32
 8003330:	6093      	str	r3, [r2, #8]
 8003332:	e0bc      	b.n	80034ae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 80b7 	bne.w	80034ae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4a5d      	ldr	r2, [pc, #372]	; (80034b8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d90f      	bls.n	8003368 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335e:	461a      	mov	r2, r3
 8003360:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003364:	6093      	str	r3, [r2, #8]
 8003366:	e0a2      	b.n	80034ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800337a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	0159      	lsls	r1, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	440b      	add	r3, r1
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800338e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4403      	add	r3, r0
 800339e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80033a2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033b6:	6819      	ldr	r1, [r3, #0]
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4403      	add	r3, r0
 80033c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4419      	add	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4403      	add	r3, r0
 80033dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033e0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d114      	bne.n	8003412 <PCD_EP_OutXfrComplete_int+0x16a>
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d108      	bne.n	8003412 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800340a:	461a      	mov	r2, r3
 800340c:	2101      	movs	r1, #1
 800340e:	f002 fa27 	bl	8005860 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f004 f931 	bl	8007680 <HAL_PCD_DataOutStageCallback>
 800341e:	e046      	b.n	80034ae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a26      	ldr	r2, [pc, #152]	; (80034bc <PCD_EP_OutXfrComplete_int+0x214>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d124      	bne.n	8003472 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	461a      	mov	r2, r3
 8003440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	e032      	b.n	80034ae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345e:	461a      	mov	r2, r3
 8003460:	2320      	movs	r3, #32
 8003462:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f004 f908 	bl	8007680 <HAL_PCD_DataOutStageCallback>
 8003470:	e01d      	b.n	80034ae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d114      	bne.n	80034a2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d108      	bne.n	80034a2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800349a:	461a      	mov	r2, r3
 800349c:	2100      	movs	r1, #0
 800349e:	f002 f9df 	bl	8005860 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	4619      	mov	r1, r3
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f004 f8e9 	bl	8007680 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	4f54300a 	.word	0x4f54300a
 80034bc:	4f54310a 	.word	0x4f54310a

080034c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	333c      	adds	r3, #60	; 0x3c
 80034d8:	3304      	adds	r3, #4
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	015a      	lsls	r2, r3, #5
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4413      	add	r3, r2
 80034e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	4a15      	ldr	r2, [pc, #84]	; (8003548 <PCD_EP_OutSetupPacket_int+0x88>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d90e      	bls.n	8003514 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350c:	461a      	mov	r2, r3
 800350e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003512:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f004 f8a1 	bl	800765c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <PCD_EP_OutSetupPacket_int+0x88>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d90c      	bls.n	800353c <PCD_EP_OutSetupPacket_int+0x7c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d108      	bne.n	800353c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003534:	461a      	mov	r2, r3
 8003536:	2101      	movs	r1, #1
 8003538:	f002 f992 	bl	8005860 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	4f54300a 	.word	0x4f54300a

0800354c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	70fb      	strb	r3, [r7, #3]
 8003558:	4613      	mov	r3, r2
 800355a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800356a:	883b      	ldrh	r3, [r7, #0]
 800356c:	0419      	lsls	r1, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	430a      	orrs	r2, r1
 8003576:	629a      	str	r2, [r3, #40]	; 0x28
 8003578:	e028      	b.n	80035cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4413      	add	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003588:	2300      	movs	r3, #0
 800358a:	73fb      	strb	r3, [r7, #15]
 800358c:	e00d      	b.n	80035aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	7bfb      	ldrb	r3, [r7, #15]
 8003594:	3340      	adds	r3, #64	; 0x40
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	4413      	add	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	3301      	adds	r3, #1
 80035a8:	73fb      	strb	r3, [r7, #15]
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d3ec      	bcc.n	800358e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80035b4:	883b      	ldrh	r3, [r7, #0]
 80035b6:	0418      	lsls	r0, r3, #16
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	3b01      	subs	r3, #1
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	4302      	orrs	r2, r0
 80035c4:	3340      	adds	r3, #64	; 0x40
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	887a      	ldrh	r2, [r7, #2]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e25b      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d075      	beq.n	800371e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003632:	4ba3      	ldr	r3, [pc, #652]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	2b04      	cmp	r3, #4
 800363c:	d00c      	beq.n	8003658 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800363e:	4ba0      	ldr	r3, [pc, #640]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003646:	2b08      	cmp	r3, #8
 8003648:	d112      	bne.n	8003670 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800364a:	4b9d      	ldr	r3, [pc, #628]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003656:	d10b      	bne.n	8003670 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	4b99      	ldr	r3, [pc, #612]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d05b      	beq.n	800371c <HAL_RCC_OscConfig+0x108>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d157      	bne.n	800371c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e236      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003678:	d106      	bne.n	8003688 <HAL_RCC_OscConfig+0x74>
 800367a:	4b91      	ldr	r3, [pc, #580]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a90      	ldr	r2, [pc, #576]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e01d      	b.n	80036c4 <HAL_RCC_OscConfig+0xb0>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x98>
 8003692:	4b8b      	ldr	r3, [pc, #556]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a8a      	ldr	r2, [pc, #552]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	4b88      	ldr	r3, [pc, #544]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a87      	ldr	r2, [pc, #540]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0xb0>
 80036ac:	4b84      	ldr	r3, [pc, #528]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a83      	ldr	r2, [pc, #524]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b81      	ldr	r3, [pc, #516]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a80      	ldr	r2, [pc, #512]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d013      	beq.n	80036f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fd fbaa 	bl	8000e24 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fd fba6 	bl	8000e24 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e1fb      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036e6:	4b76      	ldr	r3, [pc, #472]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0xc0>
 80036f2:	e014      	b.n	800371e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fd fb96 	bl	8000e24 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fd fb92 	bl	8000e24 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e1e7      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800370e:	4b6c      	ldr	r3, [pc, #432]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1f0      	bne.n	80036fc <HAL_RCC_OscConfig+0xe8>
 800371a:	e000      	b.n	800371e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800371c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d063      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800372a:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003736:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800373e:	2b08      	cmp	r3, #8
 8003740:	d11c      	bne.n	800377c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b5f      	ldr	r3, [pc, #380]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d116      	bne.n	800377c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	4b5c      	ldr	r3, [pc, #368]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x152>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e1bb      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b56      	ldr	r3, [pc, #344]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4952      	ldr	r1, [pc, #328]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377a:	e03a      	b.n	80037f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003784:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <HAL_RCC_OscConfig+0x2b0>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fd fb4b 	bl	8000e24 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003792:	f7fd fb47 	bl	8000e24 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e19c      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	4b46      	ldr	r3, [pc, #280]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b0:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4940      	ldr	r1, [pc, #256]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e015      	b.n	80037f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c6:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <HAL_RCC_OscConfig+0x2b0>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd fb2a 	bl	8000e24 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fd fb26 	bl	8000e24 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e17b      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	4b36      	ldr	r3, [pc, #216]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d030      	beq.n	8003860 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <HAL_RCC_OscConfig+0x2b4>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fd fb0a 	bl	8000e24 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003814:	f7fd fb06 	bl	8000e24 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e15b      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x200>
 8003832:	e015      	b.n	8003860 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003834:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x2b4>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800383a:	f7fd faf3 	bl	8000e24 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003842:	f7fd faef 	bl	8000e24 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e144      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80a0 	beq.w	80039ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003872:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a0e      	ldr	r2, [pc, #56]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b0c      	ldr	r3, [pc, #48]	; (80038c0 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	60bb      	str	r3, [r7, #8]
 8003898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800389a:	2301      	movs	r3, #1
 800389c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x2b8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d121      	bne.n	80038ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <HAL_RCC_OscConfig+0x2b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a07      	ldr	r2, [pc, #28]	; (80038cc <HAL_RCC_OscConfig+0x2b8>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038b6:	f7fd fab5 	bl	8000e24 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038bc:	e011      	b.n	80038e2 <HAL_RCC_OscConfig+0x2ce>
 80038be:	bf00      	nop
 80038c0:	40023800 	.word	0x40023800
 80038c4:	42470000 	.word	0x42470000
 80038c8:	42470e80 	.word	0x42470e80
 80038cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fd faa8 	bl	8000e24 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0fd      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b81      	ldr	r3, [pc, #516]	; (8003ae8 <HAL_RCC_OscConfig+0x4d4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d106      	bne.n	8003904 <HAL_RCC_OscConfig+0x2f0>
 80038f6:	4b7d      	ldr	r3, [pc, #500]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a7c      	ldr	r2, [pc, #496]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	e01c      	b.n	800393e <HAL_RCC_OscConfig+0x32a>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b05      	cmp	r3, #5
 800390a:	d10c      	bne.n	8003926 <HAL_RCC_OscConfig+0x312>
 800390c:	4b77      	ldr	r3, [pc, #476]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 800390e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003910:	4a76      	ldr	r2, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	6713      	str	r3, [r2, #112]	; 0x70
 8003918:	4b74      	ldr	r3, [pc, #464]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	4a73      	ldr	r2, [pc, #460]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	6713      	str	r3, [r2, #112]	; 0x70
 8003924:	e00b      	b.n	800393e <HAL_RCC_OscConfig+0x32a>
 8003926:	4b71      	ldr	r3, [pc, #452]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392a:	4a70      	ldr	r2, [pc, #448]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6713      	str	r3, [r2, #112]	; 0x70
 8003932:	4b6e      	ldr	r3, [pc, #440]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	4a6d      	ldr	r2, [pc, #436]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003938:	f023 0304 	bic.w	r3, r3, #4
 800393c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d015      	beq.n	8003972 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7fd fa6d 	bl	8000e24 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fd fa69 	bl	8000e24 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e0bc      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	4b61      	ldr	r3, [pc, #388]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ee      	beq.n	800394e <HAL_RCC_OscConfig+0x33a>
 8003970:	e014      	b.n	800399c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003972:	f7fd fa57 	bl	8000e24 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003978:	e00a      	b.n	8003990 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800397a:	f7fd fa53 	bl	8000e24 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	f241 3288 	movw	r2, #5000	; 0x1388
 8003988:	4293      	cmp	r3, r2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e0a6      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	4b56      	ldr	r3, [pc, #344]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1ee      	bne.n	800397a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a2:	4b52      	ldr	r3, [pc, #328]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a51      	ldr	r2, [pc, #324]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80039a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 8092 	beq.w	8003adc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b8:	4b4c      	ldr	r3, [pc, #304]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d05c      	beq.n	8003a7e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d141      	bne.n	8003a50 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039cc:	4b48      	ldr	r3, [pc, #288]	; (8003af0 <HAL_RCC_OscConfig+0x4dc>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fd fa27 	bl	8000e24 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039da:	f7fd fa23 	bl	8000e24 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e078      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ec:	4b3f      	ldr	r3, [pc, #252]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f0      	bne.n	80039da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69da      	ldr	r2, [r3, #28]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	019b      	lsls	r3, r3, #6
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	3b01      	subs	r3, #1
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	431a      	orrs	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	4933      	ldr	r1, [pc, #204]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a22:	4b33      	ldr	r3, [pc, #204]	; (8003af0 <HAL_RCC_OscConfig+0x4dc>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a28:	f7fd f9fc 	bl	8000e24 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd f9f8 	bl	8000e24 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e04d      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a42:	4b2a      	ldr	r3, [pc, #168]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x41c>
 8003a4e:	e045      	b.n	8003adc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a50:	4b27      	ldr	r3, [pc, #156]	; (8003af0 <HAL_RCC_OscConfig+0x4dc>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fd f9e5 	bl	8000e24 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fd f9e1 	bl	8000e24 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e036      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a70:	4b1e      	ldr	r3, [pc, #120]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x44a>
 8003a7c:	e02e      	b.n	8003adc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e029      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a8a:	4b18      	ldr	r3, [pc, #96]	; (8003aec <HAL_RCC_OscConfig+0x4d8>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11c      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d115      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d10d      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40007000 	.word	0x40007000
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470060 	.word	0x42470060

08003af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e0cc      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b08:	4b68      	ldr	r3, [pc, #416]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d90c      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b16:	4b65      	ldr	r3, [pc, #404]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a52      	ldr	r2, [pc, #328]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d044      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d119      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb2:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e06f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc2:	4b3b      	ldr	r3, [pc, #236]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e067      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd2:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f023 0203 	bic.w	r2, r3, #3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	4934      	ldr	r1, [pc, #208]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be4:	f7fd f91e 	bl	8000e24 <HAL_GetTick>
 8003be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bea:	e00a      	b.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bec:	f7fd f91a 	bl	8000e24 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e04f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c02:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 020c 	and.w	r2, r3, #12
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d1eb      	bne.n	8003bec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c14:	4b25      	ldr	r3, [pc, #148]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d20c      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c22:	4b22      	ldr	r3, [pc, #136]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <HAL_RCC_ClockConfig+0x1b8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4601      	mov	r1, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
 8003c8e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_ClockConfig+0x1c8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fd f87e 	bl	8000d9c <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	080084b0 	.word	0x080084b0
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd6:	4b50      	ldr	r3, [pc, #320]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d007      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x32>
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d008      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x38>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 808d 	bne.w	8003e06 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003cee:	60bb      	str	r3, [r7, #8]
       break;
 8003cf0:	e08c      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cf2:	4b4b      	ldr	r3, [pc, #300]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8003cf4:	60bb      	str	r3, [r7, #8]
      break;
 8003cf6:	e089      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf8:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d02:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d023      	beq.n	8003d56 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0e:	4b42      	ldr	r3, [pc, #264]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	f04f 0400 	mov.w	r4, #0
 8003d18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	ea03 0501 	and.w	r5, r3, r1
 8003d24:	ea04 0602 	and.w	r6, r4, r2
 8003d28:	4a3d      	ldr	r2, [pc, #244]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d2a:	fb02 f106 	mul.w	r1, r2, r6
 8003d2e:	2200      	movs	r2, #0
 8003d30:	fb02 f205 	mul.w	r2, r2, r5
 8003d34:	440a      	add	r2, r1
 8003d36:	493a      	ldr	r1, [pc, #232]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x160>)
 8003d38:	fba5 0101 	umull	r0, r1, r5, r1
 8003d3c:	1853      	adds	r3, r2, r1
 8003d3e:	4619      	mov	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f04f 0400 	mov.w	r4, #0
 8003d46:	461a      	mov	r2, r3
 8003d48:	4623      	mov	r3, r4
 8003d4a:	f7fc faa1 	bl	8000290 <__aeabi_uldivmod>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	60fb      	str	r3, [r7, #12]
 8003d54:	e049      	b.n	8003dea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d56:	4b30      	ldr	r3, [pc, #192]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	099b      	lsrs	r3, r3, #6
 8003d5c:	f04f 0400 	mov.w	r4, #0
 8003d60:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	ea03 0501 	and.w	r5, r3, r1
 8003d6c:	ea04 0602 	and.w	r6, r4, r2
 8003d70:	4629      	mov	r1, r5
 8003d72:	4632      	mov	r2, r6
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	f04f 0400 	mov.w	r4, #0
 8003d7c:	0154      	lsls	r4, r2, #5
 8003d7e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d82:	014b      	lsls	r3, r1, #5
 8003d84:	4619      	mov	r1, r3
 8003d86:	4622      	mov	r2, r4
 8003d88:	1b49      	subs	r1, r1, r5
 8003d8a:	eb62 0206 	sbc.w	r2, r2, r6
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	f04f 0400 	mov.w	r4, #0
 8003d96:	0194      	lsls	r4, r2, #6
 8003d98:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d9c:	018b      	lsls	r3, r1, #6
 8003d9e:	1a5b      	subs	r3, r3, r1
 8003da0:	eb64 0402 	sbc.w	r4, r4, r2
 8003da4:	f04f 0100 	mov.w	r1, #0
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	00e2      	lsls	r2, r4, #3
 8003dae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003db2:	00d9      	lsls	r1, r3, #3
 8003db4:	460b      	mov	r3, r1
 8003db6:	4614      	mov	r4, r2
 8003db8:	195b      	adds	r3, r3, r5
 8003dba:	eb44 0406 	adc.w	r4, r4, r6
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	02a2      	lsls	r2, r4, #10
 8003dc8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003dcc:	0299      	lsls	r1, r3, #10
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4614      	mov	r4, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f04f 0400 	mov.w	r4, #0
 8003ddc:	461a      	mov	r2, r3
 8003dde:	4623      	mov	r3, r4
 8003de0:	f7fc fa56 	bl	8000290 <__aeabi_uldivmod>
 8003de4:	4603      	mov	r3, r0
 8003de6:	460c      	mov	r4, r1
 8003de8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_GetSysClockFreq+0x158>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	0c1b      	lsrs	r3, r3, #16
 8003df0:	f003 0303 	and.w	r3, r3, #3
 8003df4:	3301      	adds	r3, #1
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e02:	60bb      	str	r3, [r7, #8]
      break;
 8003e04:	e002      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e06:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e08:	60bb      	str	r3, [r7, #8]
      break;
 8003e0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	017d7840 	.word	0x017d7840

08003e24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	20000000 	.word	0x20000000

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e40:	f7ff fff0 	bl	8003e24 <HAL_RCC_GetHCLKFreq>
 8003e44:	4601      	mov	r1, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a9b      	lsrs	r3, r3, #10
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4a03      	ldr	r2, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	080084c0 	.word	0x080084c0

08003e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e01d      	b.n	8003eb2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fc fe82 	bl	8000b94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 f8c0 	bl	8004028 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eb0:	2300      	movs	r3, #0
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_ConfigClockSource+0x18>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e0a6      	b.n	8004020 <HAL_TIM_ConfigClockSource+0x166>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ef0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ef8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d067      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0x120>
 8003f0a:	2b40      	cmp	r3, #64	; 0x40
 8003f0c:	d80b      	bhi.n	8003f26 <HAL_TIM_ConfigClockSource+0x6c>
 8003f0e:	2b10      	cmp	r3, #16
 8003f10:	d073      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x140>
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d802      	bhi.n	8003f1c <HAL_TIM_ConfigClockSource+0x62>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d06f      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003f1a:	e078      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d06c      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x140>
 8003f20:	2b30      	cmp	r3, #48	; 0x30
 8003f22:	d06a      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003f24:	e073      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f26:	2b70      	cmp	r3, #112	; 0x70
 8003f28:	d00d      	beq.n	8003f46 <HAL_TIM_ConfigClockSource+0x8c>
 8003f2a:	2b70      	cmp	r3, #112	; 0x70
 8003f2c:	d804      	bhi.n	8003f38 <HAL_TIM_ConfigClockSource+0x7e>
 8003f2e:	2b50      	cmp	r3, #80	; 0x50
 8003f30:	d033      	beq.n	8003f9a <HAL_TIM_ConfigClockSource+0xe0>
 8003f32:	2b60      	cmp	r3, #96	; 0x60
 8003f34:	d041      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003f36:	e06a      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f3c:	d066      	beq.n	800400c <HAL_TIM_ConfigClockSource+0x152>
 8003f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f42:	d017      	beq.n	8003f74 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003f44:	e063      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6899      	ldr	r1, [r3, #8]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f000 f961 	bl	800421c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	609a      	str	r2, [r3, #8]
      break;
 8003f72:	e04c      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6899      	ldr	r1, [r3, #8]
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f000 f94a 	bl	800421c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f96:	609a      	str	r2, [r3, #8]
      break;
 8003f98:	e039      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6818      	ldr	r0, [r3, #0]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f000 f8be 	bl	8004128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2150      	movs	r1, #80	; 0x50
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 f917 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003fb8:	e029      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6859      	ldr	r1, [r3, #4]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f000 f8dd 	bl	8004186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2160      	movs	r1, #96	; 0x60
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f907 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003fd8:	e019      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f000 f89e 	bl	8004128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2140      	movs	r1, #64	; 0x40
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f8f7 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 8003ff8:	e009      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4619      	mov	r1, r3
 8004004:	4610      	mov	r0, r2
 8004006:	f000 f8ee 	bl	80041e6 <TIM_ITRx_SetConfig>
      break;
 800400a:	e000      	b.n	800400e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800400c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a34      	ldr	r2, [pc, #208]	; (800410c <TIM_Base_SetConfig+0xe4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00f      	beq.n	8004060 <TIM_Base_SetConfig+0x38>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d00b      	beq.n	8004060 <TIM_Base_SetConfig+0x38>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a31      	ldr	r2, [pc, #196]	; (8004110 <TIM_Base_SetConfig+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d007      	beq.n	8004060 <TIM_Base_SetConfig+0x38>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a30      	ldr	r2, [pc, #192]	; (8004114 <TIM_Base_SetConfig+0xec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d003      	beq.n	8004060 <TIM_Base_SetConfig+0x38>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a2f      	ldr	r2, [pc, #188]	; (8004118 <TIM_Base_SetConfig+0xf0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d108      	bne.n	8004072 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a25      	ldr	r2, [pc, #148]	; (800410c <TIM_Base_SetConfig+0xe4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01b      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004080:	d017      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a22      	ldr	r2, [pc, #136]	; (8004110 <TIM_Base_SetConfig+0xe8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a21      	ldr	r2, [pc, #132]	; (8004114 <TIM_Base_SetConfig+0xec>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a20      	ldr	r2, [pc, #128]	; (8004118 <TIM_Base_SetConfig+0xf0>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00b      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1f      	ldr	r2, [pc, #124]	; (800411c <TIM_Base_SetConfig+0xf4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a1e      	ldr	r2, [pc, #120]	; (8004120 <TIM_Base_SetConfig+0xf8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <TIM_Base_SetConfig+0x8a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <TIM_Base_SetConfig+0xfc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a08      	ldr	r2, [pc, #32]	; (800410c <TIM_Base_SetConfig+0xe4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d103      	bne.n	80040f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	691a      	ldr	r2, [r3, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	615a      	str	r2, [r3, #20]
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40000400 	.word	0x40000400
 8004114:	40000800 	.word	0x40000800
 8004118:	40000c00 	.word	0x40000c00
 800411c:	40014000 	.word	0x40014000
 8004120:	40014400 	.word	0x40014400
 8004124:	40014800 	.word	0x40014800

08004128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0201 	bic.w	r2, r3, #1
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	011b      	lsls	r3, r3, #4
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	4313      	orrs	r3, r2
 800415c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 030a 	bic.w	r3, r3, #10
 8004164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	621a      	str	r2, [r3, #32]
}
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004186:	b480      	push	{r7}
 8004188:	b087      	sub	sp, #28
 800418a:	af00      	add	r7, sp, #0
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	f023 0210 	bic.w	r2, r3, #16
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	031b      	lsls	r3, r3, #12
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	621a      	str	r2, [r3, #32]
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b085      	sub	sp, #20
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	f043 0307 	orr.w	r3, r3, #7
 8004208:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	609a      	str	r2, [r3, #8]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004236:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	021a      	lsls	r2, r3, #8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	431a      	orrs	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	4313      	orrs	r3, r2
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004270:	2302      	movs	r3, #2
 8004272:	e050      	b.n	8004316 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1c      	ldr	r2, [pc, #112]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d018      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042c0:	d013      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a18      	ldr	r2, [pc, #96]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00e      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a16      	ldr	r2, [pc, #88]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d009      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a15      	ldr	r2, [pc, #84]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d004      	beq.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a13      	ldr	r2, [pc, #76]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10c      	bne.n	8004304 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	40010000 	.word	0x40010000
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40014000 	.word	0x40014000

08004338 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004338:	b084      	sub	sp, #16
 800433a:	b580      	push	{r7, lr}
 800433c:	b084      	sub	sp, #16
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	f107 001c 	add.w	r0, r7, #28
 8004346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	2b01      	cmp	r3, #1
 800434e:	d122      	bne.n	8004396 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d105      	bne.n	800438a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f001 fac6 	bl	800591c <USB_CoreReset>
 8004390:	4603      	mov	r3, r0
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e01a      	b.n	80043cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f001 faba 	bl	800591c <USB_CoreReset>
 80043a8:	4603      	mov	r3, r0
 80043aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
 80043be:	e005      	b.n	80043cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d10b      	bne.n	80043ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f043 0206 	orr.w	r2, r3, #6
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043f6:	b004      	add	sp, #16
 80043f8:	4770      	bx	lr
	...

080043fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	4613      	mov	r3, r2
 8004408:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800440a:	79fb      	ldrb	r3, [r7, #7]
 800440c:	2b02      	cmp	r3, #2
 800440e:	d165      	bne.n	80044dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4a41      	ldr	r2, [pc, #260]	; (8004518 <USB_SetTurnaroundTime+0x11c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d906      	bls.n	8004426 <USB_SetTurnaroundTime+0x2a>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4a40      	ldr	r2, [pc, #256]	; (800451c <USB_SetTurnaroundTime+0x120>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d802      	bhi.n	8004426 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004420:	230f      	movs	r3, #15
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e062      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4a3c      	ldr	r2, [pc, #240]	; (800451c <USB_SetTurnaroundTime+0x120>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d906      	bls.n	800443c <USB_SetTurnaroundTime+0x40>
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4a3b      	ldr	r2, [pc, #236]	; (8004520 <USB_SetTurnaroundTime+0x124>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d802      	bhi.n	800443c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004436:	230e      	movs	r3, #14
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e057      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a38      	ldr	r2, [pc, #224]	; (8004520 <USB_SetTurnaroundTime+0x124>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d906      	bls.n	8004452 <USB_SetTurnaroundTime+0x56>
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4a37      	ldr	r2, [pc, #220]	; (8004524 <USB_SetTurnaroundTime+0x128>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d802      	bhi.n	8004452 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800444c:	230d      	movs	r3, #13
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e04c      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	4a33      	ldr	r2, [pc, #204]	; (8004524 <USB_SetTurnaroundTime+0x128>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d906      	bls.n	8004468 <USB_SetTurnaroundTime+0x6c>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	4a32      	ldr	r2, [pc, #200]	; (8004528 <USB_SetTurnaroundTime+0x12c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d802      	bhi.n	8004468 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004462:	230c      	movs	r3, #12
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e041      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4a2f      	ldr	r2, [pc, #188]	; (8004528 <USB_SetTurnaroundTime+0x12c>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d906      	bls.n	800447e <USB_SetTurnaroundTime+0x82>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4a2e      	ldr	r2, [pc, #184]	; (800452c <USB_SetTurnaroundTime+0x130>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d802      	bhi.n	800447e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004478:	230b      	movs	r3, #11
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e036      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	4a2a      	ldr	r2, [pc, #168]	; (800452c <USB_SetTurnaroundTime+0x130>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d906      	bls.n	8004494 <USB_SetTurnaroundTime+0x98>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4a29      	ldr	r2, [pc, #164]	; (8004530 <USB_SetTurnaroundTime+0x134>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d802      	bhi.n	8004494 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800448e:	230a      	movs	r3, #10
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	e02b      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4a26      	ldr	r2, [pc, #152]	; (8004530 <USB_SetTurnaroundTime+0x134>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d906      	bls.n	80044aa <USB_SetTurnaroundTime+0xae>
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	4a25      	ldr	r2, [pc, #148]	; (8004534 <USB_SetTurnaroundTime+0x138>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d802      	bhi.n	80044aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044a4:	2309      	movs	r3, #9
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	e020      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4a21      	ldr	r2, [pc, #132]	; (8004534 <USB_SetTurnaroundTime+0x138>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d906      	bls.n	80044c0 <USB_SetTurnaroundTime+0xc4>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4a20      	ldr	r2, [pc, #128]	; (8004538 <USB_SetTurnaroundTime+0x13c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d802      	bhi.n	80044c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ba:	2308      	movs	r3, #8
 80044bc:	617b      	str	r3, [r7, #20]
 80044be:	e015      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4a1d      	ldr	r2, [pc, #116]	; (8004538 <USB_SetTurnaroundTime+0x13c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d906      	bls.n	80044d6 <USB_SetTurnaroundTime+0xda>
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <USB_SetTurnaroundTime+0x140>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d802      	bhi.n	80044d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044d0:	2307      	movs	r3, #7
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	e00a      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044d6:	2306      	movs	r3, #6
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e007      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044dc:	79fb      	ldrb	r3, [r7, #7]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d102      	bne.n	80044e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044e2:	2309      	movs	r3, #9
 80044e4:	617b      	str	r3, [r7, #20]
 80044e6:	e001      	b.n	80044ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044e8:	2309      	movs	r3, #9
 80044ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	029b      	lsls	r3, r3, #10
 8004500:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	00d8acbf 	.word	0x00d8acbf
 800451c:	00e4e1bf 	.word	0x00e4e1bf
 8004520:	00f423ff 	.word	0x00f423ff
 8004524:	0106737f 	.word	0x0106737f
 8004528:	011a499f 	.word	0x011a499f
 800452c:	01312cff 	.word	0x01312cff
 8004530:	014ca43f 	.word	0x014ca43f
 8004534:	016e35ff 	.word	0x016e35ff
 8004538:	01a6ab1f 	.word	0x01a6ab1f
 800453c:	01e847ff 	.word	0x01e847ff

08004540 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f043 0201 	orr.w	r2, r3, #1
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 0201 	bic.w	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d106      	bne.n	80045b0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	60da      	str	r2, [r3, #12]
 80045ae:	e00b      	b.n	80045c8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]
 80045c2:	e001      	b.n	80045c8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e003      	b.n	80045d0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045c8:	2032      	movs	r0, #50	; 0x32
 80045ca:	f7fc fc37 	bl	8000e3c <HAL_Delay>

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045d8:	b084      	sub	sp, #16
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
 80045f6:	e009      	b.n	800460c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3340      	adds	r3, #64	; 0x40
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	2200      	movs	r2, #0
 8004604:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	3301      	adds	r3, #1
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b0e      	cmp	r3, #14
 8004610:	d9f2      	bls.n	80045f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d11c      	bne.n	8004652 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004626:	f043 0302 	orr.w	r3, r3, #2
 800462a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
 8004650:	e00b      	b.n	800466a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004656:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004670:	461a      	mov	r2, r3
 8004672:	2300      	movs	r3, #0
 8004674:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467c:	4619      	mov	r1, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004684:	461a      	mov	r2, r3
 8004686:	680b      	ldr	r3, [r1, #0]
 8004688:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10c      	bne.n	80046aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004696:	2100      	movs	r1, #0
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f949 	bl	8004930 <USB_SetDevSpeed>
 800469e:	e008      	b.n	80046b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046a0:	2101      	movs	r1, #1
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f944 	bl	8004930 <USB_SetDevSpeed>
 80046a8:	e003      	b.n	80046b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046aa:	2103      	movs	r1, #3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f93f 	bl	8004930 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046b2:	2110      	movs	r1, #16
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f8f3 	bl	80048a0 <USB_FlushTxFifo>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f911 	bl	80048ec <USB_FlushRxFifo>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	461a      	mov	r2, r3
 80046dc:	2300      	movs	r3, #0
 80046de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e6:	461a      	mov	r2, r3
 80046e8:	2300      	movs	r3, #0
 80046ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	e043      	b.n	8004786 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004714:	d118      	bne.n	8004748 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10a      	bne.n	8004732 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	461a      	mov	r2, r3
 800472a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	e013      	b.n	800475a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	461a      	mov	r2, r3
 8004740:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e008      	b.n	800475a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	461a      	mov	r2, r3
 8004756:	2300      	movs	r3, #0
 8004758:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004766:	461a      	mov	r2, r3
 8004768:	2300      	movs	r3, #0
 800476a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004778:	461a      	mov	r2, r3
 800477a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800477e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	3301      	adds	r3, #1
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d3b7      	bcc.n	80046fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	e043      	b.n	800481c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047aa:	d118      	bne.n	80047de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047be:	461a      	mov	r2, r3
 80047c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047c4:	6013      	str	r3, [r2, #0]
 80047c6:	e013      	b.n	80047f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	461a      	mov	r2, r3
 80047d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e008      	b.n	80047f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	461a      	mov	r2, r3
 80047ec:	2300      	movs	r3, #0
 80047ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fc:	461a      	mov	r2, r3
 80047fe:	2300      	movs	r3, #0
 8004800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480e:	461a      	mov	r2, r3
 8004810:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004814:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3301      	adds	r3, #1
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	429a      	cmp	r2, r3
 8004822:	d3b7      	bcc.n	8004794 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004832:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004836:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004844:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	2b00      	cmp	r3, #0
 800484a:	d105      	bne.n	8004858 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	f043 0210 	orr.w	r2, r3, #16
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <USB_DevInit+0x2c4>)
 800485e:	4313      	orrs	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d005      	beq.n	8004876 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	f043 0208 	orr.w	r2, r3, #8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d107      	bne.n	800488c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004884:	f043 0304 	orr.w	r3, r3, #4
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800488c:	7dfb      	ldrb	r3, [r7, #23]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004898:	b004      	add	sp, #16
 800489a:	4770      	bx	lr
 800489c:	803c3800 	.word	0x803c3800

080048a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	019b      	lsls	r3, r3, #6
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <USB_FlushTxFifo+0x48>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	2b20      	cmp	r3, #32
 80048d6:	d0f0      	beq.n	80048ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	00030d40 	.word	0x00030d40

080048ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2210      	movs	r2, #16
 80048fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3301      	adds	r3, #1
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4a09      	ldr	r2, [pc, #36]	; (800492c <USB_FlushRxFifo+0x40>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e006      	b.n	800491e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b10      	cmp	r3, #16
 800491a:	d0f0      	beq.n	80048fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	00030d40 	.word	0x00030d40

08004930 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	460b      	mov	r3, r1
 800493a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004950:	4313      	orrs	r3, r2
 8004952:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 0306 	and.w	r3, r3, #6
 800497a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
 8004986:	e00a      	b.n	800499e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d002      	beq.n	8004994 <USB_GetDevSpeed+0x32>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2b06      	cmp	r3, #6
 8004992:	d102      	bne.n	800499a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004994:	2302      	movs	r3, #2
 8004996:	75fb      	strb	r3, [r7, #23]
 8004998:	e001      	b.n	800499e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800499a:	230f      	movs	r3, #15
 800499c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d13a      	bne.n	8004a3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	f003 030f 	and.w	r3, r3, #15
 80049d8:	2101      	movs	r1, #1
 80049da:	fa01 f303 	lsl.w	r3, r1, r3
 80049de:	b29b      	uxth	r3, r3
 80049e0:	68f9      	ldr	r1, [r7, #12]
 80049e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d155      	bne.n	8004aac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	78db      	ldrb	r3, [r3, #3]
 8004a1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	059b      	lsls	r3, r3, #22
 8004a22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a24:	4313      	orrs	r3, r2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	0151      	lsls	r1, r2, #5
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	440a      	add	r2, r1
 8004a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e036      	b.n	8004aac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a44:	69da      	ldr	r2, [r3, #28]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	2101      	movs	r1, #1
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	68f9      	ldr	r1, [r7, #12]
 8004a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11a      	bne.n	8004aac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	78db      	ldrb	r3, [r3, #3]
 8004a90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a92:	430b      	orrs	r3, r1
 8004a94:	4313      	orrs	r3, r2
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aaa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	785b      	ldrb	r3, [r3, #1]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d161      	bne.n	8004b9c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aee:	d11f      	bne.n	8004b30 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b0e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	2101      	movs	r1, #1
 8004b42:	fa01 f303 	lsl.w	r3, r1, r3
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	43db      	mvns	r3, r3
 8004b4a:	68f9      	ldr	r1, [r7, #12]
 8004b4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b50:	4013      	ands	r3, r2
 8004b52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b5a:	69da      	ldr	r2, [r3, #28]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	2101      	movs	r1, #1
 8004b66:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	43db      	mvns	r3, r3
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b74:	4013      	ands	r3, r2
 8004b76:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	0159      	lsls	r1, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	440b      	add	r3, r1
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	4619      	mov	r1, r3
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <USB_DeactivateEndpoint+0x1b0>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]
 8004b9a:	e060      	b.n	8004c5e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bb2:	d11f      	bne.n	8004bf4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bd2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	0151      	lsls	r1, r2, #5
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	440a      	add	r2, r1
 8004bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c14:	4013      	ands	r3, r2
 8004c16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c1e:	69da      	ldr	r2, [r3, #28]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	2101      	movs	r1, #1
 8004c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	43db      	mvns	r3, r3
 8004c32:	68f9      	ldr	r1, [r7, #12]
 8004c34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	015a      	lsls	r2, r3, #5
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4413      	add	r3, r2
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	0159      	lsls	r1, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	440b      	add	r3, r1
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	4619      	mov	r1, r3
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <USB_DeactivateEndpoint+0x1b4>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	ec337800 	.word	0xec337800
 8004c70:	eff37800 	.word	0xeff37800

08004c74 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af02      	add	r7, sp, #8
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	f040 815c 	bne.w	8004f4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d132      	bne.n	8004d04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	69fa      	ldr	r2, [r7, #28]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	0151      	lsls	r1, r2, #5
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	440a      	add	r2, r1
 8004cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ce0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	69fa      	ldr	r2, [r7, #28]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cfc:	0cdb      	lsrs	r3, r3, #19
 8004cfe:	04db      	lsls	r3, r3, #19
 8004d00:	6113      	str	r3, [r2, #16]
 8004d02:	e074      	b.n	8004dee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d1e:	0cdb      	lsrs	r3, r3, #19
 8004d20:	04db      	lsls	r3, r3, #19
 8004d22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6959      	ldr	r1, [r3, #20]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	440b      	add	r3, r1
 8004d60:	1e59      	subs	r1, r3, #1
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d6a:	04d9      	lsls	r1, r3, #19
 8004d6c:	4b9d      	ldr	r3, [pc, #628]	; (8004fe4 <USB_EPStartXfer+0x370>)
 8004d6e:	400b      	ands	r3, r1
 8004d70:	69b9      	ldr	r1, [r7, #24]
 8004d72:	0148      	lsls	r0, r1, #5
 8004d74:	69f9      	ldr	r1, [r7, #28]
 8004d76:	4401      	add	r1, r0
 8004d78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	691a      	ldr	r2, [r3, #16]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d96:	69b9      	ldr	r1, [r7, #24]
 8004d98:	0148      	lsls	r0, r1, #5
 8004d9a:	69f9      	ldr	r1, [r7, #28]
 8004d9c:	4401      	add	r1, r0
 8004d9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004da2:	4313      	orrs	r3, r2
 8004da4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	78db      	ldrb	r3, [r3, #3]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d11f      	bne.n	8004dee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004dcc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d14b      	bne.n	8004e8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d009      	beq.n	8004e10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	78db      	ldrb	r3, [r3, #3]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d128      	bne.n	8004e6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d110      	bne.n	8004e4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	69fa      	ldr	r2, [r7, #28]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	e00f      	b.n	8004e6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	0151      	lsls	r1, r2, #5
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	440a      	add	r2, r1
 8004e60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e12f      	b.n	80050ec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	0151      	lsls	r1, r2, #5
 8004e9e:	69fa      	ldr	r2, [r7, #28]
 8004ea0:	440a      	add	r2, r1
 8004ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eaa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	78db      	ldrb	r3, [r3, #3]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d015      	beq.n	8004ee0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8117 	beq.w	80050ec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	f003 030f 	and.w	r3, r3, #15
 8004ece:	2101      	movs	r1, #1
 8004ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed4:	69f9      	ldr	r1, [r7, #28]
 8004ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eda:	4313      	orrs	r3, r2
 8004edc:	634b      	str	r3, [r1, #52]	; 0x34
 8004ede:	e105      	b.n	80050ec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d110      	bne.n	8004f12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f0e:	6013      	str	r3, [r2, #0]
 8004f10:	e00f      	b.n	8004f32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	0151      	lsls	r1, r2, #5
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	440a      	add	r2, r1
 8004f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	68d9      	ldr	r1, [r3, #12]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	b298      	uxth	r0, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	4603      	mov	r3, r0
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fa2b 	bl	80053a2 <USB_WritePacket>
 8004f4c:	e0ce      	b.n	80050ec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	015a      	lsls	r2, r3, #5
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	4413      	add	r3, r2
 8004f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	0151      	lsls	r1, r2, #5
 8004f60:	69fa      	ldr	r2, [r7, #28]
 8004f62:	440a      	add	r2, r1
 8004f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f68:	0cdb      	lsrs	r3, r3, #19
 8004f6a:	04db      	lsls	r3, r3, #19
 8004f6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	69fb      	ldr	r3, [r7, #28]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d126      	bne.n	8004fe8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb0:	69b9      	ldr	r1, [r7, #24]
 8004fb2:	0148      	lsls	r0, r1, #5
 8004fb4:	69f9      	ldr	r1, [r7, #28]
 8004fb6:	4401      	add	r1, r0
 8004fb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	0151      	lsls	r1, r2, #5
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	440a      	add	r2, r1
 8004fd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fde:	6113      	str	r3, [r2, #16]
 8004fe0:	e036      	b.n	8005050 <USB_EPStartXfer+0x3dc>
 8004fe2:	bf00      	nop
 8004fe4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	1e5a      	subs	r2, r3, #1
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	8afb      	ldrh	r3, [r7, #22]
 800500e:	04d9      	lsls	r1, r3, #19
 8005010:	4b39      	ldr	r3, [pc, #228]	; (80050f8 <USB_EPStartXfer+0x484>)
 8005012:	400b      	ands	r3, r1
 8005014:	69b9      	ldr	r1, [r7, #24]
 8005016:	0148      	lsls	r0, r1, #5
 8005018:	69f9      	ldr	r1, [r7, #28]
 800501a:	4401      	add	r1, r0
 800501c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005020:	4313      	orrs	r3, r2
 8005022:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	8af9      	ldrh	r1, [r7, #22]
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005040:	69b9      	ldr	r1, [r7, #24]
 8005042:	0148      	lsls	r0, r1, #5
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	4401      	add	r1, r0
 8005048:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800504c:	4313      	orrs	r3, r2
 800504e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10d      	bne.n	8005072 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	68d9      	ldr	r1, [r3, #12]
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	015a      	lsls	r2, r3, #5
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506e:	460a      	mov	r2, r1
 8005070:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	78db      	ldrb	r3, [r3, #3]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d128      	bne.n	80050cc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d110      	bne.n	80050ac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e00f      	b.n	80050cc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	1ff80000 	.word	0x1ff80000

080050fc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b01      	cmp	r3, #1
 800511a:	f040 80cd 	bne.w	80052b8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d132      	bne.n	800518c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	0151      	lsls	r1, r2, #5
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	440a      	add	r2, r1
 800513c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005140:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005144:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005148:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	015a      	lsls	r2, r3, #5
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	4413      	add	r3, r2
 8005152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	0151      	lsls	r1, r2, #5
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	440a      	add	r2, r1
 8005160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	0151      	lsls	r1, r2, #5
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	440a      	add	r2, r1
 8005180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005184:	0cdb      	lsrs	r3, r3, #19
 8005186:	04db      	lsls	r3, r3, #19
 8005188:	6113      	str	r3, [r2, #16]
 800518a:	e04e      	b.n	800522a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051a6:	0cdb      	lsrs	r3, r3, #19
 80051a8:	04db      	lsls	r3, r3, #19
 80051aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051ce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d903      	bls.n	80051e4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521a:	6939      	ldr	r1, [r7, #16]
 800521c:	0148      	lsls	r0, r1, #5
 800521e:	6979      	ldr	r1, [r7, #20]
 8005220:	4401      	add	r1, r0
 8005222:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005226:	4313      	orrs	r3, r2
 8005228:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800522a:	79fb      	ldrb	r3, [r7, #7]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d11e      	bne.n	800526e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	461a      	mov	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	0151      	lsls	r1, r2, #5
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	440a      	add	r2, r1
 8005262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005266:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	e092      	b.n	8005394 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005288:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800528c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d07e      	beq.n	8005394 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	2101      	movs	r1, #1
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	6979      	ldr	r1, [r7, #20]
 80052ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052b2:	4313      	orrs	r3, r2
 80052b4:	634b      	str	r3, [r1, #52]	; 0x34
 80052b6:	e06d      	b.n	8005394 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d2:	0cdb      	lsrs	r3, r3, #19
 80052d4:	04db      	lsls	r3, r3, #19
 80052d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052fa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	4413      	add	r3, r2
 8005314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	0151      	lsls	r1, r2, #5
 800531e:	697a      	ldr	r2, [r7, #20]
 8005320:	440a      	add	r2, r1
 8005322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005326:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800532a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	4413      	add	r3, r2
 8005334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005342:	6939      	ldr	r1, [r7, #16]
 8005344:	0148      	lsls	r0, r1, #5
 8005346:	6979      	ldr	r1, [r7, #20]
 8005348:	4401      	add	r1, r0
 800534a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800534e:	4313      	orrs	r3, r2
 8005350:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005352:	79fb      	ldrb	r3, [r7, #7]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d10d      	bne.n	8005374 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d009      	beq.n	8005374 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	68d9      	ldr	r1, [r3, #12]
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005370:	460a      	mov	r2, r1
 8005372:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005392:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b089      	sub	sp, #36	; 0x24
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	4611      	mov	r1, r2
 80053ae:	461a      	mov	r2, r3
 80053b0:	460b      	mov	r3, r1
 80053b2:	71fb      	strb	r3, [r7, #7]
 80053b4:	4613      	mov	r3, r2
 80053b6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80053c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11a      	bne.n	80053fe <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053c8:	88bb      	ldrh	r3, [r7, #4]
 80053ca:	3303      	adds	r3, #3
 80053cc:	089b      	lsrs	r3, r3, #2
 80053ce:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053d0:	2300      	movs	r3, #0
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e00f      	b.n	80053f6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053d6:	79fb      	ldrb	r3, [r7, #7]
 80053d8:	031a      	lsls	r2, r3, #12
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053e2:	461a      	mov	r2, r3
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	3304      	adds	r3, #4
 80053ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	3301      	adds	r3, #1
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d3eb      	bcc.n	80053d6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3724      	adds	r7, #36	; 0x24
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800540c:	b480      	push	{r7}
 800540e:	b089      	sub	sp, #36	; 0x24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005422:	88fb      	ldrh	r3, [r7, #6]
 8005424:	3303      	adds	r3, #3
 8005426:	089b      	lsrs	r3, r3, #2
 8005428:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800542a:	2300      	movs	r3, #0
 800542c:	61bb      	str	r3, [r7, #24]
 800542e:	e00b      	b.n	8005448 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	601a      	str	r2, [r3, #0]
    pDest++;
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	3304      	adds	r3, #4
 8005440:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	3301      	adds	r3, #1
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	429a      	cmp	r2, r3
 800544e:	d3ef      	bcc.n	8005430 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005450:	69fb      	ldr	r3, [r7, #28]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3724      	adds	r7, #36	; 0x24
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d12c      	bne.n	80054d4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	015a      	lsls	r2, r3, #5
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	db12      	blt.n	80054b2 <USB_EPSetStall+0x54>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00f      	beq.n	80054b2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054b0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	0151      	lsls	r1, r2, #5
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	440a      	add	r2, r1
 80054c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054d0:	6013      	str	r3, [r2, #0]
 80054d2:	e02b      	b.n	800552c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	db12      	blt.n	800550c <USB_EPSetStall+0xae>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00f      	beq.n	800550c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	0151      	lsls	r1, r2, #5
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	440a      	add	r2, r1
 8005502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005506:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800550a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	0151      	lsls	r1, r2, #5
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	440a      	add	r2, r1
 8005522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005526:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800552a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d128      	bne.n	80055a8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005570:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005574:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	78db      	ldrb	r3, [r3, #3]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d003      	beq.n	8005586 <USB_EPClearStall+0x4c>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	78db      	ldrb	r3, [r3, #3]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d138      	bne.n	80055f8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	e027      	b.n	80055f8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	78db      	ldrb	r3, [r3, #3]
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d003      	beq.n	80055d8 <USB_EPClearStall+0x9e>
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	78db      	ldrb	r3, [r3, #3]
 80055d4:	2b02      	cmp	r3, #2
 80055d6:	d10f      	bne.n	80055f8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	0151      	lsls	r1, r2, #5
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	440a      	add	r2, r1
 80055ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005606:	b480      	push	{r7}
 8005608:	b085      	sub	sp, #20
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005624:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005628:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	011b      	lsls	r3, r3, #4
 8005636:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005640:	4313      	orrs	r3, r2
 8005642:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr

08005652 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800566c:	f023 0303 	bic.w	r3, r3, #3
 8005670:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005680:	f023 0302 	bic.w	r3, r3, #2
 8005684:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056c2:	f043 0302 	orr.w	r3, r3, #2
 80056c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4013      	ands	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056ee:	68fb      	ldr	r3, [r7, #12]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3714      	adds	r7, #20
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	4013      	ands	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	0c1b      	lsrs	r3, r3, #16
}
 8005724:	4618      	mov	r0, r3
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	68ba      	ldr	r2, [r7, #8]
 8005750:	4013      	ands	r3, r2
 8005752:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	b29b      	uxth	r3, r3
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	460b      	mov	r3, r1
 800576e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005792:	68bb      	ldr	r3, [r7, #8]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
 80057d0:	01db      	lsls	r3, r3, #7
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057da:	78fb      	ldrb	r3, [r7, #3]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4013      	ands	r3, r2
 80057ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057ee:	68bb      	ldr	r3, [r7, #8]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0301 	and.w	r3, r3, #1
}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005832:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005836:	f023 0307 	bic.w	r3, r3, #7
 800583a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800584a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	460b      	mov	r3, r1
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	333c      	adds	r3, #60	; 0x3c
 8005876:	3304      	adds	r3, #4
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	4a26      	ldr	r2, [pc, #152]	; (8005918 <USB_EP0_OutStart+0xb8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d90a      	bls.n	800589a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005894:	d101      	bne.n	800589a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e037      	b.n	800590a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a0:	461a      	mov	r2, r3
 80058a2:	2300      	movs	r3, #0
 80058a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f043 0318 	orr.w	r3, r3, #24
 80058cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d10f      	bne.n	8005908 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	461a      	mov	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005902:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005906:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	371c      	adds	r7, #28
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	4f54300a 	.word	0x4f54300a

0800591c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a13      	ldr	r2, [pc, #76]	; (8005980 <USB_CoreReset+0x64>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e01b      	b.n	8005972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	daf2      	bge.n	8005928 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f043 0201 	orr.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4a09      	ldr	r2, [pc, #36]	; (8005980 <USB_CoreReset+0x64>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d901      	bls.n	8005964 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	2b01      	cmp	r3, #1
 800596e:	d0f0      	beq.n	8005952 <USB_CoreReset+0x36>

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	00030d40 	.word	0x00030d40

08005984 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	460b      	mov	r3, r1
 800598e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005990:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005994:	f002 f92a 	bl	8007bec <malloc>
 8005998:	4603      	mov	r3, r0
 800599a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d105      	bne.n	80059ae <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80059aa:	2302      	movs	r3, #2
 80059ac:	e066      	b.n	8005a7c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	7c1b      	ldrb	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d119      	bne.n	80059f2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059c2:	2202      	movs	r2, #2
 80059c4:	2181      	movs	r1, #129	; 0x81
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f001 ff97 	bl	80078fa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80059d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059d6:	2202      	movs	r2, #2
 80059d8:	2101      	movs	r1, #1
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f001 ff8d 	bl	80078fa <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2210      	movs	r2, #16
 80059ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80059f0:	e016      	b.n	8005a20 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80059f2:	2340      	movs	r3, #64	; 0x40
 80059f4:	2202      	movs	r2, #2
 80059f6:	2181      	movs	r1, #129	; 0x81
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f001 ff7e 	bl	80078fa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005a04:	2340      	movs	r3, #64	; 0x40
 8005a06:	2202      	movs	r2, #2
 8005a08:	2101      	movs	r1, #1
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 ff75 	bl	80078fa <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2210      	movs	r2, #16
 8005a1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a20:	2308      	movs	r3, #8
 8005a22:	2203      	movs	r2, #3
 8005a24:	2182      	movs	r1, #130	; 0x82
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f001 ff67 	bl	80078fa <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	7c1b      	ldrb	r3, [r3, #16]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d109      	bne.n	8005a6a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a60:	2101      	movs	r1, #1
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f002 f838 	bl	8007ad8 <USBD_LL_PrepareReceive>
 8005a68:	e007      	b.n	8005a7a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005a70:	2340      	movs	r3, #64	; 0x40
 8005a72:	2101      	movs	r1, #1
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f002 f82f 	bl	8007ad8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005a94:	2181      	movs	r1, #129	; 0x81
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 ff55 	bl	8007946 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f001 ff4e 	bl	8007946 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ab2:	2182      	movs	r1, #130	; 0x82
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 ff46 	bl	8007946 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00e      	beq.n	8005af2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f002 f889 	bl	8007bfc <free>
    pdev->pClassData = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b0c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d03a      	beq.n	8005b9c <USBD_CDC_Setup+0xa0>
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	f040 8097 	bne.w	8005c5a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	88db      	ldrh	r3, [r3, #6]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d029      	beq.n	8005b88 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	b25b      	sxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da11      	bge.n	8005b62 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005b4a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b4c:	683a      	ldr	r2, [r7, #0]
 8005b4e:	88d2      	ldrh	r2, [r2, #6]
 8005b50:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b52:	6939      	ldr	r1, [r7, #16]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	88db      	ldrh	r3, [r3, #6]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f001 fa9d 	bl	800709a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005b60:	e082      	b.n	8005c68 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	785a      	ldrb	r2, [r3, #1]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	88db      	ldrh	r3, [r3, #6]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005b78:	6939      	ldr	r1, [r7, #16]
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	88db      	ldrh	r3, [r3, #6]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f001 fab6 	bl	80070f2 <USBD_CtlPrepareRx>
    break;
 8005b86:	e06f      	b.n	8005c68 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	7850      	ldrb	r0, [r2, #1]
 8005b94:	2200      	movs	r2, #0
 8005b96:	6839      	ldr	r1, [r7, #0]
 8005b98:	4798      	blx	r3
    break;
 8005b9a:	e065      	b.n	8005c68 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b0b      	cmp	r3, #11
 8005ba2:	d84f      	bhi.n	8005c44 <USBD_CDC_Setup+0x148>
 8005ba4:	a201      	add	r2, pc, #4	; (adr r2, 8005bac <USBD_CDC_Setup+0xb0>)
 8005ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005baa:	bf00      	nop
 8005bac:	08005bdd 	.word	0x08005bdd
 8005bb0:	08005c53 	.word	0x08005c53
 8005bb4:	08005c45 	.word	0x08005c45
 8005bb8:	08005c45 	.word	0x08005c45
 8005bbc:	08005c45 	.word	0x08005c45
 8005bc0:	08005c45 	.word	0x08005c45
 8005bc4:	08005c45 	.word	0x08005c45
 8005bc8:	08005c45 	.word	0x08005c45
 8005bcc:	08005c45 	.word	0x08005c45
 8005bd0:	08005c45 	.word	0x08005c45
 8005bd4:	08005c05 	.word	0x08005c05
 8005bd8:	08005c2d 	.word	0x08005c2d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d107      	bne.n	8005bf6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005be6:	f107 030c 	add.w	r3, r7, #12
 8005bea:	2202      	movs	r2, #2
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 fa53 	bl	800709a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005bf4:	e030      	b.n	8005c58 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 f9dd 	bl	8006fb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	75fb      	strb	r3, [r7, #23]
      break;
 8005c02:	e029      	b.n	8005c58 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d107      	bne.n	8005c1e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005c0e:	f107 030f 	add.w	r3, r7, #15
 8005c12:	2201      	movs	r2, #1
 8005c14:	4619      	mov	r1, r3
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 fa3f 	bl	800709a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005c1c:	e01c      	b.n	8005c58 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f9c9 	bl	8006fb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c26:	2303      	movs	r3, #3
 8005c28:	75fb      	strb	r3, [r7, #23]
      break;
 8005c2a:	e015      	b.n	8005c58 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d00f      	beq.n	8005c56 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005c36:	6839      	ldr	r1, [r7, #0]
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f001 f9bd 	bl	8006fb8 <USBD_CtlError>
        ret = USBD_FAIL;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005c42:	e008      	b.n	8005c56 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 f9b6 	bl	8006fb8 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c50:	e002      	b.n	8005c58 <USBD_CDC_Setup+0x15c>
      break;
 8005c52:	bf00      	nop
 8005c54:	e008      	b.n	8005c68 <USBD_CDC_Setup+0x16c>
      break;
 8005c56:	bf00      	nop
    }
    break;
 8005c58:	e006      	b.n	8005c68 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f001 f9ab 	bl	8006fb8 <USBD_CtlError>
    ret = USBD_FAIL;
 8005c62:	2303      	movs	r3, #3
 8005c64:	75fb      	strb	r3, [r7, #23]
    break;
 8005c66:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3718      	adds	r7, #24
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop

08005c74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e049      	b.n	8005d2a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c9c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	3318      	adds	r3, #24
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d029      	beq.n	8005d08 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	78f9      	ldrb	r1, [r7, #3]
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	460b      	mov	r3, r1
 8005ccc:	00db      	lsls	r3, r3, #3
 8005cce:	1a5b      	subs	r3, r3, r1
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4403      	add	r3, r0
 8005cd4:	3344      	adds	r3, #68	; 0x44
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cdc:	fb03 f301 	mul.w	r3, r3, r1
 8005ce0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d110      	bne.n	8005d08 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005ce6:	78fa      	ldrb	r2, [r7, #3]
 8005ce8:	6879      	ldr	r1, [r7, #4]
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	440b      	add	r3, r1
 8005cf4:	3318      	adds	r3, #24
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cfa:	78f9      	ldrb	r1, [r7, #3]
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	2200      	movs	r2, #0
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f001 fec8 	bl	8007a96 <USBD_LL_Transmit>
 8005d06:	e00f      	b.n	8005d28 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d24:	78fa      	ldrb	r2, [r7, #3]
 8005d26:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d44:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e015      	b.n	8005d80 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f001 fede 	bl	8007b1a <USBD_LL_GetRxDataSize>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d96:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d015      	beq.n	8005dce <USBD_CDC_EP0_RxReady+0x46>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005da8:	2bff      	cmp	r3, #255	; 0xff
 8005daa:	d010      	beq.n	8005dce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005dba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	22ff      	movs	r2, #255	; 0xff
 8005dca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2243      	movs	r2, #67	; 0x43
 8005de4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005de6:	4b03      	ldr	r3, [pc, #12]	; (8005df4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	20000094 	.word	0x20000094

08005df8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2243      	movs	r2, #67	; 0x43
 8005e04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005e06:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr
 8005e14:	20000050 	.word	0x20000050

08005e18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2243      	movs	r2, #67	; 0x43
 8005e24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005e26:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	200000d8 	.word	0x200000d8

08005e38 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	220a      	movs	r2, #10
 8005e44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e46:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr
 8005e54:	2000000c 	.word	0x2000000c

08005e58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d101      	bne.n	8005e6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e004      	b.n	8005e76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b087      	sub	sp, #28
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005e94:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ec4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005eec:	2301      	movs	r3, #1
 8005eee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e01a      	b.n	8005f34 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d114      	bne.n	8005f32 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f26:	2181      	movs	r1, #129	; 0x81
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 fdb4 	bl	8007a96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e016      	b.n	8005f88 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	7c1b      	ldrb	r3, [r3, #16]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d109      	bne.n	8005f76 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fdb2 	bl	8007ad8 <USBD_LL_PrepareReceive>
 8005f74:	e007      	b.n	8005f86 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f7c:	2340      	movs	r3, #64	; 0x40
 8005f7e:	2101      	movs	r1, #1
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f001 fda9 	bl	8007ad8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3710      	adds	r7, #16
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e025      	b.n	8005ff4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	79fa      	ldrb	r2, [r7, #7]
 8005fe6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f001 fc1f 	bl	800782c <USBD_LL_Init>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	e010      	b.n	8006036 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	f107 020e 	add.w	r2, r7, #14
 8006028:	4610      	mov	r0, r2
 800602a:	4798      	blx	r3
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b082      	sub	sp, #8
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f001 fc3c 	bl	80078c4 <USBD_LL_Start>
 800604c:	4603      	mov	r3, r0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006056:	b480      	push	{r7}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	460b      	mov	r3, r1
 8006076:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006078:	2303      	movs	r3, #3
 800607a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	78fa      	ldrb	r2, [r7, #3]
 8006090:	4611      	mov	r1, r2
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
 8006096:	4603      	mov	r3, r0
 8006098:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800609a:	7bfb      	ldrb	r3, [r7, #15]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	4611      	mov	r1, r2
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	4798      	blx	r3
  }

  return USBD_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3708      	adds	r7, #8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 ff2c 	bl	8006f44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060fa:	461a      	mov	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006108:	f003 031f 	and.w	r3, r3, #31
 800610c:	2b01      	cmp	r3, #1
 800610e:	d00e      	beq.n	800612e <USBD_LL_SetupStage+0x5a>
 8006110:	2b01      	cmp	r3, #1
 8006112:	d302      	bcc.n	800611a <USBD_LL_SetupStage+0x46>
 8006114:	2b02      	cmp	r3, #2
 8006116:	d014      	beq.n	8006142 <USBD_LL_SetupStage+0x6e>
 8006118:	e01d      	b.n	8006156 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006120:	4619      	mov	r1, r3
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa18 	bl	8006558 <USBD_StdDevReq>
 8006128:	4603      	mov	r3, r0
 800612a:	73fb      	strb	r3, [r7, #15]
      break;
 800612c:	e020      	b.n	8006170 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fa7c 	bl	8006634 <USBD_StdItfReq>
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
      break;
 8006140:	e016      	b.n	8006170 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fab8 	bl	80066c0 <USBD_StdEPReq>
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
      break;
 8006154:	e00c      	b.n	8006170 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800615c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006160:	b2db      	uxtb	r3, r3
 8006162:	4619      	mov	r1, r3
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fc0d 	bl	8007984 <USBD_LL_StallEP>
 800616a:	4603      	mov	r3, r0
 800616c:	73fb      	strb	r3, [r7, #15]
      break;
 800616e:	bf00      	nop
  }

  return ret;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b086      	sub	sp, #24
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	460b      	mov	r3, r1
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006188:	7afb      	ldrb	r3, [r7, #11]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d137      	bne.n	80061fe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006194:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800619c:	2b03      	cmp	r3, #3
 800619e:	d14a      	bne.n	8006236 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d913      	bls.n	80061d4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	1ad2      	subs	r2, r2, r3
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	68da      	ldr	r2, [r3, #12]
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	4293      	cmp	r3, r2
 80061c4:	bf28      	it	cs
 80061c6:	4613      	movcs	r3, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 ffad 	bl	800712c <USBD_CtlContinueRx>
 80061d2:	e030      	b.n	8006236 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00a      	beq.n	80061f6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80061e6:	2b03      	cmp	r3, #3
 80061e8:	d105      	bne.n	80061f6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 ffa9 	bl	800714e <USBD_CtlSendStatus>
 80061fc:	e01b      	b.n	8006236 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d013      	beq.n	8006232 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006210:	2b03      	cmp	r3, #3
 8006212:	d10e      	bne.n	8006232 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	7afa      	ldrb	r2, [r7, #11]
 800621e:	4611      	mov	r1, r2
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	4798      	blx	r3
 8006224:	4603      	mov	r3, r0
 8006226:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006228:	7dfb      	ldrb	r3, [r7, #23]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800622e:	7dfb      	ldrb	r3, [r7, #23]
 8006230:	e002      	b.n	8006238 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006232:	2303      	movs	r3, #3
 8006234:	e000      	b.n	8006238 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3718      	adds	r7, #24
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	460b      	mov	r3, r1
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d16a      	bne.n	800632a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	3314      	adds	r3, #20
 8006258:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006260:	2b02      	cmp	r3, #2
 8006262:	d155      	bne.n	8006310 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	429a      	cmp	r2, r3
 800626e:	d914      	bls.n	800629a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	1ad2      	subs	r2, r2, r3
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	461a      	mov	r2, r3
 8006284:	6879      	ldr	r1, [r7, #4]
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 ff22 	bl	80070d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800628c:	2300      	movs	r3, #0
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f001 fc20 	bl	8007ad8 <USBD_LL_PrepareReceive>
 8006298:	e03a      	b.n	8006310 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d11c      	bne.n	80062e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d316      	bcc.n	80062e0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	685a      	ldr	r2, [r3, #4]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80062bc:	429a      	cmp	r2, r3
 80062be:	d20f      	bcs.n	80062e0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80062c0:	2200      	movs	r2, #0
 80062c2:	2100      	movs	r1, #0
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 ff03 	bl	80070d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062d2:	2300      	movs	r3, #0
 80062d4:	2200      	movs	r2, #0
 80062d6:	2100      	movs	r1, #0
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f001 fbfd 	bl	8007ad8 <USBD_LL_PrepareReceive>
 80062de:	e017      	b.n	8006310 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d105      	bne.n	8006302 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006302:	2180      	movs	r1, #128	; 0x80
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f001 fb3d 	bl	8007984 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 ff32 	bl	8007174 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d123      	bne.n	8006362 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fe9b 	bl	8006056 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006328:	e01b      	b.n	8006362 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d013      	beq.n	800635e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800633c:	2b03      	cmp	r3, #3
 800633e:	d10e      	bne.n	800635e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006346:	695b      	ldr	r3, [r3, #20]
 8006348:	7afa      	ldrb	r2, [r7, #11]
 800634a:	4611      	mov	r1, r2
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	4798      	blx	r3
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	e002      	b.n	8006364 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800635e:	2303      	movs	r3, #3
 8006360:	e000      	b.n	8006364 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006362:	2300      	movs	r3, #0
}
 8006364:	4618      	mov	r0, r3
 8006366:	3718      	adds	r7, #24
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6852      	ldr	r2, [r2, #4]
 80063a8:	b2d2      	uxtb	r2, r2
 80063aa:	4611      	mov	r1, r2
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063b0:	2340      	movs	r3, #64	; 0x40
 80063b2:	2200      	movs	r2, #0
 80063b4:	2100      	movs	r1, #0
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f001 fa9f 	bl	80078fa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2240      	movs	r2, #64	; 0x40
 80063c8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80063cc:	2340      	movs	r3, #64	; 0x40
 80063ce:	2200      	movs	r2, #0
 80063d0:	2180      	movs	r1, #128	; 0x80
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fa91 	bl	80078fa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2240      	movs	r2, #64	; 0x40
 80063e2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
 80063f6:	460b      	mov	r3, r1
 80063f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	78fa      	ldrb	r2, [r7, #3]
 80063fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2204      	movs	r2, #4
 8006426:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006446:	2b04      	cmp	r3, #4
 8006448:	d105      	bne.n	8006456 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006472:	2b03      	cmp	r3, #3
 8006474:	d10b      	bne.n	800648e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d005      	beq.n	800648e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	460b      	mov	r3, r1
 80064a2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	460b      	mov	r3, r1
 80064bc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	370c      	adds	r7, #12
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	687a      	ldr	r2, [r7, #4]
 8006506:	6852      	ldr	r2, [r2, #4]
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	4611      	mov	r1, r2
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	4798      	blx	r3
  }

  return USBD_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800651a:	b480      	push	{r7}
 800651c:	b087      	sub	sp, #28
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	3301      	adds	r3, #1
 8006530:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006538:	8a3b      	ldrh	r3, [r7, #16]
 800653a:	021b      	lsls	r3, r3, #8
 800653c:	b21a      	sxth	r2, r3
 800653e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006542:	4313      	orrs	r3, r2
 8006544:	b21b      	sxth	r3, r3
 8006546:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006548:	89fb      	ldrh	r3, [r7, #14]
}
 800654a:	4618      	mov	r0, r3
 800654c:	371c      	adds	r7, #28
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
	...

08006558 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800656e:	2b20      	cmp	r3, #32
 8006570:	d004      	beq.n	800657c <USBD_StdDevReq+0x24>
 8006572:	2b40      	cmp	r3, #64	; 0x40
 8006574:	d002      	beq.n	800657c <USBD_StdDevReq+0x24>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <USBD_StdDevReq+0x38>
 800657a:	e050      	b.n	800661e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	4798      	blx	r3
 800658a:	4603      	mov	r3, r0
 800658c:	73fb      	strb	r3, [r7, #15]
    break;
 800658e:	e04b      	b.n	8006628 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	2b09      	cmp	r3, #9
 8006596:	d83c      	bhi.n	8006612 <USBD_StdDevReq+0xba>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <USBD_StdDevReq+0x48>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065f5 	.word	0x080065f5
 80065a4:	08006609 	.word	0x08006609
 80065a8:	08006613 	.word	0x08006613
 80065ac:	080065ff 	.word	0x080065ff
 80065b0:	08006613 	.word	0x08006613
 80065b4:	080065d3 	.word	0x080065d3
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	08006613 	.word	0x08006613
 80065c0:	080065eb 	.word	0x080065eb
 80065c4:	080065dd 	.word	0x080065dd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f9ce 	bl	800696c <USBD_GetDescriptor>
      break;
 80065d0:	e024      	b.n	800661c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80065d2:	6839      	ldr	r1, [r7, #0]
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fb33 	bl	8006c40 <USBD_SetAddress>
      break;
 80065da:	e01f      	b.n	800661c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fb70 	bl	8006cc4 <USBD_SetConfig>
 80065e4:	4603      	mov	r3, r0
 80065e6:	73fb      	strb	r3, [r7, #15]
      break;
 80065e8:	e018      	b.n	800661c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80065ea:	6839      	ldr	r1, [r7, #0]
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fc0d 	bl	8006e0c <USBD_GetConfig>
      break;
 80065f2:	e013      	b.n	800661c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fc3c 	bl	8006e74 <USBD_GetStatus>
      break;
 80065fc:	e00e      	b.n	800661c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 fc6a 	bl	8006eda <USBD_SetFeature>
      break;
 8006606:	e009      	b.n	800661c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fc79 	bl	8006f02 <USBD_ClrFeature>
      break;
 8006610:	e004      	b.n	800661c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fccf 	bl	8006fb8 <USBD_CtlError>
      break;
 800661a:	bf00      	nop
    }
    break;
 800661c:	e004      	b.n	8006628 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fcc9 	bl	8006fb8 <USBD_CtlError>
    break;
 8006626:	bf00      	nop
  }

  return ret;
 8006628:	7bfb      	ldrb	r3, [r7, #15]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop

08006634 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800664a:	2b20      	cmp	r3, #32
 800664c:	d003      	beq.n	8006656 <USBD_StdItfReq+0x22>
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	d001      	beq.n	8006656 <USBD_StdItfReq+0x22>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d12a      	bne.n	80066ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665c:	3b01      	subs	r3, #1
 800665e:	2b02      	cmp	r3, #2
 8006660:	d81d      	bhi.n	800669e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	889b      	ldrh	r3, [r3, #4]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d813      	bhi.n	8006694 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
 800667a:	4603      	mov	r3, r0
 800667c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	88db      	ldrh	r3, [r3, #6]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d110      	bne.n	80066a8 <USBD_StdItfReq+0x74>
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10d      	bne.n	80066a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fd5e 	bl	800714e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006692:	e009      	b.n	80066a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fc8e 	bl	8006fb8 <USBD_CtlError>
      break;
 800669c:	e004      	b.n	80066a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800669e:	6839      	ldr	r1, [r7, #0]
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fc89 	bl	8006fb8 <USBD_CtlError>
      break;
 80066a6:	e000      	b.n	80066aa <USBD_StdItfReq+0x76>
      break;
 80066a8:	bf00      	nop
    }
    break;
 80066aa:	e004      	b.n	80066b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fc82 	bl	8006fb8 <USBD_CtlError>
    break;
 80066b4:	bf00      	nop
  }

  return ret;
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	889b      	ldrh	r3, [r3, #4]
 80066d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066dc:	2b20      	cmp	r3, #32
 80066de:	d004      	beq.n	80066ea <USBD_StdEPReq+0x2a>
 80066e0:	2b40      	cmp	r3, #64	; 0x40
 80066e2:	d002      	beq.n	80066ea <USBD_StdEPReq+0x2a>
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <USBD_StdEPReq+0x3e>
 80066e8:	e135      	b.n	8006956 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	6839      	ldr	r1, [r7, #0]
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	4798      	blx	r3
 80066f8:	4603      	mov	r3, r0
 80066fa:	73fb      	strb	r3, [r7, #15]
    break;
 80066fc:	e130      	b.n	8006960 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d03e      	beq.n	8006784 <USBD_StdEPReq+0xc4>
 8006706:	2b03      	cmp	r3, #3
 8006708:	d002      	beq.n	8006710 <USBD_StdEPReq+0x50>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d077      	beq.n	80067fe <USBD_StdEPReq+0x13e>
 800670e:	e11c      	b.n	800694a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006716:	2b02      	cmp	r3, #2
 8006718:	d002      	beq.n	8006720 <USBD_StdEPReq+0x60>
 800671a:	2b03      	cmp	r3, #3
 800671c:	d015      	beq.n	800674a <USBD_StdEPReq+0x8a>
 800671e:	e02b      	b.n	8006778 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00c      	beq.n	8006740 <USBD_StdEPReq+0x80>
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	2b80      	cmp	r3, #128	; 0x80
 800672a:	d009      	beq.n	8006740 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f001 f927 	bl	8007984 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006736:	2180      	movs	r1, #128	; 0x80
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 f923 	bl	8007984 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800673e:	e020      	b.n	8006782 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006740:	6839      	ldr	r1, [r7, #0]
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fc38 	bl	8006fb8 <USBD_CtlError>
        break;
 8006748:	e01b      	b.n	8006782 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	885b      	ldrh	r3, [r3, #2]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10e      	bne.n	8006770 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <USBD_StdEPReq+0xb0>
 8006758:	7bbb      	ldrb	r3, [r7, #14]
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	d008      	beq.n	8006770 <USBD_StdEPReq+0xb0>
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	88db      	ldrh	r3, [r3, #6]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 f90a 	bl	8007984 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fcec 	bl	800714e <USBD_CtlSendStatus>

        break;
 8006776:	e004      	b.n	8006782 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006778:	6839      	ldr	r1, [r7, #0]
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fc1c 	bl	8006fb8 <USBD_CtlError>
        break;
 8006780:	bf00      	nop
      }
      break;
 8006782:	e0e7      	b.n	8006954 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800678a:	2b02      	cmp	r3, #2
 800678c:	d002      	beq.n	8006794 <USBD_StdEPReq+0xd4>
 800678e:	2b03      	cmp	r3, #3
 8006790:	d015      	beq.n	80067be <USBD_StdEPReq+0xfe>
 8006792:	e02d      	b.n	80067f0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00c      	beq.n	80067b4 <USBD_StdEPReq+0xf4>
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	2b80      	cmp	r3, #128	; 0x80
 800679e:	d009      	beq.n	80067b4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80067a0:	7bbb      	ldrb	r3, [r7, #14]
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f8ed 	bl	8007984 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f8e9 	bl	8007984 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80067b2:	e023      	b.n	80067fc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fbfe 	bl	8006fb8 <USBD_CtlError>
        break;
 80067bc:	e01e      	b.n	80067fc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	885b      	ldrh	r3, [r3, #2]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d119      	bne.n	80067fa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80067c6:	7bbb      	ldrb	r3, [r7, #14]
 80067c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d004      	beq.n	80067da <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f001 f8f4 	bl	80079c2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fcb7 	bl	800714e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	4798      	blx	r3
        }
        break;
 80067ee:	e004      	b.n	80067fa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fbe0 	bl	8006fb8 <USBD_CtlError>
        break;
 80067f8:	e000      	b.n	80067fc <USBD_StdEPReq+0x13c>
        break;
 80067fa:	bf00      	nop
      }
      break;
 80067fc:	e0aa      	b.n	8006954 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006804:	2b02      	cmp	r3, #2
 8006806:	d002      	beq.n	800680e <USBD_StdEPReq+0x14e>
 8006808:	2b03      	cmp	r3, #3
 800680a:	d032      	beq.n	8006872 <USBD_StdEPReq+0x1b2>
 800680c:	e097      	b.n	800693e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800680e:	7bbb      	ldrb	r3, [r7, #14]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d007      	beq.n	8006824 <USBD_StdEPReq+0x164>
 8006814:	7bbb      	ldrb	r3, [r7, #14]
 8006816:	2b80      	cmp	r3, #128	; 0x80
 8006818:	d004      	beq.n	8006824 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fbcb 	bl	8006fb8 <USBD_CtlError>
          break;
 8006822:	e091      	b.n	8006948 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006828:	2b00      	cmp	r3, #0
 800682a:	da0b      	bge.n	8006844 <USBD_StdEPReq+0x184>
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	3310      	adds	r3, #16
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	3304      	adds	r3, #4
 8006842:	e00b      	b.n	800685c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006844:	7bbb      	ldrb	r3, [r7, #14]
 8006846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	4413      	add	r3, r2
 800685a:	3304      	adds	r3, #4
 800685c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	2202      	movs	r2, #2
 8006868:	4619      	mov	r1, r3
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fc15 	bl	800709a <USBD_CtlSendData>
        break;
 8006870:	e06a      	b.n	8006948 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006876:	2b00      	cmp	r3, #0
 8006878:	da11      	bge.n	800689e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800687a:	7bbb      	ldrb	r3, [r7, #14]
 800687c:	f003 020f 	and.w	r2, r3, #15
 8006880:	6879      	ldr	r1, [r7, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	440b      	add	r3, r1
 800688c:	3324      	adds	r3, #36	; 0x24
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d117      	bne.n	80068c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fb8e 	bl	8006fb8 <USBD_CtlError>
            break;
 800689c:	e054      	b.n	8006948 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	f003 020f 	and.w	r2, r3, #15
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80068b4:	881b      	ldrh	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d104      	bne.n	80068c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fb7b 	bl	8006fb8 <USBD_CtlError>
            break;
 80068c2:	e041      	b.n	8006948 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	da0b      	bge.n	80068e4 <USBD_StdEPReq+0x224>
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068d2:	4613      	mov	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	4413      	add	r3, r2
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	3310      	adds	r3, #16
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	e00b      	b.n	80068fc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	3304      	adds	r3, #4
 80068fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068fe:	7bbb      	ldrb	r3, [r7, #14]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <USBD_StdEPReq+0x24a>
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	d103      	bne.n	8006912 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	e00e      	b.n	8006930 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006912:	7bbb      	ldrb	r3, [r7, #14]
 8006914:	4619      	mov	r1, r3
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 f872 	bl	8007a00 <USBD_LL_IsStallEP>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2201      	movs	r2, #1
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	e002      	b.n	8006930 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2202      	movs	r2, #2
 8006934:	4619      	mov	r1, r3
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fbaf 	bl	800709a <USBD_CtlSendData>
          break;
 800693c:	e004      	b.n	8006948 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f000 fb39 	bl	8006fb8 <USBD_CtlError>
        break;
 8006946:	bf00      	nop
      }
      break;
 8006948:	e004      	b.n	8006954 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800694a:	6839      	ldr	r1, [r7, #0]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 fb33 	bl	8006fb8 <USBD_CtlError>
      break;
 8006952:	bf00      	nop
    }
    break;
 8006954:	e004      	b.n	8006960 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006956:	6839      	ldr	r1, [r7, #0]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fb2d 	bl	8006fb8 <USBD_CtlError>
    break;
 800695e:	bf00      	nop
  }

  return ret;
 8006960:	7bfb      	ldrb	r3, [r7, #15]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800697a:	2300      	movs	r3, #0
 800697c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	885b      	ldrh	r3, [r3, #2]
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	2b06      	cmp	r3, #6
 800698e:	f200 8128 	bhi.w	8006be2 <USBD_GetDescriptor+0x276>
 8006992:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <USBD_GetDescriptor+0x2c>)
 8006994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006998:	080069b5 	.word	0x080069b5
 800699c:	080069cd 	.word	0x080069cd
 80069a0:	08006a0d 	.word	0x08006a0d
 80069a4:	08006be3 	.word	0x08006be3
 80069a8:	08006be3 	.word	0x08006be3
 80069ac:	08006b83 	.word	0x08006b83
 80069b0:	08006baf 	.word	0x08006baf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	7c12      	ldrb	r2, [r2, #16]
 80069c0:	f107 0108 	add.w	r1, r7, #8
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	60f8      	str	r0, [r7, #12]
    break;
 80069ca:	e112      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	7c1b      	ldrb	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10d      	bne.n	80069f0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f107 0208 	add.w	r2, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	2202      	movs	r2, #2
 80069ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80069ee:	e100      	b.n	8006bf2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	f107 0208 	add.w	r2, r7, #8
 80069fc:	4610      	mov	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	3301      	adds	r3, #1
 8006a06:	2202      	movs	r2, #2
 8006a08:	701a      	strb	r2, [r3, #0]
    break;
 8006a0a:	e0f2      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	885b      	ldrh	r3, [r3, #2]
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	f200 80ac 	bhi.w	8006b70 <USBD_GetDescriptor+0x204>
 8006a18:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <USBD_GetDescriptor+0xb4>)
 8006a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1e:	bf00      	nop
 8006a20:	08006a39 	.word	0x08006a39
 8006a24:	08006a6d 	.word	0x08006a6d
 8006a28:	08006aa1 	.word	0x08006aa1
 8006a2c:	08006ad5 	.word	0x08006ad5
 8006a30:	08006b09 	.word	0x08006b09
 8006a34:	08006b3d 	.word	0x08006b3d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	7c12      	ldrb	r2, [r2, #16]
 8006a50:	f107 0108 	add.w	r1, r7, #8
 8006a54:	4610      	mov	r0, r2
 8006a56:	4798      	blx	r3
 8006a58:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a5a:	e091      	b.n	8006b80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a5c:	6839      	ldr	r1, [r7, #0]
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 faaa 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006a64:	7afb      	ldrb	r3, [r7, #11]
 8006a66:	3301      	adds	r3, #1
 8006a68:	72fb      	strb	r3, [r7, #11]
      break;
 8006a6a:	e089      	b.n	8006b80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d00b      	beq.n	8006a90 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	7c12      	ldrb	r2, [r2, #16]
 8006a84:	f107 0108 	add.w	r1, r7, #8
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4798      	blx	r3
 8006a8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a8e:	e077      	b.n	8006b80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa90 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006a98:	7afb      	ldrb	r3, [r7, #11]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	72fb      	strb	r3, [r7, #11]
      break;
 8006a9e:	e06f      	b.n	8006b80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	7c12      	ldrb	r2, [r2, #16]
 8006ab8:	f107 0108 	add.w	r1, r7, #8
 8006abc:	4610      	mov	r0, r2
 8006abe:	4798      	blx	r3
 8006ac0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ac2:	e05d      	b.n	8006b80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fa76 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006acc:	7afb      	ldrb	r3, [r7, #11]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad2:	e055      	b.n	8006b80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00b      	beq.n	8006af8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	7c12      	ldrb	r2, [r2, #16]
 8006aec:	f107 0108 	add.w	r1, r7, #8
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af6:	e043      	b.n	8006b80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006af8:	6839      	ldr	r1, [r7, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa5c 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006b00:	7afb      	ldrb	r3, [r7, #11]
 8006b02:	3301      	adds	r3, #1
 8006b04:	72fb      	strb	r3, [r7, #11]
      break;
 8006b06:	e03b      	b.n	8006b80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	7c12      	ldrb	r2, [r2, #16]
 8006b20:	f107 0108 	add.w	r1, r7, #8
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b2a:	e029      	b.n	8006b80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa42 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	3301      	adds	r3, #1
 8006b38:	72fb      	strb	r3, [r7, #11]
      break;
 8006b3a:	e021      	b.n	8006b80 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00b      	beq.n	8006b60 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	7c12      	ldrb	r2, [r2, #16]
 8006b54:	f107 0108 	add.w	r1, r7, #8
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4798      	blx	r3
 8006b5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b5e:	e00f      	b.n	8006b80 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006b60:	6839      	ldr	r1, [r7, #0]
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 fa28 	bl	8006fb8 <USBD_CtlError>
        err++;
 8006b68:	7afb      	ldrb	r3, [r7, #11]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	72fb      	strb	r3, [r7, #11]
      break;
 8006b6e:	e007      	b.n	8006b80 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006b70:	6839      	ldr	r1, [r7, #0]
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fa20 	bl	8006fb8 <USBD_CtlError>
      err++;
 8006b78:	7afb      	ldrb	r3, [r7, #11]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006b7e:	bf00      	nop
    }
    break;
 8006b80:	e037      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	7c1b      	ldrb	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	f107 0208 	add.w	r2, r7, #8
 8006b96:	4610      	mov	r0, r2
 8006b98:	4798      	blx	r3
 8006b9a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006b9c:	e029      	b.n	8006bf2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fa09 	bl	8006fb8 <USBD_CtlError>
      err++;
 8006ba6:	7afb      	ldrb	r3, [r7, #11]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	72fb      	strb	r3, [r7, #11]
    break;
 8006bac:	e021      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7c1b      	ldrb	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10d      	bne.n	8006bd2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f107 0208 	add.w	r2, r7, #8
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	4798      	blx	r3
 8006bc6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	2207      	movs	r2, #7
 8006bce:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006bd0:	e00f      	b.n	8006bf2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f9ef 	bl	8006fb8 <USBD_CtlError>
      err++;
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	72fb      	strb	r3, [r7, #11]
    break;
 8006be0:	e007      	b.n	8006bf2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f9e7 	bl	8006fb8 <USBD_CtlError>
    err++;
 8006bea:	7afb      	ldrb	r3, [r7, #11]
 8006bec:	3301      	adds	r3, #1
 8006bee:	72fb      	strb	r3, [r7, #11]
    break;
 8006bf0:	bf00      	nop
  }

  if (err != 0U)
 8006bf2:	7afb      	ldrb	r3, [r7, #11]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11e      	bne.n	8006c36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	88db      	ldrh	r3, [r3, #6]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d016      	beq.n	8006c2e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006c00:	893b      	ldrh	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d00e      	beq.n	8006c24 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	88da      	ldrh	r2, [r3, #6]
 8006c0a:	893b      	ldrh	r3, [r7, #8]
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	bf28      	it	cs
 8006c10:	4613      	movcs	r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c16:	893b      	ldrh	r3, [r7, #8]
 8006c18:	461a      	mov	r2, r3
 8006c1a:	68f9      	ldr	r1, [r7, #12]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa3c 	bl	800709a <USBD_CtlSendData>
 8006c22:	e009      	b.n	8006c38 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9c6 	bl	8006fb8 <USBD_CtlError>
 8006c2c:	e004      	b.n	8006c38 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fa8d 	bl	800714e <USBD_CtlSendStatus>
 8006c34:	e000      	b.n	8006c38 <USBD_GetDescriptor+0x2cc>
    return;
 8006c36:	bf00      	nop
    }
  }
}
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop

08006c40 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	889b      	ldrh	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d130      	bne.n	8006cb4 <USBD_SetAddress+0x74>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	88db      	ldrh	r3, [r3, #6]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d12c      	bne.n	8006cb4 <USBD_SetAddress+0x74>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	885b      	ldrh	r3, [r3, #2]
 8006c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c60:	d828      	bhi.n	8006cb4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	885b      	ldrh	r3, [r3, #2]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	2b03      	cmp	r3, #3
 8006c76:	d104      	bne.n	8006c82 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f99c 	bl	8006fb8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c80:	e01c      	b.n	8006cbc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	7bfa      	ldrb	r2, [r7, #15]
 8006c86:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fee2 	bl	8007a58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fa5a 	bl	800714e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca8:	e008      	b.n	8006cbc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb2:	e003      	b.n	8006cbc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f97e 	bl	8006fb8 <USBD_CtlError>
  }
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	885b      	ldrh	r3, [r3, #2]
 8006cd6:	b2da      	uxtb	r2, r3
 8006cd8:	4b4b      	ldr	r3, [pc, #300]	; (8006e08 <USBD_SetConfig+0x144>)
 8006cda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cdc:	4b4a      	ldr	r3, [pc, #296]	; (8006e08 <USBD_SetConfig+0x144>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d905      	bls.n	8006cf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f966 	bl	8006fb8 <USBD_CtlError>
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e087      	b.n	8006e00 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf6:	2b02      	cmp	r3, #2
 8006cf8:	d002      	beq.n	8006d00 <USBD_SetConfig+0x3c>
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d025      	beq.n	8006d4a <USBD_SetConfig+0x86>
 8006cfe:	e071      	b.n	8006de4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006d00:	4b41      	ldr	r3, [pc, #260]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d01c      	beq.n	8006d42 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006d08:	4b3f      	ldr	r3, [pc, #252]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d12:	4b3d      	ldr	r3, [pc, #244]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff f9a7 	bl	800606c <USBD_SetClassConfig>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d004      	beq.n	8006d32 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006d28:	6839      	ldr	r1, [r7, #0]
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f944 	bl	8006fb8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d30:	e065      	b.n	8006dfe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fa0b 	bl	800714e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2203      	movs	r2, #3
 8006d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006d40:	e05d      	b.n	8006dfe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa03 	bl	800714e <USBD_CtlSendStatus>
    break;
 8006d48:	e059      	b.n	8006dfe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006d4a:	4b2f      	ldr	r3, [pc, #188]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d112      	bne.n	8006d78 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2202      	movs	r2, #2
 8006d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006d5a:	4b2b      	ldr	r3, [pc, #172]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d64:	4b28      	ldr	r3, [pc, #160]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff f99a 	bl	80060a4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f9ec 	bl	800714e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006d76:	e042      	b.n	8006dfe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006d78:	4b23      	ldr	r3, [pc, #140]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d02a      	beq.n	8006ddc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7ff f988 	bl	80060a4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006d94:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <USBD_SetConfig+0x144>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d9e:	4b1a      	ldr	r3, [pc, #104]	; (8006e08 <USBD_SetConfig+0x144>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7ff f961 	bl	800606c <USBD_SetClassConfig>
 8006daa:	4603      	mov	r3, r0
 8006dac:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00f      	beq.n	8006dd4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8006db4:	6839      	ldr	r1, [r7, #0]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f8fe 	bl	8006fb8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff f96d 	bl	80060a4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006dd2:	e014      	b.n	8006dfe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f9ba 	bl	800714e <USBD_CtlSendStatus>
    break;
 8006dda:	e010      	b.n	8006dfe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f9b6 	bl	800714e <USBD_CtlSendStatus>
    break;
 8006de2:	e00c      	b.n	8006dfe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f8e6 	bl	8006fb8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <USBD_SetConfig+0x144>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff f956 	bl	80060a4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfc:	bf00      	nop
  }

  return ret;
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000208 	.word	0x20000208

08006e0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	88db      	ldrh	r3, [r3, #6]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d004      	beq.n	8006e28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f8c9 	bl	8006fb8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8006e26:	e021      	b.n	8006e6c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	db17      	blt.n	8006e62 <USBD_GetConfig+0x56>
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	dd02      	ble.n	8006e3c <USBD_GetConfig+0x30>
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d00b      	beq.n	8006e52 <USBD_GetConfig+0x46>
 8006e3a:	e012      	b.n	8006e62 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	3308      	adds	r3, #8
 8006e46:	2201      	movs	r2, #1
 8006e48:	4619      	mov	r1, r3
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f925 	bl	800709a <USBD_CtlSendData>
      break;
 8006e50:	e00c      	b.n	8006e6c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3304      	adds	r3, #4
 8006e56:	2201      	movs	r2, #1
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f91d 	bl	800709a <USBD_CtlSendData>
      break;
 8006e60:	e004      	b.n	8006e6c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006e62:	6839      	ldr	r1, [r7, #0]
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f8a7 	bl	8006fb8 <USBD_CtlError>
      break;
 8006e6a:	bf00      	nop
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e84:	3b01      	subs	r3, #1
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d81e      	bhi.n	8006ec8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	88db      	ldrh	r3, [r3, #6]
 8006e8e:	2b02      	cmp	r3, #2
 8006e90:	d004      	beq.n	8006e9c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f88f 	bl	8006fb8 <USBD_CtlError>
      break;
 8006e9a:	e01a      	b.n	8006ed2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f043 0202 	orr.w	r2, r3, #2
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	330c      	adds	r3, #12
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f8ea 	bl	800709a <USBD_CtlSendData>
    break;
 8006ec6:	e004      	b.n	8006ed2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f874 	bl	8006fb8 <USBD_CtlError>
    break;
 8006ed0:	bf00      	nop
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	885b      	ldrh	r3, [r3, #2]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d106      	bne.n	8006efa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f92a 	bl	800714e <USBD_CtlSendStatus>
  }
}
 8006efa:	bf00      	nop
 8006efc:	3708      	adds	r7, #8
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}

08006f02 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f12:	3b01      	subs	r3, #1
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d80b      	bhi.n	8006f30 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	885b      	ldrh	r3, [r3, #2]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d10c      	bne.n	8006f3a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f910 	bl	800714e <USBD_CtlSendStatus>
      }
      break;
 8006f2e:	e004      	b.n	8006f3a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f840 	bl	8006fb8 <USBD_CtlError>
      break;
 8006f38:	e000      	b.n	8006f3c <USBD_ClrFeature+0x3a>
      break;
 8006f3a:	bf00      	nop
  }
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	781a      	ldrb	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	781a      	ldrb	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f7ff fad3 	bl	800651a <SWAPBYTE>
 8006f74:	4603      	mov	r3, r0
 8006f76:	461a      	mov	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	3301      	adds	r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff fac6 	bl	800651a <SWAPBYTE>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	461a      	mov	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7ff fab9 	bl	800651a <SWAPBYTE>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	461a      	mov	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	80da      	strh	r2, [r3, #6]
}
 8006fb0:	bf00      	nop
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fc2:	2180      	movs	r1, #128	; 0x80
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fcdd 	bl	8007984 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006fca:	2100      	movs	r1, #0
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fcd9 	bl	8007984 <USBD_LL_StallEP>
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b086      	sub	sp, #24
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d036      	beq.n	800705e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ff4:	6938      	ldr	r0, [r7, #16]
 8006ff6:	f000 f836 	bl	8007066 <USBD_GetLen>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4413      	add	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	701a      	strb	r2, [r3, #0]
  idx++;
 8007014:	7dfb      	ldrb	r3, [r7, #23]
 8007016:	3301      	adds	r3, #1
 8007018:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800701a:	7dfb      	ldrb	r3, [r7, #23]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4413      	add	r3, r2
 8007020:	2203      	movs	r2, #3
 8007022:	701a      	strb	r2, [r3, #0]
  idx++;
 8007024:	7dfb      	ldrb	r3, [r7, #23]
 8007026:	3301      	adds	r3, #1
 8007028:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800702a:	e013      	b.n	8007054 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800702c:	7dfb      	ldrb	r3, [r7, #23]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	4413      	add	r3, r2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	3301      	adds	r3, #1
 800703c:	613b      	str	r3, [r7, #16]
    idx++;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	3301      	adds	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4413      	add	r3, r2
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
    idx++;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	3301      	adds	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e7      	bne.n	800702c <USBD_GetString+0x52>
 800705c:	e000      	b.n	8007060 <USBD_GetString+0x86>
    return;
 800705e:	bf00      	nop
  }
}
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007076:	e005      	b.n	8007084 <USBD_GetLen+0x1e>
  {
    len++;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	3301      	adds	r3, #1
 800707c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	3301      	adds	r3, #1
 8007082:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d1f5      	bne.n	8007078 <USBD_GetLen+0x12>
  }

  return len;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr

0800709a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	60f8      	str	r0, [r7, #12]
 80070a2:	60b9      	str	r1, [r7, #8]
 80070a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2202      	movs	r2, #2
 80070aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	2100      	movs	r1, #0
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 fce8 	bl	8007a96 <USBD_LL_Transmit>

  return USBD_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fcd7 	bl	8007a96 <USBD_LL_Transmit>

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	60f8      	str	r0, [r7, #12]
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2203      	movs	r2, #3
 8007102:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	2100      	movs	r1, #0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fcdb 	bl	8007ad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	2100      	movs	r1, #0
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fcca 	bl	8007ad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2204      	movs	r2, #4
 800715a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800715e:	2300      	movs	r3, #0
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fc96 	bl	8007a96 <USBD_LL_Transmit>

  return USBD_OK;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2205      	movs	r2, #5
 8007180:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007184:	2300      	movs	r3, #0
 8007186:	2200      	movs	r2, #0
 8007188:	2100      	movs	r1, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fca4 	bl	8007ad8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80071a0:	2200      	movs	r2, #0
 80071a2:	4912      	ldr	r1, [pc, #72]	; (80071ec <MX_USB_DEVICE_Init+0x50>)
 80071a4:	4812      	ldr	r0, [pc, #72]	; (80071f0 <MX_USB_DEVICE_Init+0x54>)
 80071a6:	f7fe fef3 	bl	8005f90 <USBD_Init>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80071b0:	f7f9 fc7c 	bl	8000aac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80071b4:	490f      	ldr	r1, [pc, #60]	; (80071f4 <MX_USB_DEVICE_Init+0x58>)
 80071b6:	480e      	ldr	r0, [pc, #56]	; (80071f0 <MX_USB_DEVICE_Init+0x54>)
 80071b8:	f7fe ff20 	bl	8005ffc <USBD_RegisterClass>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80071c2:	f7f9 fc73 	bl	8000aac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80071c6:	490c      	ldr	r1, [pc, #48]	; (80071f8 <MX_USB_DEVICE_Init+0x5c>)
 80071c8:	4809      	ldr	r0, [pc, #36]	; (80071f0 <MX_USB_DEVICE_Init+0x54>)
 80071ca:	f7fe fe45 	bl	8005e58 <USBD_CDC_RegisterInterface>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80071d4:	f7f9 fc6a 	bl	8000aac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80071d8:	4805      	ldr	r0, [pc, #20]	; (80071f0 <MX_USB_DEVICE_Init+0x54>)
 80071da:	f7fe ff30 	bl	800603e <USBD_Start>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d001      	beq.n	80071e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80071e4:	f7f9 fc62 	bl	8000aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80071e8:	bf00      	nop
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000134 	.word	0x20000134
 80071f0:	200006ec 	.word	0x200006ec
 80071f4:	20000018 	.word	0x20000018
 80071f8:	20000120 	.word	0x20000120

080071fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007200:	2200      	movs	r2, #0
 8007202:	4905      	ldr	r1, [pc, #20]	; (8007218 <CDC_Init_FS+0x1c>)
 8007204:	4805      	ldr	r0, [pc, #20]	; (800721c <CDC_Init_FS+0x20>)
 8007206:	f7fe fe3c 	bl	8005e82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800720a:	4905      	ldr	r1, [pc, #20]	; (8007220 <CDC_Init_FS+0x24>)
 800720c:	4803      	ldr	r0, [pc, #12]	; (800721c <CDC_Init_FS+0x20>)
 800720e:	f7fe fe51 	bl	8005eb4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007212:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007214:	4618      	mov	r0, r3
 8007216:	bd80      	pop	{r7, pc}
 8007218:	200011bc 	.word	0x200011bc
 800721c:	200006ec 	.word	0x200006ec
 8007220:	200009bc 	.word	0x200009bc

08007224 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007228:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800722a:	4618      	mov	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	6039      	str	r1, [r7, #0]
 800723e:	71fb      	strb	r3, [r7, #7]
 8007240:	4613      	mov	r3, r2
 8007242:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b23      	cmp	r3, #35	; 0x23
 8007248:	d84a      	bhi.n	80072e0 <CDC_Control_FS+0xac>
 800724a:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <CDC_Control_FS+0x1c>)
 800724c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007250:	080072e1 	.word	0x080072e1
 8007254:	080072e1 	.word	0x080072e1
 8007258:	080072e1 	.word	0x080072e1
 800725c:	080072e1 	.word	0x080072e1
 8007260:	080072e1 	.word	0x080072e1
 8007264:	080072e1 	.word	0x080072e1
 8007268:	080072e1 	.word	0x080072e1
 800726c:	080072e1 	.word	0x080072e1
 8007270:	080072e1 	.word	0x080072e1
 8007274:	080072e1 	.word	0x080072e1
 8007278:	080072e1 	.word	0x080072e1
 800727c:	080072e1 	.word	0x080072e1
 8007280:	080072e1 	.word	0x080072e1
 8007284:	080072e1 	.word	0x080072e1
 8007288:	080072e1 	.word	0x080072e1
 800728c:	080072e1 	.word	0x080072e1
 8007290:	080072e1 	.word	0x080072e1
 8007294:	080072e1 	.word	0x080072e1
 8007298:	080072e1 	.word	0x080072e1
 800729c:	080072e1 	.word	0x080072e1
 80072a0:	080072e1 	.word	0x080072e1
 80072a4:	080072e1 	.word	0x080072e1
 80072a8:	080072e1 	.word	0x080072e1
 80072ac:	080072e1 	.word	0x080072e1
 80072b0:	080072e1 	.word	0x080072e1
 80072b4:	080072e1 	.word	0x080072e1
 80072b8:	080072e1 	.word	0x080072e1
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072e1 	.word	0x080072e1
 80072c4:	080072e1 	.word	0x080072e1
 80072c8:	080072e1 	.word	0x080072e1
 80072cc:	080072e1 	.word	0x080072e1
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072e1 	.word	0x080072e1
 80072d8:	080072e1 	.word	0x080072e1
 80072dc:	080072e1 	.word	0x080072e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80072e0:	bf00      	nop
  }

  return (USBD_OK);
 80072e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (Buf[0] == 'n')
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b6e      	cmp	r3, #110	; 0x6e
 8007300:	d102      	bne.n	8007308 <CDC_Receive_FS+0x18>
	  Status = 0;
 8007302:	4b07      	ldr	r3, [pc, #28]	; (8007320 <CDC_Receive_FS+0x30>)
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007308:	6879      	ldr	r1, [r7, #4]
 800730a:	4806      	ldr	r0, [pc, #24]	; (8007324 <CDC_Receive_FS+0x34>)
 800730c:	f7fe fdd2 	bl	8005eb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007310:	4804      	ldr	r0, [pc, #16]	; (8007324 <CDC_Receive_FS+0x34>)
 8007312:	f7fe fe13 	bl	8005f3c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007316:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	2000011c 	.word	0x2000011c
 8007324:	200006ec 	.word	0x200006ec

08007328 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007338:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <CDC_Transmit_FS+0x48>)
 800733a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800733e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800734a:	2301      	movs	r3, #1
 800734c:	e00b      	b.n	8007366 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800734e:	887b      	ldrh	r3, [r7, #2]
 8007350:	461a      	mov	r2, r3
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4806      	ldr	r0, [pc, #24]	; (8007370 <CDC_Transmit_FS+0x48>)
 8007356:	f7fe fd94 	bl	8005e82 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800735a:	4805      	ldr	r0, [pc, #20]	; (8007370 <CDC_Transmit_FS+0x48>)
 800735c:	f7fe fdbe 	bl	8005edc <USBD_CDC_TransmitPacket>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200006ec 	.word	0x200006ec

08007374 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4613      	mov	r3, r2
 8007380:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800738a:	4618      	mov	r0, r3
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
	...

08007398 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	6039      	str	r1, [r7, #0]
 80073a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2212      	movs	r2, #18
 80073a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80073aa:	4b03      	ldr	r3, [pc, #12]	; (80073b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	20000150 	.word	0x20000150

080073bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	6039      	str	r1, [r7, #0]
 80073c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2204      	movs	r2, #4
 80073cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	20000164 	.word	0x20000164

080073e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	6039      	str	r1, [r7, #0]
 80073ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d105      	bne.n	80073fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	4907      	ldr	r1, [pc, #28]	; (8007414 <USBD_FS_ProductStrDescriptor+0x34>)
 80073f6:	4808      	ldr	r0, [pc, #32]	; (8007418 <USBD_FS_ProductStrDescriptor+0x38>)
 80073f8:	f7ff fdef 	bl	8006fda <USBD_GetString>
 80073fc:	e004      	b.n	8007408 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	4904      	ldr	r1, [pc, #16]	; (8007414 <USBD_FS_ProductStrDescriptor+0x34>)
 8007402:	4805      	ldr	r0, [pc, #20]	; (8007418 <USBD_FS_ProductStrDescriptor+0x38>)
 8007404:	f7ff fde9 	bl	8006fda <USBD_GetString>
  }
  return USBD_StrDesc;
 8007408:	4b02      	ldr	r3, [pc, #8]	; (8007414 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200019bc 	.word	0x200019bc
 8007418:	08008468 	.word	0x08008468

0800741c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	4904      	ldr	r1, [pc, #16]	; (800743c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800742c:	4804      	ldr	r0, [pc, #16]	; (8007440 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800742e:	f7ff fdd4 	bl	8006fda <USBD_GetString>
  return USBD_StrDesc;
 8007432:	4b02      	ldr	r3, [pc, #8]	; (800743c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	200019bc 	.word	0x200019bc
 8007440:	08008480 	.word	0x08008480

08007444 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	6039      	str	r1, [r7, #0]
 800744e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	221a      	movs	r2, #26
 8007454:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007456:	f000 f843 	bl	80074e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800745a:	4b02      	ldr	r3, [pc, #8]	; (8007464 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800745c:	4618      	mov	r0, r3
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000168 	.word	0x20000168

08007468 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	4603      	mov	r3, r0
 8007470:	6039      	str	r1, [r7, #0]
 8007472:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d105      	bne.n	8007486 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	4907      	ldr	r1, [pc, #28]	; (800749c <USBD_FS_ConfigStrDescriptor+0x34>)
 800747e:	4808      	ldr	r0, [pc, #32]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007480:	f7ff fdab 	bl	8006fda <USBD_GetString>
 8007484:	e004      	b.n	8007490 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	4904      	ldr	r1, [pc, #16]	; (800749c <USBD_FS_ConfigStrDescriptor+0x34>)
 800748a:	4805      	ldr	r0, [pc, #20]	; (80074a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800748c:	f7ff fda5 	bl	8006fda <USBD_GetString>
  }
  return USBD_StrDesc;
 8007490:	4b02      	ldr	r3, [pc, #8]	; (800749c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	200019bc 	.word	0x200019bc
 80074a0:	08008494 	.word	0x08008494

080074a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	4603      	mov	r3, r0
 80074ac:	6039      	str	r1, [r7, #0]
 80074ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074b0:	79fb      	ldrb	r3, [r7, #7]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d105      	bne.n	80074c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	4907      	ldr	r1, [pc, #28]	; (80074d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074ba:	4808      	ldr	r0, [pc, #32]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074bc:	f7ff fd8d 	bl	8006fda <USBD_GetString>
 80074c0:	e004      	b.n	80074cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	4904      	ldr	r1, [pc, #16]	; (80074d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074c6:	4805      	ldr	r0, [pc, #20]	; (80074dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074c8:	f7ff fd87 	bl	8006fda <USBD_GetString>
  }
  return USBD_StrDesc;
 80074cc:	4b02      	ldr	r3, [pc, #8]	; (80074d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200019bc 	.word	0x200019bc
 80074dc:	080084a0 	.word	0x080084a0

080074e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <Get_SerialNum+0x44>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074ec:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <Get_SerialNum+0x48>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074f2:	4b0e      	ldr	r3, [pc, #56]	; (800752c <Get_SerialNum+0x4c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d009      	beq.n	800751a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007506:	2208      	movs	r2, #8
 8007508:	4909      	ldr	r1, [pc, #36]	; (8007530 <Get_SerialNum+0x50>)
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 f814 	bl	8007538 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007510:	2204      	movs	r2, #4
 8007512:	4908      	ldr	r1, [pc, #32]	; (8007534 <Get_SerialNum+0x54>)
 8007514:	68b8      	ldr	r0, [r7, #8]
 8007516:	f000 f80f 	bl	8007538 <IntToUnicode>
  }
}
 800751a:	bf00      	nop
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	1fff7a10 	.word	0x1fff7a10
 8007528:	1fff7a14 	.word	0x1fff7a14
 800752c:	1fff7a18 	.word	0x1fff7a18
 8007530:	2000016a 	.word	0x2000016a
 8007534:	2000017a 	.word	0x2000017a

08007538 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007538:	b480      	push	{r7}
 800753a:	b087      	sub	sp, #28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
 800754e:	e027      	b.n	80075a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	0f1b      	lsrs	r3, r3, #28
 8007554:	2b09      	cmp	r3, #9
 8007556:	d80b      	bhi.n	8007570 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	0f1b      	lsrs	r3, r3, #28
 800755c:	b2da      	uxtb	r2, r3
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	4619      	mov	r1, r3
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	440b      	add	r3, r1
 8007568:	3230      	adds	r2, #48	; 0x30
 800756a:	b2d2      	uxtb	r2, r2
 800756c:	701a      	strb	r2, [r3, #0]
 800756e:	e00a      	b.n	8007586 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	0f1b      	lsrs	r3, r3, #28
 8007574:	b2da      	uxtb	r2, r3
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4619      	mov	r1, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	440b      	add	r3, r1
 8007580:	3237      	adds	r2, #55	; 0x37
 8007582:	b2d2      	uxtb	r2, r2
 8007584:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800758c:	7dfb      	ldrb	r3, [r7, #23]
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	3301      	adds	r3, #1
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	4413      	add	r3, r2
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	3301      	adds	r3, #1
 800759e:	75fb      	strb	r3, [r7, #23]
 80075a0:	7dfa      	ldrb	r2, [r7, #23]
 80075a2:	79fb      	ldrb	r3, [r7, #7]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d3d3      	bcc.n	8007550 <IntToUnicode+0x18>
  }
}
 80075a8:	bf00      	nop
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b08a      	sub	sp, #40	; 0x28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075bc:	f107 0314 	add.w	r3, r7, #20
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	605a      	str	r2, [r3, #4]
 80075c6:	609a      	str	r2, [r3, #8]
 80075c8:	60da      	str	r2, [r3, #12]
 80075ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d4:	d13a      	bne.n	800764c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075d6:	2300      	movs	r3, #0
 80075d8:	613b      	str	r3, [r7, #16]
 80075da:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 80075e0:	f043 0301 	orr.w	r3, r3, #1
 80075e4:	6313      	str	r3, [r2, #48]	; 0x30
 80075e6:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 80075e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	613b      	str	r3, [r7, #16]
 80075f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80075f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075f8:	2302      	movs	r3, #2
 80075fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007600:	2303      	movs	r3, #3
 8007602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007604:	230a      	movs	r3, #10
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007608:	f107 0314 	add.w	r3, r7, #20
 800760c:	4619      	mov	r1, r3
 800760e:	4812      	ldr	r0, [pc, #72]	; (8007658 <HAL_PCD_MspInit+0xa4>)
 8007610:	f7f9 fd48 	bl	80010a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 8007616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007618:	4a0e      	ldr	r2, [pc, #56]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 800761a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761e:	6353      	str	r3, [r2, #52]	; 0x34
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	4b0b      	ldr	r3, [pc, #44]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 8007626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007628:	4a0a      	ldr	r2, [pc, #40]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 800762a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800762e:	6453      	str	r3, [r2, #68]	; 0x44
 8007630:	4b08      	ldr	r3, [pc, #32]	; (8007654 <HAL_PCD_MspInit+0xa0>)
 8007632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800763c:	2200      	movs	r2, #0
 800763e:	2100      	movs	r1, #0
 8007640:	2043      	movs	r0, #67	; 0x43
 8007642:	f7f9 fcf8 	bl	8001036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007646:	2043      	movs	r0, #67	; 0x43
 8007648:	f7f9 fd11 	bl	800106e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800764c:	bf00      	nop
 800764e:	3728      	adds	r7, #40	; 0x28
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40023800 	.word	0x40023800
 8007658:	40020000 	.word	0x40020000

0800765c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fe fd2e 	bl	80060d4 <USBD_LL_SetupStage>
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007692:	78fa      	ldrb	r2, [r7, #3]
 8007694:	6879      	ldr	r1, [r7, #4]
 8007696:	4613      	mov	r3, r2
 8007698:	00db      	lsls	r3, r3, #3
 800769a:	1a9b      	subs	r3, r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	440b      	add	r3, r1
 80076a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	4619      	mov	r1, r3
 80076aa:	f7fe fd66 	bl	800617a <USBD_LL_DataOutStage>
}
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
 80076be:	460b      	mov	r3, r1
 80076c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80076c8:	78fa      	ldrb	r2, [r7, #3]
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	4613      	mov	r3, r2
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	3348      	adds	r3, #72	; 0x48
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	78fb      	ldrb	r3, [r7, #3]
 80076dc:	4619      	mov	r1, r3
 80076de:	f7fe fdaf 	bl	8006240 <USBD_LL_DataInStage>
}
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7fe feb3 	bl	8006464 <USBD_LL_SOF>
}
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b084      	sub	sp, #16
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	2b02      	cmp	r3, #2
 8007718:	d001      	beq.n	800771e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800771a:	f7f9 f9c7 	bl	8000aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007724:	7bfa      	ldrb	r2, [r7, #15]
 8007726:	4611      	mov	r1, r2
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fe60 	bl	80063ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007734:	4618      	mov	r0, r3
 8007736:	f7fe fe19 	bl	800636c <USBD_LL_Reset>
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe fe5b 	bl	800640e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800776a:	f043 0301 	orr.w	r3, r3, #1
 800776e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d005      	beq.n	8007784 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007778:	4b04      	ldr	r3, [pc, #16]	; (800778c <HAL_PCD_SuspendCallback+0x48>)
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	4a03      	ldr	r2, [pc, #12]	; (800778c <HAL_PCD_SuspendCallback+0x48>)
 800777e:	f043 0306 	orr.w	r3, r3, #6
 8007782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007784:	bf00      	nop
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	e000ed00 	.word	0xe000ed00

08007790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe fe4a 	bl	8006438 <USBD_LL_Resume>
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077be:	78fa      	ldrb	r2, [r7, #3]
 80077c0:	4611      	mov	r1, r2
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fe75 	bl	80064b2 <USBD_LL_IsoOUTIncomplete>
}
 80077c8:	bf00      	nop
 80077ca:	3708      	adds	r7, #8
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	460b      	mov	r3, r1
 80077da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	4611      	mov	r1, r2
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe fe56 	bl	8006498 <USBD_LL_IsoINIncomplete>
}
 80077ec:	bf00      	nop
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fe62 	bl	80064cc <USBD_LL_DevConnected>
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe fe5f 	bl	80064e2 <USBD_LL_DevDisconnected>
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d13c      	bne.n	80078b6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800783c:	4a20      	ldr	r2, [pc, #128]	; (80078c0 <USBD_LL_Init+0x94>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a1e      	ldr	r2, [pc, #120]	; (80078c0 <USBD_LL_Init+0x94>)
 8007848:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800784c:	4b1c      	ldr	r3, [pc, #112]	; (80078c0 <USBD_LL_Init+0x94>)
 800784e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007852:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007854:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <USBD_LL_Init+0x94>)
 8007856:	2204      	movs	r2, #4
 8007858:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800785a:	4b19      	ldr	r3, [pc, #100]	; (80078c0 <USBD_LL_Init+0x94>)
 800785c:	2202      	movs	r2, #2
 800785e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007860:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <USBD_LL_Init+0x94>)
 8007862:	2200      	movs	r2, #0
 8007864:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007866:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <USBD_LL_Init+0x94>)
 8007868:	2202      	movs	r2, #2
 800786a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800786c:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <USBD_LL_Init+0x94>)
 800786e:	2200      	movs	r2, #0
 8007870:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007872:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <USBD_LL_Init+0x94>)
 8007874:	2200      	movs	r2, #0
 8007876:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007878:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <USBD_LL_Init+0x94>)
 800787a:	2200      	movs	r2, #0
 800787c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800787e:	4b10      	ldr	r3, [pc, #64]	; (80078c0 <USBD_LL_Init+0x94>)
 8007880:	2200      	movs	r2, #0
 8007882:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007884:	4b0e      	ldr	r3, [pc, #56]	; (80078c0 <USBD_LL_Init+0x94>)
 8007886:	2200      	movs	r2, #0
 8007888:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800788a:	480d      	ldr	r0, [pc, #52]	; (80078c0 <USBD_LL_Init+0x94>)
 800788c:	f7fa fd3f 	bl	800230e <HAL_PCD_Init>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007896:	f7f9 f909 	bl	8000aac <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800789a:	2180      	movs	r1, #128	; 0x80
 800789c:	4808      	ldr	r0, [pc, #32]	; (80078c0 <USBD_LL_Init+0x94>)
 800789e:	f7fb fe9c 	bl	80035da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80078a2:	2240      	movs	r2, #64	; 0x40
 80078a4:	2100      	movs	r1, #0
 80078a6:	4806      	ldr	r0, [pc, #24]	; (80078c0 <USBD_LL_Init+0x94>)
 80078a8:	f7fb fe50 	bl	800354c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078ac:	2280      	movs	r2, #128	; 0x80
 80078ae:	2101      	movs	r1, #1
 80078b0:	4803      	ldr	r0, [pc, #12]	; (80078c0 <USBD_LL_Init+0x94>)
 80078b2:	f7fb fe4b 	bl	800354c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20001bbc 	.word	0x20001bbc

080078c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fa fe34 	bl	8002548 <HAL_PCD_Start>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f92a 	bl	8007b40 <USBD_Get_USB_Status>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	4608      	mov	r0, r1
 8007904:	4611      	mov	r1, r2
 8007906:	461a      	mov	r2, r3
 8007908:	4603      	mov	r3, r0
 800790a:	70fb      	strb	r3, [r7, #3]
 800790c:	460b      	mov	r3, r1
 800790e:	70bb      	strb	r3, [r7, #2]
 8007910:	4613      	mov	r3, r2
 8007912:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007918:	2300      	movs	r3, #0
 800791a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007922:	78bb      	ldrb	r3, [r7, #2]
 8007924:	883a      	ldrh	r2, [r7, #0]
 8007926:	78f9      	ldrb	r1, [r7, #3]
 8007928:	f7fb fa18 	bl	8002d5c <HAL_PCD_EP_Open>
 800792c:	4603      	mov	r3, r0
 800792e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007930:	7bfb      	ldrb	r3, [r7, #15]
 8007932:	4618      	mov	r0, r3
 8007934:	f000 f904 	bl	8007b40 <USBD_Get_USB_Status>
 8007938:	4603      	mov	r3, r0
 800793a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800793c:	7bbb      	ldrb	r3, [r7, #14]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b084      	sub	sp, #16
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	460b      	mov	r3, r1
 8007950:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	4611      	mov	r1, r2
 8007964:	4618      	mov	r0, r3
 8007966:	f7fb fa61 	bl	8002e2c <HAL_PCD_EP_Close>
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f8e5 	bl	8007b40 <USBD_Get_USB_Status>
 8007976:	4603      	mov	r3, r0
 8007978:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800797a:	7bbb      	ldrb	r3, [r7, #14]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800799e:	78fa      	ldrb	r2, [r7, #3]
 80079a0:	4611      	mov	r1, r2
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fb fb39 	bl	800301a <HAL_PCD_EP_SetStall>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 f8c6 	bl	8007b40 <USBD_Get_USB_Status>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	460b      	mov	r3, r1
 80079cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079dc:	78fa      	ldrb	r2, [r7, #3]
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fb fb7e 	bl	80030e2 <HAL_PCD_EP_ClrStall>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f000 f8a7 	bl	8007b40 <USBD_Get_USB_Status>
 80079f2:	4603      	mov	r3, r0
 80079f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	da0b      	bge.n	8007a34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a1c:	78fb      	ldrb	r3, [r7, #3]
 8007a1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	4613      	mov	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	1a9b      	subs	r3, r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	333e      	adds	r3, #62	; 0x3e
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	e00b      	b.n	8007a4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a34:	78fb      	ldrb	r3, [r7, #3]
 8007a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a3a:	68f9      	ldr	r1, [r7, #12]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	00db      	lsls	r3, r3, #3
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	4611      	mov	r1, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fb f94b 	bl	8002d12 <HAL_PCD_SetAddress>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 f85c 	bl	8007b40 <USBD_Get_USB_Status>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3710      	adds	r7, #16
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	607a      	str	r2, [r7, #4]
 8007aa0:	603b      	str	r3, [r7, #0]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ab4:	7af9      	ldrb	r1, [r7, #11]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	f7fb fa64 	bl	8002f86 <HAL_PCD_EP_Transmit>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac2:	7dfb      	ldrb	r3, [r7, #23]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f83b 	bl	8007b40 <USBD_Get_USB_Status>
 8007aca:	4603      	mov	r3, r0
 8007acc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ace:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	607a      	str	r2, [r7, #4]
 8007ae2:	603b      	str	r3, [r7, #0]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007af6:	7af9      	ldrb	r1, [r7, #11]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	f7fb f9e0 	bl	8002ec0 <HAL_PCD_EP_Receive>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f000 f81a 	bl	8007b40 <USBD_Get_USB_Status>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b10:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b082      	sub	sp, #8
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	460b      	mov	r3, r1
 8007b24:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b2c:	78fa      	ldrb	r2, [r7, #3]
 8007b2e:	4611      	mov	r1, r2
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7fb fa10 	bl	8002f56 <HAL_PCD_EP_GetRxCount>
 8007b36:	4603      	mov	r3, r0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d817      	bhi.n	8007b84 <USBD_Get_USB_Status+0x44>
 8007b54:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <USBD_Get_USB_Status+0x1c>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b6d 	.word	0x08007b6d
 8007b60:	08007b73 	.word	0x08007b73
 8007b64:	08007b79 	.word	0x08007b79
 8007b68:	08007b7f 	.word	0x08007b7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b70:	e00b      	b.n	8007b8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b72:	2303      	movs	r3, #3
 8007b74:	73fb      	strb	r3, [r7, #15]
    break;
 8007b76:	e008      	b.n	8007b8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7c:	e005      	b.n	8007b8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	73fb      	strb	r3, [r7, #15]
    break;
 8007b82:	e002      	b.n	8007b8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	73fb      	strb	r3, [r7, #15]
    break;
 8007b88:	bf00      	nop
  }
  return usb_status;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <__errno>:
 8007b98:	4b01      	ldr	r3, [pc, #4]	; (8007ba0 <__errno+0x8>)
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	20000184 	.word	0x20000184

08007ba4 <__libc_init_array>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4e0d      	ldr	r6, [pc, #52]	; (8007bdc <__libc_init_array+0x38>)
 8007ba8:	4c0d      	ldr	r4, [pc, #52]	; (8007be0 <__libc_init_array+0x3c>)
 8007baa:	1ba4      	subs	r4, r4, r6
 8007bac:	10a4      	asrs	r4, r4, #2
 8007bae:	2500      	movs	r5, #0
 8007bb0:	42a5      	cmp	r5, r4
 8007bb2:	d109      	bne.n	8007bc8 <__libc_init_array+0x24>
 8007bb4:	4e0b      	ldr	r6, [pc, #44]	; (8007be4 <__libc_init_array+0x40>)
 8007bb6:	4c0c      	ldr	r4, [pc, #48]	; (8007be8 <__libc_init_array+0x44>)
 8007bb8:	f000 fc36 	bl	8008428 <_init>
 8007bbc:	1ba4      	subs	r4, r4, r6
 8007bbe:	10a4      	asrs	r4, r4, #2
 8007bc0:	2500      	movs	r5, #0
 8007bc2:	42a5      	cmp	r5, r4
 8007bc4:	d105      	bne.n	8007bd2 <__libc_init_array+0x2e>
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bcc:	4798      	blx	r3
 8007bce:	3501      	adds	r5, #1
 8007bd0:	e7ee      	b.n	8007bb0 <__libc_init_array+0xc>
 8007bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bd6:	4798      	blx	r3
 8007bd8:	3501      	adds	r5, #1
 8007bda:	e7f2      	b.n	8007bc2 <__libc_init_array+0x1e>
 8007bdc:	08008504 	.word	0x08008504
 8007be0:	08008504 	.word	0x08008504
 8007be4:	08008504 	.word	0x08008504
 8007be8:	08008508 	.word	0x08008508

08007bec <malloc>:
 8007bec:	4b02      	ldr	r3, [pc, #8]	; (8007bf8 <malloc+0xc>)
 8007bee:	4601      	mov	r1, r0
 8007bf0:	6818      	ldr	r0, [r3, #0]
 8007bf2:	f000 b861 	b.w	8007cb8 <_malloc_r>
 8007bf6:	bf00      	nop
 8007bf8:	20000184 	.word	0x20000184

08007bfc <free>:
 8007bfc:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <free+0xc>)
 8007bfe:	4601      	mov	r1, r0
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	f000 b80b 	b.w	8007c1c <_free_r>
 8007c06:	bf00      	nop
 8007c08:	20000184 	.word	0x20000184

08007c0c <memset>:
 8007c0c:	4402      	add	r2, r0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d100      	bne.n	8007c16 <memset+0xa>
 8007c14:	4770      	bx	lr
 8007c16:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1a:	e7f9      	b.n	8007c10 <memset+0x4>

08007c1c <_free_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4605      	mov	r5, r0
 8007c20:	2900      	cmp	r1, #0
 8007c22:	d045      	beq.n	8007cb0 <_free_r+0x94>
 8007c24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c28:	1f0c      	subs	r4, r1, #4
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bfb8      	it	lt
 8007c2e:	18e4      	addlt	r4, r4, r3
 8007c30:	f000 f8cc 	bl	8007dcc <__malloc_lock>
 8007c34:	4a1f      	ldr	r2, [pc, #124]	; (8007cb4 <_free_r+0x98>)
 8007c36:	6813      	ldr	r3, [r2, #0]
 8007c38:	4610      	mov	r0, r2
 8007c3a:	b933      	cbnz	r3, 8007c4a <_free_r+0x2e>
 8007c3c:	6063      	str	r3, [r4, #4]
 8007c3e:	6014      	str	r4, [r2, #0]
 8007c40:	4628      	mov	r0, r5
 8007c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c46:	f000 b8c2 	b.w	8007dce <__malloc_unlock>
 8007c4a:	42a3      	cmp	r3, r4
 8007c4c:	d90c      	bls.n	8007c68 <_free_r+0x4c>
 8007c4e:	6821      	ldr	r1, [r4, #0]
 8007c50:	1862      	adds	r2, r4, r1
 8007c52:	4293      	cmp	r3, r2
 8007c54:	bf04      	itt	eq
 8007c56:	681a      	ldreq	r2, [r3, #0]
 8007c58:	685b      	ldreq	r3, [r3, #4]
 8007c5a:	6063      	str	r3, [r4, #4]
 8007c5c:	bf04      	itt	eq
 8007c5e:	1852      	addeq	r2, r2, r1
 8007c60:	6022      	streq	r2, [r4, #0]
 8007c62:	6004      	str	r4, [r0, #0]
 8007c64:	e7ec      	b.n	8007c40 <_free_r+0x24>
 8007c66:	4613      	mov	r3, r2
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	b10a      	cbz	r2, 8007c70 <_free_r+0x54>
 8007c6c:	42a2      	cmp	r2, r4
 8007c6e:	d9fa      	bls.n	8007c66 <_free_r+0x4a>
 8007c70:	6819      	ldr	r1, [r3, #0]
 8007c72:	1858      	adds	r0, r3, r1
 8007c74:	42a0      	cmp	r0, r4
 8007c76:	d10b      	bne.n	8007c90 <_free_r+0x74>
 8007c78:	6820      	ldr	r0, [r4, #0]
 8007c7a:	4401      	add	r1, r0
 8007c7c:	1858      	adds	r0, r3, r1
 8007c7e:	4282      	cmp	r2, r0
 8007c80:	6019      	str	r1, [r3, #0]
 8007c82:	d1dd      	bne.n	8007c40 <_free_r+0x24>
 8007c84:	6810      	ldr	r0, [r2, #0]
 8007c86:	6852      	ldr	r2, [r2, #4]
 8007c88:	605a      	str	r2, [r3, #4]
 8007c8a:	4401      	add	r1, r0
 8007c8c:	6019      	str	r1, [r3, #0]
 8007c8e:	e7d7      	b.n	8007c40 <_free_r+0x24>
 8007c90:	d902      	bls.n	8007c98 <_free_r+0x7c>
 8007c92:	230c      	movs	r3, #12
 8007c94:	602b      	str	r3, [r5, #0]
 8007c96:	e7d3      	b.n	8007c40 <_free_r+0x24>
 8007c98:	6820      	ldr	r0, [r4, #0]
 8007c9a:	1821      	adds	r1, r4, r0
 8007c9c:	428a      	cmp	r2, r1
 8007c9e:	bf04      	itt	eq
 8007ca0:	6811      	ldreq	r1, [r2, #0]
 8007ca2:	6852      	ldreq	r2, [r2, #4]
 8007ca4:	6062      	str	r2, [r4, #4]
 8007ca6:	bf04      	itt	eq
 8007ca8:	1809      	addeq	r1, r1, r0
 8007caa:	6021      	streq	r1, [r4, #0]
 8007cac:	605c      	str	r4, [r3, #4]
 8007cae:	e7c7      	b.n	8007c40 <_free_r+0x24>
 8007cb0:	bd38      	pop	{r3, r4, r5, pc}
 8007cb2:	bf00      	nop
 8007cb4:	2000020c 	.word	0x2000020c

08007cb8 <_malloc_r>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	1ccd      	adds	r5, r1, #3
 8007cbc:	f025 0503 	bic.w	r5, r5, #3
 8007cc0:	3508      	adds	r5, #8
 8007cc2:	2d0c      	cmp	r5, #12
 8007cc4:	bf38      	it	cc
 8007cc6:	250c      	movcc	r5, #12
 8007cc8:	2d00      	cmp	r5, #0
 8007cca:	4606      	mov	r6, r0
 8007ccc:	db01      	blt.n	8007cd2 <_malloc_r+0x1a>
 8007cce:	42a9      	cmp	r1, r5
 8007cd0:	d903      	bls.n	8007cda <_malloc_r+0x22>
 8007cd2:	230c      	movs	r3, #12
 8007cd4:	6033      	str	r3, [r6, #0]
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	bd70      	pop	{r4, r5, r6, pc}
 8007cda:	f000 f877 	bl	8007dcc <__malloc_lock>
 8007cde:	4a21      	ldr	r2, [pc, #132]	; (8007d64 <_malloc_r+0xac>)
 8007ce0:	6814      	ldr	r4, [r2, #0]
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	b991      	cbnz	r1, 8007d0c <_malloc_r+0x54>
 8007ce6:	4c20      	ldr	r4, [pc, #128]	; (8007d68 <_malloc_r+0xb0>)
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	b91b      	cbnz	r3, 8007cf4 <_malloc_r+0x3c>
 8007cec:	4630      	mov	r0, r6
 8007cee:	f000 f83d 	bl	8007d6c <_sbrk_r>
 8007cf2:	6020      	str	r0, [r4, #0]
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	f000 f838 	bl	8007d6c <_sbrk_r>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d124      	bne.n	8007d4a <_malloc_r+0x92>
 8007d00:	230c      	movs	r3, #12
 8007d02:	6033      	str	r3, [r6, #0]
 8007d04:	4630      	mov	r0, r6
 8007d06:	f000 f862 	bl	8007dce <__malloc_unlock>
 8007d0a:	e7e4      	b.n	8007cd6 <_malloc_r+0x1e>
 8007d0c:	680b      	ldr	r3, [r1, #0]
 8007d0e:	1b5b      	subs	r3, r3, r5
 8007d10:	d418      	bmi.n	8007d44 <_malloc_r+0x8c>
 8007d12:	2b0b      	cmp	r3, #11
 8007d14:	d90f      	bls.n	8007d36 <_malloc_r+0x7e>
 8007d16:	600b      	str	r3, [r1, #0]
 8007d18:	50cd      	str	r5, [r1, r3]
 8007d1a:	18cc      	adds	r4, r1, r3
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f000 f856 	bl	8007dce <__malloc_unlock>
 8007d22:	f104 000b 	add.w	r0, r4, #11
 8007d26:	1d23      	adds	r3, r4, #4
 8007d28:	f020 0007 	bic.w	r0, r0, #7
 8007d2c:	1ac3      	subs	r3, r0, r3
 8007d2e:	d0d3      	beq.n	8007cd8 <_malloc_r+0x20>
 8007d30:	425a      	negs	r2, r3
 8007d32:	50e2      	str	r2, [r4, r3]
 8007d34:	e7d0      	b.n	8007cd8 <_malloc_r+0x20>
 8007d36:	428c      	cmp	r4, r1
 8007d38:	684b      	ldr	r3, [r1, #4]
 8007d3a:	bf16      	itet	ne
 8007d3c:	6063      	strne	r3, [r4, #4]
 8007d3e:	6013      	streq	r3, [r2, #0]
 8007d40:	460c      	movne	r4, r1
 8007d42:	e7eb      	b.n	8007d1c <_malloc_r+0x64>
 8007d44:	460c      	mov	r4, r1
 8007d46:	6849      	ldr	r1, [r1, #4]
 8007d48:	e7cc      	b.n	8007ce4 <_malloc_r+0x2c>
 8007d4a:	1cc4      	adds	r4, r0, #3
 8007d4c:	f024 0403 	bic.w	r4, r4, #3
 8007d50:	42a0      	cmp	r0, r4
 8007d52:	d005      	beq.n	8007d60 <_malloc_r+0xa8>
 8007d54:	1a21      	subs	r1, r4, r0
 8007d56:	4630      	mov	r0, r6
 8007d58:	f000 f808 	bl	8007d6c <_sbrk_r>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d0cf      	beq.n	8007d00 <_malloc_r+0x48>
 8007d60:	6025      	str	r5, [r4, #0]
 8007d62:	e7db      	b.n	8007d1c <_malloc_r+0x64>
 8007d64:	2000020c 	.word	0x2000020c
 8007d68:	20000210 	.word	0x20000210

08007d6c <_sbrk_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4c06      	ldr	r4, [pc, #24]	; (8007d88 <_sbrk_r+0x1c>)
 8007d70:	2300      	movs	r3, #0
 8007d72:	4605      	mov	r5, r0
 8007d74:	4608      	mov	r0, r1
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	f7f8 ff78 	bl	8000c6c <_sbrk>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_sbrk_r+0x1a>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_sbrk_r+0x1a>
 8007d84:	602b      	str	r3, [r5, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20001fc4 	.word	0x20001fc4

08007d8c <_vsiprintf_r>:
 8007d8c:	b500      	push	{lr}
 8007d8e:	b09b      	sub	sp, #108	; 0x6c
 8007d90:	9100      	str	r1, [sp, #0]
 8007d92:	9104      	str	r1, [sp, #16]
 8007d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d98:	9105      	str	r1, [sp, #20]
 8007d9a:	9102      	str	r1, [sp, #8]
 8007d9c:	4905      	ldr	r1, [pc, #20]	; (8007db4 <_vsiprintf_r+0x28>)
 8007d9e:	9103      	str	r1, [sp, #12]
 8007da0:	4669      	mov	r1, sp
 8007da2:	f000 f86f 	bl	8007e84 <_svfiprintf_r>
 8007da6:	9b00      	ldr	r3, [sp, #0]
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
 8007dac:	b01b      	add	sp, #108	; 0x6c
 8007dae:	f85d fb04 	ldr.w	pc, [sp], #4
 8007db2:	bf00      	nop
 8007db4:	ffff0208 	.word	0xffff0208

08007db8 <vsiprintf>:
 8007db8:	4613      	mov	r3, r2
 8007dba:	460a      	mov	r2, r1
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	4802      	ldr	r0, [pc, #8]	; (8007dc8 <vsiprintf+0x10>)
 8007dc0:	6800      	ldr	r0, [r0, #0]
 8007dc2:	f7ff bfe3 	b.w	8007d8c <_vsiprintf_r>
 8007dc6:	bf00      	nop
 8007dc8:	20000184 	.word	0x20000184

08007dcc <__malloc_lock>:
 8007dcc:	4770      	bx	lr

08007dce <__malloc_unlock>:
 8007dce:	4770      	bx	lr

08007dd0 <__ssputs_r>:
 8007dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	688e      	ldr	r6, [r1, #8]
 8007dd6:	429e      	cmp	r6, r3
 8007dd8:	4682      	mov	sl, r0
 8007dda:	460c      	mov	r4, r1
 8007ddc:	4690      	mov	r8, r2
 8007dde:	4699      	mov	r9, r3
 8007de0:	d837      	bhi.n	8007e52 <__ssputs_r+0x82>
 8007de2:	898a      	ldrh	r2, [r1, #12]
 8007de4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007de8:	d031      	beq.n	8007e4e <__ssputs_r+0x7e>
 8007dea:	6825      	ldr	r5, [r4, #0]
 8007dec:	6909      	ldr	r1, [r1, #16]
 8007dee:	1a6f      	subs	r7, r5, r1
 8007df0:	6965      	ldr	r5, [r4, #20]
 8007df2:	2302      	movs	r3, #2
 8007df4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007df8:	fb95 f5f3 	sdiv	r5, r5, r3
 8007dfc:	f109 0301 	add.w	r3, r9, #1
 8007e00:	443b      	add	r3, r7
 8007e02:	429d      	cmp	r5, r3
 8007e04:	bf38      	it	cc
 8007e06:	461d      	movcc	r5, r3
 8007e08:	0553      	lsls	r3, r2, #21
 8007e0a:	d530      	bpl.n	8007e6e <__ssputs_r+0x9e>
 8007e0c:	4629      	mov	r1, r5
 8007e0e:	f7ff ff53 	bl	8007cb8 <_malloc_r>
 8007e12:	4606      	mov	r6, r0
 8007e14:	b950      	cbnz	r0, 8007e2c <__ssputs_r+0x5c>
 8007e16:	230c      	movs	r3, #12
 8007e18:	f8ca 3000 	str.w	r3, [sl]
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e22:	81a3      	strh	r3, [r4, #12]
 8007e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e2c:	463a      	mov	r2, r7
 8007e2e:	6921      	ldr	r1, [r4, #16]
 8007e30:	f000 faa8 	bl	8008384 <memcpy>
 8007e34:	89a3      	ldrh	r3, [r4, #12]
 8007e36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3e:	81a3      	strh	r3, [r4, #12]
 8007e40:	6126      	str	r6, [r4, #16]
 8007e42:	6165      	str	r5, [r4, #20]
 8007e44:	443e      	add	r6, r7
 8007e46:	1bed      	subs	r5, r5, r7
 8007e48:	6026      	str	r6, [r4, #0]
 8007e4a:	60a5      	str	r5, [r4, #8]
 8007e4c:	464e      	mov	r6, r9
 8007e4e:	454e      	cmp	r6, r9
 8007e50:	d900      	bls.n	8007e54 <__ssputs_r+0x84>
 8007e52:	464e      	mov	r6, r9
 8007e54:	4632      	mov	r2, r6
 8007e56:	4641      	mov	r1, r8
 8007e58:	6820      	ldr	r0, [r4, #0]
 8007e5a:	f000 fa9e 	bl	800839a <memmove>
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	1b9b      	subs	r3, r3, r6
 8007e62:	60a3      	str	r3, [r4, #8]
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	441e      	add	r6, r3
 8007e68:	6026      	str	r6, [r4, #0]
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	e7dc      	b.n	8007e28 <__ssputs_r+0x58>
 8007e6e:	462a      	mov	r2, r5
 8007e70:	f000 faac 	bl	80083cc <_realloc_r>
 8007e74:	4606      	mov	r6, r0
 8007e76:	2800      	cmp	r0, #0
 8007e78:	d1e2      	bne.n	8007e40 <__ssputs_r+0x70>
 8007e7a:	6921      	ldr	r1, [r4, #16]
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	f7ff fecd 	bl	8007c1c <_free_r>
 8007e82:	e7c8      	b.n	8007e16 <__ssputs_r+0x46>

08007e84 <_svfiprintf_r>:
 8007e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e88:	461d      	mov	r5, r3
 8007e8a:	898b      	ldrh	r3, [r1, #12]
 8007e8c:	061f      	lsls	r7, r3, #24
 8007e8e:	b09d      	sub	sp, #116	; 0x74
 8007e90:	4680      	mov	r8, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	4616      	mov	r6, r2
 8007e96:	d50f      	bpl.n	8007eb8 <_svfiprintf_r+0x34>
 8007e98:	690b      	ldr	r3, [r1, #16]
 8007e9a:	b96b      	cbnz	r3, 8007eb8 <_svfiprintf_r+0x34>
 8007e9c:	2140      	movs	r1, #64	; 0x40
 8007e9e:	f7ff ff0b 	bl	8007cb8 <_malloc_r>
 8007ea2:	6020      	str	r0, [r4, #0]
 8007ea4:	6120      	str	r0, [r4, #16]
 8007ea6:	b928      	cbnz	r0, 8007eb4 <_svfiprintf_r+0x30>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	f8c8 3000 	str.w	r3, [r8]
 8007eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eb2:	e0c8      	b.n	8008046 <_svfiprintf_r+0x1c2>
 8007eb4:	2340      	movs	r3, #64	; 0x40
 8007eb6:	6163      	str	r3, [r4, #20]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebc:	2320      	movs	r3, #32
 8007ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ec2:	2330      	movs	r3, #48	; 0x30
 8007ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec8:	9503      	str	r5, [sp, #12]
 8007eca:	f04f 0b01 	mov.w	fp, #1
 8007ece:	4637      	mov	r7, r6
 8007ed0:	463d      	mov	r5, r7
 8007ed2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ed6:	b10b      	cbz	r3, 8007edc <_svfiprintf_r+0x58>
 8007ed8:	2b25      	cmp	r3, #37	; 0x25
 8007eda:	d13e      	bne.n	8007f5a <_svfiprintf_r+0xd6>
 8007edc:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ee0:	d00b      	beq.n	8007efa <_svfiprintf_r+0x76>
 8007ee2:	4653      	mov	r3, sl
 8007ee4:	4632      	mov	r2, r6
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4640      	mov	r0, r8
 8007eea:	f7ff ff71 	bl	8007dd0 <__ssputs_r>
 8007eee:	3001      	adds	r0, #1
 8007ef0:	f000 80a4 	beq.w	800803c <_svfiprintf_r+0x1b8>
 8007ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef6:	4453      	add	r3, sl
 8007ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8007efa:	783b      	ldrb	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 809d 	beq.w	800803c <_svfiprintf_r+0x1b8>
 8007f02:	2300      	movs	r3, #0
 8007f04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f0c:	9304      	str	r3, [sp, #16]
 8007f0e:	9307      	str	r3, [sp, #28]
 8007f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f14:	931a      	str	r3, [sp, #104]	; 0x68
 8007f16:	462f      	mov	r7, r5
 8007f18:	2205      	movs	r2, #5
 8007f1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007f1e:	4850      	ldr	r0, [pc, #320]	; (8008060 <_svfiprintf_r+0x1dc>)
 8007f20:	f7f8 f966 	bl	80001f0 <memchr>
 8007f24:	9b04      	ldr	r3, [sp, #16]
 8007f26:	b9d0      	cbnz	r0, 8007f5e <_svfiprintf_r+0xda>
 8007f28:	06d9      	lsls	r1, r3, #27
 8007f2a:	bf44      	itt	mi
 8007f2c:	2220      	movmi	r2, #32
 8007f2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f32:	071a      	lsls	r2, r3, #28
 8007f34:	bf44      	itt	mi
 8007f36:	222b      	movmi	r2, #43	; 0x2b
 8007f38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f3c:	782a      	ldrb	r2, [r5, #0]
 8007f3e:	2a2a      	cmp	r2, #42	; 0x2a
 8007f40:	d015      	beq.n	8007f6e <_svfiprintf_r+0xea>
 8007f42:	9a07      	ldr	r2, [sp, #28]
 8007f44:	462f      	mov	r7, r5
 8007f46:	2000      	movs	r0, #0
 8007f48:	250a      	movs	r5, #10
 8007f4a:	4639      	mov	r1, r7
 8007f4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f50:	3b30      	subs	r3, #48	; 0x30
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d94d      	bls.n	8007ff2 <_svfiprintf_r+0x16e>
 8007f56:	b1b8      	cbz	r0, 8007f88 <_svfiprintf_r+0x104>
 8007f58:	e00f      	b.n	8007f7a <_svfiprintf_r+0xf6>
 8007f5a:	462f      	mov	r7, r5
 8007f5c:	e7b8      	b.n	8007ed0 <_svfiprintf_r+0x4c>
 8007f5e:	4a40      	ldr	r2, [pc, #256]	; (8008060 <_svfiprintf_r+0x1dc>)
 8007f60:	1a80      	subs	r0, r0, r2
 8007f62:	fa0b f000 	lsl.w	r0, fp, r0
 8007f66:	4318      	orrs	r0, r3
 8007f68:	9004      	str	r0, [sp, #16]
 8007f6a:	463d      	mov	r5, r7
 8007f6c:	e7d3      	b.n	8007f16 <_svfiprintf_r+0x92>
 8007f6e:	9a03      	ldr	r2, [sp, #12]
 8007f70:	1d11      	adds	r1, r2, #4
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	9103      	str	r1, [sp, #12]
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	db01      	blt.n	8007f7e <_svfiprintf_r+0xfa>
 8007f7a:	9207      	str	r2, [sp, #28]
 8007f7c:	e004      	b.n	8007f88 <_svfiprintf_r+0x104>
 8007f7e:	4252      	negs	r2, r2
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	9207      	str	r2, [sp, #28]
 8007f86:	9304      	str	r3, [sp, #16]
 8007f88:	783b      	ldrb	r3, [r7, #0]
 8007f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f8c:	d10c      	bne.n	8007fa8 <_svfiprintf_r+0x124>
 8007f8e:	787b      	ldrb	r3, [r7, #1]
 8007f90:	2b2a      	cmp	r3, #42	; 0x2a
 8007f92:	d133      	bne.n	8007ffc <_svfiprintf_r+0x178>
 8007f94:	9b03      	ldr	r3, [sp, #12]
 8007f96:	1d1a      	adds	r2, r3, #4
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	9203      	str	r2, [sp, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bfb8      	it	lt
 8007fa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fa4:	3702      	adds	r7, #2
 8007fa6:	9305      	str	r3, [sp, #20]
 8007fa8:	4d2e      	ldr	r5, [pc, #184]	; (8008064 <_svfiprintf_r+0x1e0>)
 8007faa:	7839      	ldrb	r1, [r7, #0]
 8007fac:	2203      	movs	r2, #3
 8007fae:	4628      	mov	r0, r5
 8007fb0:	f7f8 f91e 	bl	80001f0 <memchr>
 8007fb4:	b138      	cbz	r0, 8007fc6 <_svfiprintf_r+0x142>
 8007fb6:	2340      	movs	r3, #64	; 0x40
 8007fb8:	1b40      	subs	r0, r0, r5
 8007fba:	fa03 f000 	lsl.w	r0, r3, r0
 8007fbe:	9b04      	ldr	r3, [sp, #16]
 8007fc0:	4303      	orrs	r3, r0
 8007fc2:	3701      	adds	r7, #1
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	7839      	ldrb	r1, [r7, #0]
 8007fc8:	4827      	ldr	r0, [pc, #156]	; (8008068 <_svfiprintf_r+0x1e4>)
 8007fca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fce:	2206      	movs	r2, #6
 8007fd0:	1c7e      	adds	r6, r7, #1
 8007fd2:	f7f8 f90d 	bl	80001f0 <memchr>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d038      	beq.n	800804c <_svfiprintf_r+0x1c8>
 8007fda:	4b24      	ldr	r3, [pc, #144]	; (800806c <_svfiprintf_r+0x1e8>)
 8007fdc:	bb13      	cbnz	r3, 8008024 <_svfiprintf_r+0x1a0>
 8007fde:	9b03      	ldr	r3, [sp, #12]
 8007fe0:	3307      	adds	r3, #7
 8007fe2:	f023 0307 	bic.w	r3, r3, #7
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	9303      	str	r3, [sp, #12]
 8007fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fec:	444b      	add	r3, r9
 8007fee:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff0:	e76d      	b.n	8007ece <_svfiprintf_r+0x4a>
 8007ff2:	fb05 3202 	mla	r2, r5, r2, r3
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	e7a6      	b.n	8007f4a <_svfiprintf_r+0xc6>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	3701      	adds	r7, #1
 8008000:	9305      	str	r3, [sp, #20]
 8008002:	4619      	mov	r1, r3
 8008004:	250a      	movs	r5, #10
 8008006:	4638      	mov	r0, r7
 8008008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800800c:	3a30      	subs	r2, #48	; 0x30
 800800e:	2a09      	cmp	r2, #9
 8008010:	d903      	bls.n	800801a <_svfiprintf_r+0x196>
 8008012:	2b00      	cmp	r3, #0
 8008014:	d0c8      	beq.n	8007fa8 <_svfiprintf_r+0x124>
 8008016:	9105      	str	r1, [sp, #20]
 8008018:	e7c6      	b.n	8007fa8 <_svfiprintf_r+0x124>
 800801a:	fb05 2101 	mla	r1, r5, r1, r2
 800801e:	2301      	movs	r3, #1
 8008020:	4607      	mov	r7, r0
 8008022:	e7f0      	b.n	8008006 <_svfiprintf_r+0x182>
 8008024:	ab03      	add	r3, sp, #12
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	4622      	mov	r2, r4
 800802a:	4b11      	ldr	r3, [pc, #68]	; (8008070 <_svfiprintf_r+0x1ec>)
 800802c:	a904      	add	r1, sp, #16
 800802e:	4640      	mov	r0, r8
 8008030:	f3af 8000 	nop.w
 8008034:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008038:	4681      	mov	r9, r0
 800803a:	d1d6      	bne.n	8007fea <_svfiprintf_r+0x166>
 800803c:	89a3      	ldrh	r3, [r4, #12]
 800803e:	065b      	lsls	r3, r3, #25
 8008040:	f53f af35 	bmi.w	8007eae <_svfiprintf_r+0x2a>
 8008044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008046:	b01d      	add	sp, #116	; 0x74
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	ab03      	add	r3, sp, #12
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4622      	mov	r2, r4
 8008052:	4b07      	ldr	r3, [pc, #28]	; (8008070 <_svfiprintf_r+0x1ec>)
 8008054:	a904      	add	r1, sp, #16
 8008056:	4640      	mov	r0, r8
 8008058:	f000 f882 	bl	8008160 <_printf_i>
 800805c:	e7ea      	b.n	8008034 <_svfiprintf_r+0x1b0>
 800805e:	bf00      	nop
 8008060:	080084c8 	.word	0x080084c8
 8008064:	080084ce 	.word	0x080084ce
 8008068:	080084d2 	.word	0x080084d2
 800806c:	00000000 	.word	0x00000000
 8008070:	08007dd1 	.word	0x08007dd1

08008074 <_printf_common>:
 8008074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008078:	4691      	mov	r9, r2
 800807a:	461f      	mov	r7, r3
 800807c:	688a      	ldr	r2, [r1, #8]
 800807e:	690b      	ldr	r3, [r1, #16]
 8008080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008084:	4293      	cmp	r3, r2
 8008086:	bfb8      	it	lt
 8008088:	4613      	movlt	r3, r2
 800808a:	f8c9 3000 	str.w	r3, [r9]
 800808e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008092:	4606      	mov	r6, r0
 8008094:	460c      	mov	r4, r1
 8008096:	b112      	cbz	r2, 800809e <_printf_common+0x2a>
 8008098:	3301      	adds	r3, #1
 800809a:	f8c9 3000 	str.w	r3, [r9]
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	0699      	lsls	r1, r3, #26
 80080a2:	bf42      	ittt	mi
 80080a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80080a8:	3302      	addmi	r3, #2
 80080aa:	f8c9 3000 	strmi.w	r3, [r9]
 80080ae:	6825      	ldr	r5, [r4, #0]
 80080b0:	f015 0506 	ands.w	r5, r5, #6
 80080b4:	d107      	bne.n	80080c6 <_printf_common+0x52>
 80080b6:	f104 0a19 	add.w	sl, r4, #25
 80080ba:	68e3      	ldr	r3, [r4, #12]
 80080bc:	f8d9 2000 	ldr.w	r2, [r9]
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	42ab      	cmp	r3, r5
 80080c4:	dc28      	bgt.n	8008118 <_printf_common+0xa4>
 80080c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80080ca:	6822      	ldr	r2, [r4, #0]
 80080cc:	3300      	adds	r3, #0
 80080ce:	bf18      	it	ne
 80080d0:	2301      	movne	r3, #1
 80080d2:	0692      	lsls	r2, r2, #26
 80080d4:	d42d      	bmi.n	8008132 <_printf_common+0xbe>
 80080d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080da:	4639      	mov	r1, r7
 80080dc:	4630      	mov	r0, r6
 80080de:	47c0      	blx	r8
 80080e0:	3001      	adds	r0, #1
 80080e2:	d020      	beq.n	8008126 <_printf_common+0xb2>
 80080e4:	6823      	ldr	r3, [r4, #0]
 80080e6:	68e5      	ldr	r5, [r4, #12]
 80080e8:	f8d9 2000 	ldr.w	r2, [r9]
 80080ec:	f003 0306 	and.w	r3, r3, #6
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	bf08      	it	eq
 80080f4:	1aad      	subeq	r5, r5, r2
 80080f6:	68a3      	ldr	r3, [r4, #8]
 80080f8:	6922      	ldr	r2, [r4, #16]
 80080fa:	bf0c      	ite	eq
 80080fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008100:	2500      	movne	r5, #0
 8008102:	4293      	cmp	r3, r2
 8008104:	bfc4      	itt	gt
 8008106:	1a9b      	subgt	r3, r3, r2
 8008108:	18ed      	addgt	r5, r5, r3
 800810a:	f04f 0900 	mov.w	r9, #0
 800810e:	341a      	adds	r4, #26
 8008110:	454d      	cmp	r5, r9
 8008112:	d11a      	bne.n	800814a <_printf_common+0xd6>
 8008114:	2000      	movs	r0, #0
 8008116:	e008      	b.n	800812a <_printf_common+0xb6>
 8008118:	2301      	movs	r3, #1
 800811a:	4652      	mov	r2, sl
 800811c:	4639      	mov	r1, r7
 800811e:	4630      	mov	r0, r6
 8008120:	47c0      	blx	r8
 8008122:	3001      	adds	r0, #1
 8008124:	d103      	bne.n	800812e <_printf_common+0xba>
 8008126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800812a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812e:	3501      	adds	r5, #1
 8008130:	e7c3      	b.n	80080ba <_printf_common+0x46>
 8008132:	18e1      	adds	r1, r4, r3
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	2030      	movs	r0, #48	; 0x30
 8008138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800813c:	4422      	add	r2, r4
 800813e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008146:	3302      	adds	r3, #2
 8008148:	e7c5      	b.n	80080d6 <_printf_common+0x62>
 800814a:	2301      	movs	r3, #1
 800814c:	4622      	mov	r2, r4
 800814e:	4639      	mov	r1, r7
 8008150:	4630      	mov	r0, r6
 8008152:	47c0      	blx	r8
 8008154:	3001      	adds	r0, #1
 8008156:	d0e6      	beq.n	8008126 <_printf_common+0xb2>
 8008158:	f109 0901 	add.w	r9, r9, #1
 800815c:	e7d8      	b.n	8008110 <_printf_common+0x9c>
	...

08008160 <_printf_i>:
 8008160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008168:	460c      	mov	r4, r1
 800816a:	7e09      	ldrb	r1, [r1, #24]
 800816c:	b085      	sub	sp, #20
 800816e:	296e      	cmp	r1, #110	; 0x6e
 8008170:	4617      	mov	r7, r2
 8008172:	4606      	mov	r6, r0
 8008174:	4698      	mov	r8, r3
 8008176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008178:	f000 80b3 	beq.w	80082e2 <_printf_i+0x182>
 800817c:	d822      	bhi.n	80081c4 <_printf_i+0x64>
 800817e:	2963      	cmp	r1, #99	; 0x63
 8008180:	d036      	beq.n	80081f0 <_printf_i+0x90>
 8008182:	d80a      	bhi.n	800819a <_printf_i+0x3a>
 8008184:	2900      	cmp	r1, #0
 8008186:	f000 80b9 	beq.w	80082fc <_printf_i+0x19c>
 800818a:	2958      	cmp	r1, #88	; 0x58
 800818c:	f000 8083 	beq.w	8008296 <_printf_i+0x136>
 8008190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008198:	e032      	b.n	8008200 <_printf_i+0xa0>
 800819a:	2964      	cmp	r1, #100	; 0x64
 800819c:	d001      	beq.n	80081a2 <_printf_i+0x42>
 800819e:	2969      	cmp	r1, #105	; 0x69
 80081a0:	d1f6      	bne.n	8008190 <_printf_i+0x30>
 80081a2:	6820      	ldr	r0, [r4, #0]
 80081a4:	6813      	ldr	r3, [r2, #0]
 80081a6:	0605      	lsls	r5, r0, #24
 80081a8:	f103 0104 	add.w	r1, r3, #4
 80081ac:	d52a      	bpl.n	8008204 <_printf_i+0xa4>
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6011      	str	r1, [r2, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	da03      	bge.n	80081be <_printf_i+0x5e>
 80081b6:	222d      	movs	r2, #45	; 0x2d
 80081b8:	425b      	negs	r3, r3
 80081ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80081be:	486f      	ldr	r0, [pc, #444]	; (800837c <_printf_i+0x21c>)
 80081c0:	220a      	movs	r2, #10
 80081c2:	e039      	b.n	8008238 <_printf_i+0xd8>
 80081c4:	2973      	cmp	r1, #115	; 0x73
 80081c6:	f000 809d 	beq.w	8008304 <_printf_i+0x1a4>
 80081ca:	d808      	bhi.n	80081de <_printf_i+0x7e>
 80081cc:	296f      	cmp	r1, #111	; 0x6f
 80081ce:	d020      	beq.n	8008212 <_printf_i+0xb2>
 80081d0:	2970      	cmp	r1, #112	; 0x70
 80081d2:	d1dd      	bne.n	8008190 <_printf_i+0x30>
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	f043 0320 	orr.w	r3, r3, #32
 80081da:	6023      	str	r3, [r4, #0]
 80081dc:	e003      	b.n	80081e6 <_printf_i+0x86>
 80081de:	2975      	cmp	r1, #117	; 0x75
 80081e0:	d017      	beq.n	8008212 <_printf_i+0xb2>
 80081e2:	2978      	cmp	r1, #120	; 0x78
 80081e4:	d1d4      	bne.n	8008190 <_printf_i+0x30>
 80081e6:	2378      	movs	r3, #120	; 0x78
 80081e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081ec:	4864      	ldr	r0, [pc, #400]	; (8008380 <_printf_i+0x220>)
 80081ee:	e055      	b.n	800829c <_printf_i+0x13c>
 80081f0:	6813      	ldr	r3, [r2, #0]
 80081f2:	1d19      	adds	r1, r3, #4
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6011      	str	r1, [r2, #0]
 80081f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008200:	2301      	movs	r3, #1
 8008202:	e08c      	b.n	800831e <_printf_i+0x1be>
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6011      	str	r1, [r2, #0]
 8008208:	f010 0f40 	tst.w	r0, #64	; 0x40
 800820c:	bf18      	it	ne
 800820e:	b21b      	sxthne	r3, r3
 8008210:	e7cf      	b.n	80081b2 <_printf_i+0x52>
 8008212:	6813      	ldr	r3, [r2, #0]
 8008214:	6825      	ldr	r5, [r4, #0]
 8008216:	1d18      	adds	r0, r3, #4
 8008218:	6010      	str	r0, [r2, #0]
 800821a:	0628      	lsls	r0, r5, #24
 800821c:	d501      	bpl.n	8008222 <_printf_i+0xc2>
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	e002      	b.n	8008228 <_printf_i+0xc8>
 8008222:	0668      	lsls	r0, r5, #25
 8008224:	d5fb      	bpl.n	800821e <_printf_i+0xbe>
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	4854      	ldr	r0, [pc, #336]	; (800837c <_printf_i+0x21c>)
 800822a:	296f      	cmp	r1, #111	; 0x6f
 800822c:	bf14      	ite	ne
 800822e:	220a      	movne	r2, #10
 8008230:	2208      	moveq	r2, #8
 8008232:	2100      	movs	r1, #0
 8008234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008238:	6865      	ldr	r5, [r4, #4]
 800823a:	60a5      	str	r5, [r4, #8]
 800823c:	2d00      	cmp	r5, #0
 800823e:	f2c0 8095 	blt.w	800836c <_printf_i+0x20c>
 8008242:	6821      	ldr	r1, [r4, #0]
 8008244:	f021 0104 	bic.w	r1, r1, #4
 8008248:	6021      	str	r1, [r4, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d13d      	bne.n	80082ca <_printf_i+0x16a>
 800824e:	2d00      	cmp	r5, #0
 8008250:	f040 808e 	bne.w	8008370 <_printf_i+0x210>
 8008254:	4665      	mov	r5, ip
 8008256:	2a08      	cmp	r2, #8
 8008258:	d10b      	bne.n	8008272 <_printf_i+0x112>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	07db      	lsls	r3, r3, #31
 800825e:	d508      	bpl.n	8008272 <_printf_i+0x112>
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	6862      	ldr	r2, [r4, #4]
 8008264:	429a      	cmp	r2, r3
 8008266:	bfde      	ittt	le
 8008268:	2330      	movle	r3, #48	; 0x30
 800826a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800826e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008272:	ebac 0305 	sub.w	r3, ip, r5
 8008276:	6123      	str	r3, [r4, #16]
 8008278:	f8cd 8000 	str.w	r8, [sp]
 800827c:	463b      	mov	r3, r7
 800827e:	aa03      	add	r2, sp, #12
 8008280:	4621      	mov	r1, r4
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff fef6 	bl	8008074 <_printf_common>
 8008288:	3001      	adds	r0, #1
 800828a:	d14d      	bne.n	8008328 <_printf_i+0x1c8>
 800828c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008290:	b005      	add	sp, #20
 8008292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008296:	4839      	ldr	r0, [pc, #228]	; (800837c <_printf_i+0x21c>)
 8008298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800829c:	6813      	ldr	r3, [r2, #0]
 800829e:	6821      	ldr	r1, [r4, #0]
 80082a0:	1d1d      	adds	r5, r3, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6015      	str	r5, [r2, #0]
 80082a6:	060a      	lsls	r2, r1, #24
 80082a8:	d50b      	bpl.n	80082c2 <_printf_i+0x162>
 80082aa:	07ca      	lsls	r2, r1, #31
 80082ac:	bf44      	itt	mi
 80082ae:	f041 0120 	orrmi.w	r1, r1, #32
 80082b2:	6021      	strmi	r1, [r4, #0]
 80082b4:	b91b      	cbnz	r3, 80082be <_printf_i+0x15e>
 80082b6:	6822      	ldr	r2, [r4, #0]
 80082b8:	f022 0220 	bic.w	r2, r2, #32
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	2210      	movs	r2, #16
 80082c0:	e7b7      	b.n	8008232 <_printf_i+0xd2>
 80082c2:	064d      	lsls	r5, r1, #25
 80082c4:	bf48      	it	mi
 80082c6:	b29b      	uxthmi	r3, r3
 80082c8:	e7ef      	b.n	80082aa <_printf_i+0x14a>
 80082ca:	4665      	mov	r5, ip
 80082cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80082d0:	fb02 3311 	mls	r3, r2, r1, r3
 80082d4:	5cc3      	ldrb	r3, [r0, r3]
 80082d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80082da:	460b      	mov	r3, r1
 80082dc:	2900      	cmp	r1, #0
 80082de:	d1f5      	bne.n	80082cc <_printf_i+0x16c>
 80082e0:	e7b9      	b.n	8008256 <_printf_i+0xf6>
 80082e2:	6813      	ldr	r3, [r2, #0]
 80082e4:	6825      	ldr	r5, [r4, #0]
 80082e6:	6961      	ldr	r1, [r4, #20]
 80082e8:	1d18      	adds	r0, r3, #4
 80082ea:	6010      	str	r0, [r2, #0]
 80082ec:	0628      	lsls	r0, r5, #24
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	d501      	bpl.n	80082f6 <_printf_i+0x196>
 80082f2:	6019      	str	r1, [r3, #0]
 80082f4:	e002      	b.n	80082fc <_printf_i+0x19c>
 80082f6:	066a      	lsls	r2, r5, #25
 80082f8:	d5fb      	bpl.n	80082f2 <_printf_i+0x192>
 80082fa:	8019      	strh	r1, [r3, #0]
 80082fc:	2300      	movs	r3, #0
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	4665      	mov	r5, ip
 8008302:	e7b9      	b.n	8008278 <_printf_i+0x118>
 8008304:	6813      	ldr	r3, [r2, #0]
 8008306:	1d19      	adds	r1, r3, #4
 8008308:	6011      	str	r1, [r2, #0]
 800830a:	681d      	ldr	r5, [r3, #0]
 800830c:	6862      	ldr	r2, [r4, #4]
 800830e:	2100      	movs	r1, #0
 8008310:	4628      	mov	r0, r5
 8008312:	f7f7 ff6d 	bl	80001f0 <memchr>
 8008316:	b108      	cbz	r0, 800831c <_printf_i+0x1bc>
 8008318:	1b40      	subs	r0, r0, r5
 800831a:	6060      	str	r0, [r4, #4]
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	2300      	movs	r3, #0
 8008322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008326:	e7a7      	b.n	8008278 <_printf_i+0x118>
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	462a      	mov	r2, r5
 800832c:	4639      	mov	r1, r7
 800832e:	4630      	mov	r0, r6
 8008330:	47c0      	blx	r8
 8008332:	3001      	adds	r0, #1
 8008334:	d0aa      	beq.n	800828c <_printf_i+0x12c>
 8008336:	6823      	ldr	r3, [r4, #0]
 8008338:	079b      	lsls	r3, r3, #30
 800833a:	d413      	bmi.n	8008364 <_printf_i+0x204>
 800833c:	68e0      	ldr	r0, [r4, #12]
 800833e:	9b03      	ldr	r3, [sp, #12]
 8008340:	4298      	cmp	r0, r3
 8008342:	bfb8      	it	lt
 8008344:	4618      	movlt	r0, r3
 8008346:	e7a3      	b.n	8008290 <_printf_i+0x130>
 8008348:	2301      	movs	r3, #1
 800834a:	464a      	mov	r2, r9
 800834c:	4639      	mov	r1, r7
 800834e:	4630      	mov	r0, r6
 8008350:	47c0      	blx	r8
 8008352:	3001      	adds	r0, #1
 8008354:	d09a      	beq.n	800828c <_printf_i+0x12c>
 8008356:	3501      	adds	r5, #1
 8008358:	68e3      	ldr	r3, [r4, #12]
 800835a:	9a03      	ldr	r2, [sp, #12]
 800835c:	1a9b      	subs	r3, r3, r2
 800835e:	42ab      	cmp	r3, r5
 8008360:	dcf2      	bgt.n	8008348 <_printf_i+0x1e8>
 8008362:	e7eb      	b.n	800833c <_printf_i+0x1dc>
 8008364:	2500      	movs	r5, #0
 8008366:	f104 0919 	add.w	r9, r4, #25
 800836a:	e7f5      	b.n	8008358 <_printf_i+0x1f8>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1ac      	bne.n	80082ca <_printf_i+0x16a>
 8008370:	7803      	ldrb	r3, [r0, #0]
 8008372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008376:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800837a:	e76c      	b.n	8008256 <_printf_i+0xf6>
 800837c:	080084d9 	.word	0x080084d9
 8008380:	080084ea 	.word	0x080084ea

08008384 <memcpy>:
 8008384:	b510      	push	{r4, lr}
 8008386:	1e43      	subs	r3, r0, #1
 8008388:	440a      	add	r2, r1
 800838a:	4291      	cmp	r1, r2
 800838c:	d100      	bne.n	8008390 <memcpy+0xc>
 800838e:	bd10      	pop	{r4, pc}
 8008390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008398:	e7f7      	b.n	800838a <memcpy+0x6>

0800839a <memmove>:
 800839a:	4288      	cmp	r0, r1
 800839c:	b510      	push	{r4, lr}
 800839e:	eb01 0302 	add.w	r3, r1, r2
 80083a2:	d807      	bhi.n	80083b4 <memmove+0x1a>
 80083a4:	1e42      	subs	r2, r0, #1
 80083a6:	4299      	cmp	r1, r3
 80083a8:	d00a      	beq.n	80083c0 <memmove+0x26>
 80083aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80083b2:	e7f8      	b.n	80083a6 <memmove+0xc>
 80083b4:	4283      	cmp	r3, r0
 80083b6:	d9f5      	bls.n	80083a4 <memmove+0xa>
 80083b8:	1881      	adds	r1, r0, r2
 80083ba:	1ad2      	subs	r2, r2, r3
 80083bc:	42d3      	cmn	r3, r2
 80083be:	d100      	bne.n	80083c2 <memmove+0x28>
 80083c0:	bd10      	pop	{r4, pc}
 80083c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80083ca:	e7f7      	b.n	80083bc <memmove+0x22>

080083cc <_realloc_r>:
 80083cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ce:	4607      	mov	r7, r0
 80083d0:	4614      	mov	r4, r2
 80083d2:	460e      	mov	r6, r1
 80083d4:	b921      	cbnz	r1, 80083e0 <_realloc_r+0x14>
 80083d6:	4611      	mov	r1, r2
 80083d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083dc:	f7ff bc6c 	b.w	8007cb8 <_malloc_r>
 80083e0:	b922      	cbnz	r2, 80083ec <_realloc_r+0x20>
 80083e2:	f7ff fc1b 	bl	8007c1c <_free_r>
 80083e6:	4625      	mov	r5, r4
 80083e8:	4628      	mov	r0, r5
 80083ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083ec:	f000 f814 	bl	8008418 <_malloc_usable_size_r>
 80083f0:	42a0      	cmp	r0, r4
 80083f2:	d20f      	bcs.n	8008414 <_realloc_r+0x48>
 80083f4:	4621      	mov	r1, r4
 80083f6:	4638      	mov	r0, r7
 80083f8:	f7ff fc5e 	bl	8007cb8 <_malloc_r>
 80083fc:	4605      	mov	r5, r0
 80083fe:	2800      	cmp	r0, #0
 8008400:	d0f2      	beq.n	80083e8 <_realloc_r+0x1c>
 8008402:	4631      	mov	r1, r6
 8008404:	4622      	mov	r2, r4
 8008406:	f7ff ffbd 	bl	8008384 <memcpy>
 800840a:	4631      	mov	r1, r6
 800840c:	4638      	mov	r0, r7
 800840e:	f7ff fc05 	bl	8007c1c <_free_r>
 8008412:	e7e9      	b.n	80083e8 <_realloc_r+0x1c>
 8008414:	4635      	mov	r5, r6
 8008416:	e7e7      	b.n	80083e8 <_realloc_r+0x1c>

08008418 <_malloc_usable_size_r>:
 8008418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800841c:	1f18      	subs	r0, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfbc      	itt	lt
 8008422:	580b      	ldrlt	r3, [r1, r0]
 8008424:	18c0      	addlt	r0, r0, r3
 8008426:	4770      	bx	lr

08008428 <_init>:
 8008428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842a:	bf00      	nop
 800842c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842e:	bc08      	pop	{r3}
 8008430:	469e      	mov	lr, r3
 8008432:	4770      	bx	lr

08008434 <_fini>:
 8008434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008436:	bf00      	nop
 8008438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843a:	bc08      	pop	{r3}
 800843c:	469e      	mov	lr, r3
 800843e:	4770      	bx	lr
