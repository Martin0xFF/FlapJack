
FlapJack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800e778  0800e778  0001e778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ecf8  0800ecf8  000204a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ecf8  0800ecf8  0001ecf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed00  0800ed00  000204a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed00  0800ed00  0001ed00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed04  0800ed04  0001ed04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  0800ed08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f48  200004a0  0800f1a8  000204a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013e8  0800f1a8  000213e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e00  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046a6  00000000  00000000  000492d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a68  00000000  00000000  0004d978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018a8  00000000  00000000  0004f3e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bfa3  00000000  00000000  00050c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017965  00000000  00000000  0006cc2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000982b7  00000000  00000000  00084590  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011c847  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000736c  00000000  00000000  0011c8c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e760 	.word	0x0800e760

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	0800e760 	.word	0x0800e760

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <print_pal_error>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_pal_error(VL53L0X_Error Status){
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];
    VL53L0X_GetPalErrorString(Status, buf);
 800059a:	f107 0208 	add.w	r2, r7, #8
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f008 fc53 	bl	8008e50 <VL53L0X_GetPalErrorString>
    cdc_printf(buf, Status);
 80005aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f805 	bl	80005c4 <cdc_printf>
}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	; 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <cdc_printf>:

uint8_t msg[1024];

void cdc_printf(const char * fmt, ...){
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
	// Make a simple function to print to usb
	va_list args;
	va_start(args, fmt);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	607b      	str	r3, [r7, #4]
    vsprintf((char *)msg, fmt, args);
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6939      	ldr	r1, [r7, #16]
 80005d6:	4809      	ldr	r0, [pc, #36]	; (80005fc <cdc_printf+0x38>)
 80005d8:	f00d fd94 	bl	800e104 <vsiprintf>
	va_end(args);
	CDC_Transmit_FS(msg, strlen((char *)msg));
 80005dc:	4807      	ldr	r0, [pc, #28]	; (80005fc <cdc_printf+0x38>)
 80005de:	f7ff fdff 	bl	80001e0 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4619      	mov	r1, r3
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <cdc_printf+0x38>)
 80005e8:	f007 fff0 	bl	80085cc <CDC_Transmit_FS>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f6:	b004      	add	sp, #16
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000570 	.word	0x20000570

08000600 <TOF_Init>:
uint8_t isApertureSpads;
uint8_t VhvSettings;
uint8_t PhaseCal;

VL53L0X_Error TOF_Init(VL53L0X_Dev_t *pMyDevice)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]
    if(Status == VL53L0X_ERROR_NONE)
 800060c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d109      	bne.n	8000628 <TOF_Init+0x28>
    {
    	//cdc_printf("Call of VL53L0X_DataInit\r\n");
    	Status = VL53L0X_DataInit(pMyDevice); // Data initialization
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f008 fc45 	bl	8008ea4 <VL53L0X_DataInit>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]
    	print_pal_error(Status);
 800061e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffb4 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d109      	bne.n	8000644 <TOF_Init+0x44>
    {
        //cdc_printf("Call of VL53L0X_StaticInit\r\n");
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f008 fd9b 	bl	800916c <VL53L0X_StaticInit>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]
        print_pal_error(Status);
 800063a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ffa6 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d10b      	bne.n	8000664 <TOF_Init+0x64>
    {
        //cdc_printf("Call of VL53L0X_PerformRefCalibration\r\n");
        Status = VL53L0X_PerformRefCalibration(pMyDevice,
 800064c:	4a38      	ldr	r2, [pc, #224]	; (8000730 <TOF_Init+0x130>)
 800064e:	4939      	ldr	r1, [pc, #228]	; (8000734 <TOF_Init+0x134>)
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f009 fc99 	bl	8009f88 <VL53L0X_PerformRefCalibration>
 8000656:	4603      	mov	r3, r0
 8000658:	73fb      	strb	r3, [r7, #15]
        		&VhvSettings, &PhaseCal); // Device Initialization
        print_pal_error(Status);
 800065a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ff96 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d113      	bne.n	8000694 <TOF_Init+0x94>
    {
        //cdc_printf("Call of VL53L0X_PerformRefSpadManagement\r\n");
        Status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 800066c:	4a32      	ldr	r2, [pc, #200]	; (8000738 <TOF_Init+0x138>)
 800066e:	4933      	ldr	r1, [pc, #204]	; (800073c <TOF_Init+0x13c>)
 8000670:	6878      	ldr	r0, [r7, #4]
 8000672:	f00a f917 	bl	800a8a4 <VL53L0X_PerformRefSpadManagement>
 8000676:	4603      	mov	r3, r0
 8000678:	73fb      	strb	r3, [r7, #15]
        		&refSpadCount, &isApertureSpads); // Device Initialization
        cdc_printf("refSpadCount = %06d, isApertureSpads = %06d\r\n", refSpadCount, isApertureSpads);
 800067a:	4b30      	ldr	r3, [pc, #192]	; (800073c <TOF_Init+0x13c>)
 800067c:	6819      	ldr	r1, [r3, #0]
 800067e:	4b2e      	ldr	r3, [pc, #184]	; (8000738 <TOF_Init+0x138>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	482e      	ldr	r0, [pc, #184]	; (8000740 <TOF_Init+0x140>)
 8000686:	f7ff ff9d 	bl	80005c4 <cdc_printf>
        print_pal_error(Status);
 800068a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff7e 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10a      	bne.n	80006b2 <TOF_Init+0xb2>
    {

        // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
        //cdc_printf("Call of VL53L0X_SetDeviceMode\r\n");
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800069c:	2100      	movs	r1, #0
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f008 ff76 	bl	8009590 <VL53L0X_SetDeviceMode>
 80006a4:	4603      	mov	r3, r0
 80006a6:	73fb      	strb	r3, [r7, #15]
        print_pal_error(Status);
 80006a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff6f 	bl	8000590 <print_pal_error>
    }

    // Enable/Disable Sigma and Signal check
    if (Status == VL53L0X_ERROR_NONE) {
 80006b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d106      	bne.n	80006c8 <TOF_Init+0xc8>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 80006ba:	2201      	movs	r2, #1
 80006bc:	2100      	movs	r1, #0
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f009 f9e6 	bl	8009a90 <VL53L0X_SetLimitCheckEnable>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 80006c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d106      	bne.n	80006de <TOF_Init+0xde>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 80006d0:	2201      	movs	r2, #1
 80006d2:	2101      	movs	r1, #1
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f009 f9db 	bl	8009a90 <VL53L0X_SetLimitCheckEnable>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80006de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d107      	bne.n	80006f6 <TOF_Init+0xf6>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 80006e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ea:	2101      	movs	r1, #1
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f009 fa7f 	bl	8009bf0 <VL53L0X_SetLimitCheckValue>
 80006f2:	4603      	mov	r3, r0
 80006f4:	73fb      	strb	r3, [r7, #15]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        		(FixPoint1616_t)(0.25*65536));
	}
    if (Status == VL53L0X_ERROR_NONE) {
 80006f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d107      	bne.n	800070e <TOF_Init+0x10e>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 80006fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000702:	2100      	movs	r1, #0
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f009 fa73 	bl	8009bf0 <VL53L0X_SetLimitCheckValue>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
        		(FixPoint1616_t)(32*65536));
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800070e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d106      	bne.n	8000724 <TOF_Init+0x124>
        Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice,
 8000716:	f247 5130 	movw	r1, #30000	; 0x7530
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f008 ffb2 	bl	8009684 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
        		30000);
    }
    return Status;
 8000724:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200009f8 	.word	0x200009f8
 8000734:	20000a7c 	.word	0x20000a7c
 8000738:	200009f0 	.word	0x200009f0
 800073c:	200009f4 	.word	0x200009f4
 8000740:	0800e790 	.word	0x0800e790

08000744 <motor_set_direction>:


uint8_t motor_set_direction(uint8_t status){
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	switch (status){
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b07      	cmp	r3, #7
 8000752:	d85b      	bhi.n	800080c <motor_set_direction+0xc8>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <motor_set_direction+0x18>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	0800077d 	.word	0x0800077d
 8000760:	08000797 	.word	0x08000797
 8000764:	0800080d 	.word	0x0800080d
 8000768:	080007dd 	.word	0x080007dd
 800076c:	080007b1 	.word	0x080007b1
 8000770:	080007c7 	.word	0x080007c7
 8000774:	0800080d 	.word	0x0800080d
 8000778:	080007f7 	.word	0x080007f7
		case RWHEEL_FORWARD:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000782:	4825      	ldr	r0, [pc, #148]	; (8000818 <motor_set_direction+0xd4>)
 8000784:	f001 faac 	bl	8001ce0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078e:	4822      	ldr	r0, [pc, #136]	; (8000818 <motor_set_direction+0xd4>)
 8000790:	f001 faa6 	bl	8001ce0 <HAL_GPIO_WritePin>
			break;
 8000794:	e03a      	b.n	800080c <motor_set_direction+0xc8>

		case RWHEEL_BACKWARD:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079c:	481e      	ldr	r0, [pc, #120]	; (8000818 <motor_set_direction+0xd4>)
 800079e:	f001 fa9f 	bl	8001ce0 <HAL_GPIO_WritePin>
		  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80007a2:	2201      	movs	r2, #1
 80007a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a8:	481b      	ldr	r0, [pc, #108]	; (8000818 <motor_set_direction+0xd4>)
 80007aa:	f001 fa99 	bl	8001ce0 <HAL_GPIO_WritePin>
		  	break;
 80007ae:	e02d      	b.n	800080c <motor_set_direction+0xc8>

		case LWHEEL_FORWARD:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2110      	movs	r1, #16
 80007b4:	4818      	ldr	r0, [pc, #96]	; (8000818 <motor_set_direction+0xd4>)
 80007b6:	f001 fa93 	bl	8001ce0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4816      	ldr	r0, [pc, #88]	; (8000818 <motor_set_direction+0xd4>)
 80007c0:	f001 fa8e 	bl	8001ce0 <HAL_GPIO_WritePin>
			break;
 80007c4:	e022      	b.n	800080c <motor_set_direction+0xc8>

		case LWHEEL_BACKWARD:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	4813      	ldr	r0, [pc, #76]	; (8000818 <motor_set_direction+0xd4>)
 80007cc:	f001 fa88 	bl	8001ce0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2120      	movs	r1, #32
 80007d4:	4810      	ldr	r0, [pc, #64]	; (8000818 <motor_set_direction+0xd4>)
 80007d6:	f001 fa83 	bl	8001ce0 <HAL_GPIO_WritePin>
			break;
 80007da:	e017      	b.n	800080c <motor_set_direction+0xc8>

		case RWHEEL_STOP:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <motor_set_direction+0xd4>)
 80007e4:	f001 fa7c 	bl	8001ce0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ee:	480a      	ldr	r0, [pc, #40]	; (8000818 <motor_set_direction+0xd4>)
 80007f0:	f001 fa76 	bl	8001ce0 <HAL_GPIO_WritePin>
			break;
 80007f4:	e00a      	b.n	800080c <motor_set_direction+0xc8>

		case LWHEEL_STOP:
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2110      	movs	r1, #16
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <motor_set_direction+0xd4>)
 80007fc:	f001 fa70 	bl	8001ce0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2120      	movs	r1, #32
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <motor_set_direction+0xd4>)
 8000806:	f001 fa6b 	bl	8001ce0 <HAL_GPIO_WritePin>
			break;
 800080a:	bf00      	nop
	}
	return 0;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40020000 	.word	0x40020000

0800081c <motor_set_speed>:


uint8_t motor_set_speed(uint8_t status, uint32_t speed){
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	71fb      	strb	r3, [r7, #7]
		switch (status){
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	2b02      	cmp	r3, #2
 800082c:	d002      	beq.n	8000834 <motor_set_speed+0x18>
 800082e:	2b06      	cmp	r3, #6
 8000830:	d004      	beq.n	800083c <motor_set_speed+0x20>
 8000832:	e007      	b.n	8000844 <motor_set_speed+0x28>
			case RWHEEL_SET_SPEED:
				TIM1->CCR3 = speed;
 8000834:	4a07      	ldr	r2, [pc, #28]	; (8000854 <motor_set_speed+0x38>)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	63d3      	str	r3, [r2, #60]	; 0x3c
				break;
 800083a:	e003      	b.n	8000844 <motor_set_speed+0x28>

			case LWHEEL_SET_SPEED:
				TIM5->CCR4 = speed;
 800083c:	4a06      	ldr	r2, [pc, #24]	; (8000858 <motor_set_speed+0x3c>)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 8000842:	bf00      	nop

		}
		return 0;
 8000844:	2300      	movs	r3, #0
}
 8000846:	4618      	mov	r0, r3
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	40010000 	.word	0x40010000
 8000858:	40000c00 	.word	0x40000c00

0800085c <motor_set_config>:

uint8_t motor_set_config(uint8_t *mconfig){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	// b1: set to 1 to turn Left wheel in the forward direction
	// b0: set to 1 to turn Right wheel in the forward direction
	// Use mconfig[1](MSB) and mconfig[2](LSB) to set LEFT motor Speed
	// Use mconfig[3](MSB) and mconfig[4](LSB) to set RIGHT motor Speed

	if ((mconfig[0] & 0x08) == 0){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	f003 0308 	and.w	r3, r3, #8
 800086c:	2b00      	cmp	r3, #0
 800086e:	d119      	bne.n	80008a4 <motor_set_config+0x48>
		if (mconfig[0] & 0x02)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	f003 0302 	and.w	r3, r3, #2
 8000878:	2b00      	cmp	r3, #0
 800087a:	d003      	beq.n	8000884 <motor_set_config+0x28>
			motor_set_direction(LWHEEL_FORWARD);
 800087c:	2004      	movs	r0, #4
 800087e:	f7ff ff61 	bl	8000744 <motor_set_direction>
 8000882:	e002      	b.n	800088a <motor_set_config+0x2e>
		else
			motor_set_direction(LWHEEL_BACKWARD);
 8000884:	2005      	movs	r0, #5
 8000886:	f7ff ff5d 	bl	8000744 <motor_set_direction>
		motor_set_speed(LWHEEL_SET_SPEED,(uint32_t)mconfig[1]<<8 | mconfig[2]);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3301      	adds	r3, #1
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	3202      	adds	r2, #2
 8000896:	7812      	ldrb	r2, [r2, #0]
 8000898:	4313      	orrs	r3, r2
 800089a:	4619      	mov	r1, r3
 800089c:	2006      	movs	r0, #6
 800089e:	f7ff ffbd 	bl	800081c <motor_set_speed>
 80008a2:	e002      	b.n	80008aa <motor_set_config+0x4e>
	}
	else{
		motor_set_direction(LWHEEL_STOP);
 80008a4:	2007      	movs	r0, #7
 80008a6:	f7ff ff4d 	bl	8000744 <motor_set_direction>
	}

	if ((mconfig[0] & 0x04) == 0){
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d119      	bne.n	80008ea <motor_set_config+0x8e>
		if (mconfig[0] & 0x01)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d003      	beq.n	80008ca <motor_set_config+0x6e>
			motor_set_direction(RWHEEL_FORWARD);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f7ff ff3e 	bl	8000744 <motor_set_direction>
 80008c8:	e002      	b.n	80008d0 <motor_set_config+0x74>
		else
			motor_set_direction(RWHEEL_BACKWARD);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff ff3a 	bl	8000744 <motor_set_direction>
		motor_set_speed(RWHEEL_SET_SPEED,(uint32_t)mconfig[3]<<8 | mconfig[4]);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	3303      	adds	r3, #3
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	3204      	adds	r2, #4
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	4313      	orrs	r3, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff ff9a 	bl	800081c <motor_set_speed>
 80008e8:	e002      	b.n	80008f0 <motor_set_config+0x94>
	}else{
		motor_set_direction(RWHEEL_STOP);
 80008ea:	2003      	movs	r0, #3
 80008ec:	f7ff ff2a 	bl	8000744 <motor_set_direction>
	}


}
 80008f0:	bf00      	nop
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <TOF_Single_Range>:

uint16_t TOF_Single_Range(VL53L0X_Dev_t *pMyDevice){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000904:	2300      	movs	r3, #0
 8000906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice,
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4619      	mov	r1, r3
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f009 fddb 	bl	800a4cc <VL53L0X_PerformSingleRangingMeasurement>
 8000916:	4603      	mov	r3, r0
 8000918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            		&RangingMeasurementData);
    VL53L0X_GetLimitCheckCurrent(pMyDevice,
 800091c:	4a07      	ldr	r2, [pc, #28]	; (800093c <TOF_Single_Range+0x40>)
 800091e:	2103      	movs	r1, #3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f009 fa55 	bl	8009dd0 <VL53L0X_GetLimitCheckCurrent>
    VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, &LimitCheckCurrent);
    if (Status)
 8000926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <TOF_Single_Range+0x36>
    	return 1;
 800092e:	2301      	movs	r3, #1
 8000930:	e000      	b.n	8000934 <TOF_Single_Range+0x38>
    return RangingMeasurementData.RangeMilliMeter;
 8000932:	8a3b      	ldrh	r3, [r7, #16]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200004d8 	.word	0x200004d8

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b0fc      	sub	sp, #496	; 0x1f0
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fea3 	bl	8001690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f8ed 	bl	8000b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 fbc7 	bl	80010e0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000952:	f007 fd2b 	bl	80083ac <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000956:	f000 fa71 	bl	8000e3c <MX_TIM3_Init>
  MX_TIM9_Init();
 800095a:	f000 fb39 	bl	8000fd0 <MX_TIM9_Init>
  MX_I2C1_Init();
 800095e:	f000 f94b 	bl	8000bf8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000962:	f000 fa17 	bl	8000d94 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000966:	f000 f975 	bl	8000c54 <MX_TIM1_Init>
  MX_TIM5_Init();
 800096a:	f000 fabb 	bl	8000ee4 <MX_TIM5_Init>
  MX_TIM10_Init();
 800096e:	f000 fb69 	bl	8001044 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  State = -1;
 8000972:	4b5f      	ldr	r3, [pc, #380]	; (8000af0 <main+0x1b0>)
 8000974:	22ff      	movs	r2, #255	; 0xff
 8000976:	701a      	strb	r2, [r3, #0]
  uint16_t range = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
  int8_t data[20] = {0}; // This will store all of the data in bytes
 800097e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]
  	  	  	  	  	  	 // bytes 0-13 will hold the MPU data uint16_t, bytes 14-15
  	  	  	  	  	  	 // will hold tof range (mm) data uint16_t
                         // 16-17 will hold wl, 18-19 will hold wr - int16_t
  int16_t t = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
  VL53L0X_Dev_t MyDevice;
  VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8000994:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000998:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  VL53L0X_Version_t Version;
  VL53L0X_Version_t *pVersion   = &Version;
 800099c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  VL53L0X_DeviceInfo_t DeviceInfo;

  // "Angular Velocity of wheels"
  int16_t wl = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f8a7 31e2 	strh.w	r3, [r7, #482]	; 0x1e2
  int16_t wr = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	f8a7 31e0 	strh.w	r3, [r7, #480]	; 0x1e0

  DL = 30000;
 80009b0:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <main+0x1b4>)
 80009b2:	f247 5230 	movw	r2, #30000	; 0x7530
 80009b6:	601a      	str	r2, [r3, #0]
  DR = 30000;
 80009b8:	4b4f      	ldr	r3, [pc, #316]	; (8000af8 <main+0x1b8>)
 80009ba:	f247 5230 	movw	r2, #30000	; 0x7530
 80009be:	601a      	str	r2, [r3, #0]

  // set device addr and other configurations
  pMyDevice->I2cDevAddr      = 0x52;
 80009c0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80009c4:	2252      	movs	r2, #82	; 0x52
 80009c6:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
  pMyDevice->comms_type      =  1;
 80009ca:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80009ce:	2201      	movs	r2, #1
 80009d0:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
  pMyDevice->comms_speed_khz =  400;
 80009d4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80009d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80009dc:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

  // Sensor Init
  TOF_Init(pMyDevice);
 80009e0:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 80009e4:	f7ff fe0c 	bl	8000600 <TOF_Init>
  mpu_pwr_mgmt(MPU_DEV, 0x0, 0x0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2068      	movs	r0, #104	; 0x68
 80009ee:	f006 f89b 	bl	8006b28 <mpu_pwr_mgmt>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80009f2:	213c      	movs	r1, #60	; 0x3c
 80009f4:	4841      	ldr	r0, [pc, #260]	; (8000afc <main+0x1bc>)
 80009f6:	f004 f80f 	bl	8004a18 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80009fa:	213c      	movs	r1, #60	; 0x3c
 80009fc:	4840      	ldr	r0, [pc, #256]	; (8000b00 <main+0x1c0>)
 80009fe:	f004 f80b 	bl	8004a18 <HAL_TIM_Encoder_Start>

  // Encoder counts
  TIM2->CNT = 0; //Left
 8000a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  TIM3->CNT = 0; //Right
 8000a0a:	4b3e      	ldr	r3, [pc, #248]	; (8000b04 <main+0x1c4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	; 0x24


  // Actuation init
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000a10:	2108      	movs	r1, #8
 8000a12:	483d      	ldr	r0, [pc, #244]	; (8000b08 <main+0x1c8>)
 8000a14:	f003 ff3c 	bl	8004890 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8000a18:	210c      	movs	r1, #12
 8000a1a:	483c      	ldr	r0, [pc, #240]	; (8000b0c <main+0x1cc>)
 8000a1c:	f003 ff38 	bl	8004890 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8000a20:	2100      	movs	r1, #0
 8000a22:	483b      	ldr	r0, [pc, #236]	; (8000b10 <main+0x1d0>)
 8000a24:	f003 ff34 	bl	8004890 <HAL_TIM_PWM_Start>

  // Wheel Speed control duty cycle out of DR/65536
  TIM1->CCR3 = DR;
 8000a28:	4a3a      	ldr	r2, [pc, #232]	; (8000b14 <main+0x1d4>)
 8000a2a:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <main+0x1b8>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	63d3      	str	r3, [r2, #60]	; 0x3c
  TIM5->CCR4 = DL;
 8000a30:	4a39      	ldr	r2, [pc, #228]	; (8000b18 <main+0x1d8>)
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <main+0x1b4>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40

  // Cam servo
  TIM10->CCR1 = 100;
 8000a38:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <main+0x1dc>)
 8000a3a:	2264      	movs	r2, #100	; 0x64
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Send Data

	  if(State == STATE_DATA_SEND){
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <main+0x1b0>)
 8000a40:	f993 3000 	ldrsb.w	r3, [r3]
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d146      	bne.n	8000ad6 <main+0x196>
		  wl = TIM2->CNT; // omega l
 8000a48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	f8a7 31e2 	strh.w	r3, [r7, #482]	; 0x1e2
		  wr = TIM3->CNT; // omega r
 8000a52:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <main+0x1c4>)
 8000a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a56:	f8a7 31e0 	strh.w	r3, [r7, #480]	; 0x1e0
		  TIM2->CNT = 0;  // reset Angular Velocities
 8000a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a5e:	2200      	movs	r2, #0
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24
		  TIM3->CNT = 0;
 8000a62:	4b28      	ldr	r3, [pc, #160]	; (8000b04 <main+0x1c4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
		  mpu_get_bytes(MPU_DEV, data); // accel, temp, gyro
 8000a68:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	2068      	movs	r0, #104	; 0x68
 8000a70:	f006 f83a 	bl	8006ae8 <mpu_get_bytes>
		  range = TOF_Single_Range(pMyDevice); // ranging
 8000a74:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8000a78:	f7ff ff40 	bl	80008fc <TOF_Single_Range>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee

		  data[14] = range>>8;
 8000a82:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8000a86:	0a1b      	lsrs	r3, r3, #8
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	f887 31da 	strb.w	r3, [r7, #474]	; 0x1da
		  data[15] = range & 0x00ff;
 8000a90:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8000a94:	b25b      	sxtb	r3, r3
 8000a96:	f887 31db 	strb.w	r3, [r7, #475]	; 0x1db
		  data[16] = wl>>8;
 8000a9a:	f9b7 31e2 	ldrsh.w	r3, [r7, #482]	; 0x1e2
 8000a9e:	121b      	asrs	r3, r3, #8
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	f887 31dc 	strb.w	r3, [r7, #476]	; 0x1dc
		  data[17] = wl & 0x00ff;
 8000aa8:	f8b7 31e2 	ldrh.w	r3, [r7, #482]	; 0x1e2
 8000aac:	b25b      	sxtb	r3, r3
 8000aae:	f887 31dd 	strb.w	r3, [r7, #477]	; 0x1dd
		  data[18] = wr>>8;
 8000ab2:	f9b7 31e0 	ldrsh.w	r3, [r7, #480]	; 0x1e0
 8000ab6:	121b      	asrs	r3, r3, #8
 8000ab8:	b21b      	sxth	r3, r3
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	f887 31de 	strb.w	r3, [r7, #478]	; 0x1de
		  data[19] = wr & 0x00ff;
 8000ac0:	f8b7 31e0 	ldrh.w	r3, [r7, #480]	; 0x1e0
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	f887 31df 	strb.w	r3, [r7, #479]	; 0x1df
		  CDC_Transmit_FS(data, 20);
 8000aca:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8000ace:	2114      	movs	r1, #20
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f007 fd7b 	bl	80085cc <CDC_Transmit_FS>

	  }
	  if (Act_State == STATE_ACT_UPDATE){
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <main+0x1e0>)
 8000ad8:	f993 3000 	ldrsb.w	r3, [r3]
 8000adc:	2b0a      	cmp	r3, #10
 8000ade:	d1ae      	bne.n	8000a3e <main+0xfe>
		  motor_set_config(mconfig);
 8000ae0:	4810      	ldr	r0, [pc, #64]	; (8000b24 <main+0x1e4>)
 8000ae2:	f7ff febb 	bl	800085c <motor_set_config>
		  Act_State = 0;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <main+0x1e0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
	  if(State == STATE_DATA_SEND){
 8000aec:	e7a7      	b.n	8000a3e <main+0xfe>
 8000aee:	bf00      	nop
 8000af0:	200004c1 	.word	0x200004c1
 8000af4:	200004c4 	.word	0x200004c4
 8000af8:	200004c8 	.word	0x200004c8
 8000afc:	20000a80 	.word	0x20000a80
 8000b00:	200009b0 	.word	0x200009b0
 8000b04:	40000400 	.word	0x40000400
 8000b08:	200009fc 	.word	0x200009fc
 8000b0c:	20000970 	.word	0x20000970
 8000b10:	20000530 	.word	0x20000530
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40000c00 	.word	0x40000c00
 8000b1c:	40014400 	.word	0x40014400
 8000b20:	200004c2 	.word	0x200004c2
 8000b24:	20000dd4 	.word	0x20000dd4

08000b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b094      	sub	sp, #80	; 0x50
 8000b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2e:	f107 0320 	add.w	r3, r7, #32
 8000b32:	2230      	movs	r2, #48	; 0x30
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00d fa05 	bl	800df46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	4b27      	ldr	r3, [pc, #156]	; (8000bf0 <SystemClock_Config+0xc8>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b54:	4a26      	ldr	r2, [pc, #152]	; (8000bf0 <SystemClock_Config+0xc8>)
 8000b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5c:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <SystemClock_Config+0xc8>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <SystemClock_Config+0xcc>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <SystemClock_Config+0xcc>)
 8000b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <SystemClock_Config+0xcc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b98:	2319      	movs	r3, #25
 8000b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000b9c:	23c0      	movs	r3, #192	; 0xc0
 8000b9e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 f9e7 	bl	8003f80 <HAL_RCC_OscConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb8:	f000 fae4 	bl	8001184 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fc41 	bl	8004460 <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000be4:	f000 face 	bl	8001184 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3750      	adds	r7, #80	; 0x50
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <MX_I2C1_Init+0x54>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c04:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_I2C1_Init+0x58>)
 8000c06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c08:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c28:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_I2C1_Init+0x50>)
 8000c36:	f001 f86d 	bl	8001d14 <HAL_I2C_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c40:	f000 faa0 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200004dc 	.word	0x200004dc
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	00061a80 	.word	0x00061a80

08000c54 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b096      	sub	sp, #88	; 0x58
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
 8000c82:	615a      	str	r2, [r3, #20]
 8000c84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2220      	movs	r2, #32
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f00d f95a 	bl	800df46 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c92:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000c94:	4a3e      	ldr	r2, [pc, #248]	; (8000d90 <MX_TIM1_Init+0x13c>)
 8000c96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c98:	4b3c      	ldr	r3, [pc, #240]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ca4:	4b39      	ldr	r3, [pc, #228]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b37      	ldr	r3, [pc, #220]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cb2:	4b36      	ldr	r3, [pc, #216]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b34      	ldr	r3, [pc, #208]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cbe:	4833      	ldr	r0, [pc, #204]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000cc0:	f003 fd86 	bl	80047d0 <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000cca:	f000 fa5b 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cd8:	4619      	mov	r1, r3
 8000cda:	482c      	ldr	r0, [pc, #176]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000cdc:	f003 ff9a 	bl	8004c14 <HAL_TIM_ConfigClockSource>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ce6:	f000 fa4d 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cea:	4828      	ldr	r0, [pc, #160]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000cec:	f003 fd9b 	bl	8004826 <HAL_TIM_PWM_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cf6:	f000 fa45 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d06:	4619      	mov	r1, r3
 8000d08:	4820      	ldr	r0, [pc, #128]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000d0a:	f004 fb07 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d14:	f000 fa36 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d18:	2360      	movs	r3, #96	; 0x60
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	2208      	movs	r2, #8
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000d3e:	f003 fea3 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000d48:	f000 fa1c 	bl	8001184 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000d70:	f004 fb42 	bl	80053f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000d7a:	f000 fa03 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <MX_TIM1_Init+0x138>)
 8000d80:	f000 fb52 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000d84:	bf00      	nop
 8000d86:	3758      	adds	r7, #88	; 0x58
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200009fc 	.word	0x200009fc
 8000d90:	40010000 	.word	0x40010000

08000d94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	; 0x30
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	2224      	movs	r2, #36	; 0x24
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f00d f8cf 	bl	800df46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db0:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <MX_TIM2_Init+0xa4>)
 8000db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	; (8000e38 <MX_TIM2_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <MX_TIM2_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dc4:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <MX_TIM2_Init+0xa4>)
 8000dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <MX_TIM2_Init+0xa4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_TIM2_Init+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000de0:	2301      	movs	r3, #1
 8000de2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000df0:	2301      	movs	r3, #1
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	4619      	mov	r1, r3
 8000e02:	480d      	ldr	r0, [pc, #52]	; (8000e38 <MX_TIM2_Init+0xa4>)
 8000e04:	f003 fd76 	bl	80048f4 <HAL_TIM_Encoder_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e0e:	f000 f9b9 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4806      	ldr	r0, [pc, #24]	; (8000e38 <MX_TIM2_Init+0xa4>)
 8000e20:	f004 fa7c 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e2a:	f000 f9ab 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	3730      	adds	r7, #48	; 0x30
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000a80 	.word	0x20000a80

08000e3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2224      	movs	r2, #36	; 0x24
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f00d f87b 	bl	800df46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_TIM3_Init+0xa0>)
 8000e5a:	4a21      	ldr	r2, [pc, #132]	; (8000ee0 <MX_TIM3_Init+0xa4>)
 8000e5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_TIM3_Init+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM3_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	; (8000edc <MX_TIM3_Init+0xa0>)
 8000e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_TIM3_Init+0xa0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM3_Init+0xa0>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e86:	2301      	movs	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e96:	2301      	movs	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_TIM3_Init+0xa0>)
 8000eaa:	f003 fd23 	bl	80048f4 <HAL_TIM_Encoder_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000eb4:	f000 f966 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_TIM3_Init+0xa0>)
 8000ec6:	f004 fa29 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ed0:	f000 f958 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3730      	adds	r7, #48	; 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200009b0 	.word	0x200009b0
 8000ee0:	40000400 	.word	0x40000400

08000ee4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08e      	sub	sp, #56	; 0x38
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
 8000f10:	615a      	str	r2, [r3, #20]
 8000f12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f14:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f16:	4a2d      	ldr	r2, [pc, #180]	; (8000fcc <MX_TIM5_Init+0xe8>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f3a:	4823      	ldr	r0, [pc, #140]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f3c:	f003 fc48 	bl	80047d0 <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8000f46:	f000 f91d 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f54:	4619      	mov	r1, r3
 8000f56:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f58:	f003 fe5c 	bl	8004c14 <HAL_TIM_ConfigClockSource>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000f62:	f000 f90f 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f66:	4818      	ldr	r0, [pc, #96]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f68:	f003 fc5d 	bl	8004826 <HAL_TIM_PWM_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000f72:	f000 f907 	bl	8001184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	4619      	mov	r1, r3
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000f86:	f004 f9c9 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000f90:	f000 f8f8 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f94:	2360      	movs	r3, #96	; 0x60
 8000f96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000fac:	f003 fd6c 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8000fb6:	f000 f8e5 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <MX_TIM5_Init+0xe4>)
 8000fbc:	f000 fa34 	bl	8001428 <HAL_TIM_MspPostInit>

}
 8000fc0:	bf00      	nop
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000970 	.word	0x20000970
 8000fcc:	40000c00 	.word	0x40000c00

08000fd0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_TIM9_Init+0x6c>)
 8000fe4:	4a16      	ldr	r2, [pc, #88]	; (8001040 <MX_TIM9_Init+0x70>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_TIM9_Init+0x6c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_TIM9_Init+0x6c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_TIM9_Init+0x6c>)
 8000ff6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_TIM9_Init+0x6c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_TIM9_Init+0x6c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <MX_TIM9_Init+0x6c>)
 800100a:	f003 fbe1 	bl	80047d0 <HAL_TIM_Base_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001014:	f000 f8b6 	bl	8001184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_TIM9_Init+0x6c>)
 8001024:	f003 fdf6 	bl	8004c14 <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800102e:	f000 f8a9 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000a3c 	.word	0x20000a3c
 8001040:	40014000 	.word	0x40014000

08001044 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_TIM10_Init+0x94>)
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <MX_TIM10_Init+0x98>)
 8001060:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_TIM10_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_TIM10_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_TIM10_Init+0x94>)
 8001070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001074:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001076:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM10_Init+0x94>)
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_TIM10_Init+0x94>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001084:	4814      	ldr	r0, [pc, #80]	; (80010d8 <MX_TIM10_Init+0x94>)
 8001086:	f003 fba3 	bl	80047d0 <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001090:	f000 f878 	bl	8001184 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <MX_TIM10_Init+0x94>)
 8001096:	f003 fbc6 	bl	8004826 <HAL_TIM_PWM_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 80010a0:	f000 f870 	bl	8001184 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a4:	2360      	movs	r3, #96	; 0x60
 80010a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <MX_TIM10_Init+0x94>)
 80010bc:	f003 fce4 	bl	8004a88 <HAL_TIM_PWM_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80010c6:	f000 f85d 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <MX_TIM10_Init+0x94>)
 80010cc:	f000 f9ac 	bl	8001428 <HAL_TIM_MspPostInit>

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000530 	.word	0x20000530
 80010dc:	40014400 	.word	0x40014400

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
 80010f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b20      	ldr	r3, [pc, #128]	; (800117c <MX_GPIO_Init+0x9c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <MX_GPIO_Init+0x9c>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_GPIO_Init+0x9c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_GPIO_Init+0x9c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a18      	ldr	r2, [pc, #96]	; (800117c <MX_GPIO_Init+0x9c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_GPIO_Init+0x9c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	603b      	str	r3, [r7, #0]
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_GPIO_Init+0x9c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <MX_GPIO_Init+0x9c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_GPIO_Init+0x9c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 714c 	mov.w	r1, #816	; 0x330
 8001150:	480b      	ldr	r0, [pc, #44]	; (8001180 <MX_GPIO_Init+0xa0>)
 8001152:	f000 fdc5 	bl	8001ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
 8001156:	f44f 734c 	mov.w	r3, #816	; 0x330
 800115a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	4619      	mov	r1, r3
 800116e:	4804      	ldr	r0, [pc, #16]	; (8001180 <MX_GPIO_Init+0xa0>)
 8001170:	f000 fc34 	bl	80019dc <HAL_GPIO_Init>

}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40023800 	.word	0x40023800
 8001180:	40020000 	.word	0x40020000

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118a:	e7fe      	b.n	800118a <Error_Handler+0x6>

0800118c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <HAL_MspInit+0x4c>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <HAL_MspInit+0x4c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a08      	ldr	r2, [pc, #32]	; (80011d8 <HAL_MspInit+0x4c>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_MspInit+0x4c>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_I2C_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12b      	bne.n	8001256 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800121a:	23c0      	movs	r3, #192	; 0xc0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121e:	2312      	movs	r3, #18
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001222:	2301      	movs	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800122a:	2304      	movs	r3, #4
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <HAL_I2C_MspInit+0x8c>)
 8001236:	f000 fbd1 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a08      	ldr	r2, [pc, #32]	; (8001264 <HAL_I2C_MspInit+0x88>)
 8001244:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_I2C_MspInit+0x88>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40005400 	.word	0x40005400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <HAL_TIM_Base_MspInit+0xb4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d10e      	bne.n	800129c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	4b28      	ldr	r3, [pc, #160]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a27      	ldr	r2, [pc, #156]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800129a:	e03a      	b.n	8001312 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a21      	ldr	r2, [pc, #132]	; (8001328 <HAL_TIM_Base_MspInit+0xbc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10e      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 0308 	and.w	r3, r3, #8
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
}
 80012c2:	e026      	b.n	8001312 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM9)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a18      	ldr	r2, [pc, #96]	; (800132c <HAL_TIM_Base_MspInit+0xc0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10e      	bne.n	80012ec <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b14      	ldr	r3, [pc, #80]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a13      	ldr	r2, [pc, #76]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 80012d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	e012      	b.n	8001312 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM10)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0f      	ldr	r2, [pc, #60]	; (8001330 <HAL_TIM_Base_MspInit+0xc4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d10d      	bne.n	8001312 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_TIM_Base_MspInit+0xb8>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40010000 	.word	0x40010000
 8001324:	40023800 	.word	0x40023800
 8001328:	40000c00 	.word	0x40000c00
 800132c:	40014000 	.word	0x40014000
 8001330:	40014400 	.word	0x40014400

08001334 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d12c      	bne.n	80013b0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a2f      	ldr	r2, [pc, #188]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b2d      	ldr	r3, [pc, #180]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b26      	ldr	r3, [pc, #152]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800138e:	2303      	movs	r3, #3
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800139e:	2301      	movs	r3, #1
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	481d      	ldr	r0, [pc, #116]	; (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 80013aa:	f000 fb17 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ae:	e030      	b.n	8001412 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1b      	ldr	r2, [pc, #108]	; (8001424 <HAL_TIM_Encoder_MspInit+0xf0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d12b      	bne.n	8001412 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	4a16      	ldr	r2, [pc, #88]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b0d      	ldr	r3, [pc, #52]	; (800141c <HAL_TIM_Encoder_MspInit+0xe8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013f2:	23c0      	movs	r3, #192	; 0xc0
 80013f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001402:	2302      	movs	r3, #2
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 031c 	add.w	r3, r7, #28
 800140a:	4619      	mov	r1, r3
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <HAL_TIM_Encoder_MspInit+0xec>)
 800140e:	f000 fae5 	bl	80019dc <HAL_GPIO_Init>
}
 8001412:	bf00      	nop
 8001414:	3730      	adds	r7, #48	; 0x30
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000
 8001424:	40000400 	.word	0x40000400

08001428 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08a      	sub	sp, #40	; 0x28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a37      	ldr	r2, [pc, #220]	; (8001524 <HAL_TIM_MspPostInit+0xfc>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d11f      	bne.n	800148a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b36      	ldr	r3, [pc, #216]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a35      	ldr	r2, [pc, #212]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800146a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001478:	2301      	movs	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	482a      	ldr	r0, [pc, #168]	; (800152c <HAL_TIM_MspPostInit+0x104>)
 8001484:	f000 faaa 	bl	80019dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001488:	e047      	b.n	800151a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM5)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a28      	ldr	r2, [pc, #160]	; (8001530 <HAL_TIM_MspPostInit+0x108>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d11e      	bne.n	80014d2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a22      	ldr	r2, [pc, #136]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014b0:	2308      	movs	r3, #8
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80014c0:	2302      	movs	r3, #2
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4818      	ldr	r0, [pc, #96]	; (800152c <HAL_TIM_MspPostInit+0x104>)
 80014cc:	f000 fa86 	bl	80019dc <HAL_GPIO_Init>
}
 80014d0:	e023      	b.n	800151a <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM10)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_TIM_MspPostInit+0x10c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d11e      	bne.n	800151a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a10      	ldr	r2, [pc, #64]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 80014e6:	f043 0302 	orr.w	r3, r3, #2
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b0e      	ldr	r3, [pc, #56]	; (8001528 <HAL_TIM_MspPostInit+0x100>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800150a:	2303      	movs	r3, #3
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4808      	ldr	r0, [pc, #32]	; (8001538 <HAL_TIM_MspPostInit+0x110>)
 8001516:	f000 fa61 	bl	80019dc <HAL_GPIO_Init>
}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	; 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40010000 	.word	0x40010000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000
 8001530:	40000c00 	.word	0x40000c00
 8001534:	40014400 	.word	0x40014400
 8001538:	40020400 	.word	0x40020400

0800153c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <NMI_Handler+0x4>

08001542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001546:	e7fe      	b.n	8001546 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	e7fe      	b.n	800154c <MemManage_Handler+0x4>

0800154e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <BusFault_Handler+0x4>

08001554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <UsageFault_Handler+0x4>

0800155a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001588:	f000 f8d4 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}

08001590 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <OTG_FS_IRQHandler+0x10>)
 8001596:	f001 fcc0 	bl	8002f1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000fdc 	.word	0x20000fdc

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	; (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	; (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	; (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	; (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	; (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f00c fc72 	bl	800debc <__errno>
 80015d8:	4602      	mov	r2, r0
 80015da:	230c      	movs	r3, #12
 80015dc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20020000 	.word	0x20020000
 8001604:	00000400 	.word	0x00000400
 8001608:	200004bc 	.word	0x200004bc
 800160c:	200013e8 	.word	0x200013e8

08001610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <SystemInit+0x28>)
 8001616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <SystemInit+0x28>)
 800161c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SystemInit+0x28>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	609a      	str	r2, [r3, #8]
#endif
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800163c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001674 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001640:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001642:	e003      	b.n	800164c <LoopCopyDataInit>

08001644 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001646:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001648:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800164a:	3104      	adds	r1, #4

0800164c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800164c:	480b      	ldr	r0, [pc, #44]	; (800167c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001650:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001652:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001654:	d3f6      	bcc.n	8001644 <CopyDataInit>
  ldr  r2, =_sbss
 8001656:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001658:	e002      	b.n	8001660 <LoopFillZerobss>

0800165a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800165a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800165c:	f842 3b04 	str.w	r3, [r2], #4

08001660 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001662:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001664:	d3f9      	bcc.n	800165a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001666:	f7ff ffd3 	bl	8001610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800166a:	f00c fc2d 	bl	800dec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166e:	f7ff f967 	bl	8000940 <main>
  bx  lr    
 8001672:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001674:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001678:	0800ed08 	.word	0x0800ed08
  ldr  r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001680:	200004a0 	.word	0x200004a0
  ldr  r2, =_sbss
 8001684:	200004a0 	.word	0x200004a0
  ldr  r3, = _ebss
 8001688:	200013e8 	.word	0x200013e8

0800168c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800168c:	e7fe      	b.n	800168c <ADC_IRQHandler>
	...

08001690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001694:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_Init+0x40>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_Init+0x40>)
 800169a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_Init+0x40>)
 80016a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_Init+0x40>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f000 f94d 	bl	8001958 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f808 	bl	80016d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c4:	f7ff fd62 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023c00 	.word	0x40023c00

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x54>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <HAL_InitTick+0x58>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f965 	bl	80019c2 <HAL_SYSTICK_Config>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e00e      	b.n	8001720 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b0f      	cmp	r3, #15
 8001706:	d80a      	bhi.n	800171e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001708:	2200      	movs	r2, #0
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001710:	f000 f92d 	bl	800196e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4a06      	ldr	r2, [pc, #24]	; (8001730 <HAL_InitTick+0x5c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	4618      	mov	r0, r3
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000000 	.word	0x20000000
 800172c:	20000008 	.word	0x20000008
 8001730:	20000004 	.word	0x20000004

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	; (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	20000ac0 	.word	0x20000ac0

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000ac0 	.word	0x20000ac0

08001774 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800177c:	f7ff ffee 	bl	800175c <HAL_GetTick>
 8001780:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800178c:	d005      	beq.n	800179a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_Delay+0x40>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179a:	bf00      	nop
 800179c:	f7ff ffde 	bl	800175c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d8f7      	bhi.n	800179c <HAL_Delay+0x28>
  {
  }
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000008 	.word	0x20000008

080017b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <__NVIC_SetPriorityGrouping+0x44>)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	60d3      	str	r3, [r2, #12]
}
 80017f0:	bf00      	nop
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001804:	4b04      	ldr	r3, [pc, #16]	; (8001818 <__NVIC_GetPriorityGrouping+0x18>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0307 	and.w	r3, r3, #7
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	2b00      	cmp	r3, #0
 800182c:	db0b      	blt.n	8001846 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	f003 021f 	and.w	r2, r3, #31
 8001834:	4907      	ldr	r1, [pc, #28]	; (8001854 <__NVIC_EnableIRQ+0x38>)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	095b      	lsrs	r3, r3, #5
 800183c:	2001      	movs	r0, #1
 800183e:	fa00 f202 	lsl.w	r2, r0, r2
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100

08001858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db0a      	blt.n	8001882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	b2da      	uxtb	r2, r3
 8001870:	490c      	ldr	r1, [pc, #48]	; (80018a4 <__NVIC_SetPriority+0x4c>)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	0112      	lsls	r2, r2, #4
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	440b      	add	r3, r1
 800187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001880:	e00a      	b.n	8001898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4908      	ldr	r1, [pc, #32]	; (80018a8 <__NVIC_SetPriority+0x50>)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	3b04      	subs	r3, #4
 8001890:	0112      	lsls	r2, r2, #4
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	440b      	add	r3, r1
 8001896:	761a      	strb	r2, [r3, #24]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000e100 	.word	0xe000e100
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f1c3 0307 	rsb	r3, r3, #7
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	bf28      	it	cs
 80018ca:	2304      	movcs	r3, #4
 80018cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	3304      	adds	r3, #4
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d902      	bls.n	80018dc <NVIC_EncodePriority+0x30>
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3b03      	subs	r3, #3
 80018da:	e000      	b.n	80018de <NVIC_EncodePriority+0x32>
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43da      	mvns	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	401a      	ands	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	43d9      	mvns	r1, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	4313      	orrs	r3, r2
         );
}
 8001906:	4618      	mov	r0, r3
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001924:	d301      	bcc.n	800192a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001926:	2301      	movs	r3, #1
 8001928:	e00f      	b.n	800194a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <SysTick_Config+0x40>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3b01      	subs	r3, #1
 8001930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001932:	210f      	movs	r1, #15
 8001934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001938:	f7ff ff8e 	bl	8001858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <SysTick_Config+0x40>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001942:	4b04      	ldr	r3, [pc, #16]	; (8001954 <SysTick_Config+0x40>)
 8001944:	2207      	movs	r2, #7
 8001946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	e000e010 	.word	0xe000e010

08001958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff ff29 	bl	80017b8 <__NVIC_SetPriorityGrouping>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800196e:	b580      	push	{r7, lr}
 8001970:	b086      	sub	sp, #24
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001980:	f7ff ff3e 	bl	8001800 <__NVIC_GetPriorityGrouping>
 8001984:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	68b9      	ldr	r1, [r7, #8]
 800198a:	6978      	ldr	r0, [r7, #20]
 800198c:	f7ff ff8e 	bl	80018ac <NVIC_EncodePriority>
 8001990:	4602      	mov	r2, r0
 8001992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001996:	4611      	mov	r1, r2
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff5d 	bl	8001858 <__NVIC_SetPriority>
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff31 	bl	800181c <__NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffa2 	bl	8001914 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b089      	sub	sp, #36	; 0x24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	61fb      	str	r3, [r7, #28]
 80019f6:	e159      	b.n	8001cac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f8:	2201      	movs	r2, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	f040 8148 	bne.w	8001ca6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d00b      	beq.n	8001a36 <HAL_GPIO_Init+0x5a>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a2a:	2b11      	cmp	r3, #17
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d130      	bne.n	8001a98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	2203      	movs	r2, #3
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43db      	mvns	r3, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 0201 	and.w	r2, r3, #1
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d003      	beq.n	8001ad8 <HAL_GPIO_Init+0xfc>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b12      	cmp	r3, #18
 8001ad6:	d123      	bne.n	8001b20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	220f      	movs	r2, #15
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	08da      	lsrs	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3208      	adds	r2, #8
 8001b1a:	69b9      	ldr	r1, [r7, #24]
 8001b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0203 	and.w	r2, r3, #3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 80a2 	beq.w	8001ca6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <HAL_GPIO_Init+0x2e4>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a55      	ldr	r2, [pc, #340]	; (8001cc0 <HAL_GPIO_Init+0x2e4>)
 8001b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_GPIO_Init+0x2e4>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7e:	4a51      	ldr	r2, [pc, #324]	; (8001cc4 <HAL_GPIO_Init+0x2e8>)
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	220f      	movs	r2, #15
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a48      	ldr	r2, [pc, #288]	; (8001cc8 <HAL_GPIO_Init+0x2ec>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d019      	beq.n	8001bde <HAL_GPIO_Init+0x202>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a47      	ldr	r2, [pc, #284]	; (8001ccc <HAL_GPIO_Init+0x2f0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0x1fe>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a46      	ldr	r2, [pc, #280]	; (8001cd0 <HAL_GPIO_Init+0x2f4>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_GPIO_Init+0x1fa>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a45      	ldr	r2, [pc, #276]	; (8001cd4 <HAL_GPIO_Init+0x2f8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d007      	beq.n	8001bd2 <HAL_GPIO_Init+0x1f6>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a44      	ldr	r2, [pc, #272]	; (8001cd8 <HAL_GPIO_Init+0x2fc>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_GPIO_Init+0x1f2>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e008      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bce:	2307      	movs	r3, #7
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e004      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e002      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x204>
 8001bde:	2300      	movs	r3, #0
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	f002 0203 	and.w	r2, r2, #3
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	4093      	lsls	r3, r2
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf0:	4934      	ldr	r1, [pc, #208]	; (8001cc4 <HAL_GPIO_Init+0x2e8>)
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	089b      	lsrs	r3, r3, #2
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfe:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c22:	4a2e      	ldr	r2, [pc, #184]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c28:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c4c:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c52:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c76:	4a19      	ldr	r2, [pc, #100]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	43db      	mvns	r3, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <HAL_GPIO_Init+0x300>)
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	f67f aea2 	bls.w	80019f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb4:	bf00      	nop
 8001cb6:	3724      	adds	r7, #36	; 0x24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40013c00 	.word	0x40013c00

08001ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
 8001cec:	4613      	mov	r3, r2
 8001cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cf0:	787b      	ldrb	r3, [r7, #1]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cfc:	e003      	b.n	8001d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cfe:	887b      	ldrh	r3, [r7, #2]
 8001d00:	041a      	lsls	r2, r3, #16
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
	...

08001d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e11f      	b.n	8001f66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fa4e 	bl	80011dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2224      	movs	r2, #36	; 0x24
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d78:	f002 fd16 	bl	80047a8 <HAL_RCC_GetPCLK1Freq>
 8001d7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a7b      	ldr	r2, [pc, #492]	; (8001f70 <HAL_I2C_Init+0x25c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d807      	bhi.n	8001d98 <HAL_I2C_Init+0x84>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a7a      	ldr	r2, [pc, #488]	; (8001f74 <HAL_I2C_Init+0x260>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	bf94      	ite	ls
 8001d90:	2301      	movls	r3, #1
 8001d92:	2300      	movhi	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	e006      	b.n	8001da6 <HAL_I2C_Init+0x92>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a77      	ldr	r2, [pc, #476]	; (8001f78 <HAL_I2C_Init+0x264>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	bf94      	ite	ls
 8001da0:	2301      	movls	r3, #1
 8001da2:	2300      	movhi	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0db      	b.n	8001f66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a72      	ldr	r2, [pc, #456]	; (8001f7c <HAL_I2C_Init+0x268>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	0c9b      	lsrs	r3, r3, #18
 8001db8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a64      	ldr	r2, [pc, #400]	; (8001f70 <HAL_I2C_Init+0x25c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d802      	bhi.n	8001de8 <HAL_I2C_Init+0xd4>
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	e009      	b.n	8001dfc <HAL_I2C_Init+0xe8>
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dee:	fb02 f303 	mul.w	r3, r2, r3
 8001df2:	4a63      	ldr	r2, [pc, #396]	; (8001f80 <HAL_I2C_Init+0x26c>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	430b      	orrs	r3, r1
 8001e02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	4956      	ldr	r1, [pc, #344]	; (8001f70 <HAL_I2C_Init+0x25c>)
 8001e18:	428b      	cmp	r3, r1
 8001e1a:	d80d      	bhi.n	8001e38 <HAL_I2C_Init+0x124>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1e59      	subs	r1, r3, #1
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	bf38      	it	cc
 8001e34:	2304      	movcc	r3, #4
 8001e36:	e04f      	b.n	8001ed8 <HAL_I2C_Init+0x1c4>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d111      	bne.n	8001e64 <HAL_I2C_Init+0x150>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	1e58      	subs	r0, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6859      	ldr	r1, [r3, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	440b      	add	r3, r1
 8001e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	bf0c      	ite	eq
 8001e5c:	2301      	moveq	r3, #1
 8001e5e:	2300      	movne	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e012      	b.n	8001e8a <HAL_I2C_Init+0x176>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	0099      	lsls	r1, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_I2C_Init+0x17e>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e022      	b.n	8001ed8 <HAL_I2C_Init+0x1c4>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10e      	bne.n	8001eb8 <HAL_I2C_Init+0x1a4>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e58      	subs	r0, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	440b      	add	r3, r1
 8001ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eac:	3301      	adds	r3, #1
 8001eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb6:	e00f      	b.n	8001ed8 <HAL_I2C_Init+0x1c4>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1e58      	subs	r0, r3, #1
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	0099      	lsls	r1, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ece:	3301      	adds	r3, #1
 8001ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	6809      	ldr	r1, [r1, #0]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6911      	ldr	r1, [r2, #16]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68d2      	ldr	r2, [r2, #12]
 8001f12:	4311      	orrs	r1, r2
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2220      	movs	r2, #32
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	000186a0 	.word	0x000186a0
 8001f74:	001e847f 	.word	0x001e847f
 8001f78:	003d08ff 	.word	0x003d08ff
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	10624dd3 	.word	0x10624dd3

08001f84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4603      	mov	r3, r0
 8001f94:	817b      	strh	r3, [r7, #10]
 8001f96:	460b      	mov	r3, r1
 8001f98:	813b      	strh	r3, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f9e:	f7ff fbdd 	bl	800175c <HAL_GetTick>
 8001fa2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b20      	cmp	r3, #32
 8001fae:	f040 80d9 	bne.w	8002164 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2319      	movs	r3, #25
 8001fb8:	2201      	movs	r2, #1
 8001fba:	496d      	ldr	r1, [pc, #436]	; (8002170 <HAL_I2C_Mem_Write+0x1ec>)
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fc7f 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0cc      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d101      	bne.n	8001fda <HAL_I2C_Mem_Write+0x56>
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	e0c5      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d007      	beq.n	8002000 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800200e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2221      	movs	r2, #33	; 0x21
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002030:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4a4d      	ldr	r2, [pc, #308]	; (8002174 <HAL_I2C_Mem_Write+0x1f0>)
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002042:	88f8      	ldrh	r0, [r7, #6]
 8002044:	893a      	ldrh	r2, [r7, #8]
 8002046:	8979      	ldrh	r1, [r7, #10]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4603      	mov	r3, r0
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 fab6 	bl	80025c4 <I2C_RequestMemoryWrite>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d052      	beq.n	8002104 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e081      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fd00 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d00d      	beq.n	800208e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b04      	cmp	r3, #4
 8002078:	d107      	bne.n	800208a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002088:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06b      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	781a      	ldrb	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	1c5a      	adds	r2, r3, #1
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	3b01      	subs	r3, #1
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d11b      	bne.n	8002104 <HAL_I2C_Mem_Write+0x180>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d017      	beq.n	8002104 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	3b01      	subs	r3, #1
 80020fe:	b29a      	uxth	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1aa      	bne.n	8002062 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f000 fcec 	bl	8002aee <I2C_WaitOnBTFFlagUntilTimeout>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	2b04      	cmp	r3, #4
 8002122:	d107      	bne.n	8002134 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002132:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e016      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	e000      	b.n	8002166 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002164:	2302      	movs	r3, #2
  }
}
 8002166:	4618      	mov	r0, r3
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	00100002 	.word	0x00100002
 8002174:	ffff0000 	.word	0xffff0000

08002178 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08c      	sub	sp, #48	; 0x30
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	4608      	mov	r0, r1
 8002182:	4611      	mov	r1, r2
 8002184:	461a      	mov	r2, r3
 8002186:	4603      	mov	r3, r0
 8002188:	817b      	strh	r3, [r7, #10]
 800218a:	460b      	mov	r3, r1
 800218c:	813b      	strh	r3, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002192:	f7ff fae3 	bl	800175c <HAL_GetTick>
 8002196:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	f040 8208 	bne.w	80025b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2319      	movs	r3, #25
 80021ac:	2201      	movs	r2, #1
 80021ae:	497b      	ldr	r1, [pc, #492]	; (800239c <HAL_I2C_Mem_Read+0x224>)
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fb85 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021bc:	2302      	movs	r3, #2
 80021be:	e1fb      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_I2C_Mem_Read+0x56>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e1f4      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d007      	beq.n	80021f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2222      	movs	r2, #34	; 0x22
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002224:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800222a:	b29a      	uxth	r2, r3
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a5b      	ldr	r2, [pc, #364]	; (80023a0 <HAL_I2C_Mem_Read+0x228>)
 8002234:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002236:	88f8      	ldrh	r0, [r7, #6]
 8002238:	893a      	ldrh	r2, [r7, #8]
 800223a:	8979      	ldrh	r1, [r7, #10]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	9301      	str	r3, [sp, #4]
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	9300      	str	r3, [sp, #0]
 8002244:	4603      	mov	r3, r0
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fa52 	bl	80026f0 <I2C_RequestMemoryRead>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1b0      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	d113      	bne.n	8002286 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225e:	2300      	movs	r3, #0
 8002260:	623b      	str	r3, [r7, #32]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e184      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	2b01      	cmp	r3, #1
 800228c:	d11b      	bne.n	80022c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	e164      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d11b      	bne.n	8002306 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	61bb      	str	r3, [r7, #24]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	e144      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	617b      	str	r3, [r7, #20]
 800231a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800231c:	e138      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	2b03      	cmp	r3, #3
 8002324:	f200 80f1 	bhi.w	800250a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	2b01      	cmp	r3, #1
 800232e:	d123      	bne.n	8002378 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002332:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fc1b 	bl	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e139      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002376:	e10b      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800237c:	2b02      	cmp	r3, #2
 800237e:	d14e      	bne.n	800241e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002386:	2200      	movs	r2, #0
 8002388:	4906      	ldr	r1, [pc, #24]	; (80023a4 <HAL_I2C_Mem_Read+0x22c>)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fa98 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d008      	beq.n	80023a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e10e      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
 800239a:	bf00      	nop
 800239c:	00100002 	.word	0x00100002
 80023a0:	ffff0000 	.word	0xffff0000
 80023a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	b2d2      	uxtb	r2, r2
 80023c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	3b01      	subs	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002406:	3b01      	subs	r3, #1
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800241c:	e0b8      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002424:	2200      	movs	r2, #0
 8002426:	4966      	ldr	r1, [pc, #408]	; (80025c0 <HAL_I2C_Mem_Read+0x448>)
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fa49 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e0bf      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002480:	2200      	movs	r2, #0
 8002482:	494f      	ldr	r1, [pc, #316]	; (80025c0 <HAL_I2C_Mem_Read+0x448>)
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fa1b 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e091      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c0:	3b01      	subs	r3, #1
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002508:	e042      	b.n	8002590 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fb2e 	bl	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d001      	beq.n	800251e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e04c      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b04      	cmp	r3, #4
 800255c:	d118      	bne.n	8002590 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691a      	ldr	r2, [r3, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800257a:	3b01      	subs	r3, #1
 800257c:	b29a      	uxth	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f aec2 	bne.w	800231e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e000      	b.n	80025b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80025b6:	2302      	movs	r3, #2
  }
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3728      	adds	r7, #40	; 0x28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	00010004 	.word	0x00010004

080025c4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	460b      	mov	r3, r1
 80025d8:	813b      	strh	r3, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f960 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002614:	d103      	bne.n	800261e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e05f      	b.n	80026e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002622:	897b      	ldrh	r3, [r7, #10]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002630:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	6a3a      	ldr	r2, [r7, #32]
 8002636:	492d      	ldr	r1, [pc, #180]	; (80026ec <I2C_RequestMemoryWrite+0x128>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 f998 	bl	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e04c      	b.n	80026e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	6a39      	ldr	r1, [r7, #32]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fa02 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	2b04      	cmp	r3, #4
 8002674:	d107      	bne.n	8002686 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002684:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e02b      	b.n	80026e2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800268a:	88fb      	ldrh	r3, [r7, #6]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002690:	893b      	ldrh	r3, [r7, #8]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	e021      	b.n	80026e0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800269c:	893b      	ldrh	r3, [r7, #8]
 800269e:	0a1b      	lsrs	r3, r3, #8
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	6a39      	ldr	r1, [r7, #32]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 f9dc 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d107      	bne.n	80026d2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e005      	b.n	80026e2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d6:	893b      	ldrh	r3, [r7, #8]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	00010002 	.word	0x00010002

080026f0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	4608      	mov	r0, r1
 80026fa:	4611      	mov	r1, r2
 80026fc:	461a      	mov	r2, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	817b      	strh	r3, [r7, #10]
 8002702:	460b      	mov	r3, r1
 8002704:	813b      	strh	r3, [r7, #8]
 8002706:	4613      	mov	r3, r2
 8002708:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002718:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002728:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	2200      	movs	r2, #0
 8002732:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f8c2 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00d      	beq.n	800275e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002750:	d103      	bne.n	800275a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e0aa      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800275e:	897b      	ldrh	r3, [r7, #10]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800276c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	6a3a      	ldr	r2, [r7, #32]
 8002772:	4952      	ldr	r1, [pc, #328]	; (80028bc <I2C_RequestMemoryRead+0x1cc>)
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f8fa 	bl	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e097      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f964 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d107      	bne.n	80027c2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e076      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027c6:	88fb      	ldrh	r3, [r7, #6]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027cc:	893b      	ldrh	r3, [r7, #8]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	e021      	b.n	800281c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027d8:	893b      	ldrh	r3, [r7, #8]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e8:	6a39      	ldr	r1, [r7, #32]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f93e 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00d      	beq.n	8002812 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d107      	bne.n	800280e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800280c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e050      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002812:	893b      	ldrh	r3, [r7, #8]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	6a39      	ldr	r1, [r7, #32]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f923 	bl	8002a6c <I2C_WaitOnTXEFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	2b04      	cmp	r3, #4
 8002832:	d107      	bne.n	8002844 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002842:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e035      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002856:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	2200      	movs	r2, #0
 8002860:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f82b 	bl	80028c0 <I2C_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287e:	d103      	bne.n	8002888 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002886:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e013      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800288c:	897b      	ldrh	r3, [r7, #10]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	6a3a      	ldr	r2, [r7, #32]
 80028a0:	4906      	ldr	r1, [pc, #24]	; (80028bc <I2C_RequestMemoryRead+0x1cc>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f863 	bl	800296e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	00010002 	.word	0x00010002

080028c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	603b      	str	r3, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028d0:	e025      	b.n	800291e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d8:	d021      	beq.n	800291e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028da:	f7fe ff3f 	bl	800175c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d302      	bcc.n	80028f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d116      	bne.n	800291e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	f043 0220 	orr.w	r2, r3, #32
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e023      	b.n	8002966 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d10d      	bne.n	8002944 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	43da      	mvns	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	bf0c      	ite	eq
 800293a:	2301      	moveq	r3, #1
 800293c:	2300      	movne	r3, #0
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	e00c      	b.n	800295e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	43da      	mvns	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	4013      	ands	r3, r2
 8002950:	b29b      	uxth	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf0c      	ite	eq
 8002956:	2301      	moveq	r3, #1
 8002958:	2300      	movne	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	429a      	cmp	r2, r3
 8002962:	d0b6      	beq.n	80028d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3710      	adds	r7, #16
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	60f8      	str	r0, [r7, #12]
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800297c:	e051      	b.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800298c:	d123      	bne.n	80029d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	f043 0204 	orr.w	r2, r3, #4
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e046      	b.n	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029dc:	d021      	beq.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7fe febd 	bl	800175c <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d116      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2220      	movs	r2, #32
 80029fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f043 0220 	orr.w	r2, r3, #32
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e020      	b.n	8002a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0c1b      	lsrs	r3, r3, #16
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d10c      	bne.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4013      	ands	r3, r2
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	bf14      	ite	ne
 8002a3e:	2301      	movne	r3, #1
 8002a40:	2300      	moveq	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	e00b      	b.n	8002a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	43da      	mvns	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bf14      	ite	ne
 8002a58:	2301      	movne	r3, #1
 8002a5a:	2300      	moveq	r3, #0
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d18d      	bne.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a78:	e02d      	b.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f8ce 	bl	8002c1c <I2C_IsAcknowledgeFailed>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e02d      	b.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a90:	d021      	beq.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe fe63 	bl	800175c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d116      	bne.n	8002ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e007      	b.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d1ca      	bne.n	8002a7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b084      	sub	sp, #16
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002afa:	e02d      	b.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	f000 f88d 	bl	8002c1c <I2C_IsAcknowledgeFailed>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e02d      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b12:	d021      	beq.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b14:	f7fe fe22 	bl	800175c <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d302      	bcc.n	8002b2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d116      	bne.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e007      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d1ca      	bne.n	8002afc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b7c:	e042      	b.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d119      	bne.n	8002bc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f06f 0210 	mvn.w	r2, #16
 8002b94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e029      	b.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc0:	f7fe fdcc 	bl	800175c <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d302      	bcc.n	8002bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d116      	bne.n	8002c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2220      	movs	r2, #32
 8002be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f043 0220 	orr.w	r2, r3, #32
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e007      	b.n	8002c14 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d1b5      	bne.n	8002b7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d11b      	bne.n	8002c6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7c:	b08f      	sub	sp, #60	; 0x3c
 8002c7e:	af0a      	add	r7, sp, #40	; 0x28
 8002c80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e10f      	b.n	8002eac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f005 fde0 	bl	800886c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2203      	movs	r2, #3
 8002cb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fcfb 	bl	80056c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	687e      	ldr	r6, [r7, #4]
 8002cd8:	466d      	mov	r5, sp
 8002cda:	f106 0410 	add.w	r4, r6, #16
 8002cde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ce6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cea:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cee:	1d33      	adds	r3, r6, #4
 8002cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf2:	6838      	ldr	r0, [r7, #0]
 8002cf4:	f002 fbd2 	bl	800549c <USB_CoreInit>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0d0      	b.n	8002eac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f002 fce9 	bl	80056e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e04a      	b.n	8002db2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	333d      	adds	r3, #61	; 0x3d
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	333c      	adds	r3, #60	; 0x3c
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	b298      	uxth	r0, r3
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3342      	adds	r3, #66	; 0x42
 8002d58:	4602      	mov	r2, r0
 8002d5a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d5c:	7bfa      	ldrb	r2, [r7, #15]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	333f      	adds	r3, #63	; 0x3f
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d70:	7bfa      	ldrb	r2, [r7, #15]
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3344      	adds	r3, #68	; 0x44
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d84:	7bfa      	ldrb	r2, [r7, #15]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	3348      	adds	r3, #72	; 0x48
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3350      	adds	r3, #80	; 0x50
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	3301      	adds	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d3af      	bcc.n	8002d1c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e044      	b.n	8002e4c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dd8:	7bfa      	ldrb	r2, [r7, #15]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002dea:	7bfa      	ldrb	r2, [r7, #15]
 8002dec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e04:	7bfa      	ldrb	r2, [r7, #15]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e1a:	7bfa      	ldrb	r2, [r7, #15]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d3b5      	bcc.n	8002dc2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	687e      	ldr	r6, [r7, #4]
 8002e5e:	466d      	mov	r5, sp
 8002e60:	f106 0410 	add.w	r4, r6, #16
 8002e64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e6c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e70:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e74:	1d33      	adds	r3, r6, #4
 8002e76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e78:	6838      	ldr	r0, [r7, #0]
 8002e7a:	f002 fc5f 	bl	800573c <USB_DevInit>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e00d      	b.n	8002eac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f003 fca7 	bl	80067f8 <USB_DevDisconnect>

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3714      	adds	r7, #20
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_PCD_Start+0x1c>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e020      	b.n	8002f12 <HAL_PCD_Start+0x5e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d109      	bne.n	8002ef4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d005      	beq.n	8002ef4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f002 fbd3 	bl	80056a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fc57 	bl	80067b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f1a:	b590      	push	{r4, r7, lr}
 8002f1c:	b08d      	sub	sp, #52	; 0x34
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fd15 	bl	8006960 <USB_GetMode>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f040 839d 	bne.w	8003678 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fc79 	bl	800683a <USB_ReadInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 8393 	beq.w	8003676 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fc70 	bl	800683a <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d107      	bne.n	8002f74 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f002 0202 	and.w	r2, r2, #2
 8002f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 fc5e 	bl	800683a <USB_ReadInterrupts>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b10      	cmp	r3, #16
 8002f86:	d161      	bne.n	800304c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0210 	bic.w	r2, r2, #16
 8002f96:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	0c5b      	lsrs	r3, r3, #17
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d124      	bne.n	800300e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d035      	beq.n	800303c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	6a38      	ldr	r0, [r7, #32]
 8002fe4:	f003 fac4 	bl	8006570 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	091b      	lsrs	r3, r3, #4
 8002ff0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ff4:	441a      	add	r2, r3
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	091b      	lsrs	r3, r3, #4
 8003002:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003006:	441a      	add	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	619a      	str	r2, [r3, #24]
 800300c:	e016      	b.n	800303c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	0c5b      	lsrs	r3, r3, #17
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	2b06      	cmp	r3, #6
 8003018:	d110      	bne.n	800303c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003020:	2208      	movs	r2, #8
 8003022:	4619      	mov	r1, r3
 8003024:	6a38      	ldr	r0, [r7, #32]
 8003026:	f003 faa3 	bl	8006570 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	091b      	lsrs	r3, r3, #4
 8003032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003036:	441a      	add	r2, r3
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0210 	orr.w	r2, r2, #16
 800304a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f003 fbf2 	bl	800683a <USB_ReadInterrupts>
 8003056:	4603      	mov	r3, r0
 8003058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003060:	d16e      	bne.n	8003140 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003062:	2300      	movs	r3, #0
 8003064:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f003 fbf8 	bl	8006860 <USB_ReadDevAllOutEpInterrupt>
 8003070:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003072:	e062      	b.n	800313a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	d057      	beq.n	800312e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fc1d 	bl	80068c8 <USB_ReadDevOutEPInterrupt>
 800308e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00c      	beq.n	80030b4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a6:	461a      	mov	r2, r3
 80030a8:	2301      	movs	r3, #1
 80030aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fdb0 	bl	8003c14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00c      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ca:	461a      	mov	r2, r3
 80030cc:	2308      	movs	r3, #8
 80030ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 feaa 	bl	8003e2c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ee:	461a      	mov	r2, r3
 80030f0:	2310      	movs	r3, #16
 80030f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0320 	and.w	r3, r3, #32
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d008      	beq.n	8003110 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	4413      	add	r3, r2
 8003106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310a:	461a      	mov	r2, r3
 800310c:	2320      	movs	r3, #32
 800310e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d009      	beq.n	800312e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003126:	461a      	mov	r2, r3
 8003128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800312c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	3301      	adds	r3, #1
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800313a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313c:	2b00      	cmp	r3, #0
 800313e:	d199      	bne.n	8003074 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f003 fb78 	bl	800683a <USB_ReadInterrupts>
 800314a:	4603      	mov	r3, r0
 800314c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003150:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003154:	f040 80c0 	bne.w	80032d8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f003 fb99 	bl	8006894 <USB_ReadDevAllInEpInterrupt>
 8003162:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003168:	e0b2      	b.n	80032d0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80a7 	beq.w	80032c4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f003 fbbf 	bl	8006904 <USB_ReadDevInEPInterrupt>
 8003186:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f003 0301 	and.w	r3, r3, #1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d057      	beq.n	8003242 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	2201      	movs	r2, #1
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69f9      	ldr	r1, [r7, #28]
 80031ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031b2:	4013      	ands	r3, r2
 80031b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c2:	461a      	mov	r2, r3
 80031c4:	2301      	movs	r3, #1
 80031c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d132      	bne.n	8003236 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3348      	adds	r3, #72	; 0x48
 80031e0:	6819      	ldr	r1, [r3, #0]
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4403      	add	r3, r0
 80031f0:	3344      	adds	r3, #68	; 0x44
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4419      	add	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4403      	add	r3, r0
 8003204:	3348      	adds	r3, #72	; 0x48
 8003206:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d113      	bne.n	8003236 <HAL_PCD_IRQHandler+0x31c>
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3350      	adds	r3, #80	; 0x50
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d108      	bne.n	8003236 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6818      	ldr	r0, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800322e:	461a      	mov	r2, r3
 8003230:	2101      	movs	r1, #1
 8003232:	f003 fbc7 	bl	80069c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	b2db      	uxtb	r3, r3
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f005 fb96 	bl	800896e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	015a      	lsls	r2, r3, #5
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	4413      	add	r3, r2
 8003254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003258:	461a      	mov	r2, r3
 800325a:	2308      	movs	r3, #8
 800325c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003274:	461a      	mov	r2, r3
 8003276:	2310      	movs	r3, #16
 8003278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003290:	461a      	mov	r2, r3
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ac:	461a      	mov	r2, r3
 80032ae:	2302      	movs	r3, #2
 80032b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80032bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fc1b 	bl	8003afa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	3301      	adds	r3, #1
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f47f af49 	bne.w	800316a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f003 faac 	bl	800683a <USB_ReadInterrupts>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032ec:	d122      	bne.n	8003334 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fc:	f023 0301 	bic.w	r3, r3, #1
 8003300:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003308:	2b01      	cmp	r3, #1
 800330a:	d108      	bne.n	800331e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003314:	2100      	movs	r1, #0
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 fe26 	bl	8003f68 <HAL_PCDEx_LPM_Callback>
 800331c:	e002      	b.n	8003324 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f005 fb92 	bl	8008a48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003332:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fa7e 	bl	800683a <USB_ReadInterrupts>
 800333e:	4603      	mov	r3, r0
 8003340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	d112      	bne.n	8003370 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d102      	bne.n	8003360 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f005 fb4e 	bl	80089fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800336e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fa60 	bl	800683a <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003384:	f040 80c7 	bne.w	8003516 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003396:	f023 0301 	bic.w	r3, r3, #1
 800339a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2110      	movs	r1, #16
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 fb2e 	bl	8005a04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ac:	e056      	b.n	800345c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ba:	461a      	mov	r2, r3
 80033bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033d2:	0151      	lsls	r1, r2, #5
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	440a      	add	r2, r1
 80033d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033e0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033f2:	0151      	lsls	r1, r2, #5
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	440a      	add	r2, r1
 80033f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003400:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340e:	461a      	mov	r2, r3
 8003410:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003414:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003426:	0151      	lsls	r1, r2, #5
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	440a      	add	r2, r1
 800342c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003430:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003434:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003446:	0151      	lsls	r1, r2, #5
 8003448:	69fa      	ldr	r2, [r7, #28]
 800344a:	440a      	add	r2, r1
 800344c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003450:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003454:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	3301      	adds	r3, #1
 800345a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003462:	429a      	cmp	r2, r3
 8003464:	d3a3      	bcc.n	80033ae <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003474:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003478:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	2b00      	cmp	r3, #0
 8003480:	d016      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003492:	f043 030b 	orr.w	r3, r3, #11
 8003496:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a8:	f043 030b 	orr.w	r3, r3, #11
 80034ac:	6453      	str	r3, [r2, #68]	; 0x44
 80034ae:	e015      	b.n	80034dc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034c2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80034c6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034d6:	f043 030b 	orr.w	r3, r3, #11
 80034da:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034ee:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003500:	461a      	mov	r2, r3
 8003502:	f003 fa5f 	bl	80069c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f003 f98d 	bl	800683a <USB_ReadInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352a:	d124      	bne.n	8003576 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f003 fa23 	bl	800697c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f002 fac3 	bl	8005ac6 <USB_GetDevSpeed>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681c      	ldr	r4, [r3, #0]
 800354c:	f001 f920 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 8003550:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003556:	b2db      	uxtb	r3, r3
 8003558:	461a      	mov	r2, r3
 800355a:	4620      	mov	r0, r4
 800355c:	f002 f800 	bl	8005560 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f005 fa2c 	bl	80089be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695a      	ldr	r2, [r3, #20]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003574:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f003 f95d 	bl	800683a <USB_ReadInterrupts>
 8003580:	4603      	mov	r3, r0
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b08      	cmp	r3, #8
 8003588:	d10a      	bne.n	80035a0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f005 fa09 	bl	80089a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f002 0208 	and.w	r2, r2, #8
 800359e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f003 f948 	bl	800683a <USB_ReadInterrupts>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b4:	d10f      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	4619      	mov	r1, r3
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f005 fa61 	bl	8008a88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80035d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 f92d 	bl	800683a <USB_ReadInterrupts>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ea:	d10f      	bne.n	800360c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f005 fa34 	bl	8008a64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800360a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f003 f912 	bl	800683a <USB_ReadInterrupts>
 8003616:	4603      	mov	r3, r0
 8003618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003620:	d10a      	bne.n	8003638 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f005 fa42 	bl	8008aac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003636:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f003 f8fc 	bl	800683a <USB_ReadInterrupts>
 8003642:	4603      	mov	r3, r0
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b04      	cmp	r3, #4
 800364a:	d115      	bne.n	8003678 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f005 fa32 	bl	8008ac8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	e000      	b.n	8003678 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003676:	bf00      	nop
    }
  }
}
 8003678:	3734      	adds	r7, #52	; 0x34
 800367a:	46bd      	mov	sp, r7
 800367c:	bd90      	pop	{r4, r7, pc}

0800367e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_PCD_SetAddress+0x1a>
 8003694:	2302      	movs	r3, #2
 8003696:	e013      	b.n	80036c0 <HAL_PCD_SetAddress+0x42>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	4611      	mov	r1, r2
 80036b0:	4618      	mov	r0, r3
 80036b2:	f003 f85a 	bl	800676a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	70fb      	strb	r3, [r7, #3]
 80036da:	460b      	mov	r3, r1
 80036dc:	803b      	strh	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	da0f      	bge.n	800370e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	f003 020f 	and.w	r2, r3, #15
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	3338      	adds	r3, #56	; 0x38
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4413      	add	r3, r2
 8003702:	3304      	adds	r3, #4
 8003704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	705a      	strb	r2, [r3, #1]
 800370c:	e00f      	b.n	800372e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	3304      	adds	r3, #4
 8003726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	b2da      	uxtb	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800373a:	883a      	ldrh	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	78ba      	ldrb	r2, [r7, #2]
 8003744:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	785b      	ldrb	r3, [r3, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d004      	beq.n	8003758 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003758:	78bb      	ldrb	r3, [r7, #2]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d102      	bne.n	8003764 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_PCD_EP_Open+0xaa>
 800376e:	2302      	movs	r3, #2
 8003770:	e00e      	b.n	8003790 <HAL_PCD_EP_Open+0xc8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	4618      	mov	r0, r3
 8003782:	f002 f9c5 	bl	8005b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800378e:	7afb      	ldrb	r3, [r7, #11]
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	da0f      	bge.n	80037cc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	f003 020f 	and.w	r2, r3, #15
 80037b2:	4613      	mov	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	3338      	adds	r3, #56	; 0x38
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	4413      	add	r3, r2
 80037c0:	3304      	adds	r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	705a      	strb	r2, [r3, #1]
 80037ca:	e00f      	b.n	80037ec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_PCD_EP_Close+0x6e>
 8003802:	2302      	movs	r3, #2
 8003804:	e00e      	b.n	8003824 <HAL_PCD_EP_Close+0x8c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68f9      	ldr	r1, [r7, #12]
 8003814:	4618      	mov	r0, r3
 8003816:	f002 fa03 	bl	8005c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	460b      	mov	r3, r1
 800383a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800383c:	7afb      	ldrb	r3, [r7, #11]
 800383e:	f003 020f 	and.w	r2, r3, #15
 8003842:	4613      	mov	r3, r2
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	4413      	add	r3, r2
 8003852:	3304      	adds	r3, #4
 8003854:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2200      	movs	r2, #0
 800386c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386e:	7afb      	ldrb	r3, [r7, #11]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	b2da      	uxtb	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	691b      	ldr	r3, [r3, #16]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d102      	bne.n	8003888 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003888:	7afb      	ldrb	r3, [r7, #11]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	6979      	ldr	r1, [r7, #20]
 80038a0:	f002 fcde 	bl	8006260 <USB_EP0StartXfer>
 80038a4:	e008      	b.n	80038b8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	6979      	ldr	r1, [r7, #20]
 80038b4:	f002 fa90 	bl	8005dd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	460b      	mov	r3, r1
 80038cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038ce:	78fb      	ldrb	r3, [r7, #3]
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80038e4:	681b      	ldr	r3, [r3, #0]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	460b      	mov	r3, r1
 8003900:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003902:	7afb      	ldrb	r3, [r7, #11]
 8003904:	f003 020f 	and.w	r2, r3, #15
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	3338      	adds	r3, #56	; 0x38
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4413      	add	r3, r2
 8003916:	3304      	adds	r3, #4
 8003918:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2201      	movs	r2, #1
 8003930:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003932:	7afb      	ldrb	r3, [r7, #11]
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	b2da      	uxtb	r2, r3
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d102      	bne.n	800394c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800394c:	7afb      	ldrb	r3, [r7, #11]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	6979      	ldr	r1, [r7, #20]
 8003964:	f002 fc7c 	bl	8006260 <USB_EP0StartXfer>
 8003968:	e008      	b.n	800397c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6818      	ldr	r0, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	6979      	ldr	r1, [r7, #20]
 8003978:	f002 fa2e 	bl	8005dd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	460b      	mov	r3, r1
 8003990:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	429a      	cmp	r2, r3
 800399e:	d901      	bls.n	80039a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e050      	b.n	8003a46 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da0f      	bge.n	80039cc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	f003 020f 	and.w	r2, r3, #15
 80039b2:	4613      	mov	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	3338      	adds	r3, #56	; 0x38
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	3304      	adds	r3, #4
 80039c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	705a      	strb	r2, [r3, #1]
 80039ca:	e00d      	b.n	80039e8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4413      	add	r3, r2
 80039de:	3304      	adds	r3, #4
 80039e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_PCD_EP_SetStall+0x82>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e01e      	b.n	8003a46 <HAL_PCD_EP_SetStall+0xc0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68f9      	ldr	r1, [r7, #12]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f002 fdd3 	bl	80065c2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	b2d9      	uxtb	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a36:	461a      	mov	r2, r3
 8003a38:	f002 ffc4 	bl	80069c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b084      	sub	sp, #16
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
 8003a56:	460b      	mov	r3, r1
 8003a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d901      	bls.n	8003a6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e042      	b.n	8003af2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	da0f      	bge.n	8003a94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	f003 020f 	and.w	r2, r3, #15
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	3338      	adds	r3, #56	; 0x38
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	4413      	add	r3, r2
 8003a88:	3304      	adds	r3, #4
 8003a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	705a      	strb	r2, [r3, #1]
 8003a92:	e00f      	b.n	8003ab4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	f003 020f 	and.w	r2, r3, #15
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	3304      	adds	r3, #4
 8003aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	b2da      	uxtb	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_PCD_EP_ClrStall+0x86>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e00e      	b.n	8003af2 <HAL_PCD_EP_ClrStall+0xa4>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68f9      	ldr	r1, [r7, #12]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f002 fddb 	bl	800669e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b08a      	sub	sp, #40	; 0x28
 8003afe:	af02      	add	r7, sp, #8
 8003b00:	6078      	str	r0, [r7, #4]
 8003b02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	3338      	adds	r3, #56	; 0x38
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3304      	adds	r3, #4
 8003b20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d901      	bls.n	8003b32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e06c      	b.n	8003c0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	695a      	ldr	r2, [r3, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d902      	bls.n	8003b4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3303      	adds	r3, #3
 8003b52:	089b      	lsrs	r3, r3, #2
 8003b54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b56:	e02b      	b.n	8003bb0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d902      	bls.n	8003b74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	3303      	adds	r3, #3
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	68d9      	ldr	r1, [r3, #12]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	b2da      	uxtb	r2, r3
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	4603      	mov	r3, r0
 8003b92:	6978      	ldr	r0, [r7, #20]
 8003b94:	f002 fcb7 	bl	8006506 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	68da      	ldr	r2, [r3, #12]
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	441a      	add	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d809      	bhi.n	8003bda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d203      	bcs.n	8003bda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1be      	bne.n	8003b58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	695a      	ldr	r2, [r3, #20]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d811      	bhi.n	8003c0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	2201      	movs	r2, #1
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	43db      	mvns	r3, r3
 8003c00:	6939      	ldr	r1, [r7, #16]
 8003c02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c06:	4013      	ands	r3, r2
 8003c08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	333c      	adds	r3, #60	; 0x3c
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	f040 80a0 	bne.w	8003d8c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d015      	beq.n	8003c82 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a72      	ldr	r2, [pc, #456]	; (8003e24 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	f240 80dd 	bls.w	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 80d7 	beq.w	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7e:	6093      	str	r3, [r2, #8]
 8003c80:	e0cb      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	461a      	mov	r2, r3
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	6093      	str	r3, [r2, #8]
 8003c9e:	e0bc      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 80b7 	bne.w	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a5d      	ldr	r2, [pc, #372]	; (8003e24 <PCD_EP_OutXfrComplete_int+0x210>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d90f      	bls.n	8003cd4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00a      	beq.n	8003cd4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	015a      	lsls	r2, r3, #5
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cca:	461a      	mov	r2, r3
 8003ccc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd0:	6093      	str	r3, [r2, #8]
 8003cd2:	e0a2      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ce6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	0159      	lsls	r1, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	440b      	add	r3, r1
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003cfa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4403      	add	r3, r0
 8003d0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d0e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	1a9b      	subs	r3, r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d22:	6819      	ldr	r1, [r3, #0]
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4403      	add	r3, r0
 8003d32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4419      	add	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4403      	add	r3, r0
 8003d48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d4c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d114      	bne.n	8003d7e <PCD_EP_OutXfrComplete_int+0x16a>
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d108      	bne.n	8003d7e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d76:	461a      	mov	r2, r3
 8003d78:	2101      	movs	r1, #1
 8003d7a:	f002 fe23 	bl	80069c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f004 fdd7 	bl	8008938 <HAL_PCD_DataOutStageCallback>
 8003d8a:	e046      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4a26      	ldr	r2, [pc, #152]	; (8003e28 <PCD_EP_OutXfrComplete_int+0x214>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d124      	bne.n	8003dde <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db0:	6093      	str	r3, [r2, #8]
 8003db2:	e032      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d008      	beq.n	8003dd0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	461a      	mov	r2, r3
 8003dcc:	2320      	movs	r3, #32
 8003dce:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f004 fdae 	bl	8008938 <HAL_PCD_DataOutStageCallback>
 8003ddc:	e01d      	b.n	8003e1a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d114      	bne.n	8003e0e <PCD_EP_OutXfrComplete_int+0x1fa>
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d108      	bne.n	8003e0e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6818      	ldr	r0, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e06:	461a      	mov	r2, r3
 8003e08:	2100      	movs	r1, #0
 8003e0a:	f002 fddb 	bl	80069c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f004 fd8f 	bl	8008938 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	4f54300a 	.word	0x4f54300a
 8003e28:	4f54310a 	.word	0x4f54310a

08003e2c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	333c      	adds	r3, #60	; 0x3c
 8003e44:	3304      	adds	r3, #4
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d90e      	bls.n	8003e80 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d009      	beq.n	8003e80 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e7e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f004 fd47 	bl	8008914 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d90c      	bls.n	8003ea8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d108      	bne.n	8003ea8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	f002 fd8e 	bl	80069c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	4f54300a 	.word	0x4f54300a

08003eb8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ed6:	883b      	ldrh	r3, [r7, #0]
 8003ed8:	0419      	lsls	r1, r3, #16
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee4:	e028      	b.n	8003f38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e00d      	b.n	8003f16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	7bfb      	ldrb	r3, [r7, #15]
 8003f00:	3340      	adds	r3, #64	; 0x40
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	0c1b      	lsrs	r3, r3, #16
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f10:	7bfb      	ldrb	r3, [r7, #15]
 8003f12:	3301      	adds	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3ec      	bcc.n	8003efa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f20:	883b      	ldrh	r3, [r7, #0]
 8003f22:	0418      	lsls	r0, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	4302      	orrs	r2, r0
 8003f30:	3340      	adds	r3, #64	; 0x40
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr

08003f46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b083      	sub	sp, #12
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e25b      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d075      	beq.n	800408a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9e:	4ba3      	ldr	r3, [pc, #652]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4ba0      	ldr	r3, [pc, #640]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d112      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb6:	4b9d      	ldr	r3, [pc, #628]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b99      	ldr	r3, [pc, #612]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <HAL_RCC_OscConfig+0x108>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d157      	bne.n	8004088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e236      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x74>
 8003fe6:	4b91      	ldr	r3, [pc, #580]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a90      	ldr	r2, [pc, #576]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x98>
 8003ffe:	4b8b      	ldr	r3, [pc, #556]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a8a      	ldr	r2, [pc, #552]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a87      	ldr	r2, [pc, #540]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8004018:	4b84      	ldr	r3, [pc, #528]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a83      	ldr	r2, [pc, #524]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b81      	ldr	r3, [pc, #516]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a80      	ldr	r2, [pc, #512]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fd fb90 	bl	800175c <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7fd fb8c 	bl	800175c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e1fb      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xc0>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fd fb7c 	bl	800175c <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004068:	f7fd fb78 	bl	800175c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1e7      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b6c      	ldr	r3, [pc, #432]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0xe8>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d063      	beq.n	800415e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004096:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b62      	ldr	r3, [pc, #392]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b5f      	ldr	r3, [pc, #380]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b5c      	ldr	r3, [pc, #368]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1bb      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b56      	ldr	r3, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4952      	ldr	r1, [pc, #328]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e03a      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b4f      	ldr	r3, [pc, #316]	; (8004230 <HAL_RCC_OscConfig+0x2b0>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fd fb31 	bl	800175c <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fd fb2d 	bl	800175c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e19c      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	4b46      	ldr	r3, [pc, #280]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4940      	ldr	r1, [pc, #256]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004132:	4b3f      	ldr	r3, [pc, #252]	; (8004230 <HAL_RCC_OscConfig+0x2b0>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fd fb10 	bl	800175c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004140:	f7fd fb0c 	bl	800175c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e17b      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d030      	beq.n	80041cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_RCC_OscConfig+0x2b4>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd faf0 	bl	800175c <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004180:	f7fd faec 	bl	800175c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e15b      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	4b26      	ldr	r3, [pc, #152]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x200>
 800419e:	e015      	b.n	80041cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a0:	4b24      	ldr	r3, [pc, #144]	; (8004234 <HAL_RCC_OscConfig+0x2b4>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a6:	f7fd fad9 	bl	800175c <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fd fad5 	bl	800175c <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e144      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 80a0 	beq.w	800431a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a0e      	ldr	r2, [pc, #56]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x2b8>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d121      	bne.n	800425a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <HAL_RCC_OscConfig+0x2b8>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a07      	ldr	r2, [pc, #28]	; (8004238 <HAL_RCC_OscConfig+0x2b8>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004222:	f7fd fa9b 	bl	800175c <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	e011      	b.n	800424e <HAL_RCC_OscConfig+0x2ce>
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800
 8004230:	42470000 	.word	0x42470000
 8004234:	42470e80 	.word	0x42470e80
 8004238:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800423c:	f7fd fa8e 	bl	800175c <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e0fd      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	4b81      	ldr	r3, [pc, #516]	; (8004454 <HAL_RCC_OscConfig+0x4d4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x2f0>
 8004262:	4b7d      	ldr	r3, [pc, #500]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	4a7c      	ldr	r2, [pc, #496]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004268:	f043 0301 	orr.w	r3, r3, #1
 800426c:	6713      	str	r3, [r2, #112]	; 0x70
 800426e:	e01c      	b.n	80042aa <HAL_RCC_OscConfig+0x32a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b05      	cmp	r3, #5
 8004276:	d10c      	bne.n	8004292 <HAL_RCC_OscConfig+0x312>
 8004278:	4b77      	ldr	r3, [pc, #476]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	4a76      	ldr	r2, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	6713      	str	r3, [r2, #112]	; 0x70
 8004284:	4b74      	ldr	r3, [pc, #464]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a73      	ldr	r2, [pc, #460]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800428a:	f043 0301 	orr.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
 8004290:	e00b      	b.n	80042aa <HAL_RCC_OscConfig+0x32a>
 8004292:	4b71      	ldr	r3, [pc, #452]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a70      	ldr	r2, [pc, #448]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
 800429e:	4b6e      	ldr	r3, [pc, #440]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4a6d      	ldr	r2, [pc, #436]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80042a4:	f023 0304 	bic.w	r3, r3, #4
 80042a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d015      	beq.n	80042de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b2:	f7fd fa53 	bl	800175c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b8:	e00a      	b.n	80042d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7fd fa4f 	bl	800175c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e0bc      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d0:	4b61      	ldr	r3, [pc, #388]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0ee      	beq.n	80042ba <HAL_RCC_OscConfig+0x33a>
 80042dc:	e014      	b.n	8004308 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042de:	f7fd fa3d 	bl	800175c <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e4:	e00a      	b.n	80042fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd fa39 	bl	800175c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d901      	bls.n	80042fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e0a6      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fc:	4b56      	ldr	r3, [pc, #344]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ee      	bne.n	80042e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004308:	7dfb      	ldrb	r3, [r7, #23]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d105      	bne.n	800431a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430e:	4b52      	ldr	r3, [pc, #328]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	4a51      	ldr	r2, [pc, #324]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004318:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8092 	beq.w	8004448 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004324:	4b4c      	ldr	r3, [pc, #304]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b08      	cmp	r3, #8
 800432e:	d05c      	beq.n	80043ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d141      	bne.n	80043bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004338:	4b48      	ldr	r3, [pc, #288]	; (800445c <HAL_RCC_OscConfig+0x4dc>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fd fa0d 	bl	800175c <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd fa09 	bl	800175c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e078      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004358:	4b3f      	ldr	r3, [pc, #252]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	019b      	lsls	r3, r3, #6
 8004374:	431a      	orrs	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800437a:	085b      	lsrs	r3, r3, #1
 800437c:	3b01      	subs	r3, #1
 800437e:	041b      	lsls	r3, r3, #16
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	4933      	ldr	r1, [pc, #204]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800438e:	4b33      	ldr	r3, [pc, #204]	; (800445c <HAL_RCC_OscConfig+0x4dc>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fd f9e2 	bl	800175c <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439c:	f7fd f9de 	bl	800175c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04d      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b2a      	ldr	r3, [pc, #168]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x41c>
 80043ba:	e045      	b.n	8004448 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043bc:	4b27      	ldr	r3, [pc, #156]	; (800445c <HAL_RCC_OscConfig+0x4dc>)
 80043be:	2200      	movs	r2, #0
 80043c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c2:	f7fd f9cb 	bl	800175c <HAL_GetTick>
 80043c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c8:	e008      	b.n	80043dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ca:	f7fd f9c7 	bl	800175c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e036      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043dc:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f0      	bne.n	80043ca <HAL_RCC_OscConfig+0x44a>
 80043e8:	e02e      	b.n	8004448 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e029      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f6:	4b18      	ldr	r3, [pc, #96]	; (8004458 <HAL_RCC_OscConfig+0x4d8>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	429a      	cmp	r2, r3
 8004408:	d11c      	bne.n	8004444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d115      	bne.n	8004444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800441e:	4013      	ands	r3, r2
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004424:	4293      	cmp	r3, r2
 8004426:	d10d      	bne.n	8004444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d106      	bne.n	8004444 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	40007000 	.word	0x40007000
 8004458:	40023800 	.word	0x40023800
 800445c:	42470060 	.word	0x42470060

08004460 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0cc      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004474:	4b68      	ldr	r3, [pc, #416]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d90c      	bls.n	800449c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b65      	ldr	r3, [pc, #404]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b63      	ldr	r3, [pc, #396]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0b8      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d020      	beq.n	80044ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0304 	and.w	r3, r3, #4
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b4:	4b59      	ldr	r3, [pc, #356]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4a58      	ldr	r2, [pc, #352]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044cc:	4b53      	ldr	r3, [pc, #332]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a52      	ldr	r2, [pc, #328]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d8:	4b50      	ldr	r3, [pc, #320]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	494d      	ldr	r1, [pc, #308]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d044      	beq.n	8004580 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b47      	ldr	r3, [pc, #284]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d119      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e07f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d003      	beq.n	800451e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451a:	2b03      	cmp	r3, #3
 800451c:	d107      	bne.n	800452e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451e:	4b3f      	ldr	r3, [pc, #252]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e06f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452e:	4b3b      	ldr	r3, [pc, #236]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e067      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800453e:	4b37      	ldr	r3, [pc, #220]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f023 0203 	bic.w	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4934      	ldr	r1, [pc, #208]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 800454c:	4313      	orrs	r3, r2
 800454e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004550:	f7fd f904 	bl	800175c <HAL_GetTick>
 8004554:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004556:	e00a      	b.n	800456e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004558:	f7fd f900 	bl	800175c <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	f241 3288 	movw	r2, #5000	; 0x1388
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e04f      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800456e:	4b2b      	ldr	r3, [pc, #172]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 020c 	and.w	r2, r3, #12
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	429a      	cmp	r2, r3
 800457e:	d1eb      	bne.n	8004558 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d20c      	bcs.n	80045a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458e:	4b22      	ldr	r3, [pc, #136]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e032      	b.n	800460e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	4916      	ldr	r1, [pc, #88]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	490e      	ldr	r1, [pc, #56]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045e6:	f000 f821 	bl	800462c <HAL_RCC_GetSysClockFreq>
 80045ea:	4601      	mov	r1, r0
 80045ec:	4b0b      	ldr	r3, [pc, #44]	; (800461c <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_RCC_ClockConfig+0x1c0>)
 80045f8:	5cd3      	ldrb	r3, [r2, r3]
 80045fa:	fa21 f303 	lsr.w	r3, r1, r3
 80045fe:	4a09      	ldr	r2, [pc, #36]	; (8004624 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_ClockConfig+0x1c8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fd f864 	bl	80016d4 <HAL_InitTick>

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	40023c00 	.word	0x40023c00
 800461c:	40023800 	.word	0x40023800
 8004620:	0800ecac 	.word	0x0800ecac
 8004624:	20000000 	.word	0x20000000
 8004628:	20000004 	.word	0x20000004

0800462c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800462c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	607b      	str	r3, [r7, #4]
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004642:	4b50      	ldr	r3, [pc, #320]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 030c 	and.w	r3, r3, #12
 800464a:	2b04      	cmp	r3, #4
 800464c:	d007      	beq.n	800465e <HAL_RCC_GetSysClockFreq+0x32>
 800464e:	2b08      	cmp	r3, #8
 8004650:	d008      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x38>
 8004652:	2b00      	cmp	r3, #0
 8004654:	f040 808d 	bne.w	8004772 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b4b      	ldr	r3, [pc, #300]	; (8004788 <HAL_RCC_GetSysClockFreq+0x15c>)
 800465a:	60bb      	str	r3, [r7, #8]
       break;
 800465c:	e08c      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800465e:	4b4b      	ldr	r3, [pc, #300]	; (800478c <HAL_RCC_GetSysClockFreq+0x160>)
 8004660:	60bb      	str	r3, [r7, #8]
      break;
 8004662:	e089      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004664:	4b47      	ldr	r3, [pc, #284]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800466c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800466e:	4b45      	ldr	r3, [pc, #276]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d023      	beq.n	80046c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800467a:	4b42      	ldr	r3, [pc, #264]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	099b      	lsrs	r3, r3, #6
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	ea03 0501 	and.w	r5, r3, r1
 8004690:	ea04 0602 	and.w	r6, r4, r2
 8004694:	4a3d      	ldr	r2, [pc, #244]	; (800478c <HAL_RCC_GetSysClockFreq+0x160>)
 8004696:	fb02 f106 	mul.w	r1, r2, r6
 800469a:	2200      	movs	r2, #0
 800469c:	fb02 f205 	mul.w	r2, r2, r5
 80046a0:	440a      	add	r2, r1
 80046a2:	493a      	ldr	r1, [pc, #232]	; (800478c <HAL_RCC_GetSysClockFreq+0x160>)
 80046a4:	fba5 0101 	umull	r0, r1, r5, r1
 80046a8:	1853      	adds	r3, r2, r1
 80046aa:	4619      	mov	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f04f 0400 	mov.w	r4, #0
 80046b2:	461a      	mov	r2, r3
 80046b4:	4623      	mov	r3, r4
 80046b6:	f7fb fdeb 	bl	8000290 <__aeabi_uldivmod>
 80046ba:	4603      	mov	r3, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e049      	b.n	8004756 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c2:	4b30      	ldr	r3, [pc, #192]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	099b      	lsrs	r3, r3, #6
 80046c8:	f04f 0400 	mov.w	r4, #0
 80046cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	ea03 0501 	and.w	r5, r3, r1
 80046d8:	ea04 0602 	and.w	r6, r4, r2
 80046dc:	4629      	mov	r1, r5
 80046de:	4632      	mov	r2, r6
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	f04f 0400 	mov.w	r4, #0
 80046e8:	0154      	lsls	r4, r2, #5
 80046ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046ee:	014b      	lsls	r3, r1, #5
 80046f0:	4619      	mov	r1, r3
 80046f2:	4622      	mov	r2, r4
 80046f4:	1b49      	subs	r1, r1, r5
 80046f6:	eb62 0206 	sbc.w	r2, r2, r6
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	f04f 0400 	mov.w	r4, #0
 8004702:	0194      	lsls	r4, r2, #6
 8004704:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004708:	018b      	lsls	r3, r1, #6
 800470a:	1a5b      	subs	r3, r3, r1
 800470c:	eb64 0402 	sbc.w	r4, r4, r2
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	00e2      	lsls	r2, r4, #3
 800471a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800471e:	00d9      	lsls	r1, r3, #3
 8004720:	460b      	mov	r3, r1
 8004722:	4614      	mov	r4, r2
 8004724:	195b      	adds	r3, r3, r5
 8004726:	eb44 0406 	adc.w	r4, r4, r6
 800472a:	f04f 0100 	mov.w	r1, #0
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	02a2      	lsls	r2, r4, #10
 8004734:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004738:	0299      	lsls	r1, r3, #10
 800473a:	460b      	mov	r3, r1
 800473c:	4614      	mov	r4, r2
 800473e:	4618      	mov	r0, r3
 8004740:	4621      	mov	r1, r4
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f04f 0400 	mov.w	r4, #0
 8004748:	461a      	mov	r2, r3
 800474a:	4623      	mov	r3, r4
 800474c:	f7fb fda0 	bl	8000290 <__aeabi_uldivmod>
 8004750:	4603      	mov	r3, r0
 8004752:	460c      	mov	r4, r1
 8004754:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_GetSysClockFreq+0x158>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f003 0303 	and.w	r3, r3, #3
 8004760:	3301      	adds	r3, #1
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	fbb2 f3f3 	udiv	r3, r2, r3
 800476e:	60bb      	str	r3, [r7, #8]
      break;
 8004770:	e002      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004774:	60bb      	str	r3, [r7, #8]
      break;
 8004776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004778:	68bb      	ldr	r3, [r7, #8]
}
 800477a:	4618      	mov	r0, r3
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	00f42400 	.word	0x00f42400
 800478c:	017d7840 	.word	0x017d7840

08004790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004794:	4b03      	ldr	r3, [pc, #12]	; (80047a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004796:	681b      	ldr	r3, [r3, #0]
}
 8004798:	4618      	mov	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000000 	.word	0x20000000

080047a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047ac:	f7ff fff0 	bl	8004790 <HAL_RCC_GetHCLKFreq>
 80047b0:	4601      	mov	r1, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0a9b      	lsrs	r3, r3, #10
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4a03      	ldr	r2, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047be:	5cd3      	ldrb	r3, [r2, r3]
 80047c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0800ecbc 	.word	0x0800ecbc

080047d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e01d      	b.n	800481e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7fc fd38 	bl	800126c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	3304      	adds	r3, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4610      	mov	r0, r2
 8004810:	f000 fab8 	bl	8004d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e01d      	b.n	8004874 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f815 	bl	800487c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3304      	adds	r3, #4
 8004862:	4619      	mov	r1, r3
 8004864:	4610      	mov	r0, r2
 8004866:	f000 fa8d 	bl	8004d84 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3708      	adds	r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2201      	movs	r2, #1
 80048a0:	6839      	ldr	r1, [r7, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fd14 	bl	80052d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <HAL_TIM_PWM_Start+0x60>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d107      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2b06      	cmp	r3, #6
 80048d2:	d007      	beq.n	80048e4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0201 	orr.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000

080048f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e083      	b.n	8004a10 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7fc fd09 	bl	8001334 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6812      	ldr	r2, [r2, #0]
 8004934:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004938:	f023 0307 	bic.w	r3, r3, #7
 800493c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3304      	adds	r3, #4
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f000 fa1b 	bl	8004d84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	4313      	orrs	r3, r2
 800496e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004976:	f023 0303 	bic.w	r3, r3, #3
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	4313      	orrs	r3, r2
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004994:	f023 030c 	bic.w	r3, r3, #12
 8004998:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68da      	ldr	r2, [r3, #12]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	021b      	lsls	r3, r3, #8
 80049b0:	4313      	orrs	r3, r2
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	011a      	lsls	r2, r3, #4
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	031b      	lsls	r3, r3, #12
 80049c4:	4313      	orrs	r3, r2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	4313      	orrs	r3, r2
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_TIM_Encoder_Start+0x16>
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d008      	beq.n	8004a3e <HAL_TIM_Encoder_Start+0x26>
 8004a2c:	e00f      	b.n	8004a4e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	2100      	movs	r1, #0
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fc4a 	bl	80052d0 <TIM_CCxChannelCmd>
      break;
 8004a3c:	e016      	b.n	8004a6c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2201      	movs	r2, #1
 8004a44:	2104      	movs	r1, #4
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fc42 	bl	80052d0 <TIM_CCxChannelCmd>
      break;
 8004a4c:	e00e      	b.n	8004a6c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	2100      	movs	r1, #0
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fc3a 	bl	80052d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	2104      	movs	r1, #4
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fc33 	bl	80052d0 <TIM_CCxChannelCmd>
      break;
 8004a6a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e0b4      	b.n	8004c0c <HAL_TIM_PWM_ConfigChannel+0x184>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	f200 809f 	bhi.w	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004aba:	a201      	add	r2, pc, #4	; (adr r2, 8004ac0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac0:	08004af5 	.word	0x08004af5
 8004ac4:	08004bf9 	.word	0x08004bf9
 8004ac8:	08004bf9 	.word	0x08004bf9
 8004acc:	08004bf9 	.word	0x08004bf9
 8004ad0:	08004b35 	.word	0x08004b35
 8004ad4:	08004bf9 	.word	0x08004bf9
 8004ad8:	08004bf9 	.word	0x08004bf9
 8004adc:	08004bf9 	.word	0x08004bf9
 8004ae0:	08004b77 	.word	0x08004b77
 8004ae4:	08004bf9 	.word	0x08004bf9
 8004ae8:	08004bf9 	.word	0x08004bf9
 8004aec:	08004bf9 	.word	0x08004bf9
 8004af0:	08004bb7 	.word	0x08004bb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 f9c2 	bl	8004e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0208 	orr.w	r2, r2, #8
 8004b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0204 	bic.w	r2, r2, #4
 8004b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6999      	ldr	r1, [r3, #24]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	619a      	str	r2, [r3, #24]
      break;
 8004b32:	e062      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 fa08 	bl	8004f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699a      	ldr	r2, [r3, #24]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6999      	ldr	r1, [r3, #24]
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	021a      	lsls	r2, r3, #8
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	619a      	str	r2, [r3, #24]
      break;
 8004b74:	e041      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fa53 	bl	8005028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	69da      	ldr	r2, [r3, #28]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f042 0208 	orr.w	r2, r2, #8
 8004b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 0204 	bic.w	r2, r2, #4
 8004ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69d9      	ldr	r1, [r3, #28]
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	61da      	str	r2, [r3, #28]
      break;
 8004bb4:	e021      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fa9d 	bl	80050fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69da      	ldr	r2, [r3, #28]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	69da      	ldr	r2, [r3, #28]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69d9      	ldr	r1, [r3, #28]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	021a      	lsls	r2, r3, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	61da      	str	r2, [r3, #28]
      break;
 8004bf6:	e000      	b.n	8004bfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004bf8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3710      	adds	r7, #16
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_ConfigClockSource+0x18>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e0a6      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x166>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d067      	beq.n	8004d34 <HAL_TIM_ConfigClockSource+0x120>
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	d80b      	bhi.n	8004c80 <HAL_TIM_ConfigClockSource+0x6c>
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d073      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x140>
 8004c6c:	2b10      	cmp	r3, #16
 8004c6e:	d802      	bhi.n	8004c76 <HAL_TIM_ConfigClockSource+0x62>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d06f      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004c74:	e078      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	d06c      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x140>
 8004c7a:	2b30      	cmp	r3, #48	; 0x30
 8004c7c:	d06a      	beq.n	8004d54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004c7e:	e073      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c80:	2b70      	cmp	r3, #112	; 0x70
 8004c82:	d00d      	beq.n	8004ca0 <HAL_TIM_ConfigClockSource+0x8c>
 8004c84:	2b70      	cmp	r3, #112	; 0x70
 8004c86:	d804      	bhi.n	8004c92 <HAL_TIM_ConfigClockSource+0x7e>
 8004c88:	2b50      	cmp	r3, #80	; 0x50
 8004c8a:	d033      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0xe0>
 8004c8c:	2b60      	cmp	r3, #96	; 0x60
 8004c8e:	d041      	beq.n	8004d14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004c90:	e06a      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c96:	d066      	beq.n	8004d66 <HAL_TIM_ConfigClockSource+0x152>
 8004c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9c:	d017      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004c9e:	e063      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6818      	ldr	r0, [r3, #0]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	6899      	ldr	r1, [r3, #8]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f000 faee 	bl	8005290 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	609a      	str	r2, [r3, #8]
      break;
 8004ccc:	e04c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6899      	ldr	r1, [r3, #8]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f000 fad7 	bl	8005290 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf0:	609a      	str	r2, [r3, #8]
      break;
 8004cf2:	e039      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6859      	ldr	r1, [r3, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	461a      	mov	r2, r3
 8004d02:	f000 fa4b 	bl	800519c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2150      	movs	r1, #80	; 0x50
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 faa4 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004d12:	e029      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f000 fa6a 	bl	80051fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2160      	movs	r1, #96	; 0x60
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fa94 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004d32:	e019      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	6859      	ldr	r1, [r3, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	461a      	mov	r2, r3
 8004d42:	f000 fa2b 	bl	800519c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2140      	movs	r1, #64	; 0x40
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fa84 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004d52:	e009      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	f000 fa7b 	bl	800525a <TIM_ITRx_SetConfig>
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
	...

08004d84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <TIM_Base_SetConfig+0xe4>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00f      	beq.n	8004dbc <TIM_Base_SetConfig+0x38>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da2:	d00b      	beq.n	8004dbc <TIM_Base_SetConfig+0x38>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <TIM_Base_SetConfig+0xe8>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d007      	beq.n	8004dbc <TIM_Base_SetConfig+0x38>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a30      	ldr	r2, [pc, #192]	; (8004e70 <TIM_Base_SetConfig+0xec>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_Base_SetConfig+0x38>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a2f      	ldr	r2, [pc, #188]	; (8004e74 <TIM_Base_SetConfig+0xf0>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d108      	bne.n	8004dce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <TIM_Base_SetConfig+0xe4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01b      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ddc:	d017      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <TIM_Base_SetConfig+0xe8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <TIM_Base_SetConfig+0xec>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <TIM_Base_SetConfig+0xf0>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d00b      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a1f      	ldr	r2, [pc, #124]	; (8004e78 <TIM_Base_SetConfig+0xf4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d007      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a1e      	ldr	r2, [pc, #120]	; (8004e7c <TIM_Base_SetConfig+0xf8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_Base_SetConfig+0x8a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <TIM_Base_SetConfig+0xfc>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d108      	bne.n	8004e20 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a08      	ldr	r2, [pc, #32]	; (8004e68 <TIM_Base_SetConfig+0xe4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	615a      	str	r2, [r3, #20]
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f023 0201 	bic.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 0302 	bic.w	r3, r3, #2
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	; (8004f4c <TIM_OC1_SetConfig+0xc8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <TIM_OC1_SetConfig+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d111      	bne.n	8004f26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40010000 	.word	0x40010000

08004f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0210 	bic.w	r2, r3, #16
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0320 	bic.w	r3, r3, #32
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a1e      	ldr	r2, [pc, #120]	; (8005024 <TIM_OC2_SetConfig+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10d      	bne.n	8004fcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a15      	ldr	r2, [pc, #84]	; (8005024 <TIM_OC2_SetConfig+0xd4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d113      	bne.n	8004ffc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000

08005028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1d      	ldr	r2, [pc, #116]	; (80050f8 <TIM_OC3_SetConfig+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10d      	bne.n	80050a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800508c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <TIM_OC3_SetConfig+0xd0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d113      	bne.n	80050d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40010000 	.word	0x40010000

080050fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a10      	ldr	r2, [pc, #64]	; (8005198 <TIM_OC4_SetConfig+0x9c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d109      	bne.n	8005170 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	019b      	lsls	r3, r3, #6
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000

0800519c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6a1b      	ldr	r3, [r3, #32]
 80051ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f023 0201 	bic.w	r2, r3, #1
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f023 030a 	bic.w	r3, r3, #10
 80051d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	621a      	str	r2, [r3, #32]
}
 80051ee:	bf00      	nop
 80051f0:	371c      	adds	r7, #28
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b087      	sub	sp, #28
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0210 	bic.w	r2, r3, #16
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	031b      	lsls	r3, r3, #12
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4313      	orrs	r3, r2
 800522e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	621a      	str	r2, [r3, #32]
}
 800524e:	bf00      	nop
 8005250:	371c      	adds	r7, #28
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800525a:	b480      	push	{r7}
 800525c:	b085      	sub	sp, #20
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	f043 0307 	orr.w	r3, r3, #7
 800527c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	609a      	str	r2, [r3, #8]
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	021a      	lsls	r2, r3, #8
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	431a      	orrs	r2, r3
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	609a      	str	r2, [r3, #8]
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	f003 031f 	and.w	r3, r3, #31
 80052e2:	2201      	movs	r2, #1
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a1a      	ldr	r2, [r3, #32]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	43db      	mvns	r3, r3
 80052f2:	401a      	ands	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1a      	ldr	r2, [r3, #32]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	6879      	ldr	r1, [r7, #4]
 8005304:	fa01 f303 	lsl.w	r3, r1, r3
 8005308:	431a      	orrs	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
}
 800530e:	bf00      	nop
 8005310:	371c      	adds	r7, #28
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005330:	2302      	movs	r3, #2
 8005332:	e050      	b.n	80053d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1c      	ldr	r2, [pc, #112]	; (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d018      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d013      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a16      	ldr	r2, [pc, #88]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10c      	bne.n	80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	40010000 	.word	0x40010000
 80053e8:	40000400 	.word	0x40000400
 80053ec:	40000800 	.word	0x40000800
 80053f0:	40000c00 	.word	0x40000c00
 80053f4:	40014000 	.word	0x40014000

080053f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800540c:	2b01      	cmp	r3, #1
 800540e:	d101      	bne.n	8005414 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005410:	2302      	movs	r3, #2
 8005412:	e03d      	b.n	8005490 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4313      	orrs	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	4313      	orrs	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800549c:	b084      	sub	sp, #16
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	f107 001c 	add.w	r0, r7, #28
 80054aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d122      	bne.n	80054fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80054c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d105      	bne.n	80054ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f001 fac6 	bl	8006a80 <USB_CoreReset>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
 80054f8:	e01a      	b.n	8005530 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f001 faba 	bl	8006a80 <USB_CoreReset>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	639a      	str	r2, [r3, #56]	; 0x38
 8005522:	e005      	b.n	8005530 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10b      	bne.n	800554e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f043 0206 	orr.w	r2, r3, #6
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f043 0220 	orr.w	r2, r3, #32
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800555a:	b004      	add	sp, #16
 800555c:	4770      	bx	lr
	...

08005560 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	2b02      	cmp	r3, #2
 8005572:	d165      	bne.n	8005640 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4a41      	ldr	r2, [pc, #260]	; (800567c <USB_SetTurnaroundTime+0x11c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d906      	bls.n	800558a <USB_SetTurnaroundTime+0x2a>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a40      	ldr	r2, [pc, #256]	; (8005680 <USB_SetTurnaroundTime+0x120>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d802      	bhi.n	800558a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005584:	230f      	movs	r3, #15
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e062      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	4a3c      	ldr	r2, [pc, #240]	; (8005680 <USB_SetTurnaroundTime+0x120>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d906      	bls.n	80055a0 <USB_SetTurnaroundTime+0x40>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4a3b      	ldr	r2, [pc, #236]	; (8005684 <USB_SetTurnaroundTime+0x124>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d802      	bhi.n	80055a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800559a:	230e      	movs	r3, #14
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e057      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4a38      	ldr	r2, [pc, #224]	; (8005684 <USB_SetTurnaroundTime+0x124>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d906      	bls.n	80055b6 <USB_SetTurnaroundTime+0x56>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a37      	ldr	r2, [pc, #220]	; (8005688 <USB_SetTurnaroundTime+0x128>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d802      	bhi.n	80055b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80055b0:	230d      	movs	r3, #13
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	e04c      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	4a33      	ldr	r2, [pc, #204]	; (8005688 <USB_SetTurnaroundTime+0x128>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d906      	bls.n	80055cc <USB_SetTurnaroundTime+0x6c>
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4a32      	ldr	r2, [pc, #200]	; (800568c <USB_SetTurnaroundTime+0x12c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d802      	bhi.n	80055cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80055c6:	230c      	movs	r3, #12
 80055c8:	617b      	str	r3, [r7, #20]
 80055ca:	e041      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4a2f      	ldr	r2, [pc, #188]	; (800568c <USB_SetTurnaroundTime+0x12c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d906      	bls.n	80055e2 <USB_SetTurnaroundTime+0x82>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	4a2e      	ldr	r2, [pc, #184]	; (8005690 <USB_SetTurnaroundTime+0x130>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d802      	bhi.n	80055e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80055dc:	230b      	movs	r3, #11
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e036      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4a2a      	ldr	r2, [pc, #168]	; (8005690 <USB_SetTurnaroundTime+0x130>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d906      	bls.n	80055f8 <USB_SetTurnaroundTime+0x98>
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	4a29      	ldr	r2, [pc, #164]	; (8005694 <USB_SetTurnaroundTime+0x134>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d802      	bhi.n	80055f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80055f2:	230a      	movs	r3, #10
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e02b      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	4a26      	ldr	r2, [pc, #152]	; (8005694 <USB_SetTurnaroundTime+0x134>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d906      	bls.n	800560e <USB_SetTurnaroundTime+0xae>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a25      	ldr	r2, [pc, #148]	; (8005698 <USB_SetTurnaroundTime+0x138>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d802      	bhi.n	800560e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005608:	2309      	movs	r3, #9
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e020      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a21      	ldr	r2, [pc, #132]	; (8005698 <USB_SetTurnaroundTime+0x138>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d906      	bls.n	8005624 <USB_SetTurnaroundTime+0xc4>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4a20      	ldr	r2, [pc, #128]	; (800569c <USB_SetTurnaroundTime+0x13c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d802      	bhi.n	8005624 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800561e:	2308      	movs	r3, #8
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e015      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4a1d      	ldr	r2, [pc, #116]	; (800569c <USB_SetTurnaroundTime+0x13c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d906      	bls.n	800563a <USB_SetTurnaroundTime+0xda>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4a1c      	ldr	r2, [pc, #112]	; (80056a0 <USB_SetTurnaroundTime+0x140>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d802      	bhi.n	800563a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005634:	2307      	movs	r3, #7
 8005636:	617b      	str	r3, [r7, #20]
 8005638:	e00a      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800563a:	2306      	movs	r3, #6
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e007      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d102      	bne.n	800564c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005646:	2309      	movs	r3, #9
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	e001      	b.n	8005650 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800564c:	2309      	movs	r3, #9
 800564e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	029b      	lsls	r3, r3, #10
 8005664:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005668:	431a      	orrs	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	00d8acbf 	.word	0x00d8acbf
 8005680:	00e4e1bf 	.word	0x00e4e1bf
 8005684:	00f423ff 	.word	0x00f423ff
 8005688:	0106737f 	.word	0x0106737f
 800568c:	011a499f 	.word	0x011a499f
 8005690:	01312cff 	.word	0x01312cff
 8005694:	014ca43f 	.word	0x014ca43f
 8005698:	016e35ff 	.word	0x016e35ff
 800569c:	01a6ab1f 	.word	0x01a6ab1f
 80056a0:	01e847ff 	.word	0x01e847ff

080056a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f043 0201 	orr.w	r2, r3, #1
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	370c      	adds	r7, #12
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	460b      	mov	r3, r1
 80056f2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d106      	bne.n	8005714 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]
 8005712:	e00b      	b.n	800572c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005714:	78fb      	ldrb	r3, [r7, #3]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]
 8005726:	e001      	b.n	800572c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e003      	b.n	8005734 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800572c:	2032      	movs	r0, #50	; 0x32
 800572e:	f7fc f821 	bl	8001774 <HAL_Delay>

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800573c:	b084      	sub	sp, #16
 800573e:	b580      	push	{r7, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800574a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005756:	2300      	movs	r3, #0
 8005758:	613b      	str	r3, [r7, #16]
 800575a:	e009      	b.n	8005770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	3340      	adds	r3, #64	; 0x40
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	2200      	movs	r2, #0
 8005768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	3301      	adds	r3, #1
 800576e:	613b      	str	r3, [r7, #16]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b0e      	cmp	r3, #14
 8005774:	d9f2      	bls.n	800575c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005778:	2b00      	cmp	r3, #0
 800577a:	d11c      	bne.n	80057b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800578a:	f043 0302 	orr.w	r3, r3, #2
 800578e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	639a      	str	r2, [r3, #56]	; 0x38
 80057b4:	e00b      	b.n	80057ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057d4:	461a      	mov	r2, r3
 80057d6:	2300      	movs	r3, #0
 80057d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e0:	4619      	mov	r1, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	461a      	mov	r2, r3
 80057ea:	680b      	ldr	r3, [r1, #0]
 80057ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d10c      	bne.n	800580e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057fa:	2100      	movs	r1, #0
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f949 	bl	8005a94 <USB_SetDevSpeed>
 8005802:	e008      	b.n	8005816 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005804:	2101      	movs	r1, #1
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f944 	bl	8005a94 <USB_SetDevSpeed>
 800580c:	e003      	b.n	8005816 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800580e:	2103      	movs	r1, #3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 f93f 	bl	8005a94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005816:	2110      	movs	r1, #16
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f8f3 	bl	8005a04 <USB_FlushTxFifo>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f911 	bl	8005a50 <USB_FlushRxFifo>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584a:	461a      	mov	r2, r3
 800584c:	2300      	movs	r3, #0
 800584e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005856:	461a      	mov	r2, r3
 8005858:	2300      	movs	r3, #0
 800585a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
 8005860:	e043      	b.n	80058ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005878:	d118      	bne.n	80058ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	461a      	mov	r2, r3
 800588e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005892:	6013      	str	r3, [r2, #0]
 8005894:	e013      	b.n	80058be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	015a      	lsls	r2, r3, #5
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	4413      	add	r3, r2
 800589e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a2:	461a      	mov	r2, r3
 80058a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e008      	b.n	80058be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	461a      	mov	r2, r3
 80058ba:	2300      	movs	r3, #0
 80058bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ca:	461a      	mov	r2, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	461a      	mov	r2, r3
 80058de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	3301      	adds	r3, #1
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d3b7      	bcc.n	8005862 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	e043      	b.n	8005980 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800590a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800590e:	d118      	bne.n	8005942 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4413      	add	r3, r2
 800591e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005922:	461a      	mov	r2, r3
 8005924:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	e013      	b.n	8005954 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	461a      	mov	r2, r3
 800593a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	e008      	b.n	8005954 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	461a      	mov	r2, r3
 8005950:	2300      	movs	r3, #0
 8005952:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	015a      	lsls	r2, r3, #5
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005960:	461a      	mov	r2, r3
 8005962:	2300      	movs	r3, #0
 8005964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005972:	461a      	mov	r2, r3
 8005974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005978:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3301      	adds	r3, #1
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	429a      	cmp	r2, r3
 8005986:	d3b7      	bcc.n	80058f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800599a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80059a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f043 0210 	orr.w	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	4b0f      	ldr	r3, [pc, #60]	; (8005a00 <USB_DevInit+0x2c4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f043 0208 	orr.w	r2, r3, #8
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d107      	bne.n	80059f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059e8:	f043 0304 	orr.w	r3, r3, #4
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059fc:	b004      	add	sp, #16
 80059fe:	4770      	bx	lr
 8005a00:	803c3800 	.word	0x803c3800

08005a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	019b      	lsls	r3, r3, #6
 8005a16:	f043 0220 	orr.w	r2, r3, #32
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3301      	adds	r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4a09      	ldr	r2, [pc, #36]	; (8005a4c <USB_FlushTxFifo+0x48>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e006      	b.n	8005a3e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d0f0      	beq.n	8005a1e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3714      	adds	r7, #20
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	00030d40 	.word	0x00030d40

08005a50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3301      	adds	r3, #1
 8005a66:	60fb      	str	r3, [r7, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <USB_FlushRxFifo+0x40>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d901      	bls.n	8005a74 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a70:	2303      	movs	r3, #3
 8005a72:	e006      	b.n	8005a82 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d0f0      	beq.n	8005a62 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	00030d40 	.word	0x00030d40

08005a94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0306 	and.w	r3, r3, #6
 8005ade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]
 8005aea:	e00a      	b.n	8005b02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d002      	beq.n	8005af8 <USB_GetDevSpeed+0x32>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d102      	bne.n	8005afe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005af8:	2302      	movs	r3, #2
 8005afa:	75fb      	strb	r3, [r7, #23]
 8005afc:	e001      	b.n	8005b02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005afe:	230f      	movs	r3, #15
 8005b00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	785b      	ldrb	r3, [r3, #1]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d13a      	bne.n	8005ba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	68f9      	ldr	r1, [r7, #12]
 8005b46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d155      	bne.n	8005c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	78db      	ldrb	r3, [r3, #3]
 8005b7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	059b      	lsls	r3, r3, #22
 8005b86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	0151      	lsls	r1, r2, #5
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	440a      	add	r2, r1
 8005b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e036      	b.n	8005c10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba8:	69da      	ldr	r2, [r3, #28]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	f003 030f 	and.w	r3, r3, #15
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d11a      	bne.n	8005c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	78db      	ldrb	r3, [r3, #3]
 8005bf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	68ba      	ldr	r2, [r7, #8]
 8005bfc:	0151      	lsls	r1, r2, #5
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	440a      	add	r2, r1
 8005c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
	...

08005c20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d161      	bne.n	8005d00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c52:	d11f      	bne.n	8005c94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0151      	lsls	r1, r2, #5
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	440a      	add	r2, r1
 8005c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	0151      	lsls	r1, r2, #5
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	440a      	add	r2, r1
 8005c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	f003 030f 	and.w	r3, r3, #15
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	68f9      	ldr	r1, [r7, #12]
 8005cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbe:	69da      	ldr	r2, [r3, #28]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f003 030f 	and.w	r3, r3, #15
 8005cc8:	2101      	movs	r1, #1
 8005cca:	fa01 f303 	lsl.w	r3, r1, r3
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cd8:	4013      	ands	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	0159      	lsls	r1, r3, #5
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	440b      	add	r3, r1
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <USB_DeactivateEndpoint+0x1b0>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
 8005cfe:	e060      	b.n	8005dc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d16:	d11f      	bne.n	8005d58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2101      	movs	r1, #1
 8005d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d6e:	041b      	lsls	r3, r3, #16
 8005d70:	43db      	mvns	r3, r3
 8005d72:	68f9      	ldr	r1, [r7, #12]
 8005d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d78:	4013      	ands	r3, r2
 8005d7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d82:	69da      	ldr	r2, [r3, #28]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f003 030f 	and.w	r3, r3, #15
 8005d8c:	2101      	movs	r1, #1
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	041b      	lsls	r3, r3, #16
 8005d94:	43db      	mvns	r3, r3
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	0159      	lsls	r1, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	440b      	add	r3, r1
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4b05      	ldr	r3, [pc, #20]	; (8005dd4 <USB_DeactivateEndpoint+0x1b4>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	ec337800 	.word	0xec337800
 8005dd4:	eff37800 	.word	0xeff37800

08005dd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b08a      	sub	sp, #40	; 0x28
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	4613      	mov	r3, r2
 8005de4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	785b      	ldrb	r3, [r3, #1]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	f040 815c 	bne.w	80060b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d132      	bne.n	8005e68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	69fa      	ldr	r2, [r7, #28]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e60:	0cdb      	lsrs	r3, r3, #19
 8005e62:	04db      	lsls	r3, r3, #19
 8005e64:	6113      	str	r3, [r2, #16]
 8005e66:	e074      	b.n	8005f52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	69fa      	ldr	r2, [r7, #28]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e82:	0cdb      	lsrs	r3, r3, #19
 8005e84:	04db      	lsls	r3, r3, #19
 8005e86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	69ba      	ldr	r2, [r7, #24]
 8005e98:	0151      	lsls	r1, r2, #5
 8005e9a:	69fa      	ldr	r2, [r7, #28]
 8005e9c:	440a      	add	r2, r1
 8005e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ea2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ea6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	015a      	lsls	r2, r3, #5
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb8:	691a      	ldr	r2, [r3, #16]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6959      	ldr	r1, [r3, #20]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	440b      	add	r3, r1
 8005ec4:	1e59      	subs	r1, r3, #1
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ece:	04d9      	lsls	r1, r3, #19
 8005ed0:	4b9d      	ldr	r3, [pc, #628]	; (8006148 <USB_EPStartXfer+0x370>)
 8005ed2:	400b      	ands	r3, r1
 8005ed4:	69b9      	ldr	r1, [r7, #24]
 8005ed6:	0148      	lsls	r0, r1, #5
 8005ed8:	69f9      	ldr	r1, [r7, #28]
 8005eda:	4401      	add	r1, r0
 8005edc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efa:	69b9      	ldr	r1, [r7, #24]
 8005efc:	0148      	lsls	r0, r1, #5
 8005efe:	69f9      	ldr	r1, [r7, #28]
 8005f00:	4401      	add	r1, r0
 8005f02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f06:	4313      	orrs	r3, r2
 8005f08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	78db      	ldrb	r3, [r3, #3]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d11f      	bne.n	8005f52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	69fa      	ldr	r2, [r7, #28]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d14b      	bne.n	8005ff0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d009      	beq.n	8005f74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	78db      	ldrb	r3, [r3, #3]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d128      	bne.n	8005fce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d110      	bne.n	8005fae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	e00f      	b.n	8005fce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	e12f      	b.n	8006250 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800600e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	78db      	ldrb	r3, [r3, #3]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d015      	beq.n	8006044 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 8117 	beq.w	8006250 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006028:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	f003 030f 	and.w	r3, r3, #15
 8006032:	2101      	movs	r1, #1
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	69f9      	ldr	r1, [r7, #28]
 800603a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800603e:	4313      	orrs	r3, r2
 8006040:	634b      	str	r3, [r1, #52]	; 0x34
 8006042:	e105      	b.n	8006250 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d110      	bne.n	8006076 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	0151      	lsls	r1, r2, #5
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	440a      	add	r2, r1
 800606a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800606e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006072:	6013      	str	r3, [r2, #0]
 8006074:	e00f      	b.n	8006096 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	015a      	lsls	r2, r3, #5
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	0151      	lsls	r1, r2, #5
 8006088:	69fa      	ldr	r2, [r7, #28]
 800608a:	440a      	add	r2, r1
 800608c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006094:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	68d9      	ldr	r1, [r3, #12]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	b298      	uxth	r0, r3
 80060a4:	79fb      	ldrb	r3, [r7, #7]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	4603      	mov	r3, r0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fa2b 	bl	8006506 <USB_WritePacket>
 80060b0:	e0ce      	b.n	8006250 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060cc:	0cdb      	lsrs	r3, r3, #19
 80060ce:	04db      	lsls	r3, r3, #19
 80060d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d126      	bne.n	800614c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006114:	69b9      	ldr	r1, [r7, #24]
 8006116:	0148      	lsls	r0, r1, #5
 8006118:	69f9      	ldr	r1, [r7, #28]
 800611a:	4401      	add	r1, r0
 800611c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006120:	4313      	orrs	r3, r2
 8006122:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006142:	6113      	str	r3, [r2, #16]
 8006144:	e036      	b.n	80061b4 <USB_EPStartXfer+0x3dc>
 8006146:	bf00      	nop
 8006148:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	695a      	ldr	r2, [r3, #20]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	4413      	add	r3, r2
 8006156:	1e5a      	subs	r2, r3, #1
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006160:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	4413      	add	r3, r2
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	8afb      	ldrh	r3, [r7, #22]
 8006172:	04d9      	lsls	r1, r3, #19
 8006174:	4b39      	ldr	r3, [pc, #228]	; (800625c <USB_EPStartXfer+0x484>)
 8006176:	400b      	ands	r3, r1
 8006178:	69b9      	ldr	r1, [r7, #24]
 800617a:	0148      	lsls	r0, r1, #5
 800617c:	69f9      	ldr	r1, [r7, #28]
 800617e:	4401      	add	r1, r0
 8006180:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006184:	4313      	orrs	r3, r2
 8006186:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006194:	691a      	ldr	r2, [r3, #16]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	8af9      	ldrh	r1, [r7, #22]
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	0148      	lsls	r0, r1, #5
 80061a8:	69f9      	ldr	r1, [r7, #28]
 80061aa:	4401      	add	r1, r0
 80061ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061b0:	4313      	orrs	r3, r2
 80061b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061b4:	79fb      	ldrb	r3, [r7, #7]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d10d      	bne.n	80061d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	68d9      	ldr	r1, [r3, #12]
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	015a      	lsls	r2, r3, #5
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	4413      	add	r3, r2
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	460a      	mov	r2, r1
 80061d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	78db      	ldrb	r3, [r3, #3]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d128      	bne.n	8006230 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d110      	bne.n	8006210 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69ba      	ldr	r2, [r7, #24]
 80061fe:	0151      	lsls	r1, r2, #5
 8006200:	69fa      	ldr	r2, [r7, #28]
 8006202:	440a      	add	r2, r1
 8006204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006208:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	e00f      	b.n	8006230 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	015a      	lsls	r2, r3, #5
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	4413      	add	r3, r2
 8006218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	0151      	lsls	r1, r2, #5
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	440a      	add	r2, r1
 8006226:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	0151      	lsls	r1, r2, #5
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	440a      	add	r2, r1
 8006246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800624e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3720      	adds	r7, #32
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	1ff80000 	.word	0x1ff80000

08006260 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	785b      	ldrb	r3, [r3, #1]
 800627c:	2b01      	cmp	r3, #1
 800627e:	f040 80cd 	bne.w	800641c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d132      	bne.n	80062f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e8:	0cdb      	lsrs	r3, r3, #19
 80062ea:	04db      	lsls	r3, r3, #19
 80062ec:	6113      	str	r3, [r2, #16]
 80062ee:	e04e      	b.n	800638e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	440a      	add	r2, r1
 8006306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630a:	0cdb      	lsrs	r3, r3, #19
 800630c:	04db      	lsls	r3, r3, #19
 800630e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	015a      	lsls	r2, r3, #5
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	4413      	add	r3, r2
 8006318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	0151      	lsls	r1, r2, #5
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	440a      	add	r2, r1
 8006326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800632e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006332:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	695a      	ldr	r2, [r3, #20]
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	429a      	cmp	r2, r3
 800633e:	d903      	bls.n	8006348 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006366:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800637e:	6939      	ldr	r1, [r7, #16]
 8006380:	0148      	lsls	r0, r1, #5
 8006382:	6979      	ldr	r1, [r7, #20]
 8006384:	4401      	add	r1, r0
 8006386:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800638a:	4313      	orrs	r3, r2
 800638c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d11e      	bne.n	80063d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a8:	461a      	mov	r2, r3
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063ce:	6013      	str	r3, [r2, #0]
 80063d0:	e092      	b.n	80064f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d07e      	beq.n	80064f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	f003 030f 	and.w	r3, r3, #15
 800640a:	2101      	movs	r1, #1
 800640c:	fa01 f303 	lsl.w	r3, r1, r3
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006416:	4313      	orrs	r3, r2
 8006418:	634b      	str	r3, [r1, #52]	; 0x34
 800641a:	e06d      	b.n	80064f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	015a      	lsls	r2, r3, #5
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	4413      	add	r3, r2
 8006424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	0151      	lsls	r1, r2, #5
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	440a      	add	r2, r1
 8006432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006436:	0cdb      	lsrs	r3, r3, #19
 8006438:	04db      	lsls	r3, r3, #19
 800643a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	0151      	lsls	r1, r2, #5
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	440a      	add	r2, r1
 8006452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006456:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800645a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800645e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	691a      	ldr	r2, [r3, #16]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a6:	6939      	ldr	r1, [r7, #16]
 80064a8:	0148      	lsls	r0, r1, #5
 80064aa:	6979      	ldr	r1, [r7, #20]
 80064ac:	4401      	add	r1, r0
 80064ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064b2:	4313      	orrs	r3, r2
 80064b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d10d      	bne.n	80064d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	68d9      	ldr	r1, [r3, #12]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d4:	460a      	mov	r2, r1
 80064d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	015a      	lsls	r2, r3, #5
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	4413      	add	r3, r2
 80064e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	0151      	lsls	r1, r2, #5
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	440a      	add	r2, r1
 80064ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006506:	b480      	push	{r7}
 8006508:	b089      	sub	sp, #36	; 0x24
 800650a:	af00      	add	r7, sp, #0
 800650c:	60f8      	str	r0, [r7, #12]
 800650e:	60b9      	str	r1, [r7, #8]
 8006510:	4611      	mov	r1, r2
 8006512:	461a      	mov	r2, r3
 8006514:	460b      	mov	r3, r1
 8006516:	71fb      	strb	r3, [r7, #7]
 8006518:	4613      	mov	r3, r2
 800651a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006524:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006528:	2b00      	cmp	r3, #0
 800652a:	d11a      	bne.n	8006562 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800652c:	88bb      	ldrh	r3, [r7, #4]
 800652e:	3303      	adds	r3, #3
 8006530:	089b      	lsrs	r3, r3, #2
 8006532:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	e00f      	b.n	800655a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	031a      	lsls	r2, r3, #12
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	4413      	add	r3, r2
 8006542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006546:	461a      	mov	r2, r3
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	3304      	adds	r3, #4
 8006552:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	3301      	adds	r3, #1
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	429a      	cmp	r2, r3
 8006560:	d3eb      	bcc.n	800653a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3724      	adds	r7, #36	; 0x24
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006570:	b480      	push	{r7}
 8006572:	b089      	sub	sp, #36	; 0x24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	4613      	mov	r3, r2
 800657c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	3303      	adds	r3, #3
 800658a:	089b      	lsrs	r3, r3, #2
 800658c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800658e:	2300      	movs	r3, #0
 8006590:	61bb      	str	r3, [r7, #24]
 8006592:	e00b      	b.n	80065ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	601a      	str	r2, [r3, #0]
    pDest++;
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	3304      	adds	r3, #4
 80065a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	3301      	adds	r3, #1
 80065aa:	61bb      	str	r3, [r7, #24]
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d3ef      	bcc.n	8006594 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80065b4:	69fb      	ldr	r3, [r7, #28]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3724      	adds	r7, #36	; 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d12c      	bne.n	8006638 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	db12      	blt.n	8006616 <USB_EPSetStall+0x54>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00f      	beq.n	8006616 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006610:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006614:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	e02b      	b.n	8006690 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	db12      	blt.n	8006670 <USB_EPSetStall+0xae>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00f      	beq.n	8006670 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800666a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800666e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800668a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800668e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	785b      	ldrb	r3, [r3, #1]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d128      	bne.n	800670c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	015a      	lsls	r2, r3, #5
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	78db      	ldrb	r3, [r3, #3]
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d003      	beq.n	80066ea <USB_EPClearStall+0x4c>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	78db      	ldrb	r3, [r3, #3]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d138      	bne.n	800675c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e027      	b.n	800675c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	440a      	add	r2, r1
 8006722:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006726:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800672a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	78db      	ldrb	r3, [r3, #3]
 8006730:	2b03      	cmp	r3, #3
 8006732:	d003      	beq.n	800673c <USB_EPClearStall+0x9e>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	78db      	ldrb	r3, [r3, #3]
 8006738:	2b02      	cmp	r3, #2
 800673a:	d10f      	bne.n	800675c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	015a      	lsls	r2, r3, #5
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4413      	add	r3, r2
 8006744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	0151      	lsls	r1, r2, #5
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	440a      	add	r2, r1
 8006752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800675a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	460b      	mov	r3, r1
 8006774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006788:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800678c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800679e:	68f9      	ldr	r1, [r7, #12]
 80067a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067a4:	4313      	orrs	r3, r2
 80067a6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80067d0:	f023 0303 	bic.w	r3, r3, #3
 80067d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067e4:	f023 0302 	bic.w	r3, r3, #2
 80067e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006812:	f023 0303 	bic.w	r3, r3, #3
 8006816:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006826:	f043 0302 	orr.w	r3, r3, #2
 800682a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4013      	ands	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006852:	68fb      	ldr	r3, [r7, #12]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	4013      	ands	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	0c1b      	lsrs	r3, r3, #16
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	4013      	ands	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	b29b      	uxth	r3, r3
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	015a      	lsls	r2, r3, #5
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	4413      	add	r3, r2
 80068e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	4013      	ands	r3, r2
 80068f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068f6:	68bb      	ldr	r3, [r7, #8]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006926:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	fa22 f303 	lsr.w	r3, r2, r3
 8006934:	01db      	lsls	r3, r3, #7
 8006936:	b2db      	uxtb	r3, r3
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4013      	ands	r3, r2
 8006950:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006952:	68bb      	ldr	r3, [r7, #8]
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f003 0301 	and.w	r3, r3, #1
}
 8006970:	4618      	mov	r0, r3
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006996:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800699a:	f023 0307 	bic.w	r3, r3, #7
 800699e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
	...

080069c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	460b      	mov	r3, r1
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	333c      	adds	r3, #60	; 0x3c
 80069da:	3304      	adds	r3, #4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	4a26      	ldr	r2, [pc, #152]	; (8006a7c <USB_EP0_OutStart+0xb8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d90a      	bls.n	80069fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f8:	d101      	bne.n	80069fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e037      	b.n	8006a6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a04:	461a      	mov	r2, r3
 8006a06:	2300      	movs	r3, #0
 8006a08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2c:	f043 0318 	orr.w	r3, r3, #24
 8006a30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	691b      	ldr	r3, [r3, #16]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006a44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d10f      	bne.n	8006a6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a52:	461a      	mov	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006a6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	371c      	adds	r7, #28
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	4f54300a 	.word	0x4f54300a

08006a80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	4a13      	ldr	r2, [pc, #76]	; (8006ae4 <USB_CoreReset+0x64>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e01b      	b.n	8006ad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	daf2      	bge.n	8006a8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f043 0201 	orr.w	r2, r3, #1
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4a09      	ldr	r2, [pc, #36]	; (8006ae4 <USB_CoreReset+0x64>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d901      	bls.n	8006ac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e006      	b.n	8006ad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d0f0      	beq.n	8006ab6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	00030d40 	.word	0x00030d40

08006ae8 <mpu_get_bytes>:
int mpu_get_acel_config(uint16_t dev_addr, uint8_t *config){
	return HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, MPU_ACF, 1, config, 1, HAL_MAX_DELAY);
}


int mpu_get_bytes(uint16_t dev_addr, uint8_t *a){
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af04      	add	r7, sp, #16
 8006aee:	4603      	mov	r3, r0
 8006af0:	6039      	str	r1, [r7, #0]
 8006af2:	80fb      	strh	r3, [r7, #6]
	// make sure input a is 14 elements
	uint8_t status = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	status = HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, MPU_DAT, 1, a, 14, HAL_MAX_DELAY);
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	b299      	uxth	r1, r3
 8006afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b02:	9302      	str	r3, [sp, #8]
 8006b04:	230e      	movs	r3, #14
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	223b      	movs	r2, #59	; 0x3b
 8006b10:	4804      	ldr	r0, [pc, #16]	; (8006b24 <mpu_get_bytes+0x3c>)
 8006b12:	f7fb fb31 	bl	8002178 <HAL_I2C_Mem_Read>
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]
	return status;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	200004dc 	.word	0x200004dc

08006b28 <mpu_pwr_mgmt>:
		a[i] = (uint16_t)d[i]<<8 | (uint16_t)d[i+1];
	}
	return status;
}

int mpu_pwr_mgmt(uint16_t dev_addr, uint8_t config1, uint8_t config2){
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af04      	add	r7, sp, #16
 8006b2e:	4603      	mov	r3, r0
 8006b30:	80fb      	strh	r3, [r7, #6]
 8006b32:	460b      	mov	r3, r1
 8006b34:	717b      	strb	r3, [r7, #5]
 8006b36:	4613      	mov	r3, r2
 8006b38:	713b      	strb	r3, [r7, #4]
	// bit4 - na
	// bit3 - set to 1 disable temperature sensor
	// bit2-0 - set clock, just have this set to 0
	// Register 2
	// Just set this byte to zero, or it will put everything in standby mode
	int status = 0;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
	status = HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, MPU_PW1, 1, &config1, 1, HAL_MAX_DELAY);
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	b299      	uxth	r1, r3
 8006b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b48:	9302      	str	r3, [sp, #8]
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	1d7b      	adds	r3, r7, #5
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	2301      	movs	r3, #1
 8006b54:	226b      	movs	r2, #107	; 0x6b
 8006b56:	480e      	ldr	r0, [pc, #56]	; (8006b90 <mpu_pwr_mgmt+0x68>)
 8006b58:	f7fb fa14 	bl	8001f84 <HAL_I2C_Mem_Write>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	60fb      	str	r3, [r7, #12]
	return status | HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, MPU_PW2, 1, &config2, 1, HAL_MAX_DELAY);
 8006b60:	88fb      	ldrh	r3, [r7, #6]
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	b299      	uxth	r1, r3
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b6a:	9302      	str	r3, [sp, #8]
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	9301      	str	r3, [sp, #4]
 8006b70:	1d3b      	adds	r3, r7, #4
 8006b72:	9300      	str	r3, [sp, #0]
 8006b74:	2301      	movs	r3, #1
 8006b76:	226c      	movs	r2, #108	; 0x6c
 8006b78:	4805      	ldr	r0, [pc, #20]	; (8006b90 <mpu_pwr_mgmt+0x68>)
 8006b7a:	f7fb fa03 	bl	8001f84 <HAL_I2C_Mem_Write>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	461a      	mov	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4313      	orrs	r3, r2
	return status;
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	200004dc 	.word	0x200004dc

08006b94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006ba0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006ba4:	f007 f9b4 	bl	800df10 <malloc>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d105      	bne.n	8006bbe <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e066      	b.n	8006c8c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	7c1b      	ldrb	r3, [r3, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d119      	bne.n	8006c02 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006bce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bd2:	2202      	movs	r2, #2
 8006bd4:	2181      	movs	r1, #129	; 0x81
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 ffeb 	bl	8008bb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006be6:	2202      	movs	r2, #2
 8006be8:	2101      	movs	r1, #1
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 ffe1 	bl	8008bb2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2210      	movs	r2, #16
 8006bfc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c00:	e016      	b.n	8006c30 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c02:	2340      	movs	r3, #64	; 0x40
 8006c04:	2202      	movs	r2, #2
 8006c06:	2181      	movs	r1, #129	; 0x81
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f001 ffd2 	bl	8008bb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c14:	2340      	movs	r3, #64	; 0x40
 8006c16:	2202      	movs	r2, #2
 8006c18:	2101      	movs	r1, #1
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f001 ffc9 	bl	8008bb2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2210      	movs	r2, #16
 8006c2c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c30:	2308      	movs	r3, #8
 8006c32:	2203      	movs	r2, #3
 8006c34:	2182      	movs	r1, #130	; 0x82
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 ffbb 	bl	8008bb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7c1b      	ldrb	r3, [r3, #16]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c70:	2101      	movs	r1, #1
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f002 f88c 	bl	8008d90 <USBD_LL_PrepareReceive>
 8006c78:	e007      	b.n	8006c8a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	2101      	movs	r1, #1
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f002 f883 	bl	8008d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006ca4:	2181      	movs	r1, #129	; 0x81
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 ffa9 	bl	8008bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 ffa2 	bl	8008bfe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cc2:	2182      	movs	r1, #130	; 0x82
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 ff9a 	bl	8008bfe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00e      	beq.n	8006d02 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f007 f913 	bl	800df20 <free>
    pdev->pClassData = NULL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d1c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d03a      	beq.n	8006dac <USBD_CDC_Setup+0xa0>
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	f040 8097 	bne.w	8006e6a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	88db      	ldrh	r3, [r3, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d029      	beq.n	8006d98 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	b25b      	sxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da11      	bge.n	8006d72 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006d5a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	88d2      	ldrh	r2, [r2, #6]
 8006d60:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d62:	6939      	ldr	r1, [r7, #16]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	88db      	ldrh	r3, [r3, #6]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 fa9d 	bl	80082aa <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006d70:	e082      	b.n	8006e78 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	785a      	ldrb	r2, [r3, #1]
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	88db      	ldrh	r3, [r3, #6]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d88:	6939      	ldr	r1, [r7, #16]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	88db      	ldrh	r3, [r3, #6]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f001 fab6 	bl	8008302 <USBD_CtlPrepareRx>
    break;
 8006d96:	e06f      	b.n	8006e78 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	7850      	ldrb	r0, [r2, #1]
 8006da4:	2200      	movs	r2, #0
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	4798      	blx	r3
    break;
 8006daa:	e065      	b.n	8006e78 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	785b      	ldrb	r3, [r3, #1]
 8006db0:	2b0b      	cmp	r3, #11
 8006db2:	d84f      	bhi.n	8006e54 <USBD_CDC_Setup+0x148>
 8006db4:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <USBD_CDC_Setup+0xb0>)
 8006db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dba:	bf00      	nop
 8006dbc:	08006ded 	.word	0x08006ded
 8006dc0:	08006e63 	.word	0x08006e63
 8006dc4:	08006e55 	.word	0x08006e55
 8006dc8:	08006e55 	.word	0x08006e55
 8006dcc:	08006e55 	.word	0x08006e55
 8006dd0:	08006e55 	.word	0x08006e55
 8006dd4:	08006e55 	.word	0x08006e55
 8006dd8:	08006e55 	.word	0x08006e55
 8006ddc:	08006e55 	.word	0x08006e55
 8006de0:	08006e55 	.word	0x08006e55
 8006de4:	08006e15 	.word	0x08006e15
 8006de8:	08006e3d 	.word	0x08006e3d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d107      	bne.n	8006e06 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006df6:	f107 030c 	add.w	r3, r7, #12
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f001 fa53 	bl	80082aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e04:	e030      	b.n	8006e68 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f9dd 	bl	80081c8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	75fb      	strb	r3, [r7, #23]
      break;
 8006e12:	e029      	b.n	8006e68 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d107      	bne.n	8006e2e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e1e:	f107 030f 	add.w	r3, r7, #15
 8006e22:	2201      	movs	r2, #1
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f001 fa3f 	bl	80082aa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e2c:	e01c      	b.n	8006e68 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e2e:	6839      	ldr	r1, [r7, #0]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 f9c9 	bl	80081c8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3a:	e015      	b.n	8006e68 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d00f      	beq.n	8006e66 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006e46:	6839      	ldr	r1, [r7, #0]
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 f9bd 	bl	80081c8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006e52:	e008      	b.n	8006e66 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f001 f9b6 	bl	80081c8 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e60:	e002      	b.n	8006e68 <USBD_CDC_Setup+0x15c>
      break;
 8006e62:	bf00      	nop
 8006e64:	e008      	b.n	8006e78 <USBD_CDC_Setup+0x16c>
      break;
 8006e66:	bf00      	nop
    }
    break;
 8006e68:	e006      	b.n	8006e78 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006e6a:	6839      	ldr	r1, [r7, #0]
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f9ab 	bl	80081c8 <USBD_CtlError>
    ret = USBD_FAIL;
 8006e72:	2303      	movs	r3, #3
 8006e74:	75fb      	strb	r3, [r7, #23]
    break;
 8006e76:	bf00      	nop
  }

  return (uint8_t)ret;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop

08006e84 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e049      	b.n	8006f3a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006eae:	78fa      	ldrb	r2, [r7, #3]
 8006eb0:	6879      	ldr	r1, [r7, #4]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	3318      	adds	r3, #24
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d029      	beq.n	8006f18 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	6879      	ldr	r1, [r7, #4]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	3318      	adds	r3, #24
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	78f9      	ldrb	r1, [r7, #3]
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	460b      	mov	r3, r1
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	1a5b      	subs	r3, r3, r1
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4403      	add	r3, r0
 8006ee4:	3344      	adds	r3, #68	; 0x44
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	fbb2 f1f3 	udiv	r1, r2, r3
 8006eec:	fb03 f301 	mul.w	r3, r3, r1
 8006ef0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d110      	bne.n	8006f18 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006ef6:	78fa      	ldrb	r2, [r7, #3]
 8006ef8:	6879      	ldr	r1, [r7, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	440b      	add	r3, r1
 8006f04:	3318      	adds	r3, #24
 8006f06:	2200      	movs	r2, #0
 8006f08:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f0a:	78f9      	ldrb	r1, [r7, #3]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	2200      	movs	r2, #0
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 ff1c 	bl	8008d4e <USBD_LL_Transmit>
 8006f16:	e00f      	b.n	8006f38 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f34:	78fa      	ldrb	r2, [r7, #3]
 8006f36:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e015      	b.n	8006f90 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f64:	78fb      	ldrb	r3, [r7, #3]
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f001 ff32 	bl	8008dd2 <USBD_LL_GetRxDataSize>
 8006f6e:	4602      	mov	r2, r0
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d015      	beq.n	8006fde <USBD_CDC_EP0_RxReady+0x46>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006fb8:	2bff      	cmp	r3, #255	; 0xff
 8006fba:	d010      	beq.n	8006fde <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006fca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006fd2:	b292      	uxth	r2, r2
 8006fd4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	22ff      	movs	r2, #255	; 0xff
 8006fda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2243      	movs	r2, #67	; 0x43
 8006ff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006ff6:	4b03      	ldr	r3, [pc, #12]	; (8007004 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	20000094 	.word	0x20000094

08007008 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2243      	movs	r2, #67	; 0x43
 8007014:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007016:	4b03      	ldr	r3, [pc, #12]	; (8007024 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007018:	4618      	mov	r0, r3
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	20000050 	.word	0x20000050

08007028 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2243      	movs	r2, #67	; 0x43
 8007034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007036:	4b03      	ldr	r3, [pc, #12]	; (8007044 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007038:	4618      	mov	r0, r3
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	200000d8 	.word	0x200000d8

08007048 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	220a      	movs	r2, #10
 8007054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007056:	4b03      	ldr	r3, [pc, #12]	; (8007064 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007058:	4618      	mov	r0, r3
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	2000000c 	.word	0x2000000c

08007068 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	e004      	b.n	8007086 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007092:	b480      	push	{r7}
 8007094:	b087      	sub	sp, #28
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070d4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070fa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80070fc:	2301      	movs	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007106:	2b00      	cmp	r3, #0
 8007108:	d101      	bne.n	800710e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800710a:	2303      	movs	r3, #3
 800710c:	e01a      	b.n	8007144 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007114:	2b00      	cmp	r3, #0
 8007116:	d114      	bne.n	8007142 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	2201      	movs	r2, #1
 800711c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007136:	2181      	movs	r1, #129	; 0x81
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 fe08 	bl	8008d4e <USBD_LL_Transmit>

    ret = USBD_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007142:	7bfb      	ldrb	r3, [r7, #15]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007166:	2303      	movs	r3, #3
 8007168:	e016      	b.n	8007198 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	7c1b      	ldrb	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800717c:	2101      	movs	r1, #1
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fe06 	bl	8008d90 <USBD_LL_PrepareReceive>
 8007184:	e007      	b.n	8007196 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800718c:	2340      	movs	r3, #64	; 0x40
 800718e:	2101      	movs	r1, #1
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 fdfd 	bl	8008d90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b086      	sub	sp, #24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e025      	b.n	8007204 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	79fa      	ldrb	r2, [r7, #7]
 80071f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f001 fc73 	bl	8008ae4 <USBD_LL_Init>
 80071fe:	4603      	mov	r3, r0
 8007200:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007220:	2303      	movs	r3, #3
 8007222:	e010      	b.n	8007246 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007234:	f107 020e 	add.w	r2, r7, #14
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	4602      	mov	r2, r0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 fc90 	bl	8008b7c <USBD_LL_Start>
 800725c:	4603      	mov	r3, r0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007288:	2303      	movs	r3, #3
 800728a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d009      	beq.n	80072aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	78fa      	ldrb	r2, [r7, #3]
 80072a0:	4611      	mov	r1, r2
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	4798      	blx	r3
 80072a6:	4603      	mov	r3, r0
 80072a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d007      	beq.n	80072da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	4611      	mov	r1, r2
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	4798      	blx	r3
  }

  return USBD_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072f4:	6839      	ldr	r1, [r7, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 ff2c 	bl	8008154 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800730a:	461a      	mov	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007318:	f003 031f 	and.w	r3, r3, #31
 800731c:	2b01      	cmp	r3, #1
 800731e:	d00e      	beq.n	800733e <USBD_LL_SetupStage+0x5a>
 8007320:	2b01      	cmp	r3, #1
 8007322:	d302      	bcc.n	800732a <USBD_LL_SetupStage+0x46>
 8007324:	2b02      	cmp	r3, #2
 8007326:	d014      	beq.n	8007352 <USBD_LL_SetupStage+0x6e>
 8007328:	e01d      	b.n	8007366 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fa18 	bl	8007768 <USBD_StdDevReq>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]
      break;
 800733c:	e020      	b.n	8007380 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fa7c 	bl	8007844 <USBD_StdItfReq>
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
      break;
 8007350:	e016      	b.n	8007380 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fab8 	bl	80078d0 <USBD_StdEPReq>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]
      break;
 8007364:	e00c      	b.n	8007380 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800736c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007370:	b2db      	uxtb	r3, r3
 8007372:	4619      	mov	r1, r3
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 fc61 	bl	8008c3c <USBD_LL_StallEP>
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]
      break;
 800737e:	bf00      	nop
  }

  return ret;
 8007380:	7bfb      	ldrb	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b086      	sub	sp, #24
 800738e:	af00      	add	r7, sp, #0
 8007390:	60f8      	str	r0, [r7, #12]
 8007392:	460b      	mov	r3, r1
 8007394:	607a      	str	r2, [r7, #4]
 8007396:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007398:	7afb      	ldrb	r3, [r7, #11]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d137      	bne.n	800740e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d14a      	bne.n	8007446 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	689a      	ldr	r2, [r3, #8]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d913      	bls.n	80073e4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	689a      	ldr	r2, [r3, #8]
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	1ad2      	subs	r2, r2, r3
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	4293      	cmp	r3, r2
 80073d4:	bf28      	it	cs
 80073d6:	4613      	movcs	r3, r2
 80073d8:	461a      	mov	r2, r3
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f000 ffad 	bl	800833c <USBD_CtlContinueRx>
 80073e2:	e030      	b.n	8007446 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d105      	bne.n	8007406 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 ffa9 	bl	800835e <USBD_CtlSendStatus>
 800740c:	e01b      	b.n	8007446 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007414:	699b      	ldr	r3, [r3, #24]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d013      	beq.n	8007442 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007420:	2b03      	cmp	r3, #3
 8007422:	d10e      	bne.n	8007442 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	7afa      	ldrb	r2, [r7, #11]
 800742e:	4611      	mov	r1, r2
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	4798      	blx	r3
 8007434:	4603      	mov	r3, r0
 8007436:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d003      	beq.n	8007446 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	e002      	b.n	8007448 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007442:	2303      	movs	r3, #3
 8007444:	e000      	b.n	8007448 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	460b      	mov	r3, r1
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800745e:	7afb      	ldrb	r3, [r7, #11]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d16a      	bne.n	800753a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3314      	adds	r3, #20
 8007468:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007470:	2b02      	cmp	r3, #2
 8007472:	d155      	bne.n	8007520 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	429a      	cmp	r2, r3
 800747e:	d914      	bls.n	80074aa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	1ad2      	subs	r2, r2, r3
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	461a      	mov	r2, r3
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 ff22 	bl	80082e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800749c:	2300      	movs	r3, #0
 800749e:	2200      	movs	r2, #0
 80074a0:	2100      	movs	r1, #0
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f001 fc74 	bl	8008d90 <USBD_LL_PrepareReceive>
 80074a8:	e03a      	b.n	8007520 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d11c      	bne.n	80074f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	685a      	ldr	r2, [r3, #4]
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80074be:	429a      	cmp	r2, r3
 80074c0:	d316      	bcc.n	80074f0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d20f      	bcs.n	80074f0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80074d0:	2200      	movs	r2, #0
 80074d2:	2100      	movs	r1, #0
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 ff03 	bl	80082e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074e2:	2300      	movs	r3, #0
 80074e4:	2200      	movs	r2, #0
 80074e6:	2100      	movs	r1, #0
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f001 fc51 	bl	8008d90 <USBD_LL_PrepareReceive>
 80074ee:	e017      	b.n	8007520 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007502:	2b03      	cmp	r3, #3
 8007504:	d105      	bne.n	8007512 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007512:	2180      	movs	r1, #128	; 0x80
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f001 fb91 	bl	8008c3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f000 ff32 	bl	8008384 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007526:	2b01      	cmp	r3, #1
 8007528:	d123      	bne.n	8007572 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f7ff fe9b 	bl	8007266 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007538:	e01b      	b.n	8007572 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d013      	beq.n	800756e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800754c:	2b03      	cmp	r3, #3
 800754e:	d10e      	bne.n	800756e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	7afa      	ldrb	r2, [r7, #11]
 800755a:	4611      	mov	r1, r2
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	4798      	blx	r3
 8007560:	4603      	mov	r3, r0
 8007562:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d003      	beq.n	8007572 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800756a:	7dfb      	ldrb	r3, [r7, #23]
 800756c:	e002      	b.n	8007574 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800756e:	2303      	movs	r3, #3
 8007570:	e000      	b.n	8007574 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d009      	beq.n	80075c0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6852      	ldr	r2, [r2, #4]
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	4611      	mov	r1, r2
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	2200      	movs	r2, #0
 80075c4:	2100      	movs	r1, #0
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 faf3 	bl	8008bb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2240      	movs	r2, #64	; 0x40
 80075d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075dc:	2340      	movs	r3, #64	; 0x40
 80075de:	2200      	movs	r2, #0
 80075e0:	2180      	movs	r1, #128	; 0x80
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f001 fae5 	bl	8008bb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2240      	movs	r2, #64	; 0x40
 80075f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075fe:	b480      	push	{r7}
 8007600:	b083      	sub	sp, #12
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2204      	movs	r2, #4
 8007636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007656:	2b04      	cmp	r3, #4
 8007658:	d105      	bne.n	8007666 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007682:	2b03      	cmp	r3, #3
 8007684:	d10b      	bne.n	800769e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007698:	69db      	ldr	r3, [r3, #28]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d009      	beq.n	8007720 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6852      	ldr	r2, [r2, #4]
 8007718:	b2d2      	uxtb	r2, r2
 800771a:	4611      	mov	r1, r2
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	4798      	blx	r3
  }

  return USBD_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800772a:	b480      	push	{r7}
 800772c:	b087      	sub	sp, #28
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	3301      	adds	r3, #1
 8007740:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007748:	8a3b      	ldrh	r3, [r7, #16]
 800774a:	021b      	lsls	r3, r3, #8
 800774c:	b21a      	sxth	r2, r3
 800774e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007752:	4313      	orrs	r3, r2
 8007754:	b21b      	sxth	r3, r3
 8007756:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007758:	89fb      	ldrh	r3, [r7, #14]
}
 800775a:	4618      	mov	r0, r3
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800777e:	2b20      	cmp	r3, #32
 8007780:	d004      	beq.n	800778c <USBD_StdDevReq+0x24>
 8007782:	2b40      	cmp	r3, #64	; 0x40
 8007784:	d002      	beq.n	800778c <USBD_StdDevReq+0x24>
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <USBD_StdDevReq+0x38>
 800778a:	e050      	b.n	800782e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]
    break;
 800779e:	e04b      	b.n	8007838 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	785b      	ldrb	r3, [r3, #1]
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	d83c      	bhi.n	8007822 <USBD_StdDevReq+0xba>
 80077a8:	a201      	add	r2, pc, #4	; (adr r2, 80077b0 <USBD_StdDevReq+0x48>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	08007805 	.word	0x08007805
 80077b4:	08007819 	.word	0x08007819
 80077b8:	08007823 	.word	0x08007823
 80077bc:	0800780f 	.word	0x0800780f
 80077c0:	08007823 	.word	0x08007823
 80077c4:	080077e3 	.word	0x080077e3
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	08007823 	.word	0x08007823
 80077d0:	080077fb 	.word	0x080077fb
 80077d4:	080077ed 	.word	0x080077ed
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f9ce 	bl	8007b7c <USBD_GetDescriptor>
      break;
 80077e0:	e024      	b.n	800782c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fb33 	bl	8007e50 <USBD_SetAddress>
      break;
 80077ea:	e01f      	b.n	800782c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 fb70 	bl	8007ed4 <USBD_SetConfig>
 80077f4:	4603      	mov	r3, r0
 80077f6:	73fb      	strb	r3, [r7, #15]
      break;
 80077f8:	e018      	b.n	800782c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fc0d 	bl	800801c <USBD_GetConfig>
      break;
 8007802:	e013      	b.n	800782c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fc3c 	bl	8008084 <USBD_GetStatus>
      break;
 800780c:	e00e      	b.n	800782c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fc6a 	bl	80080ea <USBD_SetFeature>
      break;
 8007816:	e009      	b.n	800782c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fc79 	bl	8008112 <USBD_ClrFeature>
      break;
 8007820:	e004      	b.n	800782c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fccf 	bl	80081c8 <USBD_CtlError>
      break;
 800782a:	bf00      	nop
    }
    break;
 800782c:	e004      	b.n	8007838 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fcc9 	bl	80081c8 <USBD_CtlError>
    break;
 8007836:	bf00      	nop
  }

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}
 8007842:	bf00      	nop

08007844 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800785a:	2b20      	cmp	r3, #32
 800785c:	d003      	beq.n	8007866 <USBD_StdItfReq+0x22>
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d001      	beq.n	8007866 <USBD_StdItfReq+0x22>
 8007862:	2b00      	cmp	r3, #0
 8007864:	d12a      	bne.n	80078bc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800786c:	3b01      	subs	r3, #1
 800786e:	2b02      	cmp	r3, #2
 8007870:	d81d      	bhi.n	80078ae <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d813      	bhi.n	80078a4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	4798      	blx	r3
 800788a:	4603      	mov	r3, r0
 800788c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	88db      	ldrh	r3, [r3, #6]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d110      	bne.n	80078b8 <USBD_StdItfReq+0x74>
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10d      	bne.n	80078b8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fd5e 	bl	800835e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80078a2:	e009      	b.n	80078b8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc8e 	bl	80081c8 <USBD_CtlError>
      break;
 80078ac:	e004      	b.n	80078b8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fc89 	bl	80081c8 <USBD_CtlError>
      break;
 80078b6:	e000      	b.n	80078ba <USBD_StdItfReq+0x76>
      break;
 80078b8:	bf00      	nop
    }
    break;
 80078ba:	e004      	b.n	80078c6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fc82 	bl	80081c8 <USBD_CtlError>
    break;
 80078c4:	bf00      	nop
  }

  return ret;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	889b      	ldrh	r3, [r3, #4]
 80078e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d004      	beq.n	80078fa <USBD_StdEPReq+0x2a>
 80078f0:	2b40      	cmp	r3, #64	; 0x40
 80078f2:	d002      	beq.n	80078fa <USBD_StdEPReq+0x2a>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <USBD_StdEPReq+0x3e>
 80078f8:	e135      	b.n	8007b66 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	6839      	ldr	r1, [r7, #0]
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	4798      	blx	r3
 8007908:	4603      	mov	r3, r0
 800790a:	73fb      	strb	r3, [r7, #15]
    break;
 800790c:	e130      	b.n	8007b70 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d03e      	beq.n	8007994 <USBD_StdEPReq+0xc4>
 8007916:	2b03      	cmp	r3, #3
 8007918:	d002      	beq.n	8007920 <USBD_StdEPReq+0x50>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d077      	beq.n	8007a0e <USBD_StdEPReq+0x13e>
 800791e:	e11c      	b.n	8007b5a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007926:	2b02      	cmp	r3, #2
 8007928:	d002      	beq.n	8007930 <USBD_StdEPReq+0x60>
 800792a:	2b03      	cmp	r3, #3
 800792c:	d015      	beq.n	800795a <USBD_StdEPReq+0x8a>
 800792e:	e02b      	b.n	8007988 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00c      	beq.n	8007950 <USBD_StdEPReq+0x80>
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b80      	cmp	r3, #128	; 0x80
 800793a:	d009      	beq.n	8007950 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 f97b 	bl	8008c3c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007946:	2180      	movs	r1, #128	; 0x80
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f977 	bl	8008c3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800794e:	e020      	b.n	8007992 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fc38 	bl	80081c8 <USBD_CtlError>
        break;
 8007958:	e01b      	b.n	8007992 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	885b      	ldrh	r3, [r3, #2]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10e      	bne.n	8007980 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <USBD_StdEPReq+0xb0>
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b80      	cmp	r3, #128	; 0x80
 800796c:	d008      	beq.n	8007980 <USBD_StdEPReq+0xb0>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	88db      	ldrh	r3, [r3, #6]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f001 f95e 	bl	8008c3c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fcec 	bl	800835e <USBD_CtlSendStatus>

        break;
 8007986:	e004      	b.n	8007992 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fc1c 	bl	80081c8 <USBD_CtlError>
        break;
 8007990:	bf00      	nop
      }
      break;
 8007992:	e0e7      	b.n	8007b64 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800799a:	2b02      	cmp	r3, #2
 800799c:	d002      	beq.n	80079a4 <USBD_StdEPReq+0xd4>
 800799e:	2b03      	cmp	r3, #3
 80079a0:	d015      	beq.n	80079ce <USBD_StdEPReq+0xfe>
 80079a2:	e02d      	b.n	8007a00 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00c      	beq.n	80079c4 <USBD_StdEPReq+0xf4>
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b80      	cmp	r3, #128	; 0x80
 80079ae:	d009      	beq.n	80079c4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f001 f941 	bl	8008c3c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f93d 	bl	8008c3c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079c2:	e023      	b.n	8007a0c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fbfe 	bl	80081c8 <USBD_CtlError>
        break;
 80079cc:	e01e      	b.n	8007a0c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	885b      	ldrh	r3, [r3, #2]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d119      	bne.n	8007a0a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d004      	beq.n	80079ea <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f948 	bl	8008c7a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fcb7 	bl	800835e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	4798      	blx	r3
        }
        break;
 80079fe:	e004      	b.n	8007a0a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fbe0 	bl	80081c8 <USBD_CtlError>
        break;
 8007a08:	e000      	b.n	8007a0c <USBD_StdEPReq+0x13c>
        break;
 8007a0a:	bf00      	nop
      }
      break;
 8007a0c:	e0aa      	b.n	8007b64 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d002      	beq.n	8007a1e <USBD_StdEPReq+0x14e>
 8007a18:	2b03      	cmp	r3, #3
 8007a1a:	d032      	beq.n	8007a82 <USBD_StdEPReq+0x1b2>
 8007a1c:	e097      	b.n	8007b4e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d007      	beq.n	8007a34 <USBD_StdEPReq+0x164>
 8007a24:	7bbb      	ldrb	r3, [r7, #14]
 8007a26:	2b80      	cmp	r3, #128	; 0x80
 8007a28:	d004      	beq.n	8007a34 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fbcb 	bl	80081c8 <USBD_CtlError>
          break;
 8007a32:	e091      	b.n	8007b58 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	da0b      	bge.n	8007a54 <USBD_StdEPReq+0x184>
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a42:	4613      	mov	r3, r2
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	3310      	adds	r3, #16
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4413      	add	r3, r2
 8007a50:	3304      	adds	r3, #4
 8007a52:	e00b      	b.n	8007a6c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4413      	add	r3, r2
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2202      	movs	r2, #2
 8007a78:	4619      	mov	r1, r3
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fc15 	bl	80082aa <USBD_CtlSendData>
        break;
 8007a80:	e06a      	b.n	8007b58 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007a82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da11      	bge.n	8007aae <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	f003 020f 	and.w	r2, r3, #15
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	3324      	adds	r3, #36	; 0x24
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d117      	bne.n	8007ad4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007aa4:	6839      	ldr	r1, [r7, #0]
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fb8e 	bl	80081c8 <USBD_CtlError>
            break;
 8007aac:	e054      	b.n	8007b58 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	f003 020f 	and.w	r2, r3, #15
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fb7b 	bl	80081c8 <USBD_CtlError>
            break;
 8007ad2:	e041      	b.n	8007b58 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da0b      	bge.n	8007af4 <USBD_StdEPReq+0x224>
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	3310      	adds	r3, #16
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	4413      	add	r3, r2
 8007af0:	3304      	adds	r3, #4
 8007af2:	e00b      	b.n	8007b0c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d002      	beq.n	8007b1a <USBD_StdEPReq+0x24a>
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b80      	cmp	r3, #128	; 0x80
 8007b18:	d103      	bne.n	8007b22 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	e00e      	b.n	8007b40 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f8c6 	bl	8008cb8 <USBD_LL_IsStallEP>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2201      	movs	r2, #1
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	e002      	b.n	8007b40 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	2202      	movs	r2, #2
 8007b44:	4619      	mov	r1, r3
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fbaf 	bl	80082aa <USBD_CtlSendData>
          break;
 8007b4c:	e004      	b.n	8007b58 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fb39 	bl	80081c8 <USBD_CtlError>
        break;
 8007b56:	bf00      	nop
      }
      break;
 8007b58:	e004      	b.n	8007b64 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fb33 	bl	80081c8 <USBD_CtlError>
      break;
 8007b62:	bf00      	nop
    }
    break;
 8007b64:	e004      	b.n	8007b70 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fb2d 	bl	80081c8 <USBD_CtlError>
    break;
 8007b6e:	bf00      	nop
  }

  return ret;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	885b      	ldrh	r3, [r3, #2]
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	2b06      	cmp	r3, #6
 8007b9e:	f200 8128 	bhi.w	8007df2 <USBD_GetDescriptor+0x276>
 8007ba2:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <USBD_GetDescriptor+0x2c>)
 8007ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba8:	08007bc5 	.word	0x08007bc5
 8007bac:	08007bdd 	.word	0x08007bdd
 8007bb0:	08007c1d 	.word	0x08007c1d
 8007bb4:	08007df3 	.word	0x08007df3
 8007bb8:	08007df3 	.word	0x08007df3
 8007bbc:	08007d93 	.word	0x08007d93
 8007bc0:	08007dbf 	.word	0x08007dbf
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	7c12      	ldrb	r2, [r2, #16]
 8007bd0:	f107 0108 	add.w	r1, r7, #8
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	4798      	blx	r3
 8007bd8:	60f8      	str	r0, [r7, #12]
    break;
 8007bda:	e112      	b.n	8007e02 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	7c1b      	ldrb	r3, [r3, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10d      	bne.n	8007c00 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bec:	f107 0208 	add.w	r2, r7, #8
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
 8007bf4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	2202      	movs	r2, #2
 8007bfc:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007bfe:	e100      	b.n	8007e02 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	f107 0208 	add.w	r2, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3301      	adds	r3, #1
 8007c16:	2202      	movs	r2, #2
 8007c18:	701a      	strb	r2, [r3, #0]
    break;
 8007c1a:	e0f2      	b.n	8007e02 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	885b      	ldrh	r3, [r3, #2]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	f200 80ac 	bhi.w	8007d80 <USBD_GetDescriptor+0x204>
 8007c28:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <USBD_GetDescriptor+0xb4>)
 8007c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2e:	bf00      	nop
 8007c30:	08007c49 	.word	0x08007c49
 8007c34:	08007c7d 	.word	0x08007c7d
 8007c38:	08007cb1 	.word	0x08007cb1
 8007c3c:	08007ce5 	.word	0x08007ce5
 8007c40:	08007d19 	.word	0x08007d19
 8007c44:	08007d4d 	.word	0x08007d4d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7c12      	ldrb	r2, [r2, #16]
 8007c60:	f107 0108 	add.w	r1, r7, #8
 8007c64:	4610      	mov	r0, r2
 8007c66:	4798      	blx	r3
 8007c68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c6a:	e091      	b.n	8007d90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 faaa 	bl	80081c8 <USBD_CtlError>
        err++;
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	3301      	adds	r3, #1
 8007c78:	72fb      	strb	r3, [r7, #11]
      break;
 8007c7a:	e089      	b.n	8007d90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7c12      	ldrb	r2, [r2, #16]
 8007c94:	f107 0108 	add.w	r1, r7, #8
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c9e:	e077      	b.n	8007d90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa90 	bl	80081c8 <USBD_CtlError>
        err++;
 8007ca8:	7afb      	ldrb	r3, [r7, #11]
 8007caa:	3301      	adds	r3, #1
 8007cac:	72fb      	strb	r3, [r7, #11]
      break;
 8007cae:	e06f      	b.n	8007d90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cd2:	e05d      	b.n	8007d90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa76 	bl	80081c8 <USBD_CtlError>
        err++;
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	72fb      	strb	r3, [r7, #11]
      break;
 8007ce2:	e055      	b.n	8007d90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	f107 0108 	add.w	r1, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d06:	e043      	b.n	8007d90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa5c 	bl	80081c8 <USBD_CtlError>
        err++;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	3301      	adds	r3, #1
 8007d14:	72fb      	strb	r3, [r7, #11]
      break;
 8007d16:	e03b      	b.n	8007d90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d1e:	695b      	ldr	r3, [r3, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00b      	beq.n	8007d3c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2a:	695b      	ldr	r3, [r3, #20]
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	7c12      	ldrb	r2, [r2, #16]
 8007d30:	f107 0108 	add.w	r1, r7, #8
 8007d34:	4610      	mov	r0, r2
 8007d36:	4798      	blx	r3
 8007d38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d3a:	e029      	b.n	8007d90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d3c:	6839      	ldr	r1, [r7, #0]
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa42 	bl	80081c8 <USBD_CtlError>
        err++;
 8007d44:	7afb      	ldrb	r3, [r7, #11]
 8007d46:	3301      	adds	r3, #1
 8007d48:	72fb      	strb	r3, [r7, #11]
      break;
 8007d4a:	e021      	b.n	8007d90 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00b      	beq.n	8007d70 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	7c12      	ldrb	r2, [r2, #16]
 8007d64:	f107 0108 	add.w	r1, r7, #8
 8007d68:	4610      	mov	r0, r2
 8007d6a:	4798      	blx	r3
 8007d6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d6e:	e00f      	b.n	8007d90 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fa28 	bl	80081c8 <USBD_CtlError>
        err++;
 8007d78:	7afb      	ldrb	r3, [r7, #11]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d7e:	e007      	b.n	8007d90 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa20 	bl	80081c8 <USBD_CtlError>
      err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007d8e:	bf00      	nop
    }
    break;
 8007d90:	e037      	b.n	8007e02 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7c1b      	ldrb	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d109      	bne.n	8007dae <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da2:	f107 0208 	add.w	r2, r7, #8
 8007da6:	4610      	mov	r0, r2
 8007da8:	4798      	blx	r3
 8007daa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007dac:	e029      	b.n	8007e02 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007dae:	6839      	ldr	r1, [r7, #0]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f000 fa09 	bl	80081c8 <USBD_CtlError>
      err++;
 8007db6:	7afb      	ldrb	r3, [r7, #11]
 8007db8:	3301      	adds	r3, #1
 8007dba:	72fb      	strb	r3, [r7, #11]
    break;
 8007dbc:	e021      	b.n	8007e02 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7c1b      	ldrb	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10d      	bne.n	8007de2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dce:	f107 0208 	add.w	r2, r7, #8
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	4798      	blx	r3
 8007dd6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	2207      	movs	r2, #7
 8007dde:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007de0:	e00f      	b.n	8007e02 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007de2:	6839      	ldr	r1, [r7, #0]
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f9ef 	bl	80081c8 <USBD_CtlError>
      err++;
 8007dea:	7afb      	ldrb	r3, [r7, #11]
 8007dec:	3301      	adds	r3, #1
 8007dee:	72fb      	strb	r3, [r7, #11]
    break;
 8007df0:	e007      	b.n	8007e02 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f9e7 	bl	80081c8 <USBD_CtlError>
    err++;
 8007dfa:	7afb      	ldrb	r3, [r7, #11]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	72fb      	strb	r3, [r7, #11]
    break;
 8007e00:	bf00      	nop
  }

  if (err != 0U)
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d11e      	bne.n	8007e46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	88db      	ldrh	r3, [r3, #6]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d016      	beq.n	8007e3e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007e10:	893b      	ldrh	r3, [r7, #8]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00e      	beq.n	8007e34 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	88da      	ldrh	r2, [r3, #6]
 8007e1a:	893b      	ldrh	r3, [r7, #8]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	bf28      	it	cs
 8007e20:	4613      	movcs	r3, r2
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e26:	893b      	ldrh	r3, [r7, #8]
 8007e28:	461a      	mov	r2, r3
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fa3c 	bl	80082aa <USBD_CtlSendData>
 8007e32:	e009      	b.n	8007e48 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f9c6 	bl	80081c8 <USBD_CtlError>
 8007e3c:	e004      	b.n	8007e48 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa8d 	bl	800835e <USBD_CtlSendStatus>
 8007e44:	e000      	b.n	8007e48 <USBD_GetDescriptor+0x2cc>
    return;
 8007e46:	bf00      	nop
    }
  }
}
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	889b      	ldrh	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d130      	bne.n	8007ec4 <USBD_SetAddress+0x74>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d12c      	bne.n	8007ec4 <USBD_SetAddress+0x74>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	885b      	ldrh	r3, [r3, #2]
 8007e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e70:	d828      	bhi.n	8007ec4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d104      	bne.n	8007e92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f99c 	bl	80081c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e90:	e01c      	b.n	8007ecc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7bfa      	ldrb	r2, [r7, #15]
 8007e96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 ff36 	bl	8008d10 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa5a 	bl	800835e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb8:	e008      	b.n	8007ecc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec2:	e003      	b.n	8007ecc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f97e 	bl	80081c8 <USBD_CtlError>
  }
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	4b4b      	ldr	r3, [pc, #300]	; (8008018 <USBD_SetConfig+0x144>)
 8007eea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007eec:	4b4a      	ldr	r3, [pc, #296]	; (8008018 <USBD_SetConfig+0x144>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d905      	bls.n	8007f00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 f966 	bl	80081c8 <USBD_CtlError>
    return USBD_FAIL;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e087      	b.n	8008010 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d002      	beq.n	8007f10 <USBD_SetConfig+0x3c>
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d025      	beq.n	8007f5a <USBD_SetConfig+0x86>
 8007f0e:	e071      	b.n	8007ff4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007f10:	4b41      	ldr	r3, [pc, #260]	; (8008018 <USBD_SetConfig+0x144>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01c      	beq.n	8007f52 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007f18:	4b3f      	ldr	r3, [pc, #252]	; (8008018 <USBD_SetConfig+0x144>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f22:	4b3d      	ldr	r3, [pc, #244]	; (8008018 <USBD_SetConfig+0x144>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff f9a7 	bl	800727c <USBD_SetClassConfig>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f944 	bl	80081c8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f40:	e065      	b.n	800800e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fa0b 	bl	800835e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f50:	e05d      	b.n	800800e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa03 	bl	800835e <USBD_CtlSendStatus>
    break;
 8007f58:	e059      	b.n	800800e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007f5a:	4b2f      	ldr	r3, [pc, #188]	; (8008018 <USBD_SetConfig+0x144>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d112      	bne.n	8007f88 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2202      	movs	r2, #2
 8007f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007f6a:	4b2b      	ldr	r3, [pc, #172]	; (8008018 <USBD_SetConfig+0x144>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f74:	4b28      	ldr	r3, [pc, #160]	; (8008018 <USBD_SetConfig+0x144>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff f99a 	bl	80072b4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f9ec 	bl	800835e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007f86:	e042      	b.n	800800e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007f88:	4b23      	ldr	r3, [pc, #140]	; (8008018 <USBD_SetConfig+0x144>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d02a      	beq.n	8007fec <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff f988 	bl	80072b4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007fa4:	4b1c      	ldr	r3, [pc, #112]	; (8008018 <USBD_SetConfig+0x144>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fae:	4b1a      	ldr	r3, [pc, #104]	; (8008018 <USBD_SetConfig+0x144>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f7ff f961 	bl	800727c <USBD_SetClassConfig>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00f      	beq.n	8007fe4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f8fe 	bl	80081c8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	b2db      	uxtb	r3, r3
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff f96d 	bl	80072b4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fe2:	e014      	b.n	800800e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 f9ba 	bl	800835e <USBD_CtlSendStatus>
    break;
 8007fea:	e010      	b.n	800800e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f9b6 	bl	800835e <USBD_CtlSendStatus>
    break;
 8007ff2:	e00c      	b.n	800800e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f8e6 	bl	80081c8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ffc:	4b06      	ldr	r3, [pc, #24]	; (8008018 <USBD_SetConfig+0x144>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff f956 	bl	80072b4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008008:	2303      	movs	r3, #3
 800800a:	73fb      	strb	r3, [r7, #15]
    break;
 800800c:	bf00      	nop
  }

  return ret;
 800800e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3710      	adds	r7, #16
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	200004c0 	.word	0x200004c0

0800801c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	88db      	ldrh	r3, [r3, #6]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d004      	beq.n	8008038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f8c9 	bl	80081c8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008036:	e021      	b.n	800807c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800803e:	2b01      	cmp	r3, #1
 8008040:	db17      	blt.n	8008072 <USBD_GetConfig+0x56>
 8008042:	2b02      	cmp	r3, #2
 8008044:	dd02      	ble.n	800804c <USBD_GetConfig+0x30>
 8008046:	2b03      	cmp	r3, #3
 8008048:	d00b      	beq.n	8008062 <USBD_GetConfig+0x46>
 800804a:	e012      	b.n	8008072 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3308      	adds	r3, #8
 8008056:	2201      	movs	r2, #1
 8008058:	4619      	mov	r1, r3
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f925 	bl	80082aa <USBD_CtlSendData>
      break;
 8008060:	e00c      	b.n	800807c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	3304      	adds	r3, #4
 8008066:	2201      	movs	r2, #1
 8008068:	4619      	mov	r1, r3
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f91d 	bl	80082aa <USBD_CtlSendData>
      break;
 8008070:	e004      	b.n	800807c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008072:	6839      	ldr	r1, [r7, #0]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f8a7 	bl	80081c8 <USBD_CtlError>
      break;
 800807a:	bf00      	nop
}
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	3b01      	subs	r3, #1
 8008096:	2b02      	cmp	r3, #2
 8008098:	d81e      	bhi.n	80080d8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	88db      	ldrh	r3, [r3, #6]
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d004      	beq.n	80080ac <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f88f 	bl	80081c8 <USBD_CtlError>
      break;
 80080aa:	e01a      	b.n	80080e2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f043 0202 	orr.w	r2, r3, #2
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	330c      	adds	r3, #12
 80080cc:	2202      	movs	r2, #2
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f8ea 	bl	80082aa <USBD_CtlSendData>
    break;
 80080d6:	e004      	b.n	80080e2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80080d8:	6839      	ldr	r1, [r7, #0]
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f874 	bl	80081c8 <USBD_CtlError>
    break;
 80080e0:	bf00      	nop
  }
}
 80080e2:	bf00      	nop
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	885b      	ldrh	r3, [r3, #2]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d106      	bne.n	800810a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f92a 	bl	800835e <USBD_CtlSendStatus>
  }
}
 800810a:	bf00      	nop
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008122:	3b01      	subs	r3, #1
 8008124:	2b02      	cmp	r3, #2
 8008126:	d80b      	bhi.n	8008140 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	885b      	ldrh	r3, [r3, #2]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d10c      	bne.n	800814a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f910 	bl	800835e <USBD_CtlSendStatus>
      }
      break;
 800813e:	e004      	b.n	800814a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f840 	bl	80081c8 <USBD_CtlError>
      break;
 8008148:	e000      	b.n	800814c <USBD_ClrFeature+0x3a>
      break;
 800814a:	bf00      	nop
  }
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	781a      	ldrb	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	3301      	adds	r3, #1
 800816e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	781a      	ldrb	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	3301      	adds	r3, #1
 800817c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7ff fad3 	bl	800772a <SWAPBYTE>
 8008184:	4603      	mov	r3, r0
 8008186:	461a      	mov	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	3301      	adds	r3, #1
 8008196:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7ff fac6 	bl	800772a <SWAPBYTE>
 800819e:	4603      	mov	r3, r0
 80081a0:	461a      	mov	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f7ff fab9 	bl	800772a <SWAPBYTE>
 80081b8:	4603      	mov	r3, r0
 80081ba:	461a      	mov	r2, r3
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	80da      	strh	r2, [r3, #6]
}
 80081c0:	bf00      	nop
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80081d2:	2180      	movs	r1, #128	; 0x80
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fd31 	bl	8008c3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80081da:	2100      	movs	r1, #0
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fd2d 	bl	8008c3c <USBD_LL_StallEP>
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b086      	sub	sp, #24
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d036      	beq.n	800826e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008204:	6938      	ldr	r0, [r7, #16]
 8008206:	f000 f836 	bl	8008276 <USBD_GetLen>
 800820a:	4603      	mov	r3, r0
 800820c:	3301      	adds	r3, #1
 800820e:	b29b      	uxth	r3, r3
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008218:	7dfb      	ldrb	r3, [r7, #23]
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	4413      	add	r3, r2
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	7812      	ldrb	r2, [r2, #0]
 8008222:	701a      	strb	r2, [r3, #0]
  idx++;
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	3301      	adds	r3, #1
 8008228:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800822a:	7dfb      	ldrb	r3, [r7, #23]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	4413      	add	r3, r2
 8008230:	2203      	movs	r2, #3
 8008232:	701a      	strb	r2, [r3, #0]
  idx++;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
 8008236:	3301      	adds	r3, #1
 8008238:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800823a:	e013      	b.n	8008264 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
 800823e:	68ba      	ldr	r2, [r7, #8]
 8008240:	4413      	add	r3, r2
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	7812      	ldrb	r2, [r2, #0]
 8008246:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	3301      	adds	r3, #1
 800824c:	613b      	str	r3, [r7, #16]
    idx++;
 800824e:	7dfb      	ldrb	r3, [r7, #23]
 8008250:	3301      	adds	r3, #1
 8008252:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	4413      	add	r3, r2
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
    idx++;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	3301      	adds	r3, #1
 8008262:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e7      	bne.n	800823c <USBD_GetString+0x52>
 800826c:	e000      	b.n	8008270 <USBD_GetString+0x86>
    return;
 800826e:	bf00      	nop
  }
}
 8008270:	3718      	adds	r7, #24
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008276:	b480      	push	{r7}
 8008278:	b085      	sub	sp, #20
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008286:	e005      	b.n	8008294 <USBD_GetLen+0x1e>
  {
    len++;
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	3301      	adds	r3, #1
 800828c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	3301      	adds	r3, #1
 8008292:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d1f5      	bne.n	8008288 <USBD_GetLen+0x12>
  }

  return len;
 800829c:	7bfb      	ldrb	r3, [r7, #15]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	60f8      	str	r0, [r7, #12]
 80082b2:	60b9      	str	r1, [r7, #8]
 80082b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	2100      	movs	r1, #0
 80082d0:	68f8      	ldr	r0, [r7, #12]
 80082d2:	f000 fd3c 	bl	8008d4e <USBD_LL_Transmit>

  return USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	2100      	movs	r1, #0
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fd2b 	bl	8008d4e <USBD_LL_Transmit>

  return USBD_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2203      	movs	r2, #3
 8008312:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	2100      	movs	r1, #0
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fd2f 	bl	8008d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	2100      	movs	r1, #0
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fd1e 	bl	8008d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2204      	movs	r2, #4
 800836a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800836e:	2300      	movs	r3, #0
 8008370:	2200      	movs	r2, #0
 8008372:	2100      	movs	r1, #0
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fcea 	bl	8008d4e <USBD_LL_Transmit>

  return USBD_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2205      	movs	r2, #5
 8008390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008394:	2300      	movs	r3, #0
 8008396:	2200      	movs	r2, #0
 8008398:	2100      	movs	r1, #0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fcf8 	bl	8008d90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
	...

080083ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80083b0:	2200      	movs	r2, #0
 80083b2:	4912      	ldr	r1, [pc, #72]	; (80083fc <MX_USB_DEVICE_Init+0x50>)
 80083b4:	4812      	ldr	r0, [pc, #72]	; (8008400 <MX_USB_DEVICE_Init+0x54>)
 80083b6:	f7fe fef3 	bl	80071a0 <USBD_Init>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d001      	beq.n	80083c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80083c0:	f7f8 fee0 	bl	8001184 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80083c4:	490f      	ldr	r1, [pc, #60]	; (8008404 <MX_USB_DEVICE_Init+0x58>)
 80083c6:	480e      	ldr	r0, [pc, #56]	; (8008400 <MX_USB_DEVICE_Init+0x54>)
 80083c8:	f7fe ff20 	bl	800720c <USBD_RegisterClass>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083d2:	f7f8 fed7 	bl	8001184 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083d6:	490c      	ldr	r1, [pc, #48]	; (8008408 <MX_USB_DEVICE_Init+0x5c>)
 80083d8:	4809      	ldr	r0, [pc, #36]	; (8008400 <MX_USB_DEVICE_Init+0x54>)
 80083da:	f7fe fe45 	bl	8007068 <USBD_CDC_RegisterInterface>
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083e4:	f7f8 fece 	bl	8001184 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083e8:	4805      	ldr	r0, [pc, #20]	; (8008400 <MX_USB_DEVICE_Init+0x54>)
 80083ea:	f7fe ff30 	bl	800724e <USBD_Start>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083f4:	f7f8 fec6 	bl	8001184 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083f8:	bf00      	nop
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	20000130 	.word	0x20000130
 8008400:	20000ac4 	.word	0x20000ac4
 8008404:	20000018 	.word	0x20000018
 8008408:	2000011c 	.word	0x2000011c

0800840c <__NVIC_SystemReset>:
{
 800840c:	b480      	push	{r7}
 800840e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008410:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <__NVIC_SystemReset+0x20>)
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800841c:	4903      	ldr	r1, [pc, #12]	; (800842c <__NVIC_SystemReset+0x20>)
 800841e:	4b04      	ldr	r3, [pc, #16]	; (8008430 <__NVIC_SystemReset+0x24>)
 8008420:	4313      	orrs	r3, r2
 8008422:	60cb      	str	r3, [r1, #12]
 8008424:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008428:	bf00      	nop
 800842a:	e7fd      	b.n	8008428 <__NVIC_SystemReset+0x1c>
 800842c:	e000ed00 	.word	0xe000ed00
 8008430:	05fa0004 	.word	0x05fa0004

08008434 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008438:	2200      	movs	r2, #0
 800843a:	4905      	ldr	r1, [pc, #20]	; (8008450 <CDC_Init_FS+0x1c>)
 800843c:	4805      	ldr	r0, [pc, #20]	; (8008454 <CDC_Init_FS+0x20>)
 800843e:	f7fe fe28 	bl	8007092 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008442:	4905      	ldr	r1, [pc, #20]	; (8008458 <CDC_Init_FS+0x24>)
 8008444:	4803      	ldr	r0, [pc, #12]	; (8008454 <CDC_Init_FS+0x20>)
 8008446:	f7fe fe3d 	bl	80070c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800844a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800844c:	4618      	mov	r0, r3
 800844e:	bd80      	pop	{r7, pc}
 8008450:	20000db4 	.word	0x20000db4
 8008454:	20000ac4 	.word	0x20000ac4
 8008458:	20000d94 	.word	0x20000d94

0800845c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800845c:	b480      	push	{r7}
 800845e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008460:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008462:	4618      	mov	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	4603      	mov	r3, r0
 8008474:	6039      	str	r1, [r7, #0]
 8008476:	71fb      	strb	r3, [r7, #7]
 8008478:	4613      	mov	r3, r2
 800847a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800847c:	79fb      	ldrb	r3, [r7, #7]
 800847e:	2b23      	cmp	r3, #35	; 0x23
 8008480:	d84a      	bhi.n	8008518 <CDC_Control_FS+0xac>
 8008482:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <CDC_Control_FS+0x1c>)
 8008484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008488:	08008519 	.word	0x08008519
 800848c:	08008519 	.word	0x08008519
 8008490:	08008519 	.word	0x08008519
 8008494:	08008519 	.word	0x08008519
 8008498:	08008519 	.word	0x08008519
 800849c:	08008519 	.word	0x08008519
 80084a0:	08008519 	.word	0x08008519
 80084a4:	08008519 	.word	0x08008519
 80084a8:	08008519 	.word	0x08008519
 80084ac:	08008519 	.word	0x08008519
 80084b0:	08008519 	.word	0x08008519
 80084b4:	08008519 	.word	0x08008519
 80084b8:	08008519 	.word	0x08008519
 80084bc:	08008519 	.word	0x08008519
 80084c0:	08008519 	.word	0x08008519
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008519 	.word	0x08008519
 80084cc:	08008519 	.word	0x08008519
 80084d0:	08008519 	.word	0x08008519
 80084d4:	08008519 	.word	0x08008519
 80084d8:	08008519 	.word	0x08008519
 80084dc:	08008519 	.word	0x08008519
 80084e0:	08008519 	.word	0x08008519
 80084e4:	08008519 	.word	0x08008519
 80084e8:	08008519 	.word	0x08008519
 80084ec:	08008519 	.word	0x08008519
 80084f0:	08008519 	.word	0x08008519
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008519 	.word	0x08008519
 80084fc:	08008519 	.word	0x08008519
 8008500:	08008519 	.word	0x08008519
 8008504:	08008519 	.word	0x08008519
 8008508:	08008519 	.word	0x08008519
 800850c:	08008519 	.word	0x08008519
 8008510:	08008519 	.word	0x08008519
 8008514:	08008519 	.word	0x08008519
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008518:	bf00      	nop
  }

  return (USBD_OK);
 800851a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800851c:	4618      	mov	r0, r3
 800851e:	370c      	adds	r7, #12
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b084      	sub	sp, #16
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	switch(Buf[0]){
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	3b6d      	subs	r3, #109	; 0x6d
 8008538:	2b05      	cmp	r3, #5
 800853a:	d831      	bhi.n	80085a0 <CDC_Receive_FS+0x78>
 800853c:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <CDC_Receive_FS+0x1c>)
 800853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008542:	bf00      	nop
 8008544:	08008571 	.word	0x08008571
 8008548:	0800855d 	.word	0x0800855d
 800854c:	080085a1 	.word	0x080085a1
 8008550:	08008565 	.word	0x08008565
 8008554:	080085a1 	.word	0x080085a1
 8008558:	0800856d 	.word	0x0800856d
  	  case 'n':
  		  State = STATE_DATA_SEND;
 800855c:	4b17      	ldr	r3, [pc, #92]	; (80085bc <CDC_Receive_FS+0x94>)
 800855e:	2208      	movs	r2, #8
 8008560:	701a      	strb	r2, [r3, #0]
  		  break;
 8008562:	e01e      	b.n	80085a2 <CDC_Receive_FS+0x7a>
  	  case 'p':
  		  State = STATE_DATA_STOP;
 8008564:	4b15      	ldr	r3, [pc, #84]	; (80085bc <CDC_Receive_FS+0x94>)
 8008566:	2209      	movs	r2, #9
 8008568:	701a      	strb	r2, [r3, #0]
  		  break;
 800856a:	e01a      	b.n	80085a2 <CDC_Receive_FS+0x7a>
  	  case 'r':
  		  NVIC_SystemReset();
 800856c:	f7ff ff4e 	bl	800840c <__NVIC_SystemReset>
  		  break;
  	  case 'm':
  		  for(int i = 0; i < 5; i++){
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	e00d      	b.n	8008592 <CDC_Receive_FS+0x6a>
  			mconfig[i] = Buf[1+i];
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	461a      	mov	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4413      	add	r3, r2
 8008580:	7819      	ldrb	r1, [r3, #0]
 8008582:	4a0f      	ldr	r2, [pc, #60]	; (80085c0 <CDC_Receive_FS+0x98>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	460a      	mov	r2, r1
 800858a:	701a      	strb	r2, [r3, #0]
  		  for(int i = 0; i < 5; i++){
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b04      	cmp	r3, #4
 8008596:	ddee      	ble.n	8008576 <CDC_Receive_FS+0x4e>
  		  }
  		  Act_State = STATE_ACT_UPDATE;
 8008598:	4b0a      	ldr	r3, [pc, #40]	; (80085c4 <CDC_Receive_FS+0x9c>)
 800859a:	220a      	movs	r2, #10
 800859c:	701a      	strb	r2, [r3, #0]
  		  break;
 800859e:	e000      	b.n	80085a2 <CDC_Receive_FS+0x7a>
  	  default:
  		  break;
 80085a0:	bf00      	nop
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80085a2:	6879      	ldr	r1, [r7, #4]
 80085a4:	4808      	ldr	r0, [pc, #32]	; (80085c8 <CDC_Receive_FS+0xa0>)
 80085a6:	f7fe fd8d 	bl	80070c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80085aa:	4807      	ldr	r0, [pc, #28]	; (80085c8 <CDC_Receive_FS+0xa0>)
 80085ac:	f7fe fdce 	bl	800714c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80085b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200004c1 	.word	0x200004c1
 80085c0:	20000dd4 	.word	0x20000dd4
 80085c4:	200004c2 	.word	0x200004c2
 80085c8:	20000ac4 	.word	0x20000ac4

080085cc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085dc:	4b0f      	ldr	r3, [pc, #60]	; (800861c <CDC_Transmit_FS+0x50>)
 80085de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085e2:	60bb      	str	r3, [r7, #8]
  Transmit_flag = 1;
 80085e4:	4b0e      	ldr	r3, [pc, #56]	; (8008620 <CDC_Transmit_FS+0x54>)
 80085e6:	2201      	movs	r2, #1
 80085e8:	701a      	strb	r2, [r3, #0]
  if (hcdc->TxState != 0){
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <CDC_Transmit_FS+0x30>
    //return USBD_BUSY;
	hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085f4:	4b09      	ldr	r3, [pc, #36]	; (800861c <CDC_Transmit_FS+0x50>)
 80085f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085fa:	60bb      	str	r3, [r7, #8]
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085fc:	887b      	ldrh	r3, [r7, #2]
 80085fe:	461a      	mov	r2, r3
 8008600:	6879      	ldr	r1, [r7, #4]
 8008602:	4806      	ldr	r0, [pc, #24]	; (800861c <CDC_Transmit_FS+0x50>)
 8008604:	f7fe fd45 	bl	8007092 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008608:	4804      	ldr	r0, [pc, #16]	; (800861c <CDC_Transmit_FS+0x50>)
 800860a:	f7fe fd6f 	bl	80070ec <USBD_CDC_TransmitPacket>
 800860e:	4603      	mov	r3, r0
 8008610:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008612:	7bfb      	ldrb	r3, [r7, #15]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20000ac4 	.word	0x20000ac4
 8008620:	200004cc 	.word	0x200004cc

08008624 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	4613      	mov	r3, r2
 8008630:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  Transmit_flag = 0;
 8008636:	4b05      	ldr	r3, [pc, #20]	; (800864c <CDC_TransmitCplt_FS+0x28>)
 8008638:	2200      	movs	r2, #0
 800863a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 13 */
  return result;
 800863c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008640:	4618      	mov	r0, r3
 8008642:	371c      	adds	r7, #28
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	200004cc 	.word	0x200004cc

08008650 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2212      	movs	r2, #18
 8008660:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008662:	4b03      	ldr	r3, [pc, #12]	; (8008670 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	2000014c 	.word	0x2000014c

08008674 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	6039      	str	r1, [r7, #0]
 800867e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2204      	movs	r2, #4
 8008684:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008686:	4b03      	ldr	r3, [pc, #12]	; (8008694 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	20000160 	.word	0x20000160

08008698 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d105      	bne.n	80086b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4907      	ldr	r1, [pc, #28]	; (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
 80086ae:	4808      	ldr	r0, [pc, #32]	; (80086d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086b0:	f7ff fd9b 	bl	80081ea <USBD_GetString>
 80086b4:	e004      	b.n	80086c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	4904      	ldr	r1, [pc, #16]	; (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
 80086ba:	4805      	ldr	r0, [pc, #20]	; (80086d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80086bc:	f7ff fd95 	bl	80081ea <USBD_GetString>
  }
  return USBD_StrDesc;
 80086c0:	4b02      	ldr	r3, [pc, #8]	; (80086cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20000ddc 	.word	0x20000ddc
 80086d0:	0800e7c0 	.word	0x0800e7c0

080086d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	4603      	mov	r3, r0
 80086dc:	6039      	str	r1, [r7, #0]
 80086de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	4904      	ldr	r1, [pc, #16]	; (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086e4:	4804      	ldr	r0, [pc, #16]	; (80086f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086e6:	f7ff fd80 	bl	80081ea <USBD_GetString>
  return USBD_StrDesc;
 80086ea:	4b02      	ldr	r3, [pc, #8]	; (80086f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3708      	adds	r7, #8
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000ddc 	.word	0x20000ddc
 80086f8:	0800e7d8 	.word	0x0800e7d8

080086fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	6039      	str	r1, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	221a      	movs	r2, #26
 800870c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800870e:	f000 f843 	bl	8008798 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008712:	4b02      	ldr	r3, [pc, #8]	; (800871c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000164 	.word	0x20000164

08008720 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4907      	ldr	r1, [pc, #28]	; (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008736:	4808      	ldr	r0, [pc, #32]	; (8008758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008738:	f7ff fd57 	bl	80081ea <USBD_GetString>
 800873c:	e004      	b.n	8008748 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4904      	ldr	r1, [pc, #16]	; (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008742:	4805      	ldr	r0, [pc, #20]	; (8008758 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008744:	f7ff fd51 	bl	80081ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008748:	4b02      	ldr	r3, [pc, #8]	; (8008754 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000ddc 	.word	0x20000ddc
 8008758:	0800e7ec 	.word	0x0800e7ec

0800875c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d105      	bne.n	800877a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4907      	ldr	r1, [pc, #28]	; (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008772:	4808      	ldr	r0, [pc, #32]	; (8008794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008774:	f7ff fd39 	bl	80081ea <USBD_GetString>
 8008778:	e004      	b.n	8008784 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	4904      	ldr	r1, [pc, #16]	; (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800877e:	4805      	ldr	r0, [pc, #20]	; (8008794 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008780:	f7ff fd33 	bl	80081ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000ddc 	.word	0x20000ddc
 8008794:	0800e7f8 	.word	0x0800e7f8

08008798 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <Get_SerialNum+0x44>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80087a4:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <Get_SerialNum+0x48>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80087aa:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <Get_SerialNum+0x4c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4413      	add	r3, r2
 80087b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d009      	beq.n	80087d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80087be:	2208      	movs	r2, #8
 80087c0:	4909      	ldr	r1, [pc, #36]	; (80087e8 <Get_SerialNum+0x50>)
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f000 f814 	bl	80087f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087c8:	2204      	movs	r2, #4
 80087ca:	4908      	ldr	r1, [pc, #32]	; (80087ec <Get_SerialNum+0x54>)
 80087cc:	68b8      	ldr	r0, [r7, #8]
 80087ce:	f000 f80f 	bl	80087f0 <IntToUnicode>
  }
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	1fff7a10 	.word	0x1fff7a10
 80087e0:	1fff7a14 	.word	0x1fff7a14
 80087e4:	1fff7a18 	.word	0x1fff7a18
 80087e8:	20000166 	.word	0x20000166
 80087ec:	20000176 	.word	0x20000176

080087f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	4613      	mov	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087fe:	2300      	movs	r3, #0
 8008800:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008802:	2300      	movs	r3, #0
 8008804:	75fb      	strb	r3, [r7, #23]
 8008806:	e027      	b.n	8008858 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	0f1b      	lsrs	r3, r3, #28
 800880c:	2b09      	cmp	r3, #9
 800880e:	d80b      	bhi.n	8008828 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	0f1b      	lsrs	r3, r3, #28
 8008814:	b2da      	uxtb	r2, r3
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	4619      	mov	r1, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	440b      	add	r3, r1
 8008820:	3230      	adds	r2, #48	; 0x30
 8008822:	b2d2      	uxtb	r2, r2
 8008824:	701a      	strb	r2, [r3, #0]
 8008826:	e00a      	b.n	800883e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	0f1b      	lsrs	r3, r3, #28
 800882c:	b2da      	uxtb	r2, r3
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	4619      	mov	r1, r3
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	440b      	add	r3, r1
 8008838:	3237      	adds	r2, #55	; 0x37
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	011b      	lsls	r3, r3, #4
 8008842:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008844:	7dfb      	ldrb	r3, [r7, #23]
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	3301      	adds	r3, #1
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	4413      	add	r3, r2
 800884e:	2200      	movs	r2, #0
 8008850:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008852:	7dfb      	ldrb	r3, [r7, #23]
 8008854:	3301      	adds	r3, #1
 8008856:	75fb      	strb	r3, [r7, #23]
 8008858:	7dfa      	ldrb	r2, [r7, #23]
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	429a      	cmp	r2, r3
 800885e:	d3d3      	bcc.n	8008808 <IntToUnicode+0x18>
  }
}
 8008860:	bf00      	nop
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08a      	sub	sp, #40	; 0x28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008874:	f107 0314 	add.w	r3, r7, #20
 8008878:	2200      	movs	r2, #0
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	605a      	str	r2, [r3, #4]
 800887e:	609a      	str	r2, [r3, #8]
 8008880:	60da      	str	r2, [r3, #12]
 8008882:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800888c:	d13a      	bne.n	8008904 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800888e:	2300      	movs	r3, #0
 8008890:	613b      	str	r3, [r7, #16]
 8008892:	4b1e      	ldr	r3, [pc, #120]	; (800890c <HAL_PCD_MspInit+0xa0>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	4a1d      	ldr	r2, [pc, #116]	; (800890c <HAL_PCD_MspInit+0xa0>)
 8008898:	f043 0301 	orr.w	r3, r3, #1
 800889c:	6313      	str	r3, [r2, #48]	; 0x30
 800889e:	4b1b      	ldr	r3, [pc, #108]	; (800890c <HAL_PCD_MspInit+0xa0>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	613b      	str	r3, [r7, #16]
 80088a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80088aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80088ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088b0:	2302      	movs	r3, #2
 80088b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b4:	2300      	movs	r3, #0
 80088b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088b8:	2303      	movs	r3, #3
 80088ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80088bc:	230a      	movs	r3, #10
 80088be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088c0:	f107 0314 	add.w	r3, r7, #20
 80088c4:	4619      	mov	r1, r3
 80088c6:	4812      	ldr	r0, [pc, #72]	; (8008910 <HAL_PCD_MspInit+0xa4>)
 80088c8:	f7f9 f888 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80088cc:	4b0f      	ldr	r3, [pc, #60]	; (800890c <HAL_PCD_MspInit+0xa0>)
 80088ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d0:	4a0e      	ldr	r2, [pc, #56]	; (800890c <HAL_PCD_MspInit+0xa0>)
 80088d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d6:	6353      	str	r3, [r2, #52]	; 0x34
 80088d8:	2300      	movs	r3, #0
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	4b0b      	ldr	r3, [pc, #44]	; (800890c <HAL_PCD_MspInit+0xa0>)
 80088de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e0:	4a0a      	ldr	r2, [pc, #40]	; (800890c <HAL_PCD_MspInit+0xa0>)
 80088e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088e6:	6453      	str	r3, [r2, #68]	; 0x44
 80088e8:	4b08      	ldr	r3, [pc, #32]	; (800890c <HAL_PCD_MspInit+0xa0>)
 80088ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088f4:	2200      	movs	r2, #0
 80088f6:	2100      	movs	r1, #0
 80088f8:	2043      	movs	r0, #67	; 0x43
 80088fa:	f7f9 f838 	bl	800196e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088fe:	2043      	movs	r0, #67	; 0x43
 8008900:	f7f9 f851 	bl	80019a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008904:	bf00      	nop
 8008906:	3728      	adds	r7, #40	; 0x28
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	40023800 	.word	0x40023800
 8008910:	40020000 	.word	0x40020000

08008914 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fe fcda 	bl	80072e4 <USBD_LL_SetupStage>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	4613      	mov	r3, r2
 8008950:	00db      	lsls	r3, r3, #3
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	440b      	add	r3, r1
 8008958:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	4619      	mov	r1, r3
 8008962:	f7fe fd12 	bl	800738a <USBD_LL_DataOutStage>
}
 8008966:	bf00      	nop
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
 8008976:	460b      	mov	r3, r1
 8008978:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008980:	78fa      	ldrb	r2, [r7, #3]
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	4613      	mov	r3, r2
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	1a9b      	subs	r3, r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	440b      	add	r3, r1
 800898e:	3348      	adds	r3, #72	; 0x48
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	78fb      	ldrb	r3, [r7, #3]
 8008994:	4619      	mov	r1, r3
 8008996:	f7fe fd5b 	bl	8007450 <USBD_LL_DataInStage>
}
 800899a:	bf00      	nop
 800899c:	3708      	adds	r7, #8
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b082      	sub	sp, #8
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe fe5f 	bl	8007674 <USBD_LL_SOF>
}
 80089b6:	bf00      	nop
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b084      	sub	sp, #16
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80089c6:	2301      	movs	r3, #1
 80089c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	2b02      	cmp	r3, #2
 80089d0:	d001      	beq.n	80089d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089d2:	f7f8 fbd7 	bl	8001184 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089dc:	7bfa      	ldrb	r2, [r7, #15]
 80089de:	4611      	mov	r1, r2
 80089e0:	4618      	mov	r0, r3
 80089e2:	f7fe fe0c 	bl	80075fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fe fdc5 	bl	800757c <USBD_LL_Reset>
}
 80089f2:	bf00      	nop
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
	...

080089fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe fe07 	bl	800761e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	6812      	ldr	r2, [r2, #0]
 8008a1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a30:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <HAL_PCD_SuspendCallback+0x48>)
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	4a03      	ldr	r2, [pc, #12]	; (8008a44 <HAL_PCD_SuspendCallback+0x48>)
 8008a36:	f043 0306 	orr.w	r3, r3, #6
 8008a3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a3c:	bf00      	nop
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	e000ed00 	.word	0xe000ed00

08008a48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a56:	4618      	mov	r0, r3
 8008a58:	f7fe fdf6 	bl	8007648 <USBD_LL_Resume>
}
 8008a5c:	bf00      	nop
 8008a5e:	3708      	adds	r7, #8
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	4611      	mov	r1, r2
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fe fe21 	bl	80076c2 <USBD_LL_IsoOUTIncomplete>
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fe02 	bl	80076a8 <USBD_LL_IsoINIncomplete>
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fe0e 	bl	80076dc <USBD_LL_DevConnected>
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7fe fe0b 	bl	80076f2 <USBD_LL_DevDisconnected>
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d13c      	bne.n	8008b6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008af4:	4a20      	ldr	r2, [pc, #128]	; (8008b78 <USBD_LL_Init+0x94>)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a1e      	ldr	r2, [pc, #120]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008b04:	4b1c      	ldr	r3, [pc, #112]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008b0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008b0c:	4b1a      	ldr	r3, [pc, #104]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b0e:	2204      	movs	r2, #4
 8008b10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008b12:	4b19      	ldr	r3, [pc, #100]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b14:	2202      	movs	r2, #2
 8008b16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008b18:	4b17      	ldr	r3, [pc, #92]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b1e:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b20:	2202      	movs	r2, #2
 8008b22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008b24:	4b14      	ldr	r3, [pc, #80]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008b2a:	4b13      	ldr	r3, [pc, #76]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b36:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b3c:	4b0e      	ldr	r3, [pc, #56]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b42:	480d      	ldr	r0, [pc, #52]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b44:	f7fa f899 	bl	8002c7a <HAL_PCD_Init>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b4e:	f7f8 fb19 	bl	8001184 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b52:	2180      	movs	r1, #128	; 0x80
 8008b54:	4808      	ldr	r0, [pc, #32]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b56:	f7fb f9f6 	bl	8003f46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b5a:	2240      	movs	r2, #64	; 0x40
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4806      	ldr	r0, [pc, #24]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b60:	f7fb f9aa 	bl	8003eb8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b64:	2280      	movs	r2, #128	; 0x80
 8008b66:	2101      	movs	r1, #1
 8008b68:	4803      	ldr	r0, [pc, #12]	; (8008b78 <USBD_LL_Init+0x94>)
 8008b6a:	f7fb f9a5 	bl	8003eb8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b6e:	2300      	movs	r3, #0
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	20000fdc 	.word	0x20000fdc

08008b7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b84:	2300      	movs	r3, #0
 8008b86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fa f98e 	bl	8002eb4 <HAL_PCD_Start>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 f92a 	bl	8008df8 <USBD_Get_USB_Status>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b084      	sub	sp, #16
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	70fb      	strb	r3, [r7, #3]
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	70bb      	strb	r3, [r7, #2]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bda:	78bb      	ldrb	r3, [r7, #2]
 8008bdc:	883a      	ldrh	r2, [r7, #0]
 8008bde:	78f9      	ldrb	r1, [r7, #3]
 8008be0:	f7fa fd72 	bl	80036c8 <HAL_PCD_EP_Open>
 8008be4:	4603      	mov	r3, r0
 8008be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f904 	bl	8008df8 <USBD_Get_USB_Status>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c18:	78fa      	ldrb	r2, [r7, #3]
 8008c1a:	4611      	mov	r1, r2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fa fdbb 	bl	8003798 <HAL_PCD_EP_Close>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f000 f8e5 	bl	8008df8 <USBD_Get_USB_Status>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c56:	78fa      	ldrb	r2, [r7, #3]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fa fe93 	bl	8003986 <HAL_PCD_EP_SetStall>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f8c6 	bl	8008df8 <USBD_Get_USB_Status>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	460b      	mov	r3, r1
 8008c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008c94:	78fa      	ldrb	r2, [r7, #3]
 8008c96:	4611      	mov	r1, r2
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fa fed8 	bl	8003a4e <HAL_PCD_EP_ClrStall>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f000 f8a7 	bl	8008df8 <USBD_Get_USB_Status>
 8008caa:	4603      	mov	r3, r0
 8008cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008cca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ccc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	da0b      	bge.n	8008cec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cda:	68f9      	ldr	r1, [r7, #12]
 8008cdc:	4613      	mov	r3, r2
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	1a9b      	subs	r3, r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	440b      	add	r3, r1
 8008ce6:	333e      	adds	r3, #62	; 0x3e
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	e00b      	b.n	8008d04 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cec:	78fb      	ldrb	r3, [r7, #3]
 8008cee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008cf2:	68f9      	ldr	r1, [r7, #12]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	1a9b      	subs	r3, r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008d02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d2a:	78fa      	ldrb	r2, [r7, #3]
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7fa fca5 	bl	800367e <HAL_PCD_SetAddress>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d38:	7bfb      	ldrb	r3, [r7, #15]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f85c 	bl	8008df8 <USBD_Get_USB_Status>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b086      	sub	sp, #24
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d6c:	7af9      	ldrb	r1, [r7, #11]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	f7fa fdbe 	bl	80038f2 <HAL_PCD_EP_Transmit>
 8008d76:	4603      	mov	r3, r0
 8008d78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7a:	7dfb      	ldrb	r3, [r7, #23]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f83b 	bl	8008df8 <USBD_Get_USB_Status>
 8008d82:	4603      	mov	r3, r0
 8008d84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d86:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3718      	adds	r7, #24
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008dae:	7af9      	ldrb	r1, [r7, #11]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	f7fa fd3a 	bl	800382c <HAL_PCD_EP_Receive>
 8008db8:	4603      	mov	r3, r0
 8008dba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dbc:	7dfb      	ldrb	r3, [r7, #23]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 f81a 	bl	8008df8 <USBD_Get_USB_Status>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008dc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3718      	adds	r7, #24
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008de4:	78fa      	ldrb	r2, [r7, #3]
 8008de6:	4611      	mov	r1, r2
 8008de8:	4618      	mov	r0, r3
 8008dea:	f7fa fd6a 	bl	80038c2 <HAL_PCD_EP_GetRxCount>
 8008dee:	4603      	mov	r3, r0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d817      	bhi.n	8008e3c <USBD_Get_USB_Status+0x44>
 8008e0c:	a201      	add	r2, pc, #4	; (adr r2, 8008e14 <USBD_Get_USB_Status+0x1c>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e25 	.word	0x08008e25
 8008e18:	08008e2b 	.word	0x08008e2b
 8008e1c:	08008e31 	.word	0x08008e31
 8008e20:	08008e37 	.word	0x08008e37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
    break;
 8008e28:	e00b      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2e:	e008      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e005      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3a:	e002      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	bf00      	nop
  }
  return usb_status;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <VL53L0X_GetPalErrorString>:
	return Status;
}

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	4603      	mov	r3, r0
 8008e58:	6039      	str	r1, [r7, #0]
 8008e5a:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 8008e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f004 fc14 	bl	800d694 <VL53L0X_get_pal_error_string>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f001 fd1e 	bl	800a8ce <VL53L0X_get_offset_calibration_data_micro_meter>
 8008e92:	4603      	mov	r3, r0
 8008e94:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8008e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <VL53L0X_DataInit>:
	return Status;
}


VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8008ea4:	b5b0      	push	{r4, r5, r7, lr}
 8008ea6:	b096      	sub	sp, #88	; 0x58
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eac:	2300      	movs	r3, #0
 8008eae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8008eb2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d107      	bne.n	8008eca <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2188      	movs	r1, #136	; 0x88
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f004 ff15 	bl	800dcee <VL53L0X_WrByte>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ed8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008ee2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a9e      	ldr	r2, [pc, #632]	; (8009164 <VL53L0X_DataInit+0x2c0>)
 8008eea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a9d      	ldr	r2, [pc, #628]	; (8009168 <VL53L0X_DataInit+0x2c4>)
 8008ef2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008efc:	f107 0310 	add.w	r3, r7, #16
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fab4 	bl	8009470 <VL53L0X_GetDeviceParameters>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8008f0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d112      	bne.n	8008f3c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8008f16:	2300      	movs	r3, #0
 8008f18:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f103 0410 	add.w	r4, r3, #16
 8008f24:	f107 0510 	add.w	r5, r7, #16
 8008f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2264      	movs	r2, #100	; 0x64
 8008f40:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008f4a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008f54:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008f5e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	2180      	movs	r1, #128	; 0x80
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f004 febd 	bl	800dcee <VL53L0X_WrByte>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008f82:	2201      	movs	r2, #1
 8008f84:	21ff      	movs	r1, #255	; 0xff
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f004 feb1 	bl	800dcee <VL53L0X_WrByte>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f94:	4313      	orrs	r3, r2
 8008f96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f004 fea5 	bl	800dcee <VL53L0X_WrByte>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fac:	4313      	orrs	r3, r2
 8008fae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8008fb2:	f107 030f 	add.w	r3, r7, #15
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	2191      	movs	r1, #145	; 0x91
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f004 ff15 	bl	800ddea <VL53L0X_RdByte>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8008fce:	7bfa      	ldrb	r2, [r7, #15]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	2100      	movs	r1, #0
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f004 fe87 	bl	800dcee <VL53L0X_WrByte>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fee:	2200      	movs	r2, #0
 8008ff0:	21ff      	movs	r1, #255	; 0xff
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f004 fe7b 	bl	800dcee <VL53L0X_WrByte>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009000:	4313      	orrs	r3, r2
 8009002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009006:	2200      	movs	r2, #0
 8009008:	2180      	movs	r1, #128	; 0x80
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f004 fe6f 	bl	800dcee <VL53L0X_WrByte>
 8009010:	4603      	mov	r3, r0
 8009012:	461a      	mov	r2, r3
 8009014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009018:	4313      	orrs	r3, r2
 800901a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800901e:	2300      	movs	r3, #0
 8009020:	653b      	str	r3, [r7, #80]	; 0x50
 8009022:	e014      	b.n	800904e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8009024:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009028:	2b00      	cmp	r3, #0
 800902a:	d114      	bne.n	8009056 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800902c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800902e:	b29b      	uxth	r3, r3
 8009030:	2201      	movs	r2, #1
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fd2b 	bl	8009a90 <VL53L0X_SetLimitCheckEnable>
 800903a:	4603      	mov	r3, r0
 800903c:	461a      	mov	r2, r3
 800903e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009042:	4313      	orrs	r3, r2
 8009044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800904a:	3301      	adds	r3, #1
 800904c:	653b      	str	r3, [r7, #80]	; 0x50
 800904e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009050:	2b05      	cmp	r3, #5
 8009052:	dde7      	ble.n	8009024 <VL53L0X_DataInit+0x180>
 8009054:	e000      	b.n	8009058 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8009056:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009058:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800905c:	2b00      	cmp	r3, #0
 800905e:	d107      	bne.n	8009070 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009060:	2200      	movs	r2, #0
 8009062:	2102      	movs	r1, #2
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 fd13 	bl	8009a90 <VL53L0X_SetLimitCheckEnable>
 800906a:	4603      	mov	r3, r0
 800906c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009070:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009074:	2b00      	cmp	r3, #0
 8009076:	d107      	bne.n	8009088 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009078:	2200      	movs	r2, #0
 800907a:	2103      	movs	r1, #3
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 fd07 	bl	8009a90 <VL53L0X_SetLimitCheckEnable>
 8009082:	4603      	mov	r3, r0
 8009084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009088:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800908c:	2b00      	cmp	r3, #0
 800908e:	d107      	bne.n	80090a0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009090:	2200      	movs	r2, #0
 8009092:	2104      	movs	r1, #4
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 fcfb 	bl	8009a90 <VL53L0X_SetLimitCheckEnable>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80090a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d107      	bne.n	80090b8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80090a8:	2200      	movs	r2, #0
 80090aa:	2105      	movs	r1, #5
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fcef 	bl	8009a90 <VL53L0X_SetLimitCheckEnable>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80090b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d108      	bne.n	80090d2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80090c0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80090c4:	2100      	movs	r1, #0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fd92 	bl	8009bf0 <VL53L0X_SetLimitCheckValue>
 80090cc:	4603      	mov	r3, r0
 80090ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80090d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d108      	bne.n	80090ec <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80090da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80090de:	2101      	movs	r1, #1
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 fd85 	bl	8009bf0 <VL53L0X_SetLimitCheckValue>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80090ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d108      	bne.n	8009106 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80090f4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80090f8:	2102      	movs	r1, #2
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fd78 	bl	8009bf0 <VL53L0X_SetLimitCheckValue>
 8009100:	4603      	mov	r3, r0
 8009102:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009106:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800910a:	2b00      	cmp	r3, #0
 800910c:	d107      	bne.n	800911e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800910e:	2200      	movs	r2, #0
 8009110:	2103      	movs	r1, #3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fd6c 	bl	8009bf0 <VL53L0X_SetLimitCheckValue>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800911e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009122:	2b00      	cmp	r3, #0
 8009124:	d10f      	bne.n	8009146 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	22ff      	movs	r2, #255	; 0xff
 800912a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800912e:	22ff      	movs	r2, #255	; 0xff
 8009130:	2101      	movs	r1, #1
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f004 fddb 	bl	800dcee <VL53L0X_WrByte>
 8009138:	4603      	mov	r3, r0
 800913a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2201      	movs	r2, #1
 8009142:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009146:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800914a:	2b00      	cmp	r3, #0
 800914c:	d103      	bne.n	8009156 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8009156:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800915a:	4618      	mov	r0, r3
 800915c:	3758      	adds	r7, #88	; 0x58
 800915e:	46bd      	mov	sp, r7
 8009160:	bdb0      	pop	{r4, r5, r7, pc}
 8009162:	bf00      	nop
 8009164:	00016b85 	.word	0x00016b85
 8009168:	000970a4 	.word	0x000970a4

0800916c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800916c:	b5b0      	push	{r4, r5, r7, lr}
 800916e:	b09e      	sub	sp, #120	; 0x78
 8009170:	af02      	add	r7, sp, #8
 8009172:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009174:	2300      	movs	r3, #0
 8009176:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800917a:	f107 031c 	add.w	r3, r7, #28
 800917e:	2240      	movs	r2, #64	; 0x40
 8009180:	2100      	movs	r1, #0
 8009182:	4618      	mov	r0, r3
 8009184:	f004 fedf 	bl	800df46 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009190:	2300      	movs	r3, #0
 8009192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800919a:	2300      	movs	r3, #0
 800919c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800919e:	2300      	movs	r3, #0
 80091a0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80091a8:	2101      	movs	r1, #1
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f002 fad2 	bl	800b754 <VL53L0X_get_info_from_device>
 80091b0:	4603      	mov	r3, r0
 80091b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80091bc:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80091c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80091c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d80d      	bhi.n	80091ec <VL53L0X_StaticInit+0x80>
 80091d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d102      	bne.n	80091de <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80091d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091da:	2b20      	cmp	r3, #32
 80091dc:	d806      	bhi.n	80091ec <VL53L0X_StaticInit+0x80>
 80091de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d10e      	bne.n	8009204 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80091e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091e8:	2b0c      	cmp	r3, #12
 80091ea:	d90b      	bls.n	8009204 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80091ec:	f107 0218 	add.w	r2, r7, #24
 80091f0:	f107 0314 	add.w	r3, r7, #20
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 fd64 	bl	800acc4 <VL53L0X_perform_ref_spad_management>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8009202:	e009      	b.n	8009218 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8009204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009208:	461a      	mov	r2, r3
 800920a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f001 ff65 	bl	800b0dc <VL53L0X_set_reference_spads>
 8009212:	4603      	mov	r3, r0
 8009214:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009218:	4b94      	ldr	r3, [pc, #592]	; (800946c <VL53L0X_StaticInit+0x300>)
 800921a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800921c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009220:	2b00      	cmp	r3, #0
 8009222:	d10f      	bne.n	8009244 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800922a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800922e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009232:	2b00      	cmp	r3, #0
 8009234:	d104      	bne.n	8009240 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800923c:	66bb      	str	r3, [r7, #104]	; 0x68
 800923e:	e001      	b.n	8009244 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009240:	4b8a      	ldr	r3, [pc, #552]	; (800946c <VL53L0X_StaticInit+0x300>)
 8009242:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009244:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800924c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f003 fb9c 	bl	800c98c <VL53L0X_load_tuning_settings>
 8009254:	4603      	mov	r3, r0
 8009256:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800925a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009262:	2300      	movs	r3, #0
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	2304      	movs	r3, #4
 8009268:	2200      	movs	r2, #0
 800926a:	2100      	movs	r1, #0
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 f95d 	bl	800a52c <VL53L0X_SetGpioConfig>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009278:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800927c:	2b00      	cmp	r3, #0
 800927e:	d121      	bne.n	80092c4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009280:	2201      	movs	r2, #1
 8009282:	21ff      	movs	r1, #255	; 0xff
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f004 fd32 	bl	800dcee <VL53L0X_WrByte>
 800928a:	4603      	mov	r3, r0
 800928c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009290:	f107 031a 	add.w	r3, r7, #26
 8009294:	461a      	mov	r2, r3
 8009296:	2184      	movs	r1, #132	; 0x84
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f004 fdc5 	bl	800de28 <VL53L0X_RdWord>
 800929e:	4603      	mov	r3, r0
 80092a0:	461a      	mov	r2, r3
 80092a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80092a6:	4313      	orrs	r3, r2
 80092a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80092ac:	2200      	movs	r2, #0
 80092ae:	21ff      	movs	r1, #255	; 0xff
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f004 fd1c 	bl	800dcee <VL53L0X_WrByte>
 80092b6:	4603      	mov	r3, r0
 80092b8:	461a      	mov	r2, r3
 80092ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80092be:	4313      	orrs	r3, r2
 80092c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80092c4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d105      	bne.n	80092d8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80092cc:	8b7b      	ldrh	r3, [r7, #26]
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	461a      	mov	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80092d8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d108      	bne.n	80092f2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80092e0:	f107 031c 	add.w	r3, r7, #28
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f8c2 	bl	8009470 <VL53L0X_GetDeviceParameters>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80092f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d110      	bne.n	800931c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80092fa:	f107 0319 	add.w	r3, r7, #25
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f9a0 	bl	8009646 <VL53L0X_GetFractionEnable>
 8009306:	4603      	mov	r3, r0
 8009308:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800930c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009310:	2b00      	cmp	r3, #0
 8009312:	d103      	bne.n	800931c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8009314:	7e7a      	ldrb	r2, [r7, #25]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800931c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10e      	bne.n	8009342 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f103 0410 	add.w	r4, r3, #16
 800932a:	f107 051c 	add.w	r5, r7, #28
 800932e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009330:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009332:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800933a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800933e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8009342:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009346:	2b00      	cmp	r3, #0
 8009348:	d111      	bne.n	800936e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800934a:	f107 0319 	add.w	r3, r7, #25
 800934e:	461a      	mov	r2, r3
 8009350:	2101      	movs	r1, #1
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f004 fd49 	bl	800ddea <VL53L0X_RdByte>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800935e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009362:	2b00      	cmp	r3, #0
 8009364:	d103      	bne.n	800936e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8009366:	7e7a      	ldrb	r2, [r7, #25]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800936e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009372:	2b00      	cmp	r3, #0
 8009374:	d107      	bne.n	8009386 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009376:	2200      	movs	r2, #0
 8009378:	2100      	movs	r1, #0
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f9c0 	bl	8009700 <VL53L0X_SetSequenceStepEnable>
 8009380:	4603      	mov	r3, r0
 8009382:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009386:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800938a:	2b00      	cmp	r3, #0
 800938c:	d107      	bne.n	800939e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800938e:	2200      	movs	r2, #0
 8009390:	2102      	movs	r1, #2
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f9b4 	bl	8009700 <VL53L0X_SetSequenceStepEnable>
 8009398:	4603      	mov	r3, r0
 800939a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800939e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d103      	bne.n	80093ae <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2203      	movs	r2, #3
 80093aa:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80093ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d109      	bne.n	80093ca <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80093b6:	f107 0313 	add.w	r3, r7, #19
 80093ba:	461a      	mov	r2, r3
 80093bc:	2100      	movs	r1, #0
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f986 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 80093c4:	4603      	mov	r3, r0
 80093c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d103      	bne.n	80093da <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80093d2:	7cfa      	ldrb	r2, [r7, #19]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80093da:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d109      	bne.n	80093f6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80093e2:	f107 0313 	add.w	r3, r7, #19
 80093e6:	461a      	mov	r2, r3
 80093e8:	2101      	movs	r1, #1
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f970 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d103      	bne.n	8009406 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80093fe:	7cfa      	ldrb	r2, [r7, #19]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009406:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800940a:	2b00      	cmp	r3, #0
 800940c:	d109      	bne.n	8009422 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800940e:	f107 030c 	add.w	r3, r7, #12
 8009412:	461a      	mov	r2, r3
 8009414:	2103      	movs	r1, #3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f002 ff1c 	bl	800c254 <get_sequence_step_timeout>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009422:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009426:	2b00      	cmp	r3, #0
 8009428:	d103      	bne.n	8009432 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009432:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009436:	2b00      	cmp	r3, #0
 8009438:	d109      	bne.n	800944e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800943a:	f107 030c 	add.w	r3, r7, #12
 800943e:	461a      	mov	r2, r3
 8009440:	2104      	movs	r1, #4
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f002 ff06 	bl	800c254 <get_sequence_step_timeout>
 8009448:	4603      	mov	r3, r0
 800944a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800944e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009452:	2b00      	cmp	r3, #0
 8009454:	d103      	bne.n	800945e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800945e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8009462:	4618      	mov	r0, r3
 8009464:	3770      	adds	r7, #112	; 0x70
 8009466:	46bd      	mov	sp, r7
 8009468:	bdb0      	pop	{r4, r5, r7, pc}
 800946a:	bf00      	nop
 800946c:	20000180 	.word	0x20000180

08009470 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800947a:	2300      	movs	r3, #0
 800947c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f8cc 	bl	8009620 <VL53L0X_GetDeviceMode>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800948c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d107      	bne.n	80094a4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	3308      	adds	r3, #8
 8009498:	4619      	mov	r1, r3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 fa7c 	bl	8009998 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80094a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	2200      	movs	r2, #0
 80094b0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80094b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d107      	bne.n	80094ca <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	3310      	adds	r3, #16
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fab2 	bl	8009a2a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80094c6:	4603      	mov	r3, r0
 80094c8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80094ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d107      	bne.n	80094e2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	3314      	adds	r3, #20
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7ff fccf 	bl	8008e7c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80094e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d134      	bne.n	8009554 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80094ea:	2300      	movs	r3, #0
 80094ec:	60bb      	str	r3, [r7, #8]
 80094ee:	e02a      	b.n	8009546 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80094f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d12a      	bne.n	800954e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	b299      	uxth	r1, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	3308      	adds	r3, #8
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4413      	add	r3, r2
 8009506:	3304      	adds	r3, #4
 8009508:	461a      	mov	r2, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fbd2 	bl	8009cb4 <VL53L0X_GetLimitCheckValue>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	4313      	orrs	r3, r2
 8009518:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800951a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d117      	bne.n	8009552 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	b299      	uxth	r1, r3
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	3318      	adds	r3, #24
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	4413      	add	r3, r2
 800952e:	461a      	mov	r2, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 fb39 	bl	8009ba8 <VL53L0X_GetLimitCheckEnable>
 8009536:	4603      	mov	r3, r0
 8009538:	461a      	mov	r2, r3
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	4313      	orrs	r3, r2
 800953e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	3301      	adds	r3, #1
 8009544:	60bb      	str	r3, [r7, #8]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b05      	cmp	r3, #5
 800954a:	ddd1      	ble.n	80094f0 <VL53L0X_GetDeviceParameters+0x80>
 800954c:	e002      	b.n	8009554 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009552:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d107      	bne.n	800956c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	333c      	adds	r3, #60	; 0x3c
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fcaa 	bl	8009ebc <VL53L0X_GetWrapAroundCheckEnable>
 8009568:	4603      	mov	r3, r0
 800956a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800956c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d107      	bne.n	8009584 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f895 	bl	80096aa <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009584:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	2b15      	cmp	r3, #21
 80095a4:	d832      	bhi.n	800960c <VL53L0X_SetDeviceMode+0x7c>
 80095a6:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <VL53L0X_SetDeviceMode+0x1c>)
 80095a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ac:	08009605 	.word	0x08009605
 80095b0:	08009605 	.word	0x08009605
 80095b4:	0800960d 	.word	0x0800960d
 80095b8:	08009605 	.word	0x08009605
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	0800960d 	.word	0x0800960d
 80095c4:	0800960d 	.word	0x0800960d
 80095c8:	0800960d 	.word	0x0800960d
 80095cc:	0800960d 	.word	0x0800960d
 80095d0:	0800960d 	.word	0x0800960d
 80095d4:	0800960d 	.word	0x0800960d
 80095d8:	0800960d 	.word	0x0800960d
 80095dc:	0800960d 	.word	0x0800960d
 80095e0:	0800960d 	.word	0x0800960d
 80095e4:	0800960d 	.word	0x0800960d
 80095e8:	0800960d 	.word	0x0800960d
 80095ec:	0800960d 	.word	0x0800960d
 80095f0:	0800960d 	.word	0x0800960d
 80095f4:	0800960d 	.word	0x0800960d
 80095f8:	0800960d 	.word	0x0800960d
 80095fc:	08009605 	.word	0x08009605
 8009600:	08009605 	.word	0x08009605
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	741a      	strb	r2, [r3, #16]
		break;
 800960a:	e001      	b.n	8009610 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800960c:	23f8      	movs	r3, #248	; 0xf8
 800960e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009610:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800962a:	2300      	movs	r3, #0
 800962c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	7c1a      	ldrb	r2, [r3, #16]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr

08009646 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	2109      	movs	r1, #9
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f004 fbc6 	bl	800ddea <VL53L0X_RdByte>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d106      	bne.n	8009678 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	b2da      	uxtb	r2, r3
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009678:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800968e:	2300      	movs	r3, #0
 8009690:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8009692:	6839      	ldr	r1, [r7, #0]
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f002 ffe7 	bl	800c668 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800969a:	4603      	mov	r3, r0
 800969c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800969e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f003 f8b4 	bl	800c828 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80096c0:	4603      	mov	r3, r0
 80096c2:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80096c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	460b      	mov	r3, r1
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80096de:	2300      	movs	r3, #0
 80096e0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80096e2:	7afb      	ldrb	r3, [r7, #11]
 80096e4:	687a      	ldr	r2, [r7, #4]
 80096e6:	4619      	mov	r1, r3
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	f002 ff86 	bl	800c5fa <VL53L0X_get_vcsel_pulse_period>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80096f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
	...

08009700 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	460b      	mov	r3, r1
 800970a:	70fb      	strb	r3, [r7, #3]
 800970c:	4613      	mov	r3, r2
 800970e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009710:	2300      	movs	r3, #0
 8009712:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009718:	2300      	movs	r3, #0
 800971a:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800971c:	f107 030f 	add.w	r3, r7, #15
 8009720:	461a      	mov	r2, r3
 8009722:	2101      	movs	r1, #1
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f004 fb60 	bl	800ddea <VL53L0X_RdByte>
 800972a:	4603      	mov	r3, r0
 800972c:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8009732:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d15a      	bne.n	80097f0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800973a:	78bb      	ldrb	r3, [r7, #2]
 800973c:	2b01      	cmp	r3, #1
 800973e:	d12b      	bne.n	8009798 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	2b04      	cmp	r3, #4
 8009744:	d825      	bhi.n	8009792 <VL53L0X_SetSequenceStepEnable+0x92>
 8009746:	a201      	add	r2, pc, #4	; (adr r2, 800974c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	08009761 	.word	0x08009761
 8009750:	0800976b 	.word	0x0800976b
 8009754:	08009775 	.word	0x08009775
 8009758:	0800977f 	.word	0x0800977f
 800975c:	08009789 	.word	0x08009789
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009760:	7dbb      	ldrb	r3, [r7, #22]
 8009762:	f043 0310 	orr.w	r3, r3, #16
 8009766:	75bb      	strb	r3, [r7, #22]
				break;
 8009768:	e043      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800976a:	7dbb      	ldrb	r3, [r7, #22]
 800976c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8009770:	75bb      	strb	r3, [r7, #22]
				break;
 8009772:	e03e      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009774:	7dbb      	ldrb	r3, [r7, #22]
 8009776:	f043 0304 	orr.w	r3, r3, #4
 800977a:	75bb      	strb	r3, [r7, #22]
				break;
 800977c:	e039      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800977e:	7dbb      	ldrb	r3, [r7, #22]
 8009780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009784:	75bb      	strb	r3, [r7, #22]
				break;
 8009786:	e034      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009788:	7dbb      	ldrb	r3, [r7, #22]
 800978a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800978e:	75bb      	strb	r3, [r7, #22]
				break;
 8009790:	e02f      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009792:	23fc      	movs	r3, #252	; 0xfc
 8009794:	75fb      	strb	r3, [r7, #23]
 8009796:	e02c      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	2b04      	cmp	r3, #4
 800979c:	d825      	bhi.n	80097ea <VL53L0X_SetSequenceStepEnable+0xea>
 800979e:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097b9 	.word	0x080097b9
 80097a8:	080097c3 	.word	0x080097c3
 80097ac:	080097cd 	.word	0x080097cd
 80097b0:	080097d7 	.word	0x080097d7
 80097b4:	080097e1 	.word	0x080097e1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80097b8:	7dbb      	ldrb	r3, [r7, #22]
 80097ba:	f023 0310 	bic.w	r3, r3, #16
 80097be:	75bb      	strb	r3, [r7, #22]
				break;
 80097c0:	e017      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80097c2:	7dbb      	ldrb	r3, [r7, #22]
 80097c4:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80097c8:	75bb      	strb	r3, [r7, #22]
				break;
 80097ca:	e012      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80097cc:	7dbb      	ldrb	r3, [r7, #22]
 80097ce:	f023 0304 	bic.w	r3, r3, #4
 80097d2:	75bb      	strb	r3, [r7, #22]
				break;
 80097d4:	e00d      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80097d6:	7dbb      	ldrb	r3, [r7, #22]
 80097d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097dc:	75bb      	strb	r3, [r7, #22]
				break;
 80097de:	e008      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80097e0:	7dbb      	ldrb	r3, [r7, #22]
 80097e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097e6:	75bb      	strb	r3, [r7, #22]
				break;
 80097e8:	e003      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80097ea:	23fc      	movs	r3, #252	; 0xfc
 80097ec:	75fb      	strb	r3, [r7, #23]
 80097ee:	e000      	b.n	80097f2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80097f0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	7dba      	ldrb	r2, [r7, #22]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d01e      	beq.n	8009838 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80097fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d107      	bne.n	8009812 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8009802:	7dbb      	ldrb	r3, [r7, #22]
 8009804:	461a      	mov	r2, r3
 8009806:	2101      	movs	r1, #1
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f004 fa70 	bl	800dcee <VL53L0X_WrByte>
 800980e:	4603      	mov	r3, r0
 8009810:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009812:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d103      	bne.n	8009822 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	7dba      	ldrb	r2, [r7, #22]
 800981e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8009822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d106      	bne.n	8009838 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009830:	6939      	ldr	r1, [r7, #16]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff ff26 	bl	8009684 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009838:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3718      	adds	r7, #24
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	607b      	str	r3, [r7, #4]
 800984e:	460b      	mov	r3, r1
 8009850:	72fb      	strb	r3, [r7, #11]
 8009852:	4613      	mov	r3, r2
 8009854:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009856:	2300      	movs	r3, #0
 8009858:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009860:	7afb      	ldrb	r3, [r7, #11]
 8009862:	2b04      	cmp	r3, #4
 8009864:	d836      	bhi.n	80098d4 <sequence_step_enabled+0x90>
 8009866:	a201      	add	r2, pc, #4	; (adr r2, 800986c <sequence_step_enabled+0x28>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	08009881 	.word	0x08009881
 8009870:	08009893 	.word	0x08009893
 8009874:	080098a5 	.word	0x080098a5
 8009878:	080098b7 	.word	0x080098b7
 800987c:	080098c9 	.word	0x080098c9
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009880:	7abb      	ldrb	r3, [r7, #10]
 8009882:	111b      	asrs	r3, r3, #4
 8009884:	b2db      	uxtb	r3, r3
 8009886:	f003 0301 	and.w	r3, r3, #1
 800988a:	b2da      	uxtb	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	701a      	strb	r2, [r3, #0]
		break;
 8009890:	e022      	b.n	80098d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009892:	7abb      	ldrb	r3, [r7, #10]
 8009894:	10db      	asrs	r3, r3, #3
 8009896:	b2db      	uxtb	r3, r3
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	b2da      	uxtb	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	701a      	strb	r2, [r3, #0]
		break;
 80098a2:	e019      	b.n	80098d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80098a4:	7abb      	ldrb	r3, [r7, #10]
 80098a6:	109b      	asrs	r3, r3, #2
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	701a      	strb	r2, [r3, #0]
		break;
 80098b4:	e010      	b.n	80098d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80098b6:	7abb      	ldrb	r3, [r7, #10]
 80098b8:	119b      	asrs	r3, r3, #6
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 0301 	and.w	r3, r3, #1
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	701a      	strb	r2, [r3, #0]
		break;
 80098c6:	e007      	b.n	80098d8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80098c8:	7abb      	ldrb	r3, [r7, #10]
 80098ca:	09db      	lsrs	r3, r3, #7
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	701a      	strb	r2, [r3, #0]
		break;
 80098d2:	e001      	b.n	80098d8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80098d4:	23fc      	movs	r3, #252	; 0xfc
 80098d6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80098dc:	4618      	mov	r0, r3
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098f2:	2300      	movs	r3, #0
 80098f4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80098fa:	f107 030e 	add.w	r3, r7, #14
 80098fe:	461a      	mov	r2, r3
 8009900:	2101      	movs	r1, #1
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f004 fa71 	bl	800ddea <VL53L0X_RdByte>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800990c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d107      	bne.n	8009924 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009914:	7bba      	ldrb	r2, [r7, #14]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2100      	movs	r1, #0
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f7ff ff92 	bl	8009844 <sequence_step_enabled>
 8009920:	4603      	mov	r3, r0
 8009922:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d108      	bne.n	800993e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800992c:	7bba      	ldrb	r2, [r7, #14]
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	3302      	adds	r3, #2
 8009932:	2101      	movs	r1, #1
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff ff85 	bl	8009844 <sequence_step_enabled>
 800993a:	4603      	mov	r3, r0
 800993c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800993e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d108      	bne.n	8009958 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009946:	7bba      	ldrb	r2, [r7, #14]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	3301      	adds	r3, #1
 800994c:	2102      	movs	r1, #2
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff ff78 	bl	8009844 <sequence_step_enabled>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d108      	bne.n	8009972 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009960:	7bba      	ldrb	r2, [r7, #14]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	3303      	adds	r3, #3
 8009966:	2103      	movs	r1, #3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff ff6b 	bl	8009844 <sequence_step_enabled>
 800996e:	4603      	mov	r3, r0
 8009970:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d108      	bne.n	800998c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800997a:	7bba      	ldrb	r2, [r7, #14]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	3304      	adds	r3, #4
 8009980:	2104      	movs	r1, #4
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7ff ff5e 	bl	8009844 <sequence_step_enabled>
 8009988:	4603      	mov	r3, r0
 800998a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800998c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80099a6:	f107 030c 	add.w	r3, r7, #12
 80099aa:	461a      	mov	r2, r3
 80099ac:	21f8      	movs	r1, #248	; 0xf8
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f004 fa3a 	bl	800de28 <VL53L0X_RdWord>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80099b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d108      	bne.n	80099d2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80099c0:	f107 0308 	add.w	r3, r7, #8
 80099c4:	461a      	mov	r2, r3
 80099c6:	2104      	movs	r1, #4
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f004 fa4c 	bl	800de66 <VL53L0X_RdDWord>
 80099ce:	4603      	mov	r3, r0
 80099d0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80099d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10c      	bne.n	80099f4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80099da:	89bb      	ldrh	r3, [r7, #12]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	89ba      	ldrh	r2, [r7, #12]
 80099e4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80099f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	7f1b      	ldrb	r3, [r3, #28]
 8009a12:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	7bba      	ldrb	r2, [r7, #14]
 8009a18:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3714      	adds	r7, #20
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr

08009a2a <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b086      	sub	sp, #24
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	6078      	str	r0, [r7, #4]
 8009a32:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009a38:	f107 030e 	add.w	r3, r7, #14
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	2120      	movs	r1, #32
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f004 f9f1 	bl	800de28 <VL53L0X_RdWord>
 8009a46:	4603      	mov	r3, r0
 8009a48:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d118      	bne.n	8009a84 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8009a52:	89fb      	ldrh	r3, [r7, #14]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d109      	bne.n	8009a6c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6a1b      	ldr	r3, [r3, #32]
 8009a5c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009a5e:	683b      	ldr	r3, [r7, #0]
 8009a60:	693a      	ldr	r2, [r7, #16]
 8009a62:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	771a      	strb	r2, [r3, #28]
 8009a6a:	e00b      	b.n	8009a84 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009a6c:	89fb      	ldrh	r3, [r7, #14]
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	693a      	ldr	r2, [r7, #16]
 8009a76:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b086      	sub	sp, #24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	807b      	strh	r3, [r7, #2]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009ab0:	887b      	ldrh	r3, [r7, #2]
 8009ab2:	2b05      	cmp	r3, #5
 8009ab4:	d902      	bls.n	8009abc <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ab6:	23fc      	movs	r3, #252	; 0xfc
 8009ab8:	75fb      	strb	r3, [r7, #23]
 8009aba:	e05b      	b.n	8009b74 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009abc:	787b      	ldrb	r3, [r7, #1]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009aca:	2301      	movs	r3, #1
 8009acc:	73bb      	strb	r3, [r7, #14]
 8009ace:	e00a      	b.n	8009ae6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ad0:	887b      	ldrh	r3, [r7, #2]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	330c      	adds	r3, #12
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009ae6:	887b      	ldrh	r3, [r7, #2]
 8009ae8:	2b05      	cmp	r3, #5
 8009aea:	d841      	bhi.n	8009b70 <VL53L0X_SetLimitCheckEnable+0xe0>
 8009aec:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <VL53L0X_SetLimitCheckEnable+0x64>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b0d 	.word	0x08009b0d
 8009af8:	08009b17 	.word	0x08009b17
 8009afc:	08009b2d 	.word	0x08009b2d
 8009b00:	08009b37 	.word	0x08009b37
 8009b04:	08009b41 	.word	0x08009b41
 8009b08:	08009b59 	.word	0x08009b59

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	7bfa      	ldrb	r2, [r7, #15]
 8009b10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009b14:	e02e      	b.n	8009b74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	2144      	movs	r1, #68	; 0x44
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f004 f904 	bl	800dd2e <VL53L0X_WrWord>
 8009b26:	4603      	mov	r3, r0
 8009b28:	75fb      	strb	r3, [r7, #23]

			break;
 8009b2a:	e023      	b.n	8009b74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	7bfa      	ldrb	r2, [r7, #15]
 8009b30:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009b34:	e01e      	b.n	8009b74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7bfa      	ldrb	r2, [r7, #15]
 8009b3a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009b3e:	e019      	b.n	8009b74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009b46:	7b7b      	ldrb	r3, [r7, #13]
 8009b48:	22fe      	movs	r2, #254	; 0xfe
 8009b4a:	2160      	movs	r1, #96	; 0x60
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f004 f90e 	bl	800dd6e <VL53L0X_UpdateByte>
 8009b52:	4603      	mov	r3, r0
 8009b54:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009b56:	e00d      	b.n	8009b74 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009b5e:	7b7b      	ldrb	r3, [r7, #13]
 8009b60:	22ef      	movs	r2, #239	; 0xef
 8009b62:	2160      	movs	r1, #96	; 0x60
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f004 f902 	bl	800dd6e <VL53L0X_UpdateByte>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009b6e:	e001      	b.n	8009b74 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b70:	23fc      	movs	r3, #252	; 0xfc
 8009b72:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10f      	bne.n	8009b9c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009b7c:	787b      	ldrb	r3, [r7, #1]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d106      	bne.n	8009b90 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009b82:	887b      	ldrh	r3, [r7, #2]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	4413      	add	r3, r2
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009b8e:	e005      	b.n	8009b9c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009b90:	887b      	ldrh	r3, [r7, #2]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	4413      	add	r3, r2
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009bba:	897b      	ldrh	r3, [r7, #10]
 8009bbc:	2b05      	cmp	r3, #5
 8009bbe:	d905      	bls.n	8009bcc <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bc0:	23fc      	movs	r3, #252	; 0xfc
 8009bc2:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	701a      	strb	r2, [r3, #0]
 8009bca:	e008      	b.n	8009bde <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009bcc:	897b      	ldrh	r3, [r7, #10]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bd6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	7dba      	ldrb	r2, [r7, #22]
 8009bdc:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	371c      	adds	r7, #28
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr
	...

08009bf0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009c02:	897b      	ldrh	r3, [r7, #10]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c0c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009c0e:	7dbb      	ldrb	r3, [r7, #22]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d107      	bne.n	8009c24 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c14:	897b      	ldrh	r3, [r7, #10]
 8009c16:	68fa      	ldr	r2, [r7, #12]
 8009c18:	330c      	adds	r3, #12
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	605a      	str	r2, [r3, #4]
 8009c22:	e040      	b.n	8009ca6 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009c24:	897b      	ldrh	r3, [r7, #10]
 8009c26:	2b05      	cmp	r3, #5
 8009c28:	d830      	bhi.n	8009c8c <VL53L0X_SetLimitCheckValue+0x9c>
 8009c2a:	a201      	add	r2, pc, #4	; (adr r2, 8009c30 <VL53L0X_SetLimitCheckValue+0x40>)
 8009c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c30:	08009c49 	.word	0x08009c49
 8009c34:	08009c51 	.word	0x08009c51
 8009c38:	08009c67 	.word	0x08009c67
 8009c3c:	08009c6f 	.word	0x08009c6f
 8009c40:	08009c77 	.word	0x08009c77
 8009c44:	08009c77 	.word	0x08009c77

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009c4e:	e01f      	b.n	8009c90 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	461a      	mov	r2, r3
 8009c58:	2144      	movs	r1, #68	; 0x44
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f004 f867 	bl	800dd2e <VL53L0X_WrWord>
 8009c60:	4603      	mov	r3, r0
 8009c62:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009c64:	e014      	b.n	8009c90 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009c6c:	e010      	b.n	8009c90 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009c74:	e00c      	b.n	8009c90 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	2164      	movs	r1, #100	; 0x64
 8009c80:	68f8      	ldr	r0, [r7, #12]
 8009c82:	f004 f854 	bl	800dd2e <VL53L0X_WrWord>
 8009c86:	4603      	mov	r3, r0
 8009c88:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009c8a:	e001      	b.n	8009c90 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c8c:	23fc      	movs	r3, #252	; 0xfc
 8009c8e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d106      	bne.n	8009ca6 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c98:	897b      	ldrh	r3, [r7, #10]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	330c      	adds	r3, #12
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ca6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop

08009cb4 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009cca:	897b      	ldrh	r3, [r7, #10]
 8009ccc:	2b05      	cmp	r3, #5
 8009cce:	d847      	bhi.n	8009d60 <VL53L0X_GetLimitCheckValue+0xac>
 8009cd0:	a201      	add	r2, pc, #4	; (adr r2, 8009cd8 <VL53L0X_GetLimitCheckValue+0x24>)
 8009cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd6:	bf00      	nop
 8009cd8:	08009cf1 	.word	0x08009cf1
 8009cdc:	08009cfd 	.word	0x08009cfd
 8009ce0:	08009d23 	.word	0x08009d23
 8009ce4:	08009d2f 	.word	0x08009d2f
 8009ce8:	08009d3b 	.word	0x08009d3b
 8009cec:	08009d3b 	.word	0x08009d3b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cf4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	77bb      	strb	r3, [r7, #30]
		break;
 8009cfa:	e033      	b.n	8009d64 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009cfc:	f107 0316 	add.w	r3, r7, #22
 8009d00:	461a      	mov	r2, r3
 8009d02:	2144      	movs	r1, #68	; 0x44
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f004 f88f 	bl	800de28 <VL53L0X_RdWord>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009d0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d102      	bne.n	8009d1c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009d16:	8afb      	ldrh	r3, [r7, #22]
 8009d18:	025b      	lsls	r3, r3, #9
 8009d1a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	77bb      	strb	r3, [r7, #30]
		break;
 8009d20:	e020      	b.n	8009d64 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d26:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	77bb      	strb	r3, [r7, #30]
		break;
 8009d2c:	e01a      	b.n	8009d64 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d32:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009d34:	2300      	movs	r3, #0
 8009d36:	77bb      	strb	r3, [r7, #30]
		break;
 8009d38:	e014      	b.n	8009d64 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009d3a:	f107 0316 	add.w	r3, r7, #22
 8009d3e:	461a      	mov	r2, r3
 8009d40:	2164      	movs	r1, #100	; 0x64
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f004 f870 	bl	800de28 <VL53L0X_RdWord>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009d4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009d54:	8afb      	ldrh	r3, [r7, #22]
 8009d56:	025b      	lsls	r3, r3, #9
 8009d58:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	77bb      	strb	r3, [r7, #30]
		break;
 8009d5e:	e001      	b.n	8009d64 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d60:	23fc      	movs	r3, #252	; 0xfc
 8009d62:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009d64:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d12a      	bne.n	8009dc2 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009d6c:	7fbb      	ldrb	r3, [r7, #30]
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d124      	bne.n	8009dbc <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d110      	bne.n	8009d9a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009d78:	897b      	ldrh	r3, [r7, #10]
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	330c      	adds	r3, #12
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69ba      	ldr	r2, [r7, #24]
 8009d8a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009d8c:	897b      	ldrh	r3, [r7, #10]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	4413      	add	r3, r2
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009d98:	e013      	b.n	8009dc2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009da0:	897b      	ldrh	r3, [r7, #10]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	330c      	adds	r3, #12
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	69ba      	ldr	r2, [r7, #24]
 8009dac:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009dae:	897b      	ldrh	r3, [r7, #10]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009dba:	e002      	b.n	8009dc2 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009dc2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3720      	adds	r7, #32
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop

08009dd0 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckCurrent)
{
 8009dd0:	b4b0      	push	{r4, r5, r7}
 8009dd2:	b08d      	sub	sp, #52	; 0x34
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dde:	2300      	movs	r3, #0
 8009de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009de4:	897b      	ldrh	r3, [r7, #10]
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d903      	bls.n	8009df2 <VL53L0X_GetLimitCheckCurrent+0x22>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009dea:	23fc      	movs	r3, #252	; 0xfc
 8009dec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009df0:	e05d      	b.n	8009eae <VL53L0X_GetLimitCheckCurrent+0xde>
	} else {
		switch (LimitCheckId) {
 8009df2:	897b      	ldrh	r3, [r7, #10]
 8009df4:	2b05      	cmp	r3, #5
 8009df6:	d857      	bhi.n	8009ea8 <VL53L0X_GetLimitCheckCurrent+0xd8>
 8009df8:	a201      	add	r2, pc, #4	; (adr r2, 8009e00 <VL53L0X_GetLimitCheckCurrent+0x30>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e19 	.word	0x08009e19
 8009e04:	08009e25 	.word	0x08009e25
 8009e08:	08009e43 	.word	0x08009e43
 8009e0c:	08009e4f 	.word	0x08009e4f
 8009e10:	08009e6d 	.word	0x08009e6d
 8009e14:	08009e8b 	.word	0x08009e8b
		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	601a      	str	r2, [r3, #0]

			break;
 8009e22:	e044      	b.n	8009eae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f107 0410 	add.w	r4, r7, #16
 8009e2a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8009e3a:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	601a      	str	r2, [r3, #0]

			break;
 8009e40:	e035      	b.n	8009eae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev,
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	601a      	str	r2, [r3, #0]
				LastSignalRefMcps);

			break;
 8009e4c:	e02f      	b.n	8009eae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f107 0410 	add.w	r4, r7, #16
 8009e54:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8009e64:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	601a      	str	r2, [r3, #0]

			break;
 8009e6a:	e020      	b.n	8009eae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f107 0410 	add.w	r4, r7, #16
 8009e72:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8009e82:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	601a      	str	r2, [r3, #0]

			break;
 8009e88:	e011      	b.n	8009eae <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	f107 0410 	add.w	r4, r7, #16
 8009e90:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009e98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009e9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8009ea0:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	601a      	str	r2, [r3, #0]

			break;
 8009ea6:	e002      	b.n	8009eae <VL53L0X_GetLimitCheckCurrent+0xde>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ea8:	23fc      	movs	r3, #252	; 0xfc
 8009eaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009eae:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f

}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3734      	adds	r7, #52	; 0x34
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bcb0      	pop	{r4, r5, r7}
 8009eba:	4770      	bx	lr

08009ebc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8009eca:	f107 030e 	add.w	r3, r7, #14
 8009ece:	461a      	mov	r2, r3
 8009ed0:	2101      	movs	r1, #1
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f003 ff89 	bl	800ddea <VL53L0X_RdByte>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8009edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10e      	bne.n	8009f02 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009ee4:	7bba      	ldrb	r2, [r7, #14]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8009eec:	7bbb      	ldrb	r3, [r7, #14]
 8009eee:	b25b      	sxtb	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	da03      	bge.n	8009efc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	701a      	strb	r2, [r3, #0]
 8009efa:	e002      	b.n	8009f02 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2200      	movs	r2, #0
 8009f00:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d104      	bne.n	8009f14 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781a      	ldrb	r2, [r3, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009f2c:	f107 030e 	add.w	r3, r7, #14
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff fb74 	bl	8009620 <VL53L0X_GetDeviceMode>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d107      	bne.n	8009f54 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d104      	bne.n	8009f54 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f000 f898 	bl	800a080 <VL53L0X_StartMeasurement>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d104      	bne.n	8009f66 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 fb3f 	bl	800b5e0 <VL53L0X_measurement_poll_for_completion>
 8009f62:	4603      	mov	r3, r0
 8009f64:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d106      	bne.n	8009f7c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d103      	bne.n	8009f7c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2203      	movs	r2, #3
 8009f78:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8009f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b086      	sub	sp, #24
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f94:	2300      	movs	r3, #0
 8009f96:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009f98:	2301      	movs	r3, #1
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	68b9      	ldr	r1, [r7, #8]
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f001 fae1 	bl	800b566 <VL53L0X_perform_ref_calibration>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009fca:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8009fcc:	7dbb      	ldrb	r3, [r7, #22]
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d005      	beq.n	8009fde <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009fd2:	7dbb      	ldrb	r3, [r7, #22]
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d002      	beq.n	8009fde <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009fd8:	7dbb      	ldrb	r3, [r7, #22]
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d147      	bne.n	800a06e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8009fde:	f107 030c 	add.w	r3, r7, #12
 8009fe2:	f107 0210 	add.w	r2, r7, #16
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fbc3 	bl	800a774 <VL53L0X_GetInterruptThresholds>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009ff8:	d803      	bhi.n	800a002 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8009ffa:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8009ffc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800a000:	d935      	bls.n	800a06e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a002:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d131      	bne.n	800a06e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d006      	beq.n	800a01e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a010:	491a      	ldr	r1, [pc, #104]	; (800a07c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f002 fcba 	bl	800c98c <VL53L0X_load_tuning_settings>
 800a018:	4603      	mov	r3, r0
 800a01a:	75fb      	strb	r3, [r7, #23]
 800a01c:	e027      	b.n	800a06e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a01e:	2204      	movs	r2, #4
 800a020:	21ff      	movs	r1, #255	; 0xff
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f003 fe63 	bl	800dcee <VL53L0X_WrByte>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	7dfb      	ldrb	r3, [r7, #23]
 800a02e:	4313      	orrs	r3, r2
 800a030:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a032:	2200      	movs	r2, #0
 800a034:	2170      	movs	r1, #112	; 0x70
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f003 fe59 	bl	800dcee <VL53L0X_WrByte>
 800a03c:	4603      	mov	r3, r0
 800a03e:	461a      	mov	r2, r3
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	4313      	orrs	r3, r2
 800a044:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a046:	2200      	movs	r2, #0
 800a048:	21ff      	movs	r1, #255	; 0xff
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f003 fe4f 	bl	800dcee <VL53L0X_WrByte>
 800a050:	4603      	mov	r3, r0
 800a052:	461a      	mov	r2, r3
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	4313      	orrs	r3, r2
 800a058:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a05a:	2200      	movs	r2, #0
 800a05c:	2180      	movs	r1, #128	; 0x80
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f003 fe45 	bl	800dcee <VL53L0X_WrByte>
 800a064:	4603      	mov	r3, r0
 800a066:	461a      	mov	r2, r3
 800a068:	7dfb      	ldrb	r3, [r7, #23]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a06e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20000274 	.word	0x20000274

0800a080 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a088:	2300      	movs	r3, #0
 800a08a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a08c:	2301      	movs	r3, #1
 800a08e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a090:	f107 030e 	add.w	r3, r7, #14
 800a094:	4619      	mov	r1, r3
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff fac2 	bl	8009620 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a09c:	2201      	movs	r2, #1
 800a09e:	2180      	movs	r1, #128	; 0x80
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f003 fe24 	bl	800dcee <VL53L0X_WrByte>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	21ff      	movs	r1, #255	; 0xff
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f003 fe1d 	bl	800dcee <VL53L0X_WrByte>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f003 fe16 	bl	800dcee <VL53L0X_WrByte>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	2191      	movs	r1, #145	; 0x91
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f003 fe0c 	bl	800dcee <VL53L0X_WrByte>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a0da:	2201      	movs	r2, #1
 800a0dc:	2100      	movs	r1, #0
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f003 fe05 	bl	800dcee <VL53L0X_WrByte>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	21ff      	movs	r1, #255	; 0xff
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f003 fdfe 	bl	800dcee <VL53L0X_WrByte>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2180      	movs	r1, #128	; 0x80
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f003 fdf7 	bl	800dcee <VL53L0X_WrByte>
 800a100:	4603      	mov	r3, r0
 800a102:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a104:	7bbb      	ldrb	r3, [r7, #14]
 800a106:	2b01      	cmp	r3, #1
 800a108:	d037      	beq.n	800a17a <VL53L0X_StartMeasurement+0xfa>
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d04f      	beq.n	800a1ae <VL53L0X_StartMeasurement+0x12e>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d167      	bne.n	800a1e2 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a112:	2201      	movs	r2, #1
 800a114:	2100      	movs	r1, #0
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f003 fde9 	bl	800dcee <VL53L0X_WrByte>
 800a11c:	4603      	mov	r3, r0
 800a11e:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a124:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d15d      	bne.n	800a1e8 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d008      	beq.n	800a148 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 800a136:	f107 030d 	add.w	r3, r7, #13
 800a13a:	461a      	mov	r2, r3
 800a13c:	2100      	movs	r1, #0
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f003 fe53 	bl	800ddea <VL53L0X_RdByte>
 800a144:	4603      	mov	r3, r0
 800a146:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	3301      	adds	r3, #1
 800a14c:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a14e:	7b7a      	ldrb	r2, [r7, #13]
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	4013      	ands	r3, r2
 800a154:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a156:	7bfa      	ldrb	r2, [r7, #15]
 800a158:	429a      	cmp	r2, r3
 800a15a:	d107      	bne.n	800a16c <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 800a15c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d103      	bne.n	800a16c <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a16a:	d3e1      	bcc.n	800a130 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a172:	d339      	bcc.n	800a1e8 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a174:	23f9      	movs	r3, #249	; 0xf9
 800a176:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a178:	e036      	b.n	800a1e8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a17a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d105      	bne.n	800a18e <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a182:	2101      	movs	r1, #1
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f7ff ff15 	bl	8009fb4 <VL53L0X_CheckAndLoadInterruptSettings>
 800a18a:	4603      	mov	r3, r0
 800a18c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a18e:	2202      	movs	r2, #2
 800a190:	2100      	movs	r1, #0
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f003 fdab 	bl	800dcee <VL53L0X_WrByte>
 800a198:	4603      	mov	r3, r0
 800a19a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a19c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d123      	bne.n	800a1ec <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2204      	movs	r2, #4
 800a1a8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a1ac:	e01e      	b.n	800a1ec <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a1ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d105      	bne.n	800a1c2 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7ff fefb 	bl	8009fb4 <VL53L0X_CheckAndLoadInterruptSettings>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a1c2:	2204      	movs	r2, #4
 800a1c4:	2100      	movs	r1, #0
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f003 fd91 	bl	800dcee <VL53L0X_WrByte>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a1d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10b      	bne.n	800a1f0 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2204      	movs	r2, #4
 800a1dc:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a1e0:	e006      	b.n	800a1f0 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a1e2:	23f8      	movs	r3, #248	; 0xf8
 800a1e4:	75fb      	strb	r3, [r7, #23]
 800a1e6:	e004      	b.n	800a1f2 <VL53L0X_StartMeasurement+0x172>
		break;
 800a1e8:	bf00      	nop
 800a1ea:	e002      	b.n	800a1f2 <VL53L0X_StartMeasurement+0x172>
		break;
 800a1ec:	bf00      	nop
 800a1ee:	e000      	b.n	800a1f2 <VL53L0X_StartMeasurement+0x172>
		break;
 800a1f0:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a1f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3718      	adds	r7, #24
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b084      	sub	sp, #16
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
 800a206:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a208:	2300      	movs	r3, #0
 800a20a:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a212:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a214:	7bbb      	ldrb	r3, [r7, #14]
 800a216:	2b04      	cmp	r3, #4
 800a218:	d112      	bne.n	800a240 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a21a:	f107 0308 	add.w	r3, r7, #8
 800a21e:	4619      	mov	r1, r3
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fb1d 	bl	800a860 <VL53L0X_GetInterruptMaskStatus>
 800a226:	4603      	mov	r3, r0
 800a228:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d103      	bne.n	800a238 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2201      	movs	r2, #1
 800a234:	701a      	strb	r2, [r3, #0]
 800a236:	e01c      	b.n	800a272 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
 800a23e:	e018      	b.n	800a272 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a240:	f107 030d 	add.w	r3, r7, #13
 800a244:	461a      	mov	r2, r3
 800a246:	2114      	movs	r1, #20
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f003 fdce 	bl	800ddea <VL53L0X_RdByte>
 800a24e:	4603      	mov	r3, r0
 800a250:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d10b      	bne.n	800a272 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a25a:	7b7b      	ldrb	r3, [r7, #13]
 800a25c:	f003 0301 	and.w	r3, r3, #1
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2201      	movs	r2, #1
 800a268:	701a      	strb	r2, [r3, #0]
 800a26a:	e002      	b.n	800a272 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2200      	movs	r2, #0
 800a270:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
	...

0800a280 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a280:	b5b0      	push	{r4, r5, r7, lr}
 800a282:	b096      	sub	sp, #88	; 0x58
 800a284:	af02      	add	r7, sp, #8
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a28a:	2300      	movs	r3, #0
 800a28c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a290:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a294:	230c      	movs	r3, #12
 800a296:	2114      	movs	r1, #20
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f003 fd03 	bl	800dca4 <VL53L0X_ReadMulti>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a2a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f040 80d2 	bne.w	800a452 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a2ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	021b      	lsls	r3, r3, #8
 800a2c2:	b29a      	uxth	r2, r3
 800a2c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a2d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	4413      	add	r3, r2
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	025b      	lsls	r3, r3, #9
 800a2ec:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2f2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a2f4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	021b      	lsls	r3, r3, #8
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a302:	b29b      	uxth	r3, r3
 800a304:	4413      	add	r3, r2
 800a306:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a30a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a30e:	025b      	lsls	r3, r3, #9
 800a310:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a316:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	021b      	lsls	r3, r3, #8
 800a31e:	b29a      	uxth	r2, r3
 800a320:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a324:	b29b      	uxth	r3, r3
 800a326:	4413      	add	r3, r2
 800a328:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a332:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a334:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a338:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a342:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a34a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a34e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a354:	d047      	beq.n	800a3e6 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a356:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a358:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a35c:	fb02 f303 	mul.w	r3, r2, r3
 800a360:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a364:	4a58      	ldr	r2, [pc, #352]	; (800a4c8 <VL53L0X_GetRangingMeasurementData+0x248>)
 800a366:	fb82 1203 	smull	r1, r2, r2, r3
 800a36a:	1192      	asrs	r2, r2, #6
 800a36c:	17db      	asrs	r3, r3, #31
 800a36e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a370:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a1b      	ldr	r3, [r3, #32]
 800a378:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	7f1b      	ldrb	r3, [r3, #28]
 800a37e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a382:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a386:	2b00      	cmp	r3, #0
 800a388:	d02d      	beq.n	800a3e6 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a38a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a38c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a390:	fb02 f303 	mul.w	r3, r2, r3
 800a394:	121b      	asrs	r3, r3, #8
 800a396:	461a      	mov	r2, r3
				if ((SignalRate
 800a398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d10d      	bne.n	800a3ba <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 800a39e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d004      	beq.n	800a3b0 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 800a3a6:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a3aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a3ae:	e016      	b.n	800a3de <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 800a3b0:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a3b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a3b8:	e011      	b.n	800a3de <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a3ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a3be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3c0:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a3c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a3c6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a3ca:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a3ce:	121b      	asrs	r3, r3, #8
 800a3d0:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3d4:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a3d6:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a3da:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a3de:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a3e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a3e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00d      	beq.n	800a40a <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a3ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a3f2:	089b      	lsrs	r3, r3, #2
 800a3f4:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a3fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	019b      	lsls	r3, r3, #6
 800a402:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	75da      	strb	r2, [r3, #23]
 800a408:	e006      	b.n	800a418 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a410:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2200      	movs	r2, #0
 800a416:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a418:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a41c:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a420:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a424:	9301      	str	r3, [sp, #4]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	4613      	mov	r3, r2
 800a42c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f002 ff54 	bl	800d2dc <VL53L0X_get_pal_range_status>
 800a434:	4603      	mov	r3, r0
 800a436:	461a      	mov	r2, r3
 800a438:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a43c:	4313      	orrs	r3, r2
 800a43e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a442:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a446:	2b00      	cmp	r3, #0
 800a448:	d103      	bne.n	800a452 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a44a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a452:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a456:	2b00      	cmp	r3, #0
 800a458:	d12f      	bne.n	800a4ba <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f107 040c 	add.w	r4, r7, #12
 800a460:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a468:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a46c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a474:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a47a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a482:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a488:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a48e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a494:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a49a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a4a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a4aa:	f107 050c 	add.w	r5, r7, #12
 800a4ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a4ba:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3750      	adds	r7, #80	; 0x50
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	10624dd3 	.word	0x10624dd3

0800a4cc <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a4da:	2100      	movs	r1, #0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f7ff f857 	bl	8009590 <VL53L0X_SetDeviceMode>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a4e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d104      	bne.n	800a4f8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7ff fd16 	bl	8009f20 <VL53L0X_PerformSingleMeasurement>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a4f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d105      	bne.n	800a50c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a500:	6839      	ldr	r1, [r7, #0]
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7ff febc 	bl	800a280 <VL53L0X_GetRangingMeasurementData>
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a50c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d105      	bne.n	800a520 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a514:	2100      	movs	r1, #0
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f000 f962 	bl	800a7e0 <VL53L0X_ClearInterruptMask>
 800a51c:	4603      	mov	r3, r0
 800a51e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	4608      	mov	r0, r1
 800a536:	4611      	mov	r1, r2
 800a538:	461a      	mov	r2, r3
 800a53a:	4603      	mov	r3, r0
 800a53c:	70fb      	strb	r3, [r7, #3]
 800a53e:	460b      	mov	r3, r1
 800a540:	70bb      	strb	r3, [r7, #2]
 800a542:	4613      	mov	r3, r2
 800a544:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a54a:	78fb      	ldrb	r3, [r7, #3]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d002      	beq.n	800a556 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a550:	23f6      	movs	r3, #246	; 0xf6
 800a552:	73fb      	strb	r3, [r7, #15]
 800a554:	e107      	b.n	800a766 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a556:	78bb      	ldrb	r3, [r7, #2]
 800a558:	2b14      	cmp	r3, #20
 800a55a:	d110      	bne.n	800a57e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a55c:	7e3b      	ldrb	r3, [r7, #24]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d102      	bne.n	800a568 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a562:	2310      	movs	r3, #16
 800a564:	73bb      	strb	r3, [r7, #14]
 800a566:	e001      	b.n	800a56c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a568:	2301      	movs	r3, #1
 800a56a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	461a      	mov	r2, r3
 800a570:	2184      	movs	r1, #132	; 0x84
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f003 fbbb 	bl	800dcee <VL53L0X_WrByte>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]
 800a57c:	e0f3      	b.n	800a766 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a57e:	78bb      	ldrb	r3, [r7, #2]
 800a580:	2b15      	cmp	r3, #21
 800a582:	f040 8097 	bne.w	800a6b4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a586:	2201      	movs	r2, #1
 800a588:	21ff      	movs	r1, #255	; 0xff
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f003 fbaf 	bl	800dcee <VL53L0X_WrByte>
 800a590:	4603      	mov	r3, r0
 800a592:	461a      	mov	r2, r3
 800a594:	7bfb      	ldrb	r3, [r7, #15]
 800a596:	4313      	orrs	r3, r2
 800a598:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a59a:	2200      	movs	r2, #0
 800a59c:	2100      	movs	r1, #0
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f003 fba5 	bl	800dcee <VL53L0X_WrByte>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	21ff      	movs	r1, #255	; 0xff
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f003 fb9b 	bl	800dcee <VL53L0X_WrByte>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	7bfb      	ldrb	r3, [r7, #15]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	2180      	movs	r1, #128	; 0x80
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f003 fb91 	bl	800dcee <VL53L0X_WrByte>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	2185      	movs	r1, #133	; 0x85
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f003 fb87 	bl	800dcee <VL53L0X_WrByte>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	7bfb      	ldrb	r3, [r7, #15]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	21ff      	movs	r1, #255	; 0xff
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f003 fb7d 	bl	800dcee <VL53L0X_WrByte>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a5fe:	2200      	movs	r2, #0
 800a600:	21cd      	movs	r1, #205	; 0xcd
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f003 fb73 	bl	800dcee <VL53L0X_WrByte>
 800a608:	4603      	mov	r3, r0
 800a60a:	461a      	mov	r2, r3
 800a60c:	7bfb      	ldrb	r3, [r7, #15]
 800a60e:	4313      	orrs	r3, r2
 800a610:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a612:	2211      	movs	r2, #17
 800a614:	21cc      	movs	r1, #204	; 0xcc
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f003 fb69 	bl	800dcee <VL53L0X_WrByte>
 800a61c:	4603      	mov	r3, r0
 800a61e:	461a      	mov	r2, r3
 800a620:	7bfb      	ldrb	r3, [r7, #15]
 800a622:	4313      	orrs	r3, r2
 800a624:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a626:	2207      	movs	r2, #7
 800a628:	21ff      	movs	r1, #255	; 0xff
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f003 fb5f 	bl	800dcee <VL53L0X_WrByte>
 800a630:	4603      	mov	r3, r0
 800a632:	461a      	mov	r2, r3
 800a634:	7bfb      	ldrb	r3, [r7, #15]
 800a636:	4313      	orrs	r3, r2
 800a638:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a63a:	2200      	movs	r2, #0
 800a63c:	21be      	movs	r1, #190	; 0xbe
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f003 fb55 	bl	800dcee <VL53L0X_WrByte>
 800a644:	4603      	mov	r3, r0
 800a646:	461a      	mov	r2, r3
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a64e:	2206      	movs	r2, #6
 800a650:	21ff      	movs	r1, #255	; 0xff
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f003 fb4b 	bl	800dcee <VL53L0X_WrByte>
 800a658:	4603      	mov	r3, r0
 800a65a:	461a      	mov	r2, r3
 800a65c:	7bfb      	ldrb	r3, [r7, #15]
 800a65e:	4313      	orrs	r3, r2
 800a660:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a662:	2209      	movs	r2, #9
 800a664:	21cc      	movs	r1, #204	; 0xcc
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f003 fb41 	bl	800dcee <VL53L0X_WrByte>
 800a66c:	4603      	mov	r3, r0
 800a66e:	461a      	mov	r2, r3
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	4313      	orrs	r3, r2
 800a674:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a676:	2200      	movs	r2, #0
 800a678:	21ff      	movs	r1, #255	; 0xff
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f003 fb37 	bl	800dcee <VL53L0X_WrByte>
 800a680:	4603      	mov	r3, r0
 800a682:	461a      	mov	r2, r3
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	4313      	orrs	r3, r2
 800a688:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a68a:	2201      	movs	r2, #1
 800a68c:	21ff      	movs	r1, #255	; 0xff
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f003 fb2d 	bl	800dcee <VL53L0X_WrByte>
 800a694:	4603      	mov	r3, r0
 800a696:	461a      	mov	r2, r3
 800a698:	7bfb      	ldrb	r3, [r7, #15]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2100      	movs	r1, #0
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f003 fb23 	bl	800dcee <VL53L0X_WrByte>
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	73fb      	strb	r3, [r7, #15]
 800a6b2:	e058      	b.n	800a766 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d121      	bne.n	800a700 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a6bc:	787b      	ldrb	r3, [r7, #1]
 800a6be:	2b04      	cmp	r3, #4
 800a6c0:	d81b      	bhi.n	800a6fa <VL53L0X_SetGpioConfig+0x1ce>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <VL53L0X_SetGpioConfig+0x19c>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a6dd 	.word	0x0800a6dd
 800a6cc:	0800a6e3 	.word	0x0800a6e3
 800a6d0:	0800a6e9 	.word	0x0800a6e9
 800a6d4:	0800a6ef 	.word	0x0800a6ef
 800a6d8:	0800a6f5 	.word	0x0800a6f5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	73bb      	strb	r3, [r7, #14]
				break;
 800a6e0:	e00f      	b.n	800a702 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	73bb      	strb	r3, [r7, #14]
				break;
 800a6e6:	e00c      	b.n	800a702 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	73bb      	strb	r3, [r7, #14]
				break;
 800a6ec:	e009      	b.n	800a702 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	73bb      	strb	r3, [r7, #14]
				break;
 800a6f2:	e006      	b.n	800a702 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a6f4:	2304      	movs	r3, #4
 800a6f6:	73bb      	strb	r3, [r7, #14]
				break;
 800a6f8:	e003      	b.n	800a702 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a6fa:	23f5      	movs	r3, #245	; 0xf5
 800a6fc:	73fb      	strb	r3, [r7, #15]
 800a6fe:	e000      	b.n	800a702 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a700:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d107      	bne.n	800a71a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a70a:	7bbb      	ldrb	r3, [r7, #14]
 800a70c:	461a      	mov	r2, r3
 800a70e:	210a      	movs	r1, #10
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f003 faec 	bl	800dcee <VL53L0X_WrByte>
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a71a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d10f      	bne.n	800a742 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a722:	7e3b      	ldrb	r3, [r7, #24]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	73bb      	strb	r3, [r7, #14]
 800a72c:	e001      	b.n	800a732 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a72e:	2310      	movs	r3, #16
 800a730:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	22ef      	movs	r2, #239	; 0xef
 800a736:	2184      	movs	r1, #132	; 0x84
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f003 fb18 	bl	800dd6e <VL53L0X_UpdateByte>
 800a73e:	4603      	mov	r3, r0
 800a740:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d103      	bne.n	800a752 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	787a      	ldrb	r2, [r7, #1]
 800a74e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d105      	bne.n	800a766 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a75a:	2100      	movs	r1, #0
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f000 f83f 	bl	800a7e0 <VL53L0X_ClearInterruptMask>
 800a762:	4603      	mov	r3, r0
 800a764:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a766:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop

0800a774 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	607a      	str	r2, [r7, #4]
 800a77e:	603b      	str	r3, [r7, #0]
 800a780:	460b      	mov	r3, r1
 800a782:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a784:	2300      	movs	r3, #0
 800a786:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a788:	f107 0314 	add.w	r3, r7, #20
 800a78c:	461a      	mov	r2, r3
 800a78e:	210e      	movs	r1, #14
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f003 fb49 	bl	800de28 <VL53L0X_RdWord>
 800a796:	4603      	mov	r3, r0
 800a798:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a79a:	8abb      	ldrh	r3, [r7, #20]
 800a79c:	045b      	lsls	r3, r3, #17
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4b0e      	ldr	r3, [pc, #56]	; (800a7dc <VL53L0X_GetInterruptThresholds+0x68>)
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a7a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10f      	bne.n	800a7d0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a7b0:	f107 0314 	add.w	r3, r7, #20
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	210c      	movs	r1, #12
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f003 fb35 	bl	800de28 <VL53L0X_RdWord>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a7c2:	8abb      	ldrh	r3, [r7, #20]
 800a7c4:	045b      	lsls	r3, r3, #17
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <VL53L0X_GetInterruptThresholds+0x68>)
 800a7ca:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a7cc:	683a      	ldr	r2, [r7, #0]
 800a7ce:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3718      	adds	r7, #24
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	1ffe0000 	.word	0x1ffe0000

0800a7e0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	210b      	movs	r1, #11
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f003 fa79 	bl	800dcee <VL53L0X_WrByte>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a800:	2200      	movs	r2, #0
 800a802:	210b      	movs	r1, #11
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f003 fa72 	bl	800dcee <VL53L0X_WrByte>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	7bfb      	ldrb	r3, [r7, #15]
 800a810:	4313      	orrs	r3, r2
 800a812:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a814:	f107 030d 	add.w	r3, r7, #13
 800a818:	461a      	mov	r2, r3
 800a81a:	2113      	movs	r1, #19
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f003 fae4 	bl	800ddea <VL53L0X_RdByte>
 800a822:	4603      	mov	r3, r0
 800a824:	461a      	mov	r2, r3
 800a826:	7bfb      	ldrb	r3, [r7, #15]
 800a828:	4313      	orrs	r3, r2
 800a82a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	3301      	adds	r3, #1
 800a830:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a832:	7b7b      	ldrb	r3, [r7, #13]
 800a834:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d006      	beq.n	800a84a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d803      	bhi.n	800a84a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0d3      	beq.n	800a7f2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a84a:	7bbb      	ldrb	r3, [r7, #14]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d901      	bls.n	800a854 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a850:	23f4      	movs	r3, #244	; 0xf4
 800a852:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a854:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a858:	4618      	mov	r0, r3
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}

0800a860 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800a86e:	f107 030e 	add.w	r3, r7, #14
 800a872:	461a      	mov	r2, r3
 800a874:	2113      	movs	r1, #19
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f003 fab7 	bl	800ddea <VL53L0X_RdByte>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	f003 0207 	and.w	r2, r3, #7
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a88a:	7bbb      	ldrb	r3, [r7, #14]
 800a88c:	f003 0318 	and.w	r3, r3, #24
 800a890:	2b00      	cmp	r3, #0
 800a892:	d001      	beq.n	800a898 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a894:	23fa      	movs	r3, #250	; 0xfa
 800a896:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a898:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3710      	adds	r7, #16
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	68b9      	ldr	r1, [r7, #8]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 fa03 	bl	800acc4 <VL53L0X_perform_ref_spad_management>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a8dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a8e0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a8e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8e6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a8e8:	f107 0308 	add.w	r3, r7, #8
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	2128      	movs	r1, #40	; 0x28
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f003 fa99 	bl	800de28 <VL53L0X_RdWord>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a8fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d11e      	bne.n	800a940 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a902:	893b      	ldrh	r3, [r7, #8]
 800a904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a908:	b29b      	uxth	r3, r3
 800a90a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a90c:	893b      	ldrh	r3, [r7, #8]
 800a90e:	461a      	mov	r2, r3
 800a910:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a914:	429a      	cmp	r2, r3
 800a916:	dd0b      	ble.n	800a930 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a918:	893a      	ldrh	r2, [r7, #8]
 800a91a:	897b      	ldrh	r3, [r7, #10]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	b29b      	uxth	r3, r3
 800a920:	b21b      	sxth	r3, r3
 800a922:	461a      	mov	r2, r3
					* 250;
 800a924:	23fa      	movs	r3, #250	; 0xfa
 800a926:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	e007      	b.n	800a940 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a930:	893b      	ldrh	r3, [r7, #8]
 800a932:	b21b      	sxth	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	23fa      	movs	r3, #250	; 0xfa
 800a938:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a940:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b08b      	sub	sp, #44	; 0x2c
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
 800a958:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a95a:	2308      	movs	r3, #8
 800a95c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a968:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	69bb      	ldr	r3, [r7, #24]
 800a96e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a972:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	fbb3 f2f2 	udiv	r2, r3, r2
 800a97c:	69b9      	ldr	r1, [r7, #24]
 800a97e:	fb01 f202 	mul.w	r2, r1, r2
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a986:	697b      	ldr	r3, [r7, #20]
 800a988:	627b      	str	r3, [r7, #36]	; 0x24
 800a98a:	e030      	b.n	800a9ee <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800a990:	68fa      	ldr	r2, [r7, #12]
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	4413      	add	r3, r2
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800a99a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	d11e      	bne.n	800a9e0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800a9a2:	7ffa      	ldrb	r2, [r7, #31]
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	fa42 f303 	asr.w	r3, r2, r3
 800a9aa:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800a9b0:	e016      	b.n	800a9e0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800a9b2:	7ffb      	ldrb	r3, [r7, #31]
 800a9b4:	f003 0301 	and.w	r3, r3, #1
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <get_next_good_spad+0x88>
				success = 1;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	fb02 f203 	mul.w	r2, r2, r3
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	601a      	str	r2, [r3, #0]
				break;
 800a9d2:	e009      	b.n	800a9e8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800a9d4:	7ffb      	ldrb	r3, [r7, #31]
 800a9d6:	085b      	lsrs	r3, r3, #1
 800a9d8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800a9da:	6a3b      	ldr	r3, [r7, #32]
 800a9dc:	3301      	adds	r3, #1
 800a9de:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800a9e0:	6a3a      	ldr	r2, [r7, #32]
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d3e4      	bcc.n	800a9b2 <get_next_good_spad+0x66>
				coarseIndex++) {
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d202      	bcs.n	800a9fc <get_next_good_spad+0xb0>
 800a9f6:	7fbb      	ldrb	r3, [r7, #30]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0c7      	beq.n	800a98c <get_next_good_spad+0x40>
		}
	}
}
 800a9fc:	bf00      	nop
 800a9fe:	372c      	adds	r7, #44	; 0x2c
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800aa10:	2301      	movs	r3, #1
 800aa12:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	099b      	lsrs	r3, r3, #6
 800aa18:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800aa1a:	4a07      	ldr	r2, [pc, #28]	; (800aa38 <is_aperture+0x30>)
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <is_aperture+0x22>
		isAperture = 0;
 800aa26:	2300      	movs	r3, #0
 800aa28:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800aa2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	2000042c 	.word	0x2000042c

0800aa3c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b089      	sub	sp, #36	; 0x24
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800aa4c:	2308      	movs	r3, #8
 800aa4e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa58:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa62:	69b9      	ldr	r1, [r7, #24]
 800aa64:	fb01 f202 	mul.w	r2, r1, r2
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800aa6c:	697a      	ldr	r2, [r7, #20]
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d302      	bcc.n	800aa7a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800aa74:	23ce      	movs	r3, #206	; 0xce
 800aa76:	77fb      	strb	r3, [r7, #31]
 800aa78:	e010      	b.n	800aa9c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	4413      	add	r3, r2
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	b25a      	sxtb	r2, r3
 800aa84:	2101      	movs	r1, #1
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	fa01 f303 	lsl.w	r3, r1, r3
 800aa8c:	b25b      	sxtb	r3, r3
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	b259      	sxtb	r1, r3
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	4413      	add	r3, r2
 800aa98:	b2ca      	uxtb	r2, r1
 800aa9a:	701a      	strb	r2, [r3, #0]

	return status;
 800aa9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	3724      	adds	r7, #36	; 0x24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr

0800aaac <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800aab6:	2306      	movs	r3, #6
 800aab8:	683a      	ldr	r2, [r7, #0]
 800aaba:	21b0      	movs	r1, #176	; 0xb0
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f003 f8ca 	bl	800dc56 <VL53L0X_WriteMulti>
 800aac2:	4603      	mov	r3, r0
 800aac4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800aac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3710      	adds	r7, #16
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b084      	sub	sp, #16
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800aadc:	2306      	movs	r3, #6
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	21b0      	movs	r1, #176	; 0xb0
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f003 f8de 	bl	800dca4 <VL53L0X_ReadMulti>
 800aae8:	4603      	mov	r3, r0
 800aaea:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800aaec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08c      	sub	sp, #48	; 0x30
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	607a      	str	r2, [r7, #4]
 800ab02:	603b      	str	r3, [r7, #0]
 800ab04:	460b      	mov	r3, r1
 800ab06:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800ab0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab10:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800ab12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab14:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ab16:	2300      	movs	r3, #0
 800ab18:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab1a:	e02b      	b.n	800ab74 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800ab1c:	f107 031c 	add.w	r3, r7, #28
 800ab20:	6a3a      	ldr	r2, [r7, #32]
 800ab22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f7ff ff11 	bl	800a94c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab30:	d103      	bne.n	800ab3a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ab32:	23ce      	movs	r3, #206	; 0xce
 800ab34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ab38:	e020      	b.n	800ab7c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab40:	4413      	add	r3, r2
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff ff60 	bl	800aa08 <is_aperture>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d003      	beq.n	800ab5a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ab52:	23ce      	movs	r3, #206	; 0xce
 800ab54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800ab58:	e010      	b.n	800ab7c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800ab5e:	6a3a      	ldr	r2, [r7, #32]
 800ab60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab62:	6838      	ldr	r0, [r7, #0]
 800ab64:	f7ff ff6a 	bl	800aa3c <enable_spad_bit>
		currentSpad++;
 800ab68:	6a3b      	ldr	r3, [r7, #32]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ab6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab70:	3301      	adds	r3, #1
 800ab72:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d3cf      	bcc.n	800ab1c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800ab7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab7e:	6a3a      	ldr	r2, [r7, #32]
 800ab80:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ab82:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d106      	bne.n	800ab98 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f7ff ff8d 	bl	800aaac <set_ref_spad_map>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ab98:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d121      	bne.n	800abe4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800aba0:	f107 0314 	add.w	r3, r7, #20
 800aba4:	4619      	mov	r1, r3
 800aba6:	68f8      	ldr	r0, [r7, #12]
 800aba8:	f7ff ff93 	bl	800aad2 <get_ref_spad_map>
 800abac:	4603      	mov	r3, r0
 800abae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800abb6:	e011      	b.n	800abdc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	4413      	add	r3, r2
 800abbe:	781a      	ldrb	r2, [r3, #0]
 800abc0:	f107 0114 	add.w	r1, r7, #20
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	440b      	add	r3, r1
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	429a      	cmp	r2, r3
 800abcc:	d003      	beq.n	800abd6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800abce:	23ce      	movs	r3, #206	; 0xce
 800abd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800abd4:	e006      	b.n	800abe4 <enable_ref_spads+0xec>
			}
			i++;
 800abd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd8:	3301      	adds	r3, #1
 800abda:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800abdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d3e9      	bcc.n	800abb8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800abe4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3730      	adds	r7, #48	; 0x30
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08a      	sub	sp, #40	; 0x28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800abfa:	2300      	movs	r3, #0
 800abfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ac0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800ac10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d107      	bne.n	800ac28 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800ac18:	22c0      	movs	r2, #192	; 0xc0
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f003 f866 	bl	800dcee <VL53L0X_WrByte>
 800ac22:	4603      	mov	r3, r0
 800ac24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800ac28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d108      	bne.n	800ac42 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800ac30:	f107 0308 	add.w	r3, r7, #8
 800ac34:	4619      	mov	r1, r3
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff fc48 	bl	800a4cc <VL53L0X_PerformSingleRangingMeasurement>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800ac42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d107      	bne.n	800ac5a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	21ff      	movs	r1, #255	; 0xff
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f003 f84d 	bl	800dcee <VL53L0X_WrByte>
 800ac54:	4603      	mov	r3, r0
 800ac56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800ac5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d107      	bne.n	800ac72 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	21b6      	movs	r1, #182	; 0xb6
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f003 f8de 	bl	800de28 <VL53L0X_RdWord>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800ac72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d107      	bne.n	800ac8a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	21ff      	movs	r1, #255	; 0xff
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f003 f835 	bl	800dcee <VL53L0X_WrByte>
 800ac84:	4603      	mov	r3, r0
 800ac86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800ac8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d112      	bne.n	800acb8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ac92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac96:	461a      	mov	r2, r3
 800ac98:	2101      	movs	r1, #1
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f003 f827 	bl	800dcee <VL53L0X_WrByte>
 800aca0:	4603      	mov	r3, r0
 800aca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800aca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d104      	bne.n	800acb8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800acb4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800acb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3728      	adds	r7, #40	; 0x28
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800acc4:	b590      	push	{r4, r7, lr}
 800acc6:	b09d      	sub	sp, #116	; 0x74
 800acc8:	af06      	add	r7, sp, #24
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800acd0:	2300      	movs	r3, #0
 800acd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800acd6:	23b4      	movs	r3, #180	; 0xb4
 800acd8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800acdc:	2303      	movs	r3, #3
 800acde:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800ace0:	232c      	movs	r3, #44	; 0x2c
 800ace2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800acf0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800acf4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800acfe:	2306      	movs	r3, #6
 800ad00:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800ad02:	2300      	movs	r3, #0
 800ad04:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800ad28:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad2e:	e009      	b.n	800ad44 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad34:	4413      	add	r3, r2
 800ad36:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ad3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad40:	3301      	adds	r3, #1
 800ad42:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d3f1      	bcc.n	800ad30 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	21ff      	movs	r1, #255	; 0xff
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f002 ffcc 	bl	800dcee <VL53L0X_WrByte>
 800ad56:	4603      	mov	r3, r0
 800ad58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ad5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d107      	bne.n	800ad74 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800ad64:	2200      	movs	r2, #0
 800ad66:	214f      	movs	r1, #79	; 0x4f
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f002 ffc0 	bl	800dcee <VL53L0X_WrByte>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800ad74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d107      	bne.n	800ad8c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800ad7c:	222c      	movs	r2, #44	; 0x2c
 800ad7e:	214e      	movs	r1, #78	; 0x4e
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f002 ffb4 	bl	800dcee <VL53L0X_WrByte>
 800ad86:	4603      	mov	r3, r0
 800ad88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ad8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d107      	bne.n	800ada4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ad94:	2200      	movs	r2, #0
 800ad96:	21ff      	movs	r1, #255	; 0xff
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f002 ffa8 	bl	800dcee <VL53L0X_WrByte>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ada4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d109      	bne.n	800adc0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800adac:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800adb0:	461a      	mov	r2, r3
 800adb2:	21b6      	movs	r1, #182	; 0xb6
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f002 ff9a 	bl	800dcee <VL53L0X_WrByte>
 800adba:	4603      	mov	r3, r0
 800adbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800adc0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d107      	bne.n	800add8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800adc8:	2200      	movs	r2, #0
 800adca:	2180      	movs	r1, #128	; 0x80
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f002 ff8e 	bl	800dcee <VL53L0X_WrByte>
 800add2:	4603      	mov	r3, r0
 800add4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800add8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800addc:	2b00      	cmp	r3, #0
 800adde:	d10a      	bne.n	800adf6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800ade0:	f107 0210 	add.w	r2, r7, #16
 800ade4:	f107 0111 	add.w	r1, r7, #17
 800ade8:	2300      	movs	r3, #0
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fbbb 	bl	800b566 <VL53L0X_perform_ref_calibration>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800adf6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d121      	bne.n	800ae42 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800adfe:	2300      	movs	r3, #0
 800ae00:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800ae02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae04:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800ae0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae0c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800ae1a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ae1e:	f107 0218 	add.w	r2, r7, #24
 800ae22:	9204      	str	r2, [sp, #16]
 800ae24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae26:	9203      	str	r2, [sp, #12]
 800ae28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae2a:	9202      	str	r2, [sp, #8]
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	4623      	mov	r3, r4
 800ae34:	4602      	mov	r2, r0
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7ff fe5e 	bl	800aaf8 <enable_ref_spads>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae42:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d174      	bne.n	800af34 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800ae4e:	f107 0312 	add.w	r3, r7, #18
 800ae52:	4619      	mov	r1, r3
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f7ff fecb 	bl	800abf0 <perform_ref_signal_measurement>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ae60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d161      	bne.n	800af2c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800ae68:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800ae6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d25d      	bcs.n	800af2c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800ae70:	2300      	movs	r3, #0
 800ae72:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae74:	e009      	b.n	800ae8a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae7a:	4413      	add	r3, r2
 800ae7c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ae80:	2200      	movs	r2, #0
 800ae82:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800ae84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae86:	3301      	adds	r3, #1
 800ae88:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d3f1      	bcc.n	800ae76 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800ae92:	e002      	b.n	800ae9a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800ae94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae96:	3301      	adds	r3, #1
 800ae98:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800ae9a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800ae9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea0:	4413      	add	r3, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7ff fdb0 	bl	800aa08 <is_aperture>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d103      	bne.n	800aeb6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800aeae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	429a      	cmp	r2, r3
 800aeb4:	d3ee      	bcc.n	800ae94 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800aeba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aebc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800aeca:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800aece:	f107 0218 	add.w	r2, r7, #24
 800aed2:	9204      	str	r2, [sp, #16]
 800aed4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aed6:	9203      	str	r2, [sp, #12]
 800aed8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aeda:	9202      	str	r2, [sp, #8]
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee0:	9300      	str	r3, [sp, #0]
 800aee2:	4623      	mov	r3, r4
 800aee4:	4602      	mov	r2, r0
 800aee6:	68f8      	ldr	r0, [r7, #12]
 800aee8:	f7ff fe06 	bl	800aaf8 <enable_ref_spads>
 800aeec:	4603      	mov	r3, r0
 800aeee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800aef2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d11b      	bne.n	800af32 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800aefe:	f107 0312 	add.w	r3, r7, #18
 800af02:	4619      	mov	r1, r3
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f7ff fe73 	bl	800abf0 <perform_ref_signal_measurement>
 800af0a:	4603      	mov	r3, r0
 800af0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800af10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10c      	bne.n	800af32 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800af18:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800af1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af1c:	429a      	cmp	r2, r3
 800af1e:	d208      	bcs.n	800af32 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800af20:	2301      	movs	r3, #1
 800af22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800af26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af28:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800af2a:	e002      	b.n	800af32 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af30:	e000      	b.n	800af34 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800af32:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800af34:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f040 80af 	bne.w	800b09c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800af3e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800af40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800af42:	429a      	cmp	r2, r3
 800af44:	f240 80aa 	bls.w	800b09c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800af48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800af4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800af58:	f107 031c 	add.w	r3, r7, #28
 800af5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af5e:	4618      	mov	r0, r3
 800af60:	f002 ffe6 	bl	800df30 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800af64:	8a7b      	ldrh	r3, [r7, #18]
 800af66:	461a      	mov	r2, r3
 800af68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bfb8      	it	lt
 800af70:	425b      	neglt	r3, r3
 800af72:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800af7a:	e086      	b.n	800b08a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800af82:	f107 0314 	add.w	r3, r7, #20
 800af86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af8a:	f7ff fcdf 	bl	800a94c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af94:	d103      	bne.n	800af9e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800af96:	23ce      	movs	r3, #206	; 0xce
 800af98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800af9c:	e07e      	b.n	800b09c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800af9e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	4413      	add	r3, r2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff fd2e 	bl	800aa08 <is_aperture>
 800afac:	4603      	mov	r3, r0
 800afae:	461a      	mov	r2, r3
 800afb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d003      	beq.n	800afbe <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800afb6:	2301      	movs	r3, #1
 800afb8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800afbc:	e06e      	b.n	800b09c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800afbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc0:	3301      	adds	r3, #1
 800afc2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800afce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800afd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fd32 	bl	800aa3c <enable_spad_bit>
 800afd8:	4603      	mov	r3, r0
 800afda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800afde:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10c      	bne.n	800b000 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800afe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afe8:	3301      	adds	r3, #1
 800afea:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800aff2:	4619      	mov	r1, r3
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f7ff fd59 	bl	800aaac <set_ref_spad_map>
 800affa:	4603      	mov	r3, r0
 800affc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b000:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b004:	2b00      	cmp	r3, #0
 800b006:	d146      	bne.n	800b096 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b008:	f107 0312 	add.w	r3, r7, #18
 800b00c:	4619      	mov	r1, r3
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f7ff fdee 	bl	800abf0 <perform_ref_signal_measurement>
 800b014:	4603      	mov	r3, r0
 800b016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b01a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d13b      	bne.n	800b09a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b022:	8a7b      	ldrh	r3, [r7, #18]
 800b024:	461a      	mov	r2, r3
 800b026:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b028:	1ad3      	subs	r3, r2, r3
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	bfb8      	it	lt
 800b02e:	425b      	neglt	r3, r3
 800b030:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b032:	8a7b      	ldrh	r3, [r7, #18]
 800b034:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b036:	429a      	cmp	r2, r3
 800b038:	d21c      	bcs.n	800b074 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b03e:	429a      	cmp	r2, r3
 800b040:	d914      	bls.n	800b06c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b042:	f107 031c 	add.w	r3, r7, #28
 800b046:	4619      	mov	r1, r3
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f7ff fd2f 	bl	800aaac <set_ref_spad_map>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800b05a:	f107 011c 	add.w	r1, r7, #28
 800b05e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b060:	4618      	mov	r0, r3
 800b062:	f002 ff65 	bl	800df30 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b066:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b068:	3b01      	subs	r3, #1
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800b06c:	2301      	movs	r3, #1
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b072:	e00a      	b.n	800b08a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800b07e:	f107 031c 	add.w	r3, r7, #28
 800b082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b084:	4618      	mov	r0, r3
 800b086:	f002 ff53 	bl	800df30 <memcpy>
		while (!complete) {
 800b08a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f43f af74 	beq.w	800af7c <VL53L0X_perform_ref_spad_management+0x2b8>
 800b094:	e002      	b.n	800b09c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b096:	bf00      	nop
 800b098:	e000      	b.n	800b09c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b09a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b09c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d115      	bne.n	800b0d0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0a8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800b0b0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	781a      	ldrb	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b0d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	375c      	adds	r7, #92	; 0x5c
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd90      	pop	{r4, r7, pc}

0800b0dc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b093      	sub	sp, #76	; 0x4c
 800b0e0:	af06      	add	r7, sp, #24
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800b0f4:	23b4      	movs	r3, #180	; 0xb4
 800b0f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800b0fa:	2306      	movs	r3, #6
 800b0fc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b0fe:	232c      	movs	r3, #44	; 0x2c
 800b100:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b102:	2201      	movs	r2, #1
 800b104:	21ff      	movs	r1, #255	; 0xff
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f002 fdf1 	bl	800dcee <VL53L0X_WrByte>
 800b10c:	4603      	mov	r3, r0
 800b10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b112:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b116:	2b00      	cmp	r3, #0
 800b118:	d107      	bne.n	800b12a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b11a:	2200      	movs	r2, #0
 800b11c:	214f      	movs	r1, #79	; 0x4f
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f002 fde5 	bl	800dcee <VL53L0X_WrByte>
 800b124:	4603      	mov	r3, r0
 800b126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b12a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d107      	bne.n	800b142 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b132:	222c      	movs	r2, #44	; 0x2c
 800b134:	214e      	movs	r1, #78	; 0x4e
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f002 fdd9 	bl	800dcee <VL53L0X_WrByte>
 800b13c:	4603      	mov	r3, r0
 800b13e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b142:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b146:	2b00      	cmp	r3, #0
 800b148:	d107      	bne.n	800b15a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b14a:	2200      	movs	r2, #0
 800b14c:	21ff      	movs	r1, #255	; 0xff
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f002 fdcd 	bl	800dcee <VL53L0X_WrByte>
 800b154:	4603      	mov	r3, r0
 800b156:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b15a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d109      	bne.n	800b176 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b162:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b166:	461a      	mov	r2, r3
 800b168:	21b6      	movs	r1, #182	; 0xb6
 800b16a:	68f8      	ldr	r0, [r7, #12]
 800b16c:	f002 fdbf 	bl	800dcee <VL53L0X_WrByte>
 800b170:	4603      	mov	r3, r0
 800b172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b176:	2300      	movs	r3, #0
 800b178:	627b      	str	r3, [r7, #36]	; 0x24
 800b17a:	e009      	b.n	800b190 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	4413      	add	r3, r2
 800b182:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800b186:	2200      	movs	r2, #0
 800b188:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	3301      	adds	r3, #1
 800b18e:	627b      	str	r3, [r7, #36]	; 0x24
 800b190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	429a      	cmp	r2, r3
 800b196:	d3f1      	bcc.n	800b17c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b198:	79fb      	ldrb	r3, [r7, #7]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d011      	beq.n	800b1c2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b19e:	e002      	b.n	800b1a6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b1a6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800b1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ac:	4413      	add	r3, r2
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7ff fc2a 	bl	800aa08 <is_aperture>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d103      	bne.n	800b1c2 <VL53L0X_set_reference_spads+0xe6>
 800b1ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d3ee      	bcc.n	800b1a0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800b1ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1d2:	79f9      	ldrb	r1, [r7, #7]
 800b1d4:	f107 0214 	add.w	r2, r7, #20
 800b1d8:	9204      	str	r2, [sp, #16]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	9203      	str	r2, [sp, #12]
 800b1de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1e0:	9202      	str	r2, [sp, #8]
 800b1e2:	9301      	str	r3, [sp, #4]
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	9300      	str	r3, [sp, #0]
 800b1e8:	4623      	mov	r3, r4
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7ff fc83 	bl	800aaf8 <enable_ref_spads>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b1f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10c      	bne.n	800b21a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	79fa      	ldrb	r2, [r7, #7]
 800b216:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b21a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3734      	adds	r7, #52	; 0x34
 800b222:	46bd      	mov	sp, r7
 800b224:	bd90      	pop	{r4, r7, pc}

0800b226 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b084      	sub	sp, #16
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	460b      	mov	r3, r1
 800b230:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b232:	2300      	movs	r3, #0
 800b234:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10a      	bne.n	800b254 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b23e:	78fb      	ldrb	r3, [r7, #3]
 800b240:	f043 0301 	orr.w	r3, r3, #1
 800b244:	b2db      	uxtb	r3, r3
 800b246:	461a      	mov	r2, r3
 800b248:	2100      	movs	r1, #0
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f002 fd4f 	bl	800dcee <VL53L0X_WrByte>
 800b250:	4603      	mov	r3, r0
 800b252:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d104      	bne.n	800b266 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f9bf 	bl	800b5e0 <VL53L0X_measurement_poll_for_completion>
 800b262:	4603      	mov	r3, r0
 800b264:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d105      	bne.n	800b27a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b26e:	2100      	movs	r1, #0
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f7ff fab5 	bl	800a7e0 <VL53L0X_ClearInterruptMask>
 800b276:	4603      	mov	r3, r0
 800b278:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b27a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d106      	bne.n	800b290 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b282:	2200      	movs	r2, #0
 800b284:	2100      	movs	r1, #0
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f002 fd31 	bl	800dcee <VL53L0X_WrByte>
 800b28c:	4603      	mov	r3, r0
 800b28e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b290:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b294:	4618      	mov	r0, r3
 800b296:	3710      	adds	r7, #16
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	70fb      	strb	r3, [r7, #3]
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	70bb      	strb	r3, [r7, #2]
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b2be:	2201      	movs	r2, #1
 800b2c0:	21ff      	movs	r1, #255	; 0xff
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f002 fd13 	bl	800dcee <VL53L0X_WrByte>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	7bfb      	ldrb	r3, [r7, #15]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f002 fd09 	bl	800dcee <VL53L0X_WrByte>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	461a      	mov	r2, r3
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	21ff      	movs	r1, #255	; 0xff
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f002 fcff 	bl	800dcee <VL53L0X_WrByte>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	7bfb      	ldrb	r3, [r7, #15]
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d01e      	beq.n	800b33e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b300:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d009      	beq.n	800b31c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	21cb      	movs	r1, #203	; 0xcb
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f002 fd6c 	bl	800ddea <VL53L0X_RdByte>
 800b312:	4603      	mov	r3, r0
 800b314:	461a      	mov	r2, r3
 800b316:	7bfb      	ldrb	r3, [r7, #15]
 800b318:	4313      	orrs	r3, r2
 800b31a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b31c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b320:	2b00      	cmp	r3, #0
 800b322:	d02a      	beq.n	800b37a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b324:	f107 030e 	add.w	r3, r7, #14
 800b328:	461a      	mov	r2, r3
 800b32a:	21ee      	movs	r1, #238	; 0xee
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f002 fd5c 	bl	800ddea <VL53L0X_RdByte>
 800b332:	4603      	mov	r3, r0
 800b334:	461a      	mov	r2, r3
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	4313      	orrs	r3, r2
 800b33a:	73fb      	strb	r3, [r7, #15]
 800b33c:	e01d      	b.n	800b37a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b33e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d00a      	beq.n	800b35c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b346:	78bb      	ldrb	r3, [r7, #2]
 800b348:	461a      	mov	r2, r3
 800b34a:	21cb      	movs	r1, #203	; 0xcb
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f002 fcce 	bl	800dcee <VL53L0X_WrByte>
 800b352:	4603      	mov	r3, r0
 800b354:	461a      	mov	r2, r3
 800b356:	7bfb      	ldrb	r3, [r7, #15]
 800b358:	4313      	orrs	r3, r2
 800b35a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b35c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00a      	beq.n	800b37a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b364:	787b      	ldrb	r3, [r7, #1]
 800b366:	2280      	movs	r2, #128	; 0x80
 800b368:	21ee      	movs	r1, #238	; 0xee
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f002 fcff 	bl	800dd6e <VL53L0X_UpdateByte>
 800b370:	4603      	mov	r3, r0
 800b372:	461a      	mov	r2, r3
 800b374:	7bfb      	ldrb	r3, [r7, #15]
 800b376:	4313      	orrs	r3, r2
 800b378:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b37a:	2201      	movs	r2, #1
 800b37c:	21ff      	movs	r1, #255	; 0xff
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f002 fcb5 	bl	800dcee <VL53L0X_WrByte>
 800b384:	4603      	mov	r3, r0
 800b386:	461a      	mov	r2, r3
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b38e:	2201      	movs	r2, #1
 800b390:	2100      	movs	r1, #0
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f002 fcab 	bl	800dcee <VL53L0X_WrByte>
 800b398:	4603      	mov	r3, r0
 800b39a:	461a      	mov	r2, r3
 800b39c:	7bfb      	ldrb	r3, [r7, #15]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	21ff      	movs	r1, #255	; 0xff
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f002 fca1 	bl	800dcee <VL53L0X_WrByte>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b3b6:	7bbb      	ldrb	r3, [r7, #14]
 800b3b8:	f023 0310 	bic.w	r3, r3, #16
 800b3bc:	b2da      	uxtb	r2, r3
 800b3be:	69fb      	ldr	r3, [r7, #28]
 800b3c0:	701a      	strb	r2, [r3, #0]

	return Status;
 800b3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b3ce:	b580      	push	{r7, lr}
 800b3d0:	b08a      	sub	sp, #40	; 0x28
 800b3d2:	af04      	add	r7, sp, #16
 800b3d4:	60f8      	str	r0, [r7, #12]
 800b3d6:	60b9      	str	r1, [r7, #8]
 800b3d8:	4611      	mov	r1, r2
 800b3da:	461a      	mov	r2, r3
 800b3dc:	460b      	mov	r3, r1
 800b3de:	71fb      	strb	r3, [r7, #7]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b3f8:	79bb      	ldrb	r3, [r7, #6]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b404:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b406:	2201      	movs	r2, #1
 800b408:	2101      	movs	r1, #1
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f002 fc6f 	bl	800dcee <VL53L0X_WrByte>
 800b410:	4603      	mov	r3, r0
 800b412:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d105      	bne.n	800b428 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b41c:	2140      	movs	r1, #64	; 0x40
 800b41e:	68f8      	ldr	r0, [r7, #12]
 800b420:	f7ff ff01 	bl	800b226 <VL53L0X_perform_single_ref_calibration>
 800b424:	4603      	mov	r3, r0
 800b426:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b428:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d115      	bne.n	800b45c <VL53L0X_perform_vhv_calibration+0x8e>
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	2b01      	cmp	r3, #1
 800b434:	d112      	bne.n	800b45c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b436:	7d39      	ldrb	r1, [r7, #20]
 800b438:	7d7a      	ldrb	r2, [r7, #21]
 800b43a:	2300      	movs	r3, #0
 800b43c:	9303      	str	r3, [sp, #12]
 800b43e:	2301      	movs	r3, #1
 800b440:	9302      	str	r3, [sp, #8]
 800b442:	f107 0313 	add.w	r3, r7, #19
 800b446:	9301      	str	r3, [sp, #4]
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	460b      	mov	r3, r1
 800b44e:	2101      	movs	r1, #1
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff ff23 	bl	800b29c <VL53L0X_ref_calibration_io>
 800b456:	4603      	mov	r3, r0
 800b458:	75fb      	strb	r3, [r7, #23]
 800b45a:	e002      	b.n	800b462 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2200      	movs	r2, #0
 800b460:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b462:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d112      	bne.n	800b490 <VL53L0X_perform_vhv_calibration+0xc2>
 800b46a:	79bb      	ldrb	r3, [r7, #6]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00f      	beq.n	800b490 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b470:	7dbb      	ldrb	r3, [r7, #22]
 800b472:	461a      	mov	r2, r3
 800b474:	2101      	movs	r1, #1
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f002 fc39 	bl	800dcee <VL53L0X_WrByte>
 800b47c:	4603      	mov	r3, r0
 800b47e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d103      	bne.n	800b490 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	7dba      	ldrb	r2, [r7, #22]
 800b48c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b490:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3718      	adds	r7, #24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af04      	add	r7, sp, #16
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	4611      	mov	r1, r2
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	71fb      	strb	r3, [r7, #7]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b4c2:	79bb      	ldrb	r3, [r7, #6]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d003      	beq.n	800b4d0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b4ce:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	2101      	movs	r1, #1
 800b4d4:	68f8      	ldr	r0, [r7, #12]
 800b4d6:	f002 fc0a 	bl	800dcee <VL53L0X_WrByte>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b4de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d105      	bne.n	800b4f2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f7ff fe9c 	bl	800b226 <VL53L0X_perform_single_ref_calibration>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b4f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d115      	bne.n	800b526 <VL53L0X_perform_phase_calibration+0x8a>
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	2b01      	cmp	r3, #1
 800b4fe:	d112      	bne.n	800b526 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b500:	7d39      	ldrb	r1, [r7, #20]
 800b502:	7d7a      	ldrb	r2, [r7, #21]
 800b504:	2301      	movs	r3, #1
 800b506:	9303      	str	r3, [sp, #12]
 800b508:	2300      	movs	r3, #0
 800b50a:	9302      	str	r3, [sp, #8]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	9301      	str	r3, [sp, #4]
 800b510:	f107 0313 	add.w	r3, r7, #19
 800b514:	9300      	str	r3, [sp, #0]
 800b516:	460b      	mov	r3, r1
 800b518:	2101      	movs	r1, #1
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7ff febe 	bl	800b29c <VL53L0X_ref_calibration_io>
 800b520:	4603      	mov	r3, r0
 800b522:	75fb      	strb	r3, [r7, #23]
 800b524:	e002      	b.n	800b52c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	2200      	movs	r2, #0
 800b52a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b52c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d112      	bne.n	800b55a <VL53L0X_perform_phase_calibration+0xbe>
 800b534:	79bb      	ldrb	r3, [r7, #6]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00f      	beq.n	800b55a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b53a:	7dbb      	ldrb	r3, [r7, #22]
 800b53c:	461a      	mov	r2, r3
 800b53e:	2101      	movs	r1, #1
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	f002 fbd4 	bl	800dcee <VL53L0X_WrByte>
 800b546:	4603      	mov	r3, r0
 800b548:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b54a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d103      	bne.n	800b55a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	7dba      	ldrb	r2, [r7, #22]
 800b556:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3718      	adds	r7, #24
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b086      	sub	sp, #24
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	60f8      	str	r0, [r7, #12]
 800b56e:	60b9      	str	r1, [r7, #8]
 800b570:	607a      	str	r2, [r7, #4]
 800b572:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b574:	2300      	movs	r3, #0
 800b576:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b582:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b584:	78fa      	ldrb	r2, [r7, #3]
 800b586:	2300      	movs	r3, #0
 800b588:	68b9      	ldr	r1, [r7, #8]
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7ff ff1f 	bl	800b3ce <VL53L0X_perform_vhv_calibration>
 800b590:	4603      	mov	r3, r0
 800b592:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d107      	bne.n	800b5ac <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b59c:	78fa      	ldrb	r2, [r7, #3]
 800b59e:	2300      	movs	r3, #0
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff ff7a 	bl	800b49c <VL53L0X_perform_phase_calibration>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b5ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10f      	bne.n	800b5d4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b5b4:	7dbb      	ldrb	r3, [r7, #22]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	2101      	movs	r1, #1
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f002 fb97 	bl	800dcee <VL53L0X_WrByte>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b5c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d103      	bne.n	800b5d4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	7dba      	ldrb	r2, [r7, #22]
 800b5d0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b5d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b5f4:	f107 030f 	add.w	r3, r7, #15
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f7fe fdff 	bl	800a1fe <VL53L0X_GetMeasurementDataReady>
 800b600:	4603      	mov	r3, r0
 800b602:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d110      	bne.n	800b62e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d00f      	beq.n	800b632 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	3301      	adds	r3, #1
 800b616:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b61e:	d302      	bcc.n	800b626 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b620:	23f9      	movs	r3, #249	; 0xf9
 800b622:	75fb      	strb	r3, [r7, #23]
			break;
 800b624:	e006      	b.n	800b634 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f002 fc3c 	bl	800dea4 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b62c:	e7e2      	b.n	800b5f4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b62e:	bf00      	nop
 800b630:	e000      	b.n	800b634 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b632:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b634:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	4603      	mov	r3, r0
 800b648:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b64a:	2300      	movs	r3, #0
 800b64c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	3301      	adds	r3, #1
 800b652:	b2db      	uxtb	r3, r3
 800b654:	005b      	lsls	r3, r3, #1
 800b656:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b676:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b678:	e002      	b.n	800b680 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	089b      	lsrs	r3, r3, #2
 800b67e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b680:	68ba      	ldr	r2, [r7, #8]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	429a      	cmp	r2, r3
 800b686:	d8f8      	bhi.n	800b67a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b688:	e017      	b.n	800b6ba <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	4413      	add	r3, r2
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d30b      	bcc.n	800b6ae <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4413      	add	r3, r2
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	085b      	lsrs	r3, r3, #1
 800b6a6:	68ba      	ldr	r2, [r7, #8]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	60fb      	str	r3, [r7, #12]
 800b6ac:	e002      	b.n	800b6b4 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	085b      	lsrs	r3, r3, #1
 800b6b2:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	089b      	lsrs	r3, r3, #2
 800b6b8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1e4      	bne.n	800b68a <VL53L0X_isqrt+0x24>
	}

	return res;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3714      	adds	r7, #20
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6cc:	4770      	bx	lr

0800b6ce <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b086      	sub	sp, #24
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2183      	movs	r1, #131	; 0x83
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f002 fb05 	bl	800dcee <VL53L0X_WrByte>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ea:	4313      	orrs	r3, r2
 800b6ec:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b6ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d11e      	bne.n	800b734 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b6fa:	f107 030f 	add.w	r3, r7, #15
 800b6fe:	461a      	mov	r2, r3
 800b700:	2183      	movs	r1, #131	; 0x83
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f002 fb71 	bl	800ddea <VL53L0X_RdByte>
 800b708:	4603      	mov	r3, r0
 800b70a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10a      	bne.n	800b728 <VL53L0X_device_read_strobe+0x5a>
 800b712:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d106      	bne.n	800b728 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	3301      	adds	r3, #1
 800b71e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b726:	d3e8      	bcc.n	800b6fa <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b72e:	d301      	bcc.n	800b734 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b730:	23f9      	movs	r3, #249	; 0xf9
 800b732:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b734:	2201      	movs	r2, #1
 800b736:	2183      	movs	r1, #131	; 0x83
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f002 fad8 	bl	800dcee <VL53L0X_WrByte>
 800b73e:	4603      	mov	r3, r0
 800b740:	461a      	mov	r2, r3
 800b742:	7dfb      	ldrb	r3, [r7, #23]
 800b744:	4313      	orrs	r3, r2
 800b746:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b748:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3718      	adds	r7, #24
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b098      	sub	sp, #96	; 0x60
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b760:	2300      	movs	r3, #0
 800b762:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b766:	2300      	movs	r3, #0
 800b768:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800b76c:	2300      	movs	r3, #0
 800b76e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800b772:	2300      	movs	r3, #0
 800b774:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800b776:	2300      	movs	r3, #0
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b784:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b788:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b78a:	2300      	movs	r3, #0
 800b78c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b78e:	2300      	movs	r3, #0
 800b790:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b792:	2300      	movs	r3, #0
 800b794:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b79c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800b7a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b7a4:	2b07      	cmp	r3, #7
 800b7a6:	f000 8408 	beq.w	800bfba <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	2180      	movs	r1, #128	; 0x80
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f002 fa9d 	bl	800dcee <VL53L0X_WrByte>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7bc:	4313      	orrs	r3, r2
 800b7be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	21ff      	movs	r1, #255	; 0xff
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f002 fa91 	bl	800dcee <VL53L0X_WrByte>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7d4:	4313      	orrs	r3, r2
 800b7d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2100      	movs	r1, #0
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f002 fa85 	bl	800dcee <VL53L0X_WrByte>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b7f2:	2206      	movs	r2, #6
 800b7f4:	21ff      	movs	r1, #255	; 0xff
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f002 fa79 	bl	800dcee <VL53L0X_WrByte>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	461a      	mov	r2, r3
 800b800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b804:	4313      	orrs	r3, r2
 800b806:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b80a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b80e:	461a      	mov	r2, r3
 800b810:	2183      	movs	r1, #131	; 0x83
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f002 fae9 	bl	800ddea <VL53L0X_RdByte>
 800b818:	4603      	mov	r3, r0
 800b81a:	461a      	mov	r2, r3
 800b81c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b820:	4313      	orrs	r3, r2
 800b822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b826:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b82a:	f043 0304 	orr.w	r3, r3, #4
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	461a      	mov	r2, r3
 800b832:	2183      	movs	r1, #131	; 0x83
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f002 fa5a 	bl	800dcee <VL53L0X_WrByte>
 800b83a:	4603      	mov	r3, r0
 800b83c:	461a      	mov	r2, r3
 800b83e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b842:	4313      	orrs	r3, r2
 800b844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b848:	2207      	movs	r2, #7
 800b84a:	21ff      	movs	r1, #255	; 0xff
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f002 fa4e 	bl	800dcee <VL53L0X_WrByte>
 800b852:	4603      	mov	r3, r0
 800b854:	461a      	mov	r2, r3
 800b856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b85a:	4313      	orrs	r3, r2
 800b85c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b860:	2201      	movs	r2, #1
 800b862:	2181      	movs	r1, #129	; 0x81
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f002 fa42 	bl	800dcee <VL53L0X_WrByte>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b872:	4313      	orrs	r3, r2
 800b874:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f002 fb13 	bl	800dea4 <VL53L0X_PollingDelay>
 800b87e:	4603      	mov	r3, r0
 800b880:	461a      	mov	r2, r3
 800b882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b886:	4313      	orrs	r3, r2
 800b888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b88c:	2201      	movs	r2, #1
 800b88e:	2180      	movs	r1, #128	; 0x80
 800b890:	6878      	ldr	r0, [r7, #4]
 800b892:	f002 fa2c 	bl	800dcee <VL53L0X_WrByte>
 800b896:	4603      	mov	r3, r0
 800b898:	461a      	mov	r2, r3
 800b89a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b8a4:	78fb      	ldrb	r3, [r7, #3]
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 8098 	beq.w	800b9e0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b8b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b8b4:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f040 8091 	bne.w	800b9e0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b8be:	226b      	movs	r2, #107	; 0x6b
 800b8c0:	2194      	movs	r1, #148	; 0x94
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f002 fa13 	bl	800dcee <VL53L0X_WrByte>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	461a      	mov	r2, r3
 800b8cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7ff fef9 	bl	800b6ce <VL53L0X_device_read_strobe>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b8ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	2190      	movs	r1, #144	; 0x90
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f002 fab7 	bl	800de66 <VL53L0X_RdDWord>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b900:	4313      	orrs	r3, r2
 800b902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b908:	0a1b      	lsrs	r3, r3, #8
 800b90a:	b2db      	uxtb	r3, r3
 800b90c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b910:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b916:	0bdb      	lsrs	r3, r3, #15
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b922:	2224      	movs	r2, #36	; 0x24
 800b924:	2194      	movs	r1, #148	; 0x94
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f002 f9e1 	bl	800dcee <VL53L0X_WrByte>
 800b92c:	4603      	mov	r3, r0
 800b92e:	461a      	mov	r2, r3
 800b930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b934:	4313      	orrs	r3, r2
 800b936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff fec7 	bl	800b6ce <VL53L0X_device_read_strobe>
 800b940:	4603      	mov	r3, r0
 800b942:	461a      	mov	r2, r3
 800b944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b948:	4313      	orrs	r3, r2
 800b94a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b94e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b952:	461a      	mov	r2, r3
 800b954:	2190      	movs	r1, #144	; 0x90
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f002 fa85 	bl	800de66 <VL53L0X_RdDWord>
 800b95c:	4603      	mov	r3, r0
 800b95e:	461a      	mov	r2, r3
 800b960:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b964:	4313      	orrs	r3, r2
 800b966:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800b96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96c:	0e1b      	lsrs	r3, r3, #24
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	0c1b      	lsrs	r3, r3, #16
 800b976:	b2db      	uxtb	r3, r3
 800b978:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800b97a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97c:	0a1b      	lsrs	r3, r3, #8
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	b2db      	uxtb	r3, r3
 800b986:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800b988:	2225      	movs	r2, #37	; 0x25
 800b98a:	2194      	movs	r1, #148	; 0x94
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f002 f9ae 	bl	800dcee <VL53L0X_WrByte>
 800b992:	4603      	mov	r3, r0
 800b994:	461a      	mov	r2, r3
 800b996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b99a:	4313      	orrs	r3, r2
 800b99c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f7ff fe94 	bl	800b6ce <VL53L0X_device_read_strobe>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b9b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	2190      	movs	r1, #144	; 0x90
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f002 fa52 	bl	800de66 <VL53L0X_RdDWord>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d2:	0e1b      	lsrs	r3, r3, #24
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800b9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9da:	0c1b      	lsrs	r3, r3, #16
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	f003 0302 	and.w	r3, r3, #2
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 8189 	beq.w	800bcfe <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b9ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b9f0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f040 8182 	bne.w	800bcfe <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	2194      	movs	r1, #148	; 0x94
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f002 f975 	bl	800dcee <VL53L0X_WrByte>
 800ba04:	4603      	mov	r3, r0
 800ba06:	461a      	mov	r2, r3
 800ba08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fe5b 	bl	800b6ce <VL53L0X_device_read_strobe>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba20:	4313      	orrs	r3, r2
 800ba22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800ba26:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	2190      	movs	r1, #144	; 0x90
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f002 f9db 	bl	800ddea <VL53L0X_RdByte>
 800ba34:	4603      	mov	r3, r0
 800ba36:	461a      	mov	r2, r3
 800ba38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ba42:	227b      	movs	r2, #123	; 0x7b
 800ba44:	2194      	movs	r1, #148	; 0x94
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f002 f951 	bl	800dcee <VL53L0X_WrByte>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba54:	4313      	orrs	r3, r2
 800ba56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f7ff fe37 	bl	800b6ce <VL53L0X_device_read_strobe>
 800ba60:	4603      	mov	r3, r0
 800ba62:	461a      	mov	r2, r3
 800ba64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800ba6e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800ba72:	461a      	mov	r2, r3
 800ba74:	2190      	movs	r1, #144	; 0x90
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f002 f9b7 	bl	800ddea <VL53L0X_RdByte>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	461a      	mov	r2, r3
 800ba80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba84:	4313      	orrs	r3, r2
 800ba86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800ba8a:	2277      	movs	r2, #119	; 0x77
 800ba8c:	2194      	movs	r1, #148	; 0x94
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f002 f92d 	bl	800dcee <VL53L0X_WrByte>
 800ba94:	4603      	mov	r3, r0
 800ba96:	461a      	mov	r2, r3
 800ba98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f7ff fe13 	bl	800b6ce <VL53L0X_device_read_strobe>
 800baa8:	4603      	mov	r3, r0
 800baaa:	461a      	mov	r2, r3
 800baac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bab0:	4313      	orrs	r3, r2
 800bab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bab6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800baba:	461a      	mov	r2, r3
 800babc:	2190      	movs	r1, #144	; 0x90
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f002 f9d1 	bl	800de66 <VL53L0X_RdDWord>
 800bac4:	4603      	mov	r3, r0
 800bac6:	461a      	mov	r2, r3
 800bac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bacc:	4313      	orrs	r3, r2
 800bace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	0e5b      	lsrs	r3, r3, #25
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800badc:	b2db      	uxtb	r3, r3
 800bade:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	0c9b      	lsrs	r3, r3, #18
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baea:	b2db      	uxtb	r3, r3
 800baec:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	0adb      	lsrs	r3, r3, #11
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafe:	091b      	lsrs	r3, r3, #4
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800bb1c:	2278      	movs	r2, #120	; 0x78
 800bb1e:	2194      	movs	r1, #148	; 0x94
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f002 f8e4 	bl	800dcee <VL53L0X_WrByte>
 800bb26:	4603      	mov	r3, r0
 800bb28:	461a      	mov	r2, r3
 800bb2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff fdca 	bl	800b6ce <VL53L0X_device_read_strobe>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb42:	4313      	orrs	r3, r2
 800bb44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	2190      	movs	r1, #144	; 0x90
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f002 f988 	bl	800de66 <VL53L0X_RdDWord>
 800bb56:	4603      	mov	r3, r0
 800bb58:	461a      	mov	r2, r3
 800bb5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800bb64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb66:	0f5b      	lsrs	r3, r3, #29
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb6e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800bb70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb74:	4413      	add	r3, r2
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800bb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7c:	0d9b      	lsrs	r3, r3, #22
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800bb88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8a:	0bdb      	lsrs	r3, r3, #15
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800bb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb98:	0a1b      	lsrs	r3, r3, #8
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bba0:	b2db      	uxtb	r3, r3
 800bba2:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	085b      	lsrs	r3, r3, #1
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	019b      	lsls	r3, r3, #6
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800bbc4:	2279      	movs	r2, #121	; 0x79
 800bbc6:	2194      	movs	r1, #148	; 0x94
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f002 f890 	bl	800dcee <VL53L0X_WrByte>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff fd76 	bl	800b6ce <VL53L0X_device_read_strobe>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bbf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	2190      	movs	r1, #144	; 0x90
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f002 f934 	bl	800de66 <VL53L0X_RdDWord>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	461a      	mov	r2, r3
 800bc02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc06:	4313      	orrs	r3, r2
 800bc08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800bc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0e:	0e9b      	lsrs	r3, r3, #26
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc16:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800bc18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc1c:	4413      	add	r3, r2
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	0cdb      	lsrs	r3, r3, #19
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc2c:	b2db      	uxtb	r3, r3
 800bc2e:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	0b1b      	lsrs	r3, r3, #12
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc40:	095b      	lsrs	r3, r3, #5
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800bc4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	b2db      	uxtb	r3, r3
 800bc54:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800bc5e:	227a      	movs	r2, #122	; 0x7a
 800bc60:	2194      	movs	r1, #148	; 0x94
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	f002 f843 	bl	800dcee <VL53L0X_WrByte>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc70:	4313      	orrs	r3, r2
 800bc72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7ff fd29 	bl	800b6ce <VL53L0X_device_read_strobe>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc84:	4313      	orrs	r3, r2
 800bc86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc8e:	461a      	mov	r2, r3
 800bc90:	2190      	movs	r1, #144	; 0x90
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f002 f8e7 	bl	800de66 <VL53L0X_RdDWord>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bca0:	4313      	orrs	r3, r2
 800bca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800bca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca8:	0f9b      	lsrs	r3, r3, #30
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcb0:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800bcb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcb6:	4413      	add	r3, r2
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800bcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbe:	0ddb      	lsrs	r3, r3, #23
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	0c1b      	lsrs	r3, r3, #16
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcd4:	b2db      	uxtb	r3, r3
 800bcd6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	0a5b      	lsrs	r3, r3, #9
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	089b      	lsrs	r3, r3, #2
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800bcfe:	78fb      	ldrb	r3, [r7, #3]
 800bd00:	f003 0304 	and.w	r3, r3, #4
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	f000 80f1 	beq.w	800beec <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bd0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bd0e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f040 80ea 	bne.w	800beec <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bd18:	227b      	movs	r2, #123	; 0x7b
 800bd1a:	2194      	movs	r1, #148	; 0x94
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f001 ffe6 	bl	800dcee <VL53L0X_WrByte>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461a      	mov	r2, r3
 800bd26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f7ff fccc 	bl	800b6ce <VL53L0X_device_read_strobe>
 800bd36:	4603      	mov	r3, r0
 800bd38:	461a      	mov	r2, r3
 800bd3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800bd44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd48:	461a      	mov	r2, r3
 800bd4a:	2190      	movs	r1, #144	; 0x90
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f002 f88a 	bl	800de66 <VL53L0X_RdDWord>
 800bd52:	4603      	mov	r3, r0
 800bd54:	461a      	mov	r2, r3
 800bd56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800bd60:	227c      	movs	r2, #124	; 0x7c
 800bd62:	2194      	movs	r1, #148	; 0x94
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 ffc2 	bl	800dcee <VL53L0X_WrByte>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	461a      	mov	r2, r3
 800bd6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd72:	4313      	orrs	r3, r2
 800bd74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff fca8 	bl	800b6ce <VL53L0X_device_read_strobe>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	461a      	mov	r2, r3
 800bd82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd86:	4313      	orrs	r3, r2
 800bd88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800bd8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd90:	461a      	mov	r2, r3
 800bd92:	2190      	movs	r1, #144	; 0x90
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f002 f866 	bl	800de66 <VL53L0X_RdDWord>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bda2:	4313      	orrs	r3, r2
 800bda4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800bda8:	2273      	movs	r2, #115	; 0x73
 800bdaa:	2194      	movs	r1, #148	; 0x94
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f001 ff9e 	bl	800dcee <VL53L0X_WrByte>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	461a      	mov	r2, r3
 800bdb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff fc84 	bl	800b6ce <VL53L0X_device_read_strobe>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	461a      	mov	r2, r3
 800bdca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bdd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bdd8:	461a      	mov	r2, r3
 800bdda:	2190      	movs	r1, #144	; 0x90
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f002 f842 	bl	800de66 <VL53L0X_RdDWord>
 800bde2:	4603      	mov	r3, r0
 800bde4:	461a      	mov	r2, r3
 800bde6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdea:	4313      	orrs	r3, r2
 800bdec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800bdf4:	b29b      	uxth	r3, r3
 800bdf6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800bdf8:	2274      	movs	r2, #116	; 0x74
 800bdfa:	2194      	movs	r1, #148	; 0x94
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f001 ff76 	bl	800dcee <VL53L0X_WrByte>
 800be02:	4603      	mov	r3, r0
 800be04:	461a      	mov	r2, r3
 800be06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be0a:	4313      	orrs	r3, r2
 800be0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f7ff fc5c 	bl	800b6ce <VL53L0X_device_read_strobe>
 800be16:	4603      	mov	r3, r0
 800be18:	461a      	mov	r2, r3
 800be1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be1e:	4313      	orrs	r3, r2
 800be20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800be24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be28:	461a      	mov	r2, r3
 800be2a:	2190      	movs	r1, #144	; 0x90
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f002 f81a 	bl	800de66 <VL53L0X_RdDWord>
 800be32:	4603      	mov	r3, r0
 800be34:	461a      	mov	r2, r3
 800be36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be3a:	4313      	orrs	r3, r2
 800be3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800be40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be42:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800be44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be46:	4313      	orrs	r3, r2
 800be48:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800be4a:	2275      	movs	r2, #117	; 0x75
 800be4c:	2194      	movs	r1, #148	; 0x94
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 ff4d 	bl	800dcee <VL53L0X_WrByte>
 800be54:	4603      	mov	r3, r0
 800be56:	461a      	mov	r2, r3
 800be58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be5c:	4313      	orrs	r3, r2
 800be5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff fc33 	bl	800b6ce <VL53L0X_device_read_strobe>
 800be68:	4603      	mov	r3, r0
 800be6a:	461a      	mov	r2, r3
 800be6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be70:	4313      	orrs	r3, r2
 800be72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800be76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be7a:	461a      	mov	r2, r3
 800be7c:	2190      	movs	r1, #144	; 0x90
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f001 fff1 	bl	800de66 <VL53L0X_RdDWord>
 800be84:	4603      	mov	r3, r0
 800be86:	461a      	mov	r2, r3
 800be88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be8c:	4313      	orrs	r3, r2
 800be8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800be92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be94:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800be96:	b29b      	uxth	r3, r3
 800be98:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800be9a:	2276      	movs	r2, #118	; 0x76
 800be9c:	2194      	movs	r1, #148	; 0x94
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f001 ff25 	bl	800dcee <VL53L0X_WrByte>
 800bea4:	4603      	mov	r3, r0
 800bea6:	461a      	mov	r2, r3
 800bea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800beac:	4313      	orrs	r3, r2
 800beae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff fc0b 	bl	800b6ce <VL53L0X_device_read_strobe>
 800beb8:	4603      	mov	r3, r0
 800beba:	461a      	mov	r2, r3
 800bebc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bec0:	4313      	orrs	r3, r2
 800bec2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800beca:	461a      	mov	r2, r3
 800becc:	2190      	movs	r1, #144	; 0x90
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f001 ffc9 	bl	800de66 <VL53L0X_RdDWord>
 800bed4:	4603      	mov	r3, r0
 800bed6:	461a      	mov	r2, r3
 800bed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bedc:	4313      	orrs	r3, r2
 800bede:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800bee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800bee6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bee8:	4313      	orrs	r3, r2
 800beea:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800beec:	2200      	movs	r2, #0
 800beee:	2181      	movs	r1, #129	; 0x81
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f001 fefc 	bl	800dcee <VL53L0X_WrByte>
 800bef6:	4603      	mov	r3, r0
 800bef8:	461a      	mov	r2, r3
 800befa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800befe:	4313      	orrs	r3, r2
 800bf00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bf04:	2206      	movs	r2, #6
 800bf06:	21ff      	movs	r1, #255	; 0xff
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f001 fef0 	bl	800dcee <VL53L0X_WrByte>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	461a      	mov	r2, r3
 800bf12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf16:	4313      	orrs	r3, r2
 800bf18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bf1c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bf20:	461a      	mov	r2, r3
 800bf22:	2183      	movs	r1, #131	; 0x83
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f001 ff60 	bl	800ddea <VL53L0X_RdByte>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf32:	4313      	orrs	r3, r2
 800bf34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800bf38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bf3c:	f023 0304 	bic.w	r3, r3, #4
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	461a      	mov	r2, r3
 800bf44:	2183      	movs	r1, #131	; 0x83
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f001 fed1 	bl	800dcee <VL53L0X_WrByte>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	461a      	mov	r2, r3
 800bf50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf54:	4313      	orrs	r3, r2
 800bf56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	21ff      	movs	r1, #255	; 0xff
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 fec5 	bl	800dcee <VL53L0X_WrByte>
 800bf64:	4603      	mov	r3, r0
 800bf66:	461a      	mov	r2, r3
 800bf68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bf72:	2201      	movs	r2, #1
 800bf74:	2100      	movs	r1, #0
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 feb9 	bl	800dcee <VL53L0X_WrByte>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	461a      	mov	r2, r3
 800bf80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf84:	4313      	orrs	r3, r2
 800bf86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	21ff      	movs	r1, #255	; 0xff
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f001 fead 	bl	800dcee <VL53L0X_WrByte>
 800bf94:	4603      	mov	r3, r0
 800bf96:	461a      	mov	r2, r3
 800bf98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2180      	movs	r1, #128	; 0x80
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f001 fea1 	bl	800dcee <VL53L0X_WrByte>
 800bfac:	4603      	mov	r3, r0
 800bfae:	461a      	mov	r2, r3
 800bfb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800bfba:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f040 808f 	bne.w	800c0e2 <VL53L0X_get_info_from_device+0x98e>
 800bfc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfc8:	2b07      	cmp	r3, #7
 800bfca:	f000 808a 	beq.w	800c0e2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800bfce:	78fb      	ldrb	r3, [r7, #3]
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d024      	beq.n	800c022 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800bfd8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfdc:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d11e      	bne.n	800c022 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800bfea:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800bff4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800bff8:	2300      	movs	r3, #0
 800bffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bffc:	e00e      	b.n	800c01c <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800bffe:	f107 0208 	add.w	r2, r7, #8
 800c002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c004:	4413      	add	r3, r2
 800c006:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c00c:	4413      	add	r3, r2
 800c00e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800c012:	460a      	mov	r2, r1
 800c014:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c018:	3301      	adds	r3, #1
 800c01a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c01c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c01e:	2b05      	cmp	r3, #5
 800c020:	dded      	ble.n	800bffe <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c022:	78fb      	ldrb	r3, [r7, #3]
 800c024:	f003 0302 	and.w	r3, r3, #2
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d018      	beq.n	800c05e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c02c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c030:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c034:	2b00      	cmp	r3, #0
 800c036:	d112      	bne.n	800c05e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c038:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c042:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	33f3      	adds	r3, #243	; 0xf3
 800c050:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c052:	f107 0310 	add.w	r3, r7, #16
 800c056:	4619      	mov	r1, r3
 800c058:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c05a:	f002 f835 	bl	800e0c8 <strcpy>

		}

		if (((option & 4) == 4) &&
 800c05e:	78fb      	ldrb	r3, [r7, #3]
 800c060:	f003 0304 	and.w	r3, r3, #4
 800c064:	2b00      	cmp	r3, #0
 800c066:	d030      	beq.n	800c0ca <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c068:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c06c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c070:	2b00      	cmp	r3, #0
 800c072:	d12a      	bne.n	800c0ca <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c07c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c086:	025b      	lsls	r3, r3, #9
 800c088:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c08e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c092:	2300      	movs	r3, #0
 800c094:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c098:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d011      	beq.n	800c0c2 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c09e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c0a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c0ac:	fb02 f303 	mul.w	r3, r2, r3
 800c0b0:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c0b2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800c0b6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800c0ba:	425b      	negs	r3, r3
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800c0c2:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c0ca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800c0ce:	78fb      	ldrb	r3, [r7, #3]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c0d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0e2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3760      	adds	r7, #96	; 0x60
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c0ee:	b490      	push	{r4, r7}
 800c0f0:	b086      	sub	sp, #24
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c0fa:	f240 6377 	movw	r3, #1655	; 0x677
 800c0fe:	f04f 0400 	mov.w	r4, #0
 800c102:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 800c106:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800c10a:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	fb02 f303 	mul.w	r3, r2, r3
 800c11a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c11c:	68bb      	ldr	r3, [r7, #8]
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3718      	adds	r7, #24
 800c122:	46bd      	mov	sp, r7
 800c124:	bc90      	pop	{r4, r7}
 800c126:	4770      	bx	lr

0800c128 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c128:	b480      	push	{r7}
 800c12a:	b087      	sub	sp, #28
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d017      	beq.n	800c172 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	3b01      	subs	r3, #1
 800c146:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c148:	e005      	b.n	800c156 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	085b      	lsrs	r3, r3, #1
 800c14e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c150:	89fb      	ldrh	r3, [r7, #14]
 800c152:	3301      	adds	r3, #1
 800c154:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1f4      	bne.n	800c14a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c160:	89fb      	ldrh	r3, [r7, #14]
 800c162:	021b      	lsls	r3, r3, #8
 800c164:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	b29b      	uxth	r3, r3
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c16e:	4413      	add	r3, r2
 800c170:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c172:	8afb      	ldrh	r3, [r7, #22]

}
 800c174:	4618      	mov	r0, r3
 800c176:	371c      	adds	r7, #28
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	4603      	mov	r3, r0
 800c188:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c18a:	2300      	movs	r3, #0
 800c18c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c18e:	88fb      	ldrh	r3, [r7, #6]
 800c190:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c192:	88fa      	ldrh	r2, [r7, #6]
 800c194:	0a12      	lsrs	r2, r2, #8
 800c196:	b292      	uxth	r2, r2
 800c198:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c19a:	3301      	adds	r3, #1
 800c19c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c19e:	68fb      	ldr	r3, [r7, #12]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c1be:	79fb      	ldrb	r3, [r7, #7]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	f7ff ff93 	bl	800c0ee <VL53L0X_calc_macro_period_ps>
 800c1c8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c1d0:	4a0a      	ldr	r2, [pc, #40]	; (800c1fc <VL53L0X_calc_timeout_mclks+0x50>)
 800c1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d6:	099b      	lsrs	r3, r3, #6
 800c1d8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1e0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	085b      	lsrs	r3, r3, #1
 800c1e8:	441a      	add	r2, r3
	timeout_period_mclks =
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c1f2:	69fb      	ldr	r3, [r7, #28]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3720      	adds	r7, #32
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	10624dd3 	.word	0x10624dd3

0800c200 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b086      	sub	sp, #24
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	807b      	strh	r3, [r7, #2]
 800c20c:	4613      	mov	r3, r2
 800c20e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c210:	2300      	movs	r3, #0
 800c212:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c214:	787b      	ldrb	r3, [r7, #1]
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ff68 	bl	800c0ee <VL53L0X_calc_macro_period_ps>
 800c21e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c226:	4a0a      	ldr	r2, [pc, #40]	; (800c250 <VL53L0X_calc_timeout_us+0x50>)
 800c228:	fba2 2303 	umull	r2, r3, r2, r3
 800c22c:	099b      	lsrs	r3, r3, #6
 800c22e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c230:	887b      	ldrh	r3, [r7, #2]
 800c232:	68fa      	ldr	r2, [r7, #12]
 800c234:	fb02 f303 	mul.w	r3, r2, r3
 800c238:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c23c:	4a04      	ldr	r2, [pc, #16]	; (800c250 <VL53L0X_calc_timeout_us+0x50>)
 800c23e:	fba2 2303 	umull	r2, r3, r2, r3
 800c242:	099b      	lsrs	r3, r3, #6
 800c244:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c246:	697b      	ldr	r3, [r7, #20]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3718      	adds	r7, #24
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	10624dd3 	.word	0x10624dd3

0800c254 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08c      	sub	sp, #48	; 0x30
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	460b      	mov	r3, r1
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c262:	2300      	movs	r3, #0
 800c264:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c272:	2300      	movs	r3, #0
 800c274:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c27a:	7afb      	ldrb	r3, [r7, #11]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d005      	beq.n	800c28c <get_sequence_step_timeout+0x38>
 800c280:	7afb      	ldrb	r3, [r7, #11]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d002      	beq.n	800c28c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c286:	7afb      	ldrb	r3, [r7, #11]
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d128      	bne.n	800c2de <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c28c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c290:	461a      	mov	r2, r3
 800c292:	2100      	movs	r1, #0
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7fd fa1b 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c29a:	4603      	mov	r3, r0
 800c29c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c2a0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d109      	bne.n	800c2bc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c2a8:	f107 0320 	add.w	r3, r7, #32
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	2146      	movs	r1, #70	; 0x46
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f001 fd9a 	bl	800ddea <VL53L0X_RdByte>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c2bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7ff ff5c 	bl	800c180 <VL53L0X_decode_timeout>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c2cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c2d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f7ff ff93 	bl	800c200 <VL53L0X_calc_timeout_us>
 800c2da:	62b8      	str	r0, [r7, #40]	; 0x28
 800c2dc:	e092      	b.n	800c404 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c2de:	7afb      	ldrb	r3, [r7, #11]
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d135      	bne.n	800c350 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c2e4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f7fd f9ef 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c2f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	f040 8081 	bne.w	800c404 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c302:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c306:	461a      	mov	r2, r3
 800c308:	2100      	movs	r1, #0
 800c30a:	68f8      	ldr	r0, [r7, #12]
 800c30c:	f7fd f9e0 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c310:	4603      	mov	r3, r0
 800c312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c316:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c31e:	f107 031e 	add.w	r3, r7, #30
 800c322:	461a      	mov	r2, r3
 800c324:	2151      	movs	r1, #81	; 0x51
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f001 fd7e 	bl	800de28 <VL53L0X_RdWord>
 800c32c:	4603      	mov	r3, r0
 800c32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c332:	8bfb      	ldrh	r3, [r7, #30]
 800c334:	4618      	mov	r0, r3
 800c336:	f7ff ff23 	bl	800c180 <VL53L0X_decode_timeout>
 800c33a:	4603      	mov	r3, r0
 800c33c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c33e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c344:	4619      	mov	r1, r3
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7ff ff5a 	bl	800c200 <VL53L0X_calc_timeout_us>
 800c34c:	62b8      	str	r0, [r7, #40]	; 0x28
 800c34e:	e059      	b.n	800c404 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	2b04      	cmp	r3, #4
 800c354:	d156      	bne.n	800c404 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c356:	f107 0314 	add.w	r3, r7, #20
 800c35a:	4619      	mov	r1, r3
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7fd fac3 	bl	80098e8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c362:	2300      	movs	r3, #0
 800c364:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c366:	7dfb      	ldrb	r3, [r7, #23]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d01d      	beq.n	800c3a8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c36c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c370:	461a      	mov	r2, r3
 800c372:	2100      	movs	r1, #0
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7fd f9ab 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c37a:	4603      	mov	r3, r0
 800c37c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c380:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10f      	bne.n	800c3a8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c388:	f107 031e 	add.w	r3, r7, #30
 800c38c:	461a      	mov	r2, r3
 800c38e:	2151      	movs	r1, #81	; 0x51
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f001 fd49 	bl	800de28 <VL53L0X_RdWord>
 800c396:	4603      	mov	r3, r0
 800c398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c39c:	8bfb      	ldrh	r3, [r7, #30]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f7ff feee 	bl	800c180 <VL53L0X_decode_timeout>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c3a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d109      	bne.n	800c3c4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c3b0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	2101      	movs	r1, #1
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f7fd f989 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c3c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10f      	bne.n	800c3ec <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c3cc:	f107 031c 	add.w	r3, r7, #28
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	2171      	movs	r1, #113	; 0x71
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f001 fd27 	bl	800de28 <VL53L0X_RdWord>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c3e0:	8bbb      	ldrh	r3, [r7, #28]
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f7ff fecc 	bl	800c180 <VL53L0X_decode_timeout>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c3ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c3ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c3f4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c3f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3fa:	4619      	mov	r1, r3
 800c3fc:	68f8      	ldr	r0, [r7, #12]
 800c3fe:	f7ff feff 	bl	800c200 <VL53L0X_calc_timeout_us>
 800c402:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c408:	601a      	str	r2, [r3, #0]

	return Status;
 800c40a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3730      	adds	r7, #48	; 0x30
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b08a      	sub	sp, #40	; 0x28
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	60f8      	str	r0, [r7, #12]
 800c41e:	460b      	mov	r3, r1
 800c420:	607a      	str	r2, [r7, #4]
 800c422:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c424:	2300      	movs	r3, #0
 800c426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c42a:	7afb      	ldrb	r3, [r7, #11]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d005      	beq.n	800c43c <set_sequence_step_timeout+0x26>
 800c430:	7afb      	ldrb	r3, [r7, #11]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d002      	beq.n	800c43c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c436:	7afb      	ldrb	r3, [r7, #11]
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d138      	bne.n	800c4ae <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c43c:	f107 031b 	add.w	r3, r7, #27
 800c440:	461a      	mov	r2, r3
 800c442:	2100      	movs	r1, #0
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f7fd f943 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c44a:	4603      	mov	r3, r0
 800c44c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c450:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c454:	2b00      	cmp	r3, #0
 800c456:	d11a      	bne.n	800c48e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c458:	7efb      	ldrb	r3, [r7, #27]
 800c45a:	461a      	mov	r2, r3
 800c45c:	6879      	ldr	r1, [r7, #4]
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f7ff fea4 	bl	800c1ac <VL53L0X_calc_timeout_mclks>
 800c464:	4603      	mov	r3, r0
 800c466:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c468:	8bbb      	ldrh	r3, [r7, #28]
 800c46a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c46e:	d903      	bls.n	800c478 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c470:	23ff      	movs	r3, #255	; 0xff
 800c472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c476:	e004      	b.n	800c482 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c478:	8bbb      	ldrh	r3, [r7, #28]
 800c47a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c47c:	3b01      	subs	r3, #1
 800c47e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c482:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c486:	b29a      	uxth	r2, r3
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c48e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c492:	2b00      	cmp	r3, #0
 800c494:	f040 80ab 	bne.w	800c5ee <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c49c:	461a      	mov	r2, r3
 800c49e:	2146      	movs	r1, #70	; 0x46
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f001 fc24 	bl	800dcee <VL53L0X_WrByte>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c4ac:	e09f      	b.n	800c5ee <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c4ae:	7afb      	ldrb	r3, [r7, #11]
 800c4b0:	2b03      	cmp	r3, #3
 800c4b2:	d135      	bne.n	800c520 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c4b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d11b      	bne.n	800c4f4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c4bc:	f107 031b 	add.w	r3, r7, #27
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f7fd f903 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c4d0:	7efb      	ldrb	r3, [r7, #27]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	6879      	ldr	r1, [r7, #4]
 800c4d6:	68f8      	ldr	r0, [r7, #12]
 800c4d8:	f7ff fe68 	bl	800c1ac <VL53L0X_calc_timeout_mclks>
 800c4dc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c4de:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7ff fe20 	bl	800c128 <VL53L0X_encode_timeout>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c4ec:	8b3a      	ldrh	r2, [r7, #24]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c4f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d108      	bne.n	800c50e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c4fc:	8b3b      	ldrh	r3, [r7, #24]
 800c4fe:	461a      	mov	r2, r3
 800c500:	2151      	movs	r1, #81	; 0x51
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f001 fc13 	bl	800dd2e <VL53L0X_WrWord>
 800c508:	4603      	mov	r3, r0
 800c50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c50e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c512:	2b00      	cmp	r3, #0
 800c514:	d16b      	bne.n	800c5ee <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c51e:	e066      	b.n	800c5ee <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c520:	7afb      	ldrb	r3, [r7, #11]
 800c522:	2b04      	cmp	r3, #4
 800c524:	d160      	bne.n	800c5e8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c526:	f107 0310 	add.w	r3, r7, #16
 800c52a:	4619      	mov	r1, r3
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f7fd f9db 	bl	80098e8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c536:	7cfb      	ldrb	r3, [r7, #19]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01d      	beq.n	800c578 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c53c:	f107 031b 	add.w	r3, r7, #27
 800c540:	461a      	mov	r2, r3
 800c542:	2100      	movs	r1, #0
 800c544:	68f8      	ldr	r0, [r7, #12]
 800c546:	f7fd f8c3 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10f      	bne.n	800c578 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c558:	f107 0318 	add.w	r3, r7, #24
 800c55c:	461a      	mov	r2, r3
 800c55e:	2151      	movs	r1, #81	; 0x51
 800c560:	68f8      	ldr	r0, [r7, #12]
 800c562:	f001 fc61 	bl	800de28 <VL53L0X_RdWord>
 800c566:	4603      	mov	r3, r0
 800c568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c56c:	8b3b      	ldrh	r3, [r7, #24]
 800c56e:	4618      	mov	r0, r3
 800c570:	f7ff fe06 	bl	800c180 <VL53L0X_decode_timeout>
 800c574:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c576:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c578:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d109      	bne.n	800c594 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c580:	f107 031b 	add.w	r3, r7, #27
 800c584:	461a      	mov	r2, r3
 800c586:	2101      	movs	r1, #1
 800c588:	68f8      	ldr	r0, [r7, #12]
 800c58a:	f7fd f8a1 	bl	80096d0 <VL53L0X_GetVcselPulsePeriod>
 800c58e:	4603      	mov	r3, r0
 800c590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c594:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d128      	bne.n	800c5ee <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c59c:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800c59e:	461a      	mov	r2, r3
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f7ff fe02 	bl	800c1ac <VL53L0X_calc_timeout_mclks>
 800c5a8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c5aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c5ac:	6a3a      	ldr	r2, [r7, #32]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800c5b2:	6a38      	ldr	r0, [r7, #32]
 800c5b4:	f7ff fdb8 	bl	800c128 <VL53L0X_encode_timeout>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800c5bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d108      	bne.n	800c5d6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c5c4:	8bfb      	ldrh	r3, [r7, #30]
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	2171      	movs	r1, #113	; 0x71
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f001 fbaf 	bl	800dd2e <VL53L0X_WrWord>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c5d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d107      	bne.n	800c5ee <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c5e6:	e002      	b.n	800c5ee <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c5e8:	23fc      	movs	r3, #252	; 0xfc
 800c5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c5ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3728      	adds	r7, #40	; 0x28
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b086      	sub	sp, #24
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	60f8      	str	r0, [r7, #12]
 800c602:	460b      	mov	r3, r1
 800c604:	607a      	str	r2, [r7, #4]
 800c606:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c608:	2300      	movs	r3, #0
 800c60a:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800c60c:	7afb      	ldrb	r3, [r7, #11]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d002      	beq.n	800c618 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800c612:	2b01      	cmp	r3, #1
 800c614:	d00a      	beq.n	800c62c <VL53L0X_get_vcsel_pulse_period+0x32>
 800c616:	e013      	b.n	800c640 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c618:	f107 0316 	add.w	r3, r7, #22
 800c61c:	461a      	mov	r2, r3
 800c61e:	2150      	movs	r1, #80	; 0x50
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	f001 fbe2 	bl	800ddea <VL53L0X_RdByte>
 800c626:	4603      	mov	r3, r0
 800c628:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c62a:	e00b      	b.n	800c644 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c62c:	f107 0316 	add.w	r3, r7, #22
 800c630:	461a      	mov	r2, r3
 800c632:	2170      	movs	r1, #112	; 0x70
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f001 fbd8 	bl	800ddea <VL53L0X_RdByte>
 800c63a:	4603      	mov	r3, r0
 800c63c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c63e:	e001      	b.n	800c644 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c640:	23fc      	movs	r3, #252	; 0xfc
 800c642:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800c644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d107      	bne.n	800c65c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800c64c:	7dbb      	ldrb	r3, [r7, #22]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fe fff6 	bl	800b640 <VL53L0X_decode_vcsel_period>
 800c654:	4603      	mov	r3, r0
 800c656:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	701a      	strb	r2, [r3, #0]

	return Status;
 800c65c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c660:	4618      	mov	r0, r3
 800c662:	3718      	adds	r7, #24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b092      	sub	sp, #72	; 0x48
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c672:	2300      	movs	r3, #0
 800c674:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c678:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c67c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c67e:	f240 7376 	movw	r3, #1910	; 0x776
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800c684:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c688:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c68a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c68e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800c690:	f240 234e 	movw	r3, #590	; 0x24e
 800c694:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800c696:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c69a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c69c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c6a0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c6a2:	f240 2326 	movw	r3, #550	; 0x226
 800c6a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800c6ac:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c6b0:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	6a3b      	ldr	r3, [r7, #32]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d205      	bcs.n	800c6ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c6be:	23fc      	movs	r3, #252	; 0xfc
 800c6c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800c6c4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c6c8:	e0aa      	b.n	800c820 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800c6ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ce:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c6d6:	f107 0314 	add.w	r3, r7, #20
 800c6da:	4619      	mov	r1, r3
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7fd f903 	bl	80098e8 <VL53L0X_GetSequenceStepEnables>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800c6e8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d15b      	bne.n	800c7a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800c6f0:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d105      	bne.n	800c702 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800c6f6:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d102      	bne.n	800c702 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800c6fc:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d052      	beq.n	800c7a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800c702:	f107 0310 	add.w	r3, r7, #16
 800c706:	461a      	mov	r2, r3
 800c708:	2102      	movs	r1, #2
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7ff fda2 	bl	800c254 <get_sequence_step_timeout>
 800c710:	4603      	mov	r3, r0
 800c712:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800c716:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d002      	beq.n	800c724 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800c71e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c722:	e07d      	b.n	800c820 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800c724:	7d3b      	ldrb	r3, [r7, #20]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d00f      	beq.n	800c74a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800c72a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800c72c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c72e:	4413      	add	r3, r2
 800c730:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c736:	429a      	cmp	r2, r3
 800c738:	d204      	bcs.n	800c744 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800c73a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	1ad3      	subs	r3, r2, r3
 800c740:	643b      	str	r3, [r7, #64]	; 0x40
 800c742:	e002      	b.n	800c74a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c744:	23fc      	movs	r3, #252	; 0xfc
 800c746:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800c74a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d002      	beq.n	800c758 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800c752:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c756:	e063      	b.n	800c820 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800c758:	7dbb      	ldrb	r3, [r7, #22]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d011      	beq.n	800c782 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800c75e:	693a      	ldr	r2, [r7, #16]
 800c760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c762:	4413      	add	r3, r2
 800c764:	005b      	lsls	r3, r3, #1
 800c766:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c768:	69fa      	ldr	r2, [r7, #28]
 800c76a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d204      	bcs.n	800c77a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c770:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c772:	69fb      	ldr	r3, [r7, #28]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	643b      	str	r3, [r7, #64]	; 0x40
 800c778:	e016      	b.n	800c7a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c77a:	23fc      	movs	r3, #252	; 0xfc
 800c77c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800c780:	e012      	b.n	800c7a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800c782:	7d7b      	ldrb	r3, [r7, #21]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00f      	beq.n	800c7a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c78c:	4413      	add	r3, r2
 800c78e:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c790:	69fa      	ldr	r2, [r7, #28]
 800c792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c794:	429a      	cmp	r2, r3
 800c796:	d204      	bcs.n	800c7a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800c798:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	643b      	str	r3, [r7, #64]	; 0x40
 800c7a0:	e002      	b.n	800c7a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c7a2:	23fc      	movs	r3, #252	; 0xfc
 800c7a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c7a8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c7b0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c7b4:	e034      	b.n	800c820 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800c7b6:	7dfb      	ldrb	r3, [r7, #23]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d019      	beq.n	800c7f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800c7bc:	f107 030c 	add.w	r3, r7, #12
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	2103      	movs	r1, #3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7ff fd45 	bl	800c254 <get_sequence_step_timeout>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c7d4:	4413      	add	r3, r2
 800c7d6:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800c7d8:	69fa      	ldr	r2, [r7, #28]
 800c7da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	d204      	bcs.n	800c7ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800c7e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	643b      	str	r3, [r7, #64]	; 0x40
 800c7e8:	e002      	b.n	800c7f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c7ea:	23fc      	movs	r3, #252	; 0xfc
 800c7ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800c7f0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d111      	bne.n	800c81c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800c7f8:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d00e      	beq.n	800c81c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800c7fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c802:	1ad3      	subs	r3, r2, r3
 800c804:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800c806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c808:	2104      	movs	r1, #4
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f7ff fe03 	bl	800c416 <set_sequence_step_timeout>
 800c810:	4603      	mov	r3, r0
 800c812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800c81c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800c820:	4618      	mov	r0, r3
 800c822:	3748      	adds	r7, #72	; 0x48
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b090      	sub	sp, #64	; 0x40
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c832:	2300      	movs	r3, #0
 800c834:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800c838:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800c83c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800c83e:	f240 7376 	movw	r3, #1910	; 0x776
 800c842:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800c844:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800c848:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800c84a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c84e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800c850:	f240 234e 	movw	r3, #590	; 0x24e
 800c854:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800c856:	f240 23b2 	movw	r3, #690	; 0x2b2
 800c85a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800c85c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800c860:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800c862:	f240 2326 	movw	r3, #550	; 0x226
 800c866:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800c868:	2300      	movs	r3, #0
 800c86a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800c86c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c870:	441a      	add	r2, r3
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c876:	f107 0318 	add.w	r3, r7, #24
 800c87a:	4619      	mov	r1, r3
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7fd f833 	bl	80098e8 <VL53L0X_GetSequenceStepEnables>
 800c882:	4603      	mov	r3, r0
 800c884:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800c888:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d002      	beq.n	800c896 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800c890:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c894:	e075      	b.n	800c982 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800c896:	7e3b      	ldrb	r3, [r7, #24]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d105      	bne.n	800c8a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800c89c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800c8a2:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d030      	beq.n	800c90a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800c8a8:	f107 0310 	add.w	r3, r7, #16
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	2102      	movs	r1, #2
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f7ff fccf 	bl	800c254 <get_sequence_step_timeout>
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800c8bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d122      	bne.n	800c90a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800c8c4:	7e3b      	ldrb	r3, [r7, #24]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d007      	beq.n	800c8da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c8ce:	6939      	ldr	r1, [r7, #16]
 800c8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c8d4:	441a      	add	r2, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800c8da:	7ebb      	ldrb	r3, [r7, #26]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d009      	beq.n	800c8f4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800c8e4:	6939      	ldr	r1, [r7, #16]
 800c8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e8:	440b      	add	r3, r1
 800c8ea:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c8ec:	441a      	add	r2, r3
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	601a      	str	r2, [r3, #0]
 800c8f2:	e00a      	b.n	800c90a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800c8f4:	7e7b      	ldrb	r3, [r7, #25]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d007      	beq.n	800c90a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800c8fe:	6939      	ldr	r1, [r7, #16]
 800c900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c902:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800c904:	441a      	add	r2, r3
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c90a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d114      	bne.n	800c93c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800c912:	7efb      	ldrb	r3, [r7, #27]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d011      	beq.n	800c93c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800c918:	f107 030c 	add.w	r3, r7, #12
 800c91c:	461a      	mov	r2, r3
 800c91e:	2103      	movs	r1, #3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff fc97 	bl	800c254 <get_sequence_step_timeout>
 800c926:	4603      	mov	r3, r0
 800c928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800c930:	68f9      	ldr	r1, [r7, #12]
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c936:	441a      	add	r2, r3
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c93c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c940:	2b00      	cmp	r3, #0
 800c942:	d114      	bne.n	800c96e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800c944:	7f3b      	ldrb	r3, [r7, #28]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d011      	beq.n	800c96e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800c94a:	f107 0314 	add.w	r3, r7, #20
 800c94e:	461a      	mov	r2, r3
 800c950:	2104      	movs	r1, #4
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff fc7e 	bl	800c254 <get_sequence_step_timeout>
 800c958:	4603      	mov	r3, r0
 800c95a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800c962:	6979      	ldr	r1, [r7, #20]
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800c968:	441a      	add	r2, r3
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c96e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c972:	2b00      	cmp	r3, #0
 800c974:	d103      	bne.n	800c97e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c97e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c982:	4618      	mov	r0, r3
 800c984:	3740      	adds	r7, #64	; 0x40
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
	...

0800c98c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b088      	sub	sp, #32
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c996:	2300      	movs	r3, #0
 800c998:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800c99e:	e0c6      	b.n	800cb2e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800c9b0:	7cfb      	ldrb	r3, [r7, #19]
 800c9b2:	2bff      	cmp	r3, #255	; 0xff
 800c9b4:	f040 808d 	bne.w	800cad2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	683a      	ldr	r2, [r7, #0]
 800c9bc:	4413      	add	r3, r2
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	747b      	strb	r3, [r7, #17]
			Index++;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800c9c8:	7c7b      	ldrb	r3, [r7, #17]
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d87e      	bhi.n	800cacc <VL53L0X_load_tuning_settings+0x140>
 800c9ce:	a201      	add	r2, pc, #4	; (adr r2, 800c9d4 <VL53L0X_load_tuning_settings+0x48>)
 800c9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d4:	0800c9e5 	.word	0x0800c9e5
 800c9d8:	0800ca1f 	.word	0x0800ca1f
 800c9dc:	0800ca59 	.word	0x0800ca59
 800c9e0:	0800ca93 	.word	0x0800ca93
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	743b      	strb	r3, [r7, #16]
				Index++;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	683a      	ldr	r2, [r7, #0]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	3301      	adds	r3, #1
 800ca02:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ca04:	7c3b      	ldrb	r3, [r7, #16]
 800ca06:	b29b      	uxth	r3, r3
 800ca08:	021b      	lsls	r3, r3, #8
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	4413      	add	r3, r2
 800ca12:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	89ba      	ldrh	r2, [r7, #12]
 800ca18:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800ca1c:	e087      	b.n	800cb2e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	4413      	add	r3, r2
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	743b      	strb	r3, [r7, #16]
				Index++;
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	683a      	ldr	r2, [r7, #0]
 800ca32:	4413      	add	r3, r2
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ca3e:	7c3b      	ldrb	r3, [r7, #16]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	021b      	lsls	r3, r3, #8
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	7bfb      	ldrb	r3, [r7, #15]
 800ca48:	b29b      	uxth	r3, r3
 800ca4a:	4413      	add	r3, r2
 800ca4c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	89ba      	ldrh	r2, [r7, #12]
 800ca52:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ca56:	e06a      	b.n	800cb2e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	743b      	strb	r3, [r7, #16]
				Index++;
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	3301      	adds	r3, #1
 800ca66:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	683a      	ldr	r2, [r7, #0]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	781b      	ldrb	r3, [r3, #0]
 800ca70:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	3301      	adds	r3, #1
 800ca76:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ca78:	7c3b      	ldrb	r3, [r7, #16]
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	021b      	lsls	r3, r3, #8
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	4413      	add	r3, r2
 800ca86:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	89ba      	ldrh	r2, [r7, #12]
 800ca8c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ca90:	e04d      	b.n	800cb2e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	683a      	ldr	r2, [r7, #0]
 800ca96:	4413      	add	r3, r2
 800ca98:	781b      	ldrb	r3, [r3, #0]
 800ca9a:	743b      	strb	r3, [r7, #16]
				Index++;
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	3301      	adds	r3, #1
 800caa0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	683a      	ldr	r2, [r7, #0]
 800caa6:	4413      	add	r3, r2
 800caa8:	781b      	ldrb	r3, [r3, #0]
 800caaa:	73fb      	strb	r3, [r7, #15]
				Index++;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	3301      	adds	r3, #1
 800cab0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cab2:	7c3b      	ldrb	r3, [r7, #16]
 800cab4:	b29b      	uxth	r3, r3
 800cab6:	021b      	lsls	r3, r3, #8
 800cab8:	b29a      	uxth	r2, r3
 800caba:	7bfb      	ldrb	r3, [r7, #15]
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	4413      	add	r3, r2
 800cac0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	89ba      	ldrh	r2, [r7, #12]
 800cac6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800caca:	e030      	b.n	800cb2e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cacc:	23fc      	movs	r3, #252	; 0xfc
 800cace:	77fb      	strb	r3, [r7, #31]
 800cad0:	e02d      	b.n	800cb2e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800cad2:	7cfb      	ldrb	r3, [r7, #19]
 800cad4:	2b04      	cmp	r3, #4
 800cad6:	d828      	bhi.n	800cb2a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	683a      	ldr	r2, [r7, #0]
 800cadc:	4413      	add	r3, r2
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	74bb      	strb	r3, [r7, #18]
			Index++;
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	3301      	adds	r3, #1
 800cae6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800cae8:	2300      	movs	r3, #0
 800caea:	61bb      	str	r3, [r7, #24]
 800caec:	e00f      	b.n	800cb0e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	683a      	ldr	r2, [r7, #0]
 800caf2:	4413      	add	r3, r2
 800caf4:	7819      	ldrb	r1, [r3, #0]
 800caf6:	f107 0208 	add.w	r2, r7, #8
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	4413      	add	r3, r2
 800cafe:	460a      	mov	r2, r1
 800cb00:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800cb02:	697b      	ldr	r3, [r7, #20]
 800cb04:	3301      	adds	r3, #1
 800cb06:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	61bb      	str	r3, [r7, #24]
 800cb0e:	7cfb      	ldrb	r3, [r7, #19]
 800cb10:	69ba      	ldr	r2, [r7, #24]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	dbeb      	blt.n	800caee <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800cb16:	7cfb      	ldrb	r3, [r7, #19]
 800cb18:	f107 0208 	add.w	r2, r7, #8
 800cb1c:	7cb9      	ldrb	r1, [r7, #18]
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f001 f899 	bl	800dc56 <VL53L0X_WriteMulti>
 800cb24:	4603      	mov	r3, r0
 800cb26:	77fb      	strb	r3, [r7, #31]
 800cb28:	e001      	b.n	800cb2e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cb2a:	23fc      	movs	r3, #252	; 0xfc
 800cb2c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	683a      	ldr	r2, [r7, #0]
 800cb32:	4413      	add	r3, r2
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d004      	beq.n	800cb44 <VL53L0X_load_tuning_settings+0x1b8>
 800cb3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f43f af2e 	beq.w	800c9a0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cb44:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3720      	adds	r7, #32
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800cb66:	f107 0313 	add.w	r3, r7, #19
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7fc ff47 	bl	8009a00 <VL53L0X_GetXTalkCompensationEnable>
 800cb72:	4603      	mov	r3, r0
 800cb74:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800cb76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d111      	bne.n	800cba2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800cb7e:	7cfb      	ldrb	r3, [r7, #19]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00e      	beq.n	800cba2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	6a1b      	ldr	r3, [r3, #32]
 800cb88:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	8a9b      	ldrh	r3, [r3, #20]
 800cb8e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	fb02 f303 	mul.w	r3, r2, r3
 800cb96:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800cb98:	697b      	ldr	r3, [r7, #20]
 800cb9a:	3380      	adds	r3, #128	; 0x80
 800cb9c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800cba2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3720      	adds	r7, #32
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b086      	sub	sp, #24
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800cbc6:	f107 0310 	add.w	r3, r7, #16
 800cbca:	461a      	mov	r2, r3
 800cbcc:	68b9      	ldr	r1, [r7, #8]
 800cbce:	68f8      	ldr	r0, [r7, #12]
 800cbd0:	f7ff ffbe 	bl	800cb50 <VL53L0X_get_total_xtalk_rate>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800cbd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d105      	bne.n	800cbec <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	441a      	add	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	601a      	str	r2, [r3, #0]

	return Status;
 800cbec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3718      	adds	r7, #24
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b09a      	sub	sp, #104	; 0x68
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	60f8      	str	r0, [r7, #12]
 800cc00:	60b9      	str	r1, [r7, #8]
 800cc02:	607a      	str	r2, [r7, #4]
 800cc04:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800cc06:	2312      	movs	r3, #18
 800cc08:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800cc0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cc0e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800cc10:	2342      	movs	r3, #66	; 0x42
 800cc12:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800cc14:	2306      	movs	r3, #6
 800cc16:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800cc18:	2307      	movs	r3, #7
 800cc1a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800cc28:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800cc30:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800cc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc36:	fb02 f303 	mul.w	r3, r2, r3
 800cc3a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	3380      	adds	r3, #128	; 0x80
 800cc40:	0a1b      	lsrs	r3, r3, #8
 800cc42:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800cc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc48:	fb02 f303 	mul.w	r3, r2, r3
 800cc4c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01b      	beq.n	800cc90 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	029b      	lsls	r3, r3, #10
 800cc5c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800cc62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc64:	4413      	add	r3, r2
 800cc66:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800cc68:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc70:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800cc72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc74:	4613      	mov	r3, r2
 800cc76:	005b      	lsls	r3, r3, #1
 800cc78:	4413      	add	r3, r2
 800cc7a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800cc7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc80:	fb02 f303 	mul.w	r3, r2, r3
 800cc84:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800cc86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc88:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cc8c:	0c1b      	lsrs	r3, r3, #16
 800cc8e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800cc94:	fb02 f303 	mul.w	r3, r2, r3
 800cc98:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800cc9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cca0:	0c1b      	lsrs	r3, r3, #16
 800cca2:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cca8:	fb02 f303 	mul.w	r3, r2, r3
 800ccac:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800ccae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccb0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ccb4:	0c1b      	lsrs	r3, r3, #16
 800ccb6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800ccb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccba:	085a      	lsrs	r2, r3, #1
 800ccbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbe:	441a      	add	r2, r3
 800ccc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccc6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800ccc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cccc:	fb02 f303 	mul.w	r3, r2, r3
 800ccd0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccd8:	d302      	bcc.n	800cce0 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800ccda:	4b55      	ldr	r3, [pc, #340]	; (800ce30 <VL53L0X_calc_dmax+0x238>)
 800ccdc:	663b      	str	r3, [r7, #96]	; 0x60
 800ccde:	e016      	b.n	800cd0e <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800cce0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cce2:	085a      	lsrs	r2, r3, #1
 800cce4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cce6:	441a      	add	r2, r3
 800cce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccea:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccee:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800ccf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccf4:	fb02 f303 	mul.w	r3, r2, r3
 800ccf8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800ccfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccfc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cd00:	0c1b      	lsrs	r3, r3, #16
 800cd02:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800cd04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cd08:	fb02 f303 	mul.w	r3, r2, r3
 800cd0c:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800cd0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd10:	039b      	lsls	r3, r3, #14
 800cd12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cd16:	4a47      	ldr	r2, [pc, #284]	; (800ce34 <VL53L0X_calc_dmax+0x23c>)
 800cd18:	fba2 2303 	umull	r2, r3, r2, r3
 800cd1c:	099b      	lsrs	r3, r3, #6
 800cd1e:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd24:	fb02 f303 	mul.w	r3, r2, r3
 800cd28:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800cd2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cd2e:	fb02 f303 	mul.w	r3, r2, r3
 800cd32:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800cd34:	6a3b      	ldr	r3, [r7, #32]
 800cd36:	3308      	adds	r3, #8
 800cd38:	091b      	lsrs	r3, r3, #4
 800cd3a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800cd3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd3e:	6a3b      	ldr	r3, [r7, #32]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800cd44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd46:	4613      	mov	r3, r2
 800cd48:	005b      	lsls	r3, r3, #1
 800cd4a:	4413      	add	r3, r2
 800cd4c:	011b      	lsls	r3, r3, #4
 800cd4e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cd56:	0b9b      	lsrs	r3, r3, #14
 800cd58:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800cd5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd5e:	4413      	add	r3, r2
 800cd60:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800cd62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd64:	085b      	lsrs	r3, r3, #1
 800cd66:	69ba      	ldr	r2, [r7, #24]
 800cd68:	4413      	add	r3, r2
 800cd6a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800cd6c:	69ba      	ldr	r2, [r7, #24]
 800cd6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd70:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd74:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	039b      	lsls	r3, r3, #14
 800cd7a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	085b      	lsrs	r3, r3, #1
 800cd80:	69ba      	ldr	r2, [r7, #24]
 800cd82:	4413      	add	r3, r2
 800cd84:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800cd86:	69ba      	ldr	r2, [r7, #24]
 800cd88:	69fb      	ldr	r3, [r7, #28]
 800cd8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd8e:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800cd90:	69bb      	ldr	r3, [r7, #24]
 800cd92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cd94:	fb02 f303 	mul.w	r3, r2, r3
 800cd98:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cda0:	4a24      	ldr	r2, [pc, #144]	; (800ce34 <VL53L0X_calc_dmax+0x23c>)
 800cda2:	fba2 2303 	umull	r2, r3, r2, r3
 800cda6:	099b      	lsrs	r3, r3, #6
 800cda8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	011b      	lsls	r3, r3, #4
 800cdae:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cdb6:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <VL53L0X_calc_dmax+0x23c>)
 800cdb8:	fba2 2303 	umull	r2, r3, r2, r3
 800cdbc:	099b      	lsrs	r3, r3, #6
 800cdbe:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800cdc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdc2:	3380      	adds	r3, #128	; 0x80
 800cdc4:	0a1b      	lsrs	r3, r3, #8
 800cdc6:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d008      	beq.n	800cde0 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	085a      	lsrs	r2, r3, #1
 800cdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd4:	441a      	add	r2, r3
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cddc:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdde:	e001      	b.n	800cde4 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800cde0:	2300      	movs	r3, #0
 800cde2:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800cde4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cde6:	f7fe fc3e 	bl	800b666 <VL53L0X_isqrt>
 800cdea:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d008      	beq.n	800ce04 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	085a      	lsrs	r2, r3, #1
 800cdf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf8:	441a      	add	r2, r3
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ce02:	e001      	b.n	800ce08 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800ce04:	2300      	movs	r3, #0
 800ce06:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ce08:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ce0a:	f7fe fc2c 	bl	800b666 <VL53L0X_isqrt>
 800ce0e:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800ce10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800ce16:	693a      	ldr	r2, [r7, #16]
 800ce18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d902      	bls.n	800ce24 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800ce1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ce20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ce22:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800ce24:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3768      	adds	r7, #104	; 0x68
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	fff00000 	.word	0xfff00000
 800ce34:	10624dd3 	.word	0x10624dd3

0800ce38 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b0b4      	sub	sp, #208	; 0xd0
 800ce3c:	af04      	add	r7, sp, #16
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800ce46:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ce4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800ce4e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800ce52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ce56:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800ce5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800ce5e:	f241 235c 	movw	r3, #4700	; 0x125c
 800ce62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800ce66:	4b9e      	ldr	r3, [pc, #632]	; (800d0e0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800ce68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800ce6c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800ce70:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800ce72:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800ce76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ce7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce7e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800ce80:	4b98      	ldr	r3, [pc, #608]	; (800d0e4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800ce82:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800ce84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce88:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800ce8a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800ce8e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800ce90:	f240 6377 	movw	r3, #1655	; 0x677
 800ce94:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce96:	2300      	movs	r3, #0
 800ce98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	6a1b      	ldr	r3, [r3, #32]
 800cea0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	691b      	ldr	r3, [r3, #16]
 800cea6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ceaa:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800ceae:	0c1b      	lsrs	r3, r3, #16
 800ceb0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800ceb2:	68bb      	ldr	r3, [r7, #8]
 800ceb4:	68db      	ldr	r3, [r3, #12]
 800ceb6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800ceb8:	f107 0310 	add.w	r3, r7, #16
 800cebc:	461a      	mov	r2, r3
 800cebe:	68b9      	ldr	r1, [r7, #8]
 800cec0:	68f8      	ldr	r0, [r7, #12]
 800cec2:	f7ff fe74 	bl	800cbae <VL53L0X_get_total_signal_rate>
 800cec6:	4603      	mov	r3, r0
 800cec8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800cecc:	f107 0314 	add.w	r3, r7, #20
 800ced0:	461a      	mov	r2, r3
 800ced2:	68b9      	ldr	r1, [r7, #8]
 800ced4:	68f8      	ldr	r0, [r7, #12]
 800ced6:	f7ff fe3b 	bl	800cb50 <VL53L0X_get_total_xtalk_rate>
 800ceda:	4603      	mov	r3, r0
 800cedc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cee6:	fb02 f303 	mul.w	r3, r2, r3
 800ceea:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800ceec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ceee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800cef2:	0c1b      	lsrs	r3, r3, #16
 800cef4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cefc:	fb02 f303 	mul.w	r3, r2, r3
 800cf00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800cf04:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800cf08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d902      	bls.n	800cf14 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800cf0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cf10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800cf14:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d168      	bne.n	800cfee <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800cf22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800cf2c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800cf30:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cf34:	461a      	mov	r2, r3
 800cf36:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f7ff f936 	bl	800c1ac <VL53L0X_calc_timeout_mclks>
 800cf40:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800cf48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800cf52:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800cf56:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff f923 	bl	800c1ac <VL53L0X_calc_timeout_mclks>
 800cf66:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800cf6e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800cf72:	2b08      	cmp	r3, #8
 800cf74:	d102      	bne.n	800cf7c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800cf76:	2302      	movs	r3, #2
 800cf78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800cf7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf80:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800cf82:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cf86:	fb02 f303 	mul.w	r3, r2, r3
 800cf8a:	02db      	lsls	r3, r3, #11
 800cf8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800cf90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cf94:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cf98:	4a53      	ldr	r2, [pc, #332]	; (800d0e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800cf9a:	fba2 2303 	umull	r2, r3, r2, r3
 800cf9e:	099b      	lsrs	r3, r3, #6
 800cfa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800cfa4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cfa8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cfaa:	fb02 f303 	mul.w	r3, r2, r3
 800cfae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800cfb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cfb6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800cfba:	4a4b      	ldr	r2, [pc, #300]	; (800d0e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800cfbc:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc0:	099b      	lsrs	r3, r3, #6
 800cfc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	3380      	adds	r3, #128	; 0x80
 800cfca:	0a1b      	lsrs	r3, r3, #8
 800cfcc:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cfd4:	fb02 f303 	mul.w	r3, r2, r3
 800cfd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800cfdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cfe0:	3380      	adds	r3, #128	; 0x80
 800cfe2:	0a1b      	lsrs	r3, r3, #8
 800cfe4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	021b      	lsls	r3, r3, #8
 800cfec:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cfee:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d002      	beq.n	800cffc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800cff6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800cffa:	e165      	b.n	800d2c8 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800cffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d10c      	bne.n	800d01c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d008:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d010:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	2200      	movs	r2, #0
 800d018:	601a      	str	r2, [r3, #0]
 800d01a:	e153      	b.n	800d2c4 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d01c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d020:	2b00      	cmp	r3, #0
 800d022:	d102      	bne.n	800d02a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d024:	2301      	movs	r3, #1
 800d026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d02a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d02e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d032:	041a      	lsls	r2, r3, #16
 800d034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d036:	fbb2 f3f3 	udiv	r3, r2, r3
 800d03a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d03e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d042:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d044:	429a      	cmp	r2, r3
 800d046:	d902      	bls.n	800d04e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d04a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d04e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d052:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d056:	fb02 f303 	mul.w	r3, r2, r3
 800d05a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d05e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d062:	4613      	mov	r3, r2
 800d064:	005b      	lsls	r3, r3, #1
 800d066:	4413      	add	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4618      	mov	r0, r3
 800d06c:	f7fe fafb 	bl	800b666 <VL53L0X_isqrt>
 800d070:	4603      	mov	r3, r0
 800d072:	005b      	lsls	r3, r3, #1
 800d074:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	891b      	ldrh	r3, [r3, #8]
 800d07a:	461a      	mov	r2, r3
 800d07c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d07e:	fb02 f303 	mul.w	r3, r2, r3
 800d082:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d086:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d088:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d08c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d08e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d090:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d094:	4a14      	ldr	r2, [pc, #80]	; (800d0e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d096:	fba2 2303 	umull	r2, r3, r2, r3
 800d09a:	099b      	lsrs	r3, r3, #6
 800d09c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d09e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d0a0:	041b      	lsls	r3, r3, #16
 800d0a2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d0a6:	4a10      	ldr	r2, [pc, #64]	; (800d0e8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ac:	099b      	lsrs	r3, r3, #6
 800d0ae:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b2:	021b      	lsls	r3, r3, #8
 800d0b4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d0b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	bfb8      	it	lt
 800d0c2:	425b      	neglt	r3, r3
 800d0c4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c8:	021b      	lsls	r3, r3, #8
 800d0ca:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	7e1b      	ldrb	r3, [r3, #24]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00b      	beq.n	800d0ec <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d0d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d0d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d0dc:	e035      	b.n	800d14a <VL53L0X_calc_sigma_estimate+0x312>
 800d0de:	bf00      	nop
 800d0e0:	028f87ae 	.word	0x028f87ae
 800d0e4:	0006999a 	.word	0x0006999a
 800d0e8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d0ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d104:	fb02 f303 	mul.w	r3, r2, r3
 800d108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d10c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d112:	4413      	add	r3, r2
 800d114:	0c1b      	lsrs	r3, r3, #16
 800d116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d11e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d12a:	085b      	lsrs	r3, r3, #1
 800d12c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d130:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d134:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d138:	fb02 f303 	mul.w	r3, r2, r3
 800d13c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d140:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d144:	0b9b      	lsrs	r3, r3, #14
 800d146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d14a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d150:	fb02 f303 	mul.w	r3, r2, r3
 800d154:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d158:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d15c:	0c1b      	lsrs	r3, r3, #16
 800d15e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d164:	fb02 f303 	mul.w	r3, r2, r3
 800d168:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d16a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d16e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d176:	0c1b      	lsrs	r3, r3, #16
 800d178:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d17e:	fb02 f303 	mul.w	r3, r2, r3
 800d182:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	4413      	add	r3, r2
 800d18a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d18c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d18e:	f7fe fa6a 	bl	800b666 <VL53L0X_isqrt>
 800d192:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d196:	041b      	lsls	r3, r3, #16
 800d198:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	3332      	adds	r3, #50	; 0x32
 800d19e:	4a4c      	ldr	r2, [pc, #304]	; (800d2d0 <VL53L0X_calc_sigma_estimate+0x498>)
 800d1a0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1a4:	095a      	lsrs	r2, r3, #5
 800d1a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d1b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d1b4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d1b8:	fb02 f303 	mul.w	r3, r2, r3
 800d1bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d1c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d1c4:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d1c8:	3308      	adds	r3, #8
 800d1ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d1ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d1d2:	4a40      	ldr	r2, [pc, #256]	; (800d2d4 <VL53L0X_calc_sigma_estimate+0x49c>)
 800d1d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1d8:	0b5b      	lsrs	r3, r3, #13
 800d1da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d1de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d1e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d902      	bls.n	800d1ee <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d1e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d1ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d1f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d1fc:	4a36      	ldr	r2, [pc, #216]	; (800d2d8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800d1fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d202:	099b      	lsrs	r3, r3, #6
 800d204:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d20a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d20e:	441a      	add	r2, r3
 800d210:	6a3b      	ldr	r3, [r7, #32]
 800d212:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800d216:	4618      	mov	r0, r3
 800d218:	f7fe fa25 	bl	800b666 <VL53L0X_isqrt>
 800d21c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d21e:	69fb      	ldr	r3, [r7, #28]
 800d220:	021b      	lsls	r3, r3, #8
 800d222:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d224:	69fb      	ldr	r3, [r7, #28]
 800d226:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d22a:	4a2b      	ldr	r2, [pc, #172]	; (800d2d8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800d22c:	fba2 2303 	umull	r2, r3, r2, r3
 800d230:	099b      	lsrs	r3, r3, #6
 800d232:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d238:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d23c:	fb02 f303 	mul.w	r3, r2, r3
 800d240:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	69fa      	ldr	r2, [r7, #28]
 800d246:	fb02 f303 	mul.w	r3, r2, r3
 800d24a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d250:	4413      	add	r3, r2
 800d252:	4618      	mov	r0, r3
 800d254:	f7fe fa07 	bl	800b666 <VL53L0X_isqrt>
 800d258:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d25a:	69bb      	ldr	r3, [r7, #24]
 800d25c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d260:	fb02 f303 	mul.w	r3, r2, r3
 800d264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d268:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d009      	beq.n	800d282 <VL53L0X_calc_sigma_estimate+0x44a>
 800d26e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d272:	2b00      	cmp	r3, #0
 800d274:	d005      	beq.n	800d282 <VL53L0X_calc_sigma_estimate+0x44a>
 800d276:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d27a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d27e:	429a      	cmp	r2, r3
 800d280:	d903      	bls.n	800d28a <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d282:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d290:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800d29c:	6939      	ldr	r1, [r7, #16]
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	9303      	str	r3, [sp, #12]
 800d2a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d2a6:	9302      	str	r3, [sp, #8]
 800d2a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d2ac:	9301      	str	r3, [sp, #4]
 800d2ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d2b0:	9300      	str	r3, [sp, #0]
 800d2b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d2b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f7ff fc9d 	bl	800cbf8 <VL53L0X_calc_dmax>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d2c4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	37c0      	adds	r7, #192	; 0xc0
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	51eb851f 	.word	0x51eb851f
 800d2d4:	d1b71759 	.word	0xd1b71759
 800d2d8:	10624dd3 	.word	0x10624dd3

0800d2dc <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b090      	sub	sp, #64	; 0x40
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	607a      	str	r2, [r7, #4]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	72fb      	strb	r3, [r7, #11]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d308:	2300      	movs	r3, #0
 800d30a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d30e:	2300      	movs	r3, #0
 800d310:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800d320:	2300      	movs	r3, #0
 800d322:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d32e:	7afb      	ldrb	r3, [r7, #11]
 800d330:	10db      	asrs	r3, r3, #3
 800d332:	b2db      	uxtb	r3, r3
 800d334:	f003 030f 	and.w	r3, r3, #15
 800d338:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d33c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d340:	2b00      	cmp	r3, #0
 800d342:	d017      	beq.n	800d374 <VL53L0X_get_pal_range_status+0x98>
 800d344:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d348:	2b05      	cmp	r3, #5
 800d34a:	d013      	beq.n	800d374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d34c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d350:	2b07      	cmp	r3, #7
 800d352:	d00f      	beq.n	800d374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d354:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d358:	2b0c      	cmp	r3, #12
 800d35a:	d00b      	beq.n	800d374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d35c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d360:	2b0d      	cmp	r3, #13
 800d362:	d007      	beq.n	800d374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d364:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d368:	2b0e      	cmp	r3, #14
 800d36a:	d003      	beq.n	800d374 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d36c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d370:	2b0f      	cmp	r3, #15
 800d372:	d103      	bne.n	800d37c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d374:	2301      	movs	r3, #1
 800d376:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d37a:	e002      	b.n	800d382 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d37c:	2300      	movs	r3, #0
 800d37e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d382:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d386:	2b00      	cmp	r3, #0
 800d388:	d109      	bne.n	800d39e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d38a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d38e:	461a      	mov	r2, r3
 800d390:	2100      	movs	r1, #0
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f7fc fc08 	bl	8009ba8 <VL53L0X_GetLimitCheckEnable>
 800d398:	4603      	mov	r3, r0
 800d39a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d39e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d02e      	beq.n	800d404 <VL53L0X_get_pal_range_status+0x128>
 800d3a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d12a      	bne.n	800d404 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800d3ae:	f107 0310 	add.w	r3, r7, #16
 800d3b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d3b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	f7ff fd3d 	bl	800ce38 <VL53L0X_calc_sigma_estimate>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800d3c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d103      	bne.n	800d3d4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3d2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d3d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d113      	bne.n	800d404 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d3dc:	f107 0320 	add.w	r3, r7, #32
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	2100      	movs	r1, #0
 800d3e4:	68f8      	ldr	r0, [r7, #12]
 800d3e6:	f7fc fc65 	bl	8009cb4 <VL53L0X_GetLimitCheckValue>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800d3f0:	6a3b      	ldr	r3, [r7, #32]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d006      	beq.n	800d404 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800d3f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3f8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d902      	bls.n	800d404 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800d3fe:	2301      	movs	r3, #1
 800d400:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d404:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d109      	bne.n	800d420 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d40c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800d410:	461a      	mov	r2, r3
 800d412:	2102      	movs	r1, #2
 800d414:	68f8      	ldr	r0, [r7, #12]
 800d416:	f7fc fbc7 	bl	8009ba8 <VL53L0X_GetLimitCheckEnable>
 800d41a:	4603      	mov	r3, r0
 800d41c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800d420:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d424:	2b00      	cmp	r3, #0
 800d426:	d044      	beq.n	800d4b2 <VL53L0X_get_pal_range_status+0x1d6>
 800d428:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d140      	bne.n	800d4b2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d430:	f107 031c 	add.w	r3, r7, #28
 800d434:	461a      	mov	r2, r3
 800d436:	2102      	movs	r1, #2
 800d438:	68f8      	ldr	r0, [r7, #12]
 800d43a:	f7fc fc3b 	bl	8009cb4 <VL53L0X_GetLimitCheckValue>
 800d43e:	4603      	mov	r3, r0
 800d440:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800d444:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d107      	bne.n	800d45c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d44c:	2201      	movs	r2, #1
 800d44e:	21ff      	movs	r1, #255	; 0xff
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f000 fc4c 	bl	800dcee <VL53L0X_WrByte>
 800d456:	4603      	mov	r3, r0
 800d458:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800d45c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d460:	2b00      	cmp	r3, #0
 800d462:	d109      	bne.n	800d478 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800d464:	f107 0316 	add.w	r3, r7, #22
 800d468:	461a      	mov	r2, r3
 800d46a:	21b6      	movs	r1, #182	; 0xb6
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f000 fcdb 	bl	800de28 <VL53L0X_RdWord>
 800d472:	4603      	mov	r3, r0
 800d474:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800d478:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d107      	bne.n	800d490 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d480:	2200      	movs	r2, #0
 800d482:	21ff      	movs	r1, #255	; 0xff
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f000 fc32 	bl	800dcee <VL53L0X_WrByte>
 800d48a:	4603      	mov	r3, r0
 800d48c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800d490:	8afb      	ldrh	r3, [r7, #22]
 800d492:	025b      	lsls	r3, r3, #9
 800d494:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d49a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d006      	beq.n	800d4b2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800d4a4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800d4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d902      	bls.n	800d4b2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d4b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d109      	bne.n	800d4ce <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d4ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d4be:	461a      	mov	r2, r3
 800d4c0:	2103      	movs	r1, #3
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f7fc fb70 	bl	8009ba8 <VL53L0X_GetLimitCheckEnable>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800d4ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d023      	beq.n	800d51e <VL53L0X_get_pal_range_status+0x242>
 800d4d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d11f      	bne.n	800d51e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800d4de:	893b      	ldrh	r3, [r7, #8]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d102      	bne.n	800d4ea <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	637b      	str	r3, [r7, #52]	; 0x34
 800d4e8:	e005      	b.n	800d4f6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	021a      	lsls	r2, r3, #8
 800d4ee:	893b      	ldrh	r3, [r7, #8]
 800d4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d4f6:	f107 0318 	add.w	r3, r7, #24
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	2103      	movs	r1, #3
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f7fc fbd8 	bl	8009cb4 <VL53L0X_GetLimitCheckValue>
 800d504:	4603      	mov	r3, r0
 800d506:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d006      	beq.n	800d51e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800d510:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800d512:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d514:	429a      	cmp	r2, r3
 800d516:	d202      	bcs.n	800d51e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800d518:	2301      	movs	r3, #1
 800d51a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d51e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d522:	2b00      	cmp	r3, #0
 800d524:	d14a      	bne.n	800d5bc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800d526:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d103      	bne.n	800d536 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800d52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d530:	22ff      	movs	r2, #255	; 0xff
 800d532:	701a      	strb	r2, [r3, #0]
 800d534:	e042      	b.n	800d5bc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800d536:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d007      	beq.n	800d54e <VL53L0X_get_pal_range_status+0x272>
 800d53e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d542:	2b02      	cmp	r3, #2
 800d544:	d003      	beq.n	800d54e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800d546:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d54a:	2b03      	cmp	r3, #3
 800d54c:	d103      	bne.n	800d556 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800d54e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d550:	2205      	movs	r2, #5
 800d552:	701a      	strb	r2, [r3, #0]
 800d554:	e032      	b.n	800d5bc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800d556:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d55a:	2b06      	cmp	r3, #6
 800d55c:	d003      	beq.n	800d566 <VL53L0X_get_pal_range_status+0x28a>
 800d55e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d562:	2b09      	cmp	r3, #9
 800d564:	d103      	bne.n	800d56e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800d566:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d568:	2204      	movs	r2, #4
 800d56a:	701a      	strb	r2, [r3, #0]
 800d56c:	e026      	b.n	800d5bc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800d56e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d572:	2b08      	cmp	r3, #8
 800d574:	d007      	beq.n	800d586 <VL53L0X_get_pal_range_status+0x2aa>
 800d576:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d57a:	2b0a      	cmp	r3, #10
 800d57c:	d003      	beq.n	800d586 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800d57e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d582:	2b01      	cmp	r3, #1
 800d584:	d103      	bne.n	800d58e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800d586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d588:	2203      	movs	r2, #3
 800d58a:	701a      	strb	r2, [r3, #0]
 800d58c:	e016      	b.n	800d5bc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800d58e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d592:	2b04      	cmp	r3, #4
 800d594:	d003      	beq.n	800d59e <VL53L0X_get_pal_range_status+0x2c2>
 800d596:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d103      	bne.n	800d5a6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800d59e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a0:	2202      	movs	r2, #2
 800d5a2:	701a      	strb	r2, [r3, #0]
 800d5a4:	e00a      	b.n	800d5bc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800d5a6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d103      	bne.n	800d5b6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800d5ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	701a      	strb	r2, [r3, #0]
 800d5b4:	e002      	b.n	800d5bc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800d5b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800d5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d102      	bne.n	800d5ca <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800d5c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d5ca:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	2101      	movs	r1, #1
 800d5d2:	68f8      	ldr	r0, [r7, #12]
 800d5d4:	f7fc fae8 	bl	8009ba8 <VL53L0X_GetLimitCheckEnable>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800d5de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d14f      	bne.n	800d686 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800d5e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <VL53L0X_get_pal_range_status+0x31a>
 800d5ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d103      	bne.n	800d5fe <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d5fc:	e002      	b.n	800d604 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800d5fe:	2300      	movs	r3, #0
 800d600:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d60a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800d60e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d612:	2b04      	cmp	r3, #4
 800d614:	d003      	beq.n	800d61e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800d616:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d103      	bne.n	800d626 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800d61e:	2301      	movs	r3, #1
 800d620:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d624:	e002      	b.n	800d62c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800d626:	2300      	movs	r3, #0
 800d628:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d632:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800d636:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <VL53L0X_get_pal_range_status+0x36a>
 800d63e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d642:	2b01      	cmp	r3, #1
 800d644:	d103      	bne.n	800d64e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800d646:	2301      	movs	r3, #1
 800d648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d64c:	e002      	b.n	800d654 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800d64e:	2300      	movs	r3, #0
 800d650:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d65a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d65e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <VL53L0X_get_pal_range_status+0x392>
 800d666:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d103      	bne.n	800d676 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800d66e:	2301      	movs	r3, #1
 800d670:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d674:	e002      	b.n	800d67c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d682:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d686:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3740      	adds	r7, #64	; 0x40
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <VL53L0X_get_pal_error_string>:
	return Status;
}

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 800d694:	b4b0      	push	{r4, r5, r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	4603      	mov	r3, r0
 800d69c:	6039      	str	r1, [r7, #0]
 800d69e:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 800d6a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6a8:	3363      	adds	r3, #99	; 0x63
 800d6aa:	2b63      	cmp	r3, #99	; 0x63
 800d6ac:	f200 81b9 	bhi.w	800da22 <VL53L0X_get_pal_error_string+0x38e>
 800d6b0:	a201      	add	r2, pc, #4	; (adr r2, 800d6b8 <VL53L0X_get_pal_error_string+0x24>)
 800d6b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b6:	bf00      	nop
 800d6b8:	0800da07 	.word	0x0800da07
 800d6bc:	0800da23 	.word	0x0800da23
 800d6c0:	0800da23 	.word	0x0800da23
 800d6c4:	0800da23 	.word	0x0800da23
 800d6c8:	0800da23 	.word	0x0800da23
 800d6cc:	0800da23 	.word	0x0800da23
 800d6d0:	0800da23 	.word	0x0800da23
 800d6d4:	0800da23 	.word	0x0800da23
 800d6d8:	0800da23 	.word	0x0800da23
 800d6dc:	0800da23 	.word	0x0800da23
 800d6e0:	0800da23 	.word	0x0800da23
 800d6e4:	0800da23 	.word	0x0800da23
 800d6e8:	0800da23 	.word	0x0800da23
 800d6ec:	0800da23 	.word	0x0800da23
 800d6f0:	0800da23 	.word	0x0800da23
 800d6f4:	0800da23 	.word	0x0800da23
 800d6f8:	0800da23 	.word	0x0800da23
 800d6fc:	0800da23 	.word	0x0800da23
 800d700:	0800da23 	.word	0x0800da23
 800d704:	0800da23 	.word	0x0800da23
 800d708:	0800da23 	.word	0x0800da23
 800d70c:	0800da23 	.word	0x0800da23
 800d710:	0800da23 	.word	0x0800da23
 800d714:	0800da23 	.word	0x0800da23
 800d718:	0800da23 	.word	0x0800da23
 800d71c:	0800da23 	.word	0x0800da23
 800d720:	0800da23 	.word	0x0800da23
 800d724:	0800da23 	.word	0x0800da23
 800d728:	0800da23 	.word	0x0800da23
 800d72c:	0800da23 	.word	0x0800da23
 800d730:	0800da23 	.word	0x0800da23
 800d734:	0800da23 	.word	0x0800da23
 800d738:	0800da23 	.word	0x0800da23
 800d73c:	0800da23 	.word	0x0800da23
 800d740:	0800da23 	.word	0x0800da23
 800d744:	0800da23 	.word	0x0800da23
 800d748:	0800da23 	.word	0x0800da23
 800d74c:	0800da23 	.word	0x0800da23
 800d750:	0800da23 	.word	0x0800da23
 800d754:	0800da23 	.word	0x0800da23
 800d758:	0800da23 	.word	0x0800da23
 800d75c:	0800da23 	.word	0x0800da23
 800d760:	0800da23 	.word	0x0800da23
 800d764:	0800da23 	.word	0x0800da23
 800d768:	0800da23 	.word	0x0800da23
 800d76c:	0800da23 	.word	0x0800da23
 800d770:	0800da23 	.word	0x0800da23
 800d774:	0800da23 	.word	0x0800da23
 800d778:	0800da23 	.word	0x0800da23
 800d77c:	0800d9e9 	.word	0x0800d9e9
 800d780:	0800da23 	.word	0x0800da23
 800d784:	0800da23 	.word	0x0800da23
 800d788:	0800da23 	.word	0x0800da23
 800d78c:	0800da23 	.word	0x0800da23
 800d790:	0800da23 	.word	0x0800da23
 800d794:	0800da23 	.word	0x0800da23
 800d798:	0800da23 	.word	0x0800da23
 800d79c:	0800da23 	.word	0x0800da23
 800d7a0:	0800da23 	.word	0x0800da23
 800d7a4:	0800d9c7 	.word	0x0800d9c7
 800d7a8:	0800da23 	.word	0x0800da23
 800d7ac:	0800da23 	.word	0x0800da23
 800d7b0:	0800da23 	.word	0x0800da23
 800d7b4:	0800da23 	.word	0x0800da23
 800d7b8:	0800da23 	.word	0x0800da23
 800d7bc:	0800da23 	.word	0x0800da23
 800d7c0:	0800da23 	.word	0x0800da23
 800d7c4:	0800da23 	.word	0x0800da23
 800d7c8:	0800da23 	.word	0x0800da23
 800d7cc:	0800d9ab 	.word	0x0800d9ab
 800d7d0:	0800da23 	.word	0x0800da23
 800d7d4:	0800da23 	.word	0x0800da23
 800d7d8:	0800da23 	.word	0x0800da23
 800d7dc:	0800da23 	.word	0x0800da23
 800d7e0:	0800da23 	.word	0x0800da23
 800d7e4:	0800da23 	.word	0x0800da23
 800d7e8:	0800da23 	.word	0x0800da23
 800d7ec:	0800da23 	.word	0x0800da23
 800d7f0:	0800da23 	.word	0x0800da23
 800d7f4:	0800d991 	.word	0x0800d991
 800d7f8:	0800da23 	.word	0x0800da23
 800d7fc:	0800da23 	.word	0x0800da23
 800d800:	0800da23 	.word	0x0800da23
 800d804:	0800da23 	.word	0x0800da23
 800d808:	0800da23 	.word	0x0800da23
 800d80c:	0800da23 	.word	0x0800da23
 800d810:	0800da23 	.word	0x0800da23
 800d814:	0800d8dd 	.word	0x0800d8dd
 800d818:	0800d973 	.word	0x0800d973
 800d81c:	0800d95b 	.word	0x0800d95b
 800d820:	0800d943 	.word	0x0800d943
 800d824:	0800d925 	.word	0x0800d925
 800d828:	0800d90b 	.word	0x0800d90b
 800d82c:	0800d8f9 	.word	0x0800d8f9
 800d830:	0800d8c5 	.word	0x0800d8c5
 800d834:	0800d8a7 	.word	0x0800d8a7
 800d838:	0800d893 	.word	0x0800d893
 800d83c:	0800d87b 	.word	0x0800d87b
 800d840:	0800d85d 	.word	0x0800d85d
 800d844:	0800d849 	.word	0x0800d849
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	4980      	ldr	r1, [pc, #512]	; (800da4c <VL53L0X_get_pal_error_string+0x3b8>)
 800d84c:	461a      	mov	r2, r3
 800d84e:	460b      	mov	r3, r1
 800d850:	cb03      	ldmia	r3!, {r0, r1}
 800d852:	6010      	str	r0, [r2, #0]
 800d854:	6051      	str	r1, [r2, #4]
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 800d85a:	e0f0      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	4a7c      	ldr	r2, [pc, #496]	; (800da50 <VL53L0X_get_pal_error_string+0x3bc>)
 800d860:	461d      	mov	r5, r3
 800d862:	4614      	mov	r4, r2
 800d864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d866:	6028      	str	r0, [r5, #0]
 800d868:	6069      	str	r1, [r5, #4]
 800d86a:	60aa      	str	r2, [r5, #8]
 800d86c:	60eb      	str	r3, [r5, #12]
 800d86e:	cc03      	ldmia	r4!, {r0, r1}
 800d870:	6128      	str	r0, [r5, #16]
 800d872:	6169      	str	r1, [r5, #20]
 800d874:	8823      	ldrh	r3, [r4, #0]
 800d876:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 800d878:	e0e1      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	4a75      	ldr	r2, [pc, #468]	; (800da54 <VL53L0X_get_pal_error_string+0x3c0>)
 800d87e:	461d      	mov	r5, r3
 800d880:	4614      	mov	r4, r2
 800d882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d884:	6028      	str	r0, [r5, #0]
 800d886:	6069      	str	r1, [r5, #4]
 800d888:	60aa      	str	r2, [r5, #8]
 800d88a:	60eb      	str	r3, [r5, #12]
 800d88c:	8823      	ldrh	r3, [r4, #0]
 800d88e:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 800d890:	e0d5      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	4a70      	ldr	r2, [pc, #448]	; (800da58 <VL53L0X_get_pal_error_string+0x3c4>)
 800d896:	461c      	mov	r4, r3
 800d898:	4615      	mov	r5, r2
 800d89a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d89c:	6020      	str	r0, [r4, #0]
 800d89e:	6061      	str	r1, [r4, #4]
 800d8a0:	60a2      	str	r2, [r4, #8]
 800d8a2:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 800d8a4:	e0cb      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	4a6c      	ldr	r2, [pc, #432]	; (800da5c <VL53L0X_get_pal_error_string+0x3c8>)
 800d8aa:	461d      	mov	r5, r3
 800d8ac:	4614      	mov	r4, r2
 800d8ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8b0:	6028      	str	r0, [r5, #0]
 800d8b2:	6069      	str	r1, [r5, #4]
 800d8b4:	60aa      	str	r2, [r5, #8]
 800d8b6:	60eb      	str	r3, [r5, #12]
 800d8b8:	cc03      	ldmia	r4!, {r0, r1}
 800d8ba:	6128      	str	r0, [r5, #16]
 800d8bc:	6169      	str	r1, [r5, #20]
 800d8be:	7823      	ldrb	r3, [r4, #0]
 800d8c0:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 800d8c2:	e0bc      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	4a66      	ldr	r2, [pc, #408]	; (800da60 <VL53L0X_get_pal_error_string+0x3cc>)
 800d8c8:	461d      	mov	r5, r3
 800d8ca:	4614      	mov	r4, r2
 800d8cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8ce:	6028      	str	r0, [r5, #0]
 800d8d0:	6069      	str	r1, [r5, #4]
 800d8d2:	60aa      	str	r2, [r5, #8]
 800d8d4:	60eb      	str	r3, [r5, #12]
 800d8d6:	6820      	ldr	r0, [r4, #0]
 800d8d8:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 800d8da:	e0b0      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	4a61      	ldr	r2, [pc, #388]	; (800da64 <VL53L0X_get_pal_error_string+0x3d0>)
 800d8e0:	461d      	mov	r5, r3
 800d8e2:	4614      	mov	r4, r2
 800d8e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d8e6:	6028      	str	r0, [r5, #0]
 800d8e8:	6069      	str	r1, [r5, #4]
 800d8ea:	60aa      	str	r2, [r5, #8]
 800d8ec:	60eb      	str	r3, [r5, #12]
 800d8ee:	6820      	ldr	r0, [r4, #0]
 800d8f0:	6128      	str	r0, [r5, #16]
 800d8f2:	88a3      	ldrh	r3, [r4, #4]
 800d8f4:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 800d8f6:	e0a2      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	4a5b      	ldr	r2, [pc, #364]	; (800da68 <VL53L0X_get_pal_error_string+0x3d4>)
 800d8fc:	461c      	mov	r4, r3
 800d8fe:	4613      	mov	r3, r2
 800d900:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d902:	6020      	str	r0, [r4, #0]
 800d904:	6061      	str	r1, [r4, #4]
 800d906:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 800d908:	e099      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	4a57      	ldr	r2, [pc, #348]	; (800da6c <VL53L0X_get_pal_error_string+0x3d8>)
 800d90e:	461c      	mov	r4, r3
 800d910:	4613      	mov	r3, r2
 800d912:	cb07      	ldmia	r3!, {r0, r1, r2}
 800d914:	6020      	str	r0, [r4, #0]
 800d916:	6061      	str	r1, [r4, #4]
 800d918:	60a2      	str	r2, [r4, #8]
 800d91a:	881a      	ldrh	r2, [r3, #0]
 800d91c:	789b      	ldrb	r3, [r3, #2]
 800d91e:	81a2      	strh	r2, [r4, #12]
 800d920:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 800d922:	e08c      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	4a52      	ldr	r2, [pc, #328]	; (800da70 <VL53L0X_get_pal_error_string+0x3dc>)
 800d928:	461d      	mov	r5, r3
 800d92a:	4614      	mov	r4, r2
 800d92c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d92e:	6028      	str	r0, [r5, #0]
 800d930:	6069      	str	r1, [r5, #4]
 800d932:	60aa      	str	r2, [r5, #8]
 800d934:	60eb      	str	r3, [r5, #12]
 800d936:	cc03      	ldmia	r4!, {r0, r1}
 800d938:	6128      	str	r0, [r5, #16]
 800d93a:	6169      	str	r1, [r5, #20]
 800d93c:	7823      	ldrb	r3, [r4, #0]
 800d93e:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 800d940:	e07d      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	4a4b      	ldr	r2, [pc, #300]	; (800da74 <VL53L0X_get_pal_error_string+0x3e0>)
 800d946:	461d      	mov	r5, r3
 800d948:	4614      	mov	r4, r2
 800d94a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d94c:	6028      	str	r0, [r5, #0]
 800d94e:	6069      	str	r1, [r5, #4]
 800d950:	60aa      	str	r2, [r5, #8]
 800d952:	60eb      	str	r3, [r5, #12]
 800d954:	7823      	ldrb	r3, [r4, #0]
 800d956:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 800d958:	e071      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	4a46      	ldr	r2, [pc, #280]	; (800da78 <VL53L0X_get_pal_error_string+0x3e4>)
 800d95e:	461d      	mov	r5, r3
 800d960:	4614      	mov	r4, r2
 800d962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d964:	6028      	str	r0, [r5, #0]
 800d966:	6069      	str	r1, [r5, #4]
 800d968:	60aa      	str	r2, [r5, #8]
 800d96a:	60eb      	str	r3, [r5, #12]
 800d96c:	8823      	ldrh	r3, [r4, #0]
 800d96e:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 800d970:	e065      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	4a41      	ldr	r2, [pc, #260]	; (800da7c <VL53L0X_get_pal_error_string+0x3e8>)
 800d976:	461d      	mov	r5, r3
 800d978:	4614      	mov	r4, r2
 800d97a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d97c:	6028      	str	r0, [r5, #0]
 800d97e:	6069      	str	r1, [r5, #4]
 800d980:	60aa      	str	r2, [r5, #8]
 800d982:	60eb      	str	r3, [r5, #12]
 800d984:	cc03      	ldmia	r4!, {r0, r1}
 800d986:	6128      	str	r0, [r5, #16]
 800d988:	6169      	str	r1, [r5, #20]
 800d98a:	7823      	ldrb	r3, [r4, #0]
 800d98c:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 800d98e:	e056      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	4a3b      	ldr	r2, [pc, #236]	; (800da80 <VL53L0X_get_pal_error_string+0x3ec>)
 800d994:	461d      	mov	r5, r3
 800d996:	4614      	mov	r4, r2
 800d998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d99a:	6028      	str	r0, [r5, #0]
 800d99c:	6069      	str	r1, [r5, #4]
 800d99e:	60aa      	str	r2, [r5, #8]
 800d9a0:	60eb      	str	r3, [r5, #12]
 800d9a2:	cc03      	ldmia	r4!, {r0, r1}
 800d9a4:	6128      	str	r0, [r5, #16]
 800d9a6:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 800d9a8:	e049      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	4a35      	ldr	r2, [pc, #212]	; (800da84 <VL53L0X_get_pal_error_string+0x3f0>)
 800d9ae:	461d      	mov	r5, r3
 800d9b0:	4614      	mov	r4, r2
 800d9b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9b4:	6028      	str	r0, [r5, #0]
 800d9b6:	6069      	str	r1, [r5, #4]
 800d9b8:	60aa      	str	r2, [r5, #8]
 800d9ba:	60eb      	str	r3, [r5, #12]
 800d9bc:	6820      	ldr	r0, [r4, #0]
 800d9be:	6128      	str	r0, [r5, #16]
 800d9c0:	88a3      	ldrh	r3, [r4, #4]
 800d9c2:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 800d9c4:	e03b      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	4a2f      	ldr	r2, [pc, #188]	; (800da88 <VL53L0X_get_pal_error_string+0x3f4>)
 800d9ca:	461c      	mov	r4, r3
 800d9cc:	4615      	mov	r5, r2
 800d9ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d9d0:	6020      	str	r0, [r4, #0]
 800d9d2:	6061      	str	r1, [r4, #4]
 800d9d4:	60a2      	str	r2, [r4, #8]
 800d9d6:	60e3      	str	r3, [r4, #12]
 800d9d8:	6828      	ldr	r0, [r5, #0]
 800d9da:	6120      	str	r0, [r4, #16]
 800d9dc:	88ab      	ldrh	r3, [r5, #4]
 800d9de:	79aa      	ldrb	r2, [r5, #6]
 800d9e0:	82a3      	strh	r3, [r4, #20]
 800d9e2:	4613      	mov	r3, r2
 800d9e4:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 800d9e6:	e02a      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	4a28      	ldr	r2, [pc, #160]	; (800da8c <VL53L0X_get_pal_error_string+0x3f8>)
 800d9ec:	461d      	mov	r5, r3
 800d9ee:	4614      	mov	r4, r2
 800d9f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d9f2:	6028      	str	r0, [r5, #0]
 800d9f4:	6069      	str	r1, [r5, #4]
 800d9f6:	60aa      	str	r2, [r5, #8]
 800d9f8:	60eb      	str	r3, [r5, #12]
 800d9fa:	cc03      	ldmia	r4!, {r0, r1}
 800d9fc:	6128      	str	r0, [r5, #16]
 800d9fe:	6169      	str	r1, [r5, #20]
 800da00:	8823      	ldrh	r3, [r4, #0]
 800da02:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 800da04:	e01b      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	4a21      	ldr	r2, [pc, #132]	; (800da90 <VL53L0X_get_pal_error_string+0x3fc>)
 800da0a:	461d      	mov	r5, r3
 800da0c:	4614      	mov	r4, r2
 800da0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da10:	6028      	str	r0, [r5, #0]
 800da12:	6069      	str	r1, [r5, #4]
 800da14:	60aa      	str	r2, [r5, #8]
 800da16:	60eb      	str	r3, [r5, #12]
 800da18:	6820      	ldr	r0, [r4, #0]
 800da1a:	6128      	str	r0, [r5, #16]
 800da1c:	88a3      	ldrh	r3, [r4, #4]
 800da1e:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 800da20:	e00d      	b.n	800da3e <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	4a1b      	ldr	r2, [pc, #108]	; (800da94 <VL53L0X_get_pal_error_string+0x400>)
 800da26:	461d      	mov	r5, r3
 800da28:	4614      	mov	r4, r2
 800da2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800da2c:	6028      	str	r0, [r5, #0]
 800da2e:	6069      	str	r1, [r5, #4]
 800da30:	60aa      	str	r2, [r5, #8]
 800da32:	60eb      	str	r3, [r5, #12]
 800da34:	8823      	ldrh	r3, [r4, #0]
 800da36:	78a2      	ldrb	r2, [r4, #2]
 800da38:	822b      	strh	r3, [r5, #16]
 800da3a:	4613      	mov	r3, r2
 800da3c:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800da3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3714      	adds	r7, #20
 800da46:	46bd      	mov	sp, r7
 800da48:	bcb0      	pop	{r4, r5, r7}
 800da4a:	4770      	bx	lr
 800da4c:	0800ea04 	.word	0x0800ea04
 800da50:	0800ea10 	.word	0x0800ea10
 800da54:	0800ea2c 	.word	0x0800ea2c
 800da58:	0800ea40 	.word	0x0800ea40
 800da5c:	0800ea50 	.word	0x0800ea50
 800da60:	0800ea6c 	.word	0x0800ea6c
 800da64:	0800ea80 	.word	0x0800ea80
 800da68:	0800ea98 	.word	0x0800ea98
 800da6c:	0800eaa4 	.word	0x0800eaa4
 800da70:	0800eab4 	.word	0x0800eab4
 800da74:	0800ead0 	.word	0x0800ead0
 800da78:	0800eae4 	.word	0x0800eae4
 800da7c:	0800eaf8 	.word	0x0800eaf8
 800da80:	0800eb14 	.word	0x0800eb14
 800da84:	0800eb2c 	.word	0x0800eb2c
 800da88:	0800eb44 	.word	0x0800eb44
 800da8c:	0800eb5c 	.word	0x0800eb5c
 800da90:	0800eb78 	.word	0x0800eb78
 800da94:	0800e9a0 	.word	0x0800e9a0

0800da98 <VL53L0X_write_multi>:
	*/
    return 0;
}

int32_t VL53L0X_write_multi(uint8_t address, uint8_t reg, uint8_t *pdata, int32_t count)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b08a      	sub	sp, #40	; 0x28
 800da9c:	af04      	add	r7, sp, #16
 800da9e:	60ba      	str	r2, [r7, #8]
 800daa0:	607b      	str	r3, [r7, #4]
 800daa2:	4603      	mov	r3, r0
 800daa4:	73fb      	strb	r3, [r7, #15]
 800daa6:	460b      	mov	r3, r1
 800daa8:	73bb      	strb	r3, [r7, #14]

	int32_t status = HAL_I2C_Mem_Write(&hi2c1, address, reg, 1, pdata, count, HAL_MAX_DELAY);
 800daaa:	7bfb      	ldrb	r3, [r7, #15]
 800daac:	b299      	uxth	r1, r3
 800daae:	7bbb      	ldrb	r3, [r7, #14]
 800dab0:	b298      	uxth	r0, r3
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800daba:	9202      	str	r2, [sp, #8]
 800dabc:	9301      	str	r3, [sp, #4]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	2301      	movs	r3, #1
 800dac4:	4602      	mov	r2, r0
 800dac6:	4805      	ldr	r0, [pc, #20]	; (800dadc <VL53L0X_write_multi+0x44>)
 800dac8:	f7f4 fa5c 	bl	8001f84 <HAL_I2C_Mem_Write>
 800dacc:	4603      	mov	r3, r0
 800dace:	617b      	str	r3, [r7, #20]
	return status;
 800dad0:	697b      	ldr	r3, [r7, #20]
    }

    return status;
    */

}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	200004dc 	.word	0x200004dc

0800dae0 <VL53L0X_read_multi>:

int32_t VL53L0X_read_multi(uint8_t address, uint8_t index, uint8_t *pdata, int32_t count)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b08a      	sub	sp, #40	; 0x28
 800dae4:	af04      	add	r7, sp, #16
 800dae6:	60ba      	str	r2, [r7, #8]
 800dae8:	607b      	str	r3, [r7, #4]
 800daea:	4603      	mov	r3, r0
 800daec:	73fb      	strb	r3, [r7, #15]
 800daee:	460b      	mov	r3, r1
 800daf0:	73bb      	strb	r3, [r7, #14]
    int32_t status = STATUS_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Mem_Read(&hi2c1, address, index, 1, pdata, count, HAL_MAX_DELAY);
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
 800daf8:	b299      	uxth	r1, r3
 800dafa:	7bbb      	ldrb	r3, [r7, #14]
 800dafc:	b298      	uxth	r0, r3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	b29b      	uxth	r3, r3
 800db02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db06:	9202      	str	r2, [sp, #8]
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	9300      	str	r3, [sp, #0]
 800db0e:	2301      	movs	r3, #1
 800db10:	4602      	mov	r2, r0
 800db12:	4805      	ldr	r0, [pc, #20]	; (800db28 <VL53L0X_read_multi+0x48>)
 800db14:	f7f4 fb30 	bl	8002178 <HAL_I2C_Mem_Read>
 800db18:	4603      	mov	r3, r0
 800db1a:	617b      	str	r3, [r7, #20]
    return status;
 800db1c:	697b      	ldr	r3, [r7, #20]
    trace_i2c("Read  reg : 0x%04X, Val : 0x%s\n", index, value_as_str);
#endif

    return status;
    */
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3718      	adds	r7, #24
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	200004dc 	.word	0x200004dc

0800db2c <VL53L0X_write_byte>:


int32_t VL53L0X_write_byte(uint8_t address, uint8_t index, uint8_t data)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	4603      	mov	r3, r0
 800db34:	71fb      	strb	r3, [r7, #7]
 800db36:	460b      	mov	r3, r1
 800db38:	71bb      	strb	r3, [r7, #6]
 800db3a:	4613      	mov	r3, r2
 800db3c:	717b      	strb	r3, [r7, #5]
    int32_t status = STATUS_OK;
 800db3e:	2300      	movs	r3, #0
 800db40:	60fb      	str	r3, [r7, #12]
    const int32_t cbyte_count = 1;
 800db42:	2301      	movs	r3, #1
 800db44:	60bb      	str	r3, [r7, #8]

    status = VL53L0X_write_multi(address, index, &data, cbyte_count);
 800db46:	1d7a      	adds	r2, r7, #5
 800db48:	79b9      	ldrb	r1, [r7, #6]
 800db4a:	79f8      	ldrb	r0, [r7, #7]
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	f7ff ffa3 	bl	800da98 <VL53L0X_write_multi>
 800db52:	60f8      	str	r0, [r7, #12]

    return status;
 800db54:	68fb      	ldr	r3, [r7, #12]

}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}

0800db5e <VL53L0X_write_word>:


int32_t VL53L0X_write_word(uint8_t address, uint8_t index, uint16_t data)
{
 800db5e:	b580      	push	{r7, lr}
 800db60:	b084      	sub	sp, #16
 800db62:	af00      	add	r7, sp, #0
 800db64:	4603      	mov	r3, r0
 800db66:	71fb      	strb	r3, [r7, #7]
 800db68:	460b      	mov	r3, r1
 800db6a:	71bb      	strb	r3, [r7, #6]
 800db6c:	4613      	mov	r3, r2
 800db6e:	80bb      	strh	r3, [r7, #4]
    int32_t status = STATUS_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	60fb      	str	r3, [r7, #12]

    uint8_t  buffer[BYTES_PER_WORD];

    // Split 16-bit word into MS and LS uint8_t
    buffer[0] = (uint8_t)(data >> 8);
 800db74:	88bb      	ldrh	r3, [r7, #4]
 800db76:	0a1b      	lsrs	r3, r3, #8
 800db78:	b29b      	uxth	r3, r3
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	723b      	strb	r3, [r7, #8]
    buffer[1] = (uint8_t)(data &  0x00FF);
 800db7e:	88bb      	ldrh	r3, [r7, #4]
 800db80:	b2db      	uxtb	r3, r3
 800db82:	727b      	strb	r3, [r7, #9]
    status = VL53L0X_write_multi(address, index, buffer, 2);
 800db84:	f107 0208 	add.w	r2, r7, #8
 800db88:	79b9      	ldrb	r1, [r7, #6]
 800db8a:	79f8      	ldrb	r0, [r7, #7]
 800db8c:	2302      	movs	r3, #2
 800db8e:	f7ff ff83 	bl	800da98 <VL53L0X_write_multi>
 800db92:	60f8      	str	r0, [r7, #12]
    return status;
 800db94:	68fb      	ldr	r3, [r7, #12]
    else
    {
        status = VL53L0X_write_multi(address, index, buffer, BYTES_PER_WORD);
    }
    */
}
 800db96:	4618      	mov	r0, r3
 800db98:	3710      	adds	r7, #16
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <VL53L0X_read_byte>:

}


int32_t VL53L0X_read_byte(uint8_t address, uint8_t index, uint8_t *pdata)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b084      	sub	sp, #16
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	4603      	mov	r3, r0
 800dba6:	603a      	str	r2, [r7, #0]
 800dba8:	71fb      	strb	r3, [r7, #7]
 800dbaa:	460b      	mov	r3, r1
 800dbac:	71bb      	strb	r3, [r7, #6]
    int32_t status = STATUS_OK;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	60fb      	str	r3, [r7, #12]
    int32_t cbyte_count = 1;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	60bb      	str	r3, [r7, #8]

    status = VL53L0X_read_multi(address, index, pdata, cbyte_count);
 800dbb6:	79b9      	ldrb	r1, [r7, #6]
 800dbb8:	79f8      	ldrb	r0, [r7, #7]
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	f7ff ff8f 	bl	800dae0 <VL53L0X_read_multi>
 800dbc2:	60f8      	str	r0, [r7, #12]

    return status;
 800dbc4:	68fb      	ldr	r3, [r7, #12]

}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <VL53L0X_read_word>:


int32_t VL53L0X_read_word(uint8_t address, uint8_t index, uint16_t *pdata)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	603a      	str	r2, [r7, #0]
 800dbd8:	71fb      	strb	r3, [r7, #7]
 800dbda:	460b      	mov	r3, r1
 800dbdc:	71bb      	strb	r3, [r7, #6]
    int32_t  status = STATUS_OK;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	60fb      	str	r3, [r7, #12]
	uint8_t  buffer[BYTES_PER_WORD];

    status = VL53L0X_read_multi(address, index, buffer, BYTES_PER_WORD);
 800dbe2:	f107 0208 	add.w	r2, r7, #8
 800dbe6:	79b9      	ldrb	r1, [r7, #6]
 800dbe8:	79f8      	ldrb	r0, [r7, #7]
 800dbea:	2302      	movs	r3, #2
 800dbec:	f7ff ff78 	bl	800dae0 <VL53L0X_read_multi>
 800dbf0:	60f8      	str	r0, [r7, #12]
	*pdata = ((uint16_t)buffer[0]<<8) + (uint16_t)buffer[1];
 800dbf2:	7a3b      	ldrb	r3, [r7, #8]
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	021b      	lsls	r3, r3, #8
 800dbf8:	b29a      	uxth	r2, r3
 800dbfa:	7a7b      	ldrb	r3, [r7, #9]
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	4413      	add	r3, r2
 800dc00:	b29a      	uxth	r2, r3
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	801a      	strh	r2, [r3, #0]

    return status;
 800dc06:	68fb      	ldr	r3, [r7, #12]

}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(uint8_t address, uint8_t index, uint32_t *pdata)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b084      	sub	sp, #16
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	4603      	mov	r3, r0
 800dc18:	603a      	str	r2, [r7, #0]
 800dc1a:	71fb      	strb	r3, [r7, #7]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	71bb      	strb	r3, [r7, #6]
    int32_t status = STATUS_OK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	60fb      	str	r3, [r7, #12]
	uint8_t  buffer[4];

    status = VL53L0X_read_multi(address, index, buffer, 4);
 800dc24:	f107 0208 	add.w	r2, r7, #8
 800dc28:	79b9      	ldrb	r1, [r7, #6]
 800dc2a:	79f8      	ldrb	r0, [r7, #7]
 800dc2c:	2304      	movs	r3, #4
 800dc2e:	f7ff ff57 	bl	800dae0 <VL53L0X_read_multi>
 800dc32:	60f8      	str	r0, [r7, #12]
    *pdata = ((uint32_t)buffer[0]<<24) + ((uint32_t)buffer[1]<<16) + ((uint32_t)buffer[2]<<8) + (uint32_t)buffer[3];
 800dc34:	7a3b      	ldrb	r3, [r7, #8]
 800dc36:	061a      	lsls	r2, r3, #24
 800dc38:	7a7b      	ldrb	r3, [r7, #9]
 800dc3a:	041b      	lsls	r3, r3, #16
 800dc3c:	441a      	add	r2, r3
 800dc3e:	7abb      	ldrb	r3, [r7, #10]
 800dc40:	021b      	lsls	r3, r3, #8
 800dc42:	4413      	add	r3, r2
 800dc44:	7afa      	ldrb	r2, [r7, #11]
 800dc46:	441a      	add	r2, r3
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	601a      	str	r2, [r3, #0]

    return status;
 800dc4c:	68fb      	ldr	r3, [r7, #12]

}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3710      	adds	r7, #16
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b088      	sub	sp, #32
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	60f8      	str	r0, [r7, #12]
 800dc5e:	607a      	str	r2, [r7, #4]
 800dc60:	603b      	str	r3, [r7, #0]
 800dc62:	460b      	mov	r3, r1
 800dc64:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc66:	2300      	movs	r3, #0
 800dc68:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	2b3f      	cmp	r3, #63	; 0x3f
 800dc72:	d901      	bls.n	800dc78 <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dc74:	23fc      	movs	r3, #252	; 0xfc
 800dc76:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800dc7e:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(deviceAddress, index, pdata, count);
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	7af9      	ldrb	r1, [r7, #11]
 800dc84:	7df8      	ldrb	r0, [r7, #23]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	f7ff ff06 	bl	800da98 <VL53L0X_write_multi>
 800dc8c:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 800dc8e:	69bb      	ldr	r3, [r7, #24]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <VL53L0X_WriteMulti+0x42>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc94:	23ec      	movs	r3, #236	; 0xec
 800dc96:	77fb      	strb	r3, [r7, #31]

    return Status;
 800dc98:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3720      	adds	r7, #32
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b086      	sub	sp, #24
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	607a      	str	r2, [r7, #4]
 800dcae:	603b      	str	r3, [r7, #0]
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b3f      	cmp	r3, #63	; 0x3f
 800dcbc:	d901      	bls.n	800dcc2 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800dcbe:	23fc      	movs	r3, #252	; 0xfc
 800dcc0:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800dcc8:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count);
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	7af9      	ldrb	r1, [r7, #11]
 800dcce:	7db8      	ldrb	r0, [r7, #22]
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	f7ff ff05 	bl	800dae0 <VL53L0X_read_multi>
 800dcd6:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d001      	beq.n	800dce2 <VL53L0X_ReadMulti+0x3e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dcde:	23ec      	movs	r3, #236	; 0xec
 800dce0:	75fb      	strb	r3, [r7, #23]

    return Status;
 800dce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3718      	adds	r7, #24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b084      	sub	sp, #16
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	70fb      	strb	r3, [r7, #3]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800dd08:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800dd0a:	78ba      	ldrb	r2, [r7, #2]
 800dd0c:	78f9      	ldrb	r1, [r7, #3]
 800dd0e:	7bbb      	ldrb	r3, [r7, #14]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff ff0b 	bl	800db2c <VL53L0X_write_byte>
 800dd16:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d001      	beq.n	800dd22 <VL53L0X_WrByte+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dd1e:	23ec      	movs	r3, #236	; 0xec
 800dd20:	73fb      	strb	r3, [r7, #15]

    return Status;
 800dd22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b084      	sub	sp, #16
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
 800dd36:	460b      	mov	r3, r1
 800dd38:	70fb      	strb	r3, [r7, #3]
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800dd48:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(deviceAddress, index, data);
 800dd4a:	883a      	ldrh	r2, [r7, #0]
 800dd4c:	78f9      	ldrb	r1, [r7, #3]
 800dd4e:	7bbb      	ldrb	r3, [r7, #14]
 800dd50:	4618      	mov	r0, r3
 800dd52:	f7ff ff04 	bl	800db5e <VL53L0X_write_word>
 800dd56:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d001      	beq.n	800dd62 <VL53L0X_WrWord+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dd5e:	23ec      	movs	r3, #236	; 0xec
 800dd60:	73fb      	strb	r3, [r7, #15]

    return Status;
 800dd62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b086      	sub	sp, #24
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	4608      	mov	r0, r1
 800dd78:	4611      	mov	r1, r2
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	70fb      	strb	r3, [r7, #3]
 800dd80:	460b      	mov	r3, r1
 800dd82:	70bb      	strb	r3, [r7, #2]
 800dd84:	4613      	mov	r3, r2
 800dd86:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800dd92:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
 800dd94:	f107 020f 	add.w	r2, r7, #15
 800dd98:	78f9      	ldrb	r1, [r7, #3]
 800dd9a:	7dbb      	ldrb	r3, [r7, #22]
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7ff fefe 	bl	800db9e <VL53L0X_read_byte>
 800dda2:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800dda4:	693b      	ldr	r3, [r7, #16]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <VL53L0X_UpdateByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ddaa:	23ec      	movs	r3, #236	; 0xec
 800ddac:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 800ddae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d113      	bne.n	800ddde <VL53L0X_UpdateByte+0x70>
        data = (data & AndData) | OrData;
 800ddb6:	7bfa      	ldrb	r2, [r7, #15]
 800ddb8:	78bb      	ldrb	r3, [r7, #2]
 800ddba:	4013      	ands	r3, r2
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	787b      	ldrb	r3, [r7, #1]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800ddc6:	7bfa      	ldrb	r2, [r7, #15]
 800ddc8:	78f9      	ldrb	r1, [r7, #3]
 800ddca:	7dbb      	ldrb	r3, [r7, #22]
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7ff fead 	bl	800db2c <VL53L0X_write_byte>
 800ddd2:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d001      	beq.n	800ddde <VL53L0X_UpdateByte+0x70>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ddda:	23ec      	movs	r3, #236	; 0xec
 800dddc:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800ddde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3718      	adds	r7, #24
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b086      	sub	sp, #24
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60f8      	str	r0, [r7, #12]
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	607a      	str	r2, [r7, #4]
 800ddf6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800de02:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
 800de04:	7af9      	ldrb	r1, [r7, #11]
 800de06:	7dbb      	ldrb	r3, [r7, #22]
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7ff fec7 	bl	800db9e <VL53L0X_read_byte>
 800de10:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d001      	beq.n	800de1c <VL53L0X_RdByte+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de18:	23ec      	movs	r3, #236	; 0xec
 800de1a:	75fb      	strb	r3, [r7, #23]

    return Status;
 800de1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 800de28:	b580      	push	{r7, lr}
 800de2a:	b086      	sub	sp, #24
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	460b      	mov	r3, r1
 800de32:	607a      	str	r2, [r7, #4]
 800de34:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de36:	2300      	movs	r3, #0
 800de38:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800de40:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(deviceAddress, index, data);
 800de42:	7af9      	ldrb	r1, [r7, #11]
 800de44:	7dbb      	ldrb	r3, [r7, #22]
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fec0 	bl	800dbce <VL53L0X_read_word>
 800de4e:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d001      	beq.n	800de5a <VL53L0X_RdWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de56:	23ec      	movs	r3, #236	; 0xec
 800de58:	75fb      	strb	r3, [r7, #23]

    return Status;
 800de5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800de66:	b580      	push	{r7, lr}
 800de68:	b086      	sub	sp, #24
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	60f8      	str	r0, [r7, #12]
 800de6e:	460b      	mov	r3, r1
 800de70:	607a      	str	r2, [r7, #4]
 800de72:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de74:	2300      	movs	r3, #0
 800de76:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800de7e:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
 800de80:	7af9      	ldrb	r1, [r7, #11]
 800de82:	7dbb      	ldrb	r3, [r7, #22]
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	4618      	mov	r0, r3
 800de88:	f7ff fec2 	bl	800dc10 <VL53L0X_read_dword>
 800de8c:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d001      	beq.n	800de98 <VL53L0X_RdDWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de94:	23ec      	movs	r3, #236	; 0xec
 800de96:	75fb      	strb	r3, [r7, #23]

    return Status;
 800de98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3718      	adds	r7, #24
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
        WaitForSingleObject(hEvent,cTimeout_ms);
    }

    LOG_FUNCTION_END(status);
*/
    return 0;
 800deac:	2300      	movs	r3, #0
}
 800deae:	4618      	mov	r0, r3
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr
	...

0800debc <__errno>:
 800debc:	4b01      	ldr	r3, [pc, #4]	; (800dec4 <__errno+0x8>)
 800debe:	6818      	ldr	r0, [r3, #0]
 800dec0:	4770      	bx	lr
 800dec2:	bf00      	nop
 800dec4:	2000043c 	.word	0x2000043c

0800dec8 <__libc_init_array>:
 800dec8:	b570      	push	{r4, r5, r6, lr}
 800deca:	4e0d      	ldr	r6, [pc, #52]	; (800df00 <__libc_init_array+0x38>)
 800decc:	4c0d      	ldr	r4, [pc, #52]	; (800df04 <__libc_init_array+0x3c>)
 800dece:	1ba4      	subs	r4, r4, r6
 800ded0:	10a4      	asrs	r4, r4, #2
 800ded2:	2500      	movs	r5, #0
 800ded4:	42a5      	cmp	r5, r4
 800ded6:	d109      	bne.n	800deec <__libc_init_array+0x24>
 800ded8:	4e0b      	ldr	r6, [pc, #44]	; (800df08 <__libc_init_array+0x40>)
 800deda:	4c0c      	ldr	r4, [pc, #48]	; (800df0c <__libc_init_array+0x44>)
 800dedc:	f000 fc40 	bl	800e760 <_init>
 800dee0:	1ba4      	subs	r4, r4, r6
 800dee2:	10a4      	asrs	r4, r4, #2
 800dee4:	2500      	movs	r5, #0
 800dee6:	42a5      	cmp	r5, r4
 800dee8:	d105      	bne.n	800def6 <__libc_init_array+0x2e>
 800deea:	bd70      	pop	{r4, r5, r6, pc}
 800deec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800def0:	4798      	blx	r3
 800def2:	3501      	adds	r5, #1
 800def4:	e7ee      	b.n	800ded4 <__libc_init_array+0xc>
 800def6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800defa:	4798      	blx	r3
 800defc:	3501      	adds	r5, #1
 800defe:	e7f2      	b.n	800dee6 <__libc_init_array+0x1e>
 800df00:	0800ed00 	.word	0x0800ed00
 800df04:	0800ed00 	.word	0x0800ed00
 800df08:	0800ed00 	.word	0x0800ed00
 800df0c:	0800ed04 	.word	0x0800ed04

0800df10 <malloc>:
 800df10:	4b02      	ldr	r3, [pc, #8]	; (800df1c <malloc+0xc>)
 800df12:	4601      	mov	r1, r0
 800df14:	6818      	ldr	r0, [r3, #0]
 800df16:	f000 b86d 	b.w	800dff4 <_malloc_r>
 800df1a:	bf00      	nop
 800df1c:	2000043c 	.word	0x2000043c

0800df20 <free>:
 800df20:	4b02      	ldr	r3, [pc, #8]	; (800df2c <free+0xc>)
 800df22:	4601      	mov	r1, r0
 800df24:	6818      	ldr	r0, [r3, #0]
 800df26:	f000 b817 	b.w	800df58 <_free_r>
 800df2a:	bf00      	nop
 800df2c:	2000043c 	.word	0x2000043c

0800df30 <memcpy>:
 800df30:	b510      	push	{r4, lr}
 800df32:	1e43      	subs	r3, r0, #1
 800df34:	440a      	add	r2, r1
 800df36:	4291      	cmp	r1, r2
 800df38:	d100      	bne.n	800df3c <memcpy+0xc>
 800df3a:	bd10      	pop	{r4, pc}
 800df3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df44:	e7f7      	b.n	800df36 <memcpy+0x6>

0800df46 <memset>:
 800df46:	4402      	add	r2, r0
 800df48:	4603      	mov	r3, r0
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d100      	bne.n	800df50 <memset+0xa>
 800df4e:	4770      	bx	lr
 800df50:	f803 1b01 	strb.w	r1, [r3], #1
 800df54:	e7f9      	b.n	800df4a <memset+0x4>
	...

0800df58 <_free_r>:
 800df58:	b538      	push	{r3, r4, r5, lr}
 800df5a:	4605      	mov	r5, r0
 800df5c:	2900      	cmp	r1, #0
 800df5e:	d045      	beq.n	800dfec <_free_r+0x94>
 800df60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df64:	1f0c      	subs	r4, r1, #4
 800df66:	2b00      	cmp	r3, #0
 800df68:	bfb8      	it	lt
 800df6a:	18e4      	addlt	r4, r4, r3
 800df6c:	f000 f8d4 	bl	800e118 <__malloc_lock>
 800df70:	4a1f      	ldr	r2, [pc, #124]	; (800dff0 <_free_r+0x98>)
 800df72:	6813      	ldr	r3, [r2, #0]
 800df74:	4610      	mov	r0, r2
 800df76:	b933      	cbnz	r3, 800df86 <_free_r+0x2e>
 800df78:	6063      	str	r3, [r4, #4]
 800df7a:	6014      	str	r4, [r2, #0]
 800df7c:	4628      	mov	r0, r5
 800df7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df82:	f000 b8ca 	b.w	800e11a <__malloc_unlock>
 800df86:	42a3      	cmp	r3, r4
 800df88:	d90c      	bls.n	800dfa4 <_free_r+0x4c>
 800df8a:	6821      	ldr	r1, [r4, #0]
 800df8c:	1862      	adds	r2, r4, r1
 800df8e:	4293      	cmp	r3, r2
 800df90:	bf04      	itt	eq
 800df92:	681a      	ldreq	r2, [r3, #0]
 800df94:	685b      	ldreq	r3, [r3, #4]
 800df96:	6063      	str	r3, [r4, #4]
 800df98:	bf04      	itt	eq
 800df9a:	1852      	addeq	r2, r2, r1
 800df9c:	6022      	streq	r2, [r4, #0]
 800df9e:	6004      	str	r4, [r0, #0]
 800dfa0:	e7ec      	b.n	800df7c <_free_r+0x24>
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	685a      	ldr	r2, [r3, #4]
 800dfa6:	b10a      	cbz	r2, 800dfac <_free_r+0x54>
 800dfa8:	42a2      	cmp	r2, r4
 800dfaa:	d9fa      	bls.n	800dfa2 <_free_r+0x4a>
 800dfac:	6819      	ldr	r1, [r3, #0]
 800dfae:	1858      	adds	r0, r3, r1
 800dfb0:	42a0      	cmp	r0, r4
 800dfb2:	d10b      	bne.n	800dfcc <_free_r+0x74>
 800dfb4:	6820      	ldr	r0, [r4, #0]
 800dfb6:	4401      	add	r1, r0
 800dfb8:	1858      	adds	r0, r3, r1
 800dfba:	4282      	cmp	r2, r0
 800dfbc:	6019      	str	r1, [r3, #0]
 800dfbe:	d1dd      	bne.n	800df7c <_free_r+0x24>
 800dfc0:	6810      	ldr	r0, [r2, #0]
 800dfc2:	6852      	ldr	r2, [r2, #4]
 800dfc4:	605a      	str	r2, [r3, #4]
 800dfc6:	4401      	add	r1, r0
 800dfc8:	6019      	str	r1, [r3, #0]
 800dfca:	e7d7      	b.n	800df7c <_free_r+0x24>
 800dfcc:	d902      	bls.n	800dfd4 <_free_r+0x7c>
 800dfce:	230c      	movs	r3, #12
 800dfd0:	602b      	str	r3, [r5, #0]
 800dfd2:	e7d3      	b.n	800df7c <_free_r+0x24>
 800dfd4:	6820      	ldr	r0, [r4, #0]
 800dfd6:	1821      	adds	r1, r4, r0
 800dfd8:	428a      	cmp	r2, r1
 800dfda:	bf04      	itt	eq
 800dfdc:	6811      	ldreq	r1, [r2, #0]
 800dfde:	6852      	ldreq	r2, [r2, #4]
 800dfe0:	6062      	str	r2, [r4, #4]
 800dfe2:	bf04      	itt	eq
 800dfe4:	1809      	addeq	r1, r1, r0
 800dfe6:	6021      	streq	r1, [r4, #0]
 800dfe8:	605c      	str	r4, [r3, #4]
 800dfea:	e7c7      	b.n	800df7c <_free_r+0x24>
 800dfec:	bd38      	pop	{r3, r4, r5, pc}
 800dfee:	bf00      	nop
 800dff0:	200004d0 	.word	0x200004d0

0800dff4 <_malloc_r>:
 800dff4:	b570      	push	{r4, r5, r6, lr}
 800dff6:	1ccd      	adds	r5, r1, #3
 800dff8:	f025 0503 	bic.w	r5, r5, #3
 800dffc:	3508      	adds	r5, #8
 800dffe:	2d0c      	cmp	r5, #12
 800e000:	bf38      	it	cc
 800e002:	250c      	movcc	r5, #12
 800e004:	2d00      	cmp	r5, #0
 800e006:	4606      	mov	r6, r0
 800e008:	db01      	blt.n	800e00e <_malloc_r+0x1a>
 800e00a:	42a9      	cmp	r1, r5
 800e00c:	d903      	bls.n	800e016 <_malloc_r+0x22>
 800e00e:	230c      	movs	r3, #12
 800e010:	6033      	str	r3, [r6, #0]
 800e012:	2000      	movs	r0, #0
 800e014:	bd70      	pop	{r4, r5, r6, pc}
 800e016:	f000 f87f 	bl	800e118 <__malloc_lock>
 800e01a:	4a21      	ldr	r2, [pc, #132]	; (800e0a0 <_malloc_r+0xac>)
 800e01c:	6814      	ldr	r4, [r2, #0]
 800e01e:	4621      	mov	r1, r4
 800e020:	b991      	cbnz	r1, 800e048 <_malloc_r+0x54>
 800e022:	4c20      	ldr	r4, [pc, #128]	; (800e0a4 <_malloc_r+0xb0>)
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	b91b      	cbnz	r3, 800e030 <_malloc_r+0x3c>
 800e028:	4630      	mov	r0, r6
 800e02a:	f000 f83d 	bl	800e0a8 <_sbrk_r>
 800e02e:	6020      	str	r0, [r4, #0]
 800e030:	4629      	mov	r1, r5
 800e032:	4630      	mov	r0, r6
 800e034:	f000 f838 	bl	800e0a8 <_sbrk_r>
 800e038:	1c43      	adds	r3, r0, #1
 800e03a:	d124      	bne.n	800e086 <_malloc_r+0x92>
 800e03c:	230c      	movs	r3, #12
 800e03e:	6033      	str	r3, [r6, #0]
 800e040:	4630      	mov	r0, r6
 800e042:	f000 f86a 	bl	800e11a <__malloc_unlock>
 800e046:	e7e4      	b.n	800e012 <_malloc_r+0x1e>
 800e048:	680b      	ldr	r3, [r1, #0]
 800e04a:	1b5b      	subs	r3, r3, r5
 800e04c:	d418      	bmi.n	800e080 <_malloc_r+0x8c>
 800e04e:	2b0b      	cmp	r3, #11
 800e050:	d90f      	bls.n	800e072 <_malloc_r+0x7e>
 800e052:	600b      	str	r3, [r1, #0]
 800e054:	50cd      	str	r5, [r1, r3]
 800e056:	18cc      	adds	r4, r1, r3
 800e058:	4630      	mov	r0, r6
 800e05a:	f000 f85e 	bl	800e11a <__malloc_unlock>
 800e05e:	f104 000b 	add.w	r0, r4, #11
 800e062:	1d23      	adds	r3, r4, #4
 800e064:	f020 0007 	bic.w	r0, r0, #7
 800e068:	1ac3      	subs	r3, r0, r3
 800e06a:	d0d3      	beq.n	800e014 <_malloc_r+0x20>
 800e06c:	425a      	negs	r2, r3
 800e06e:	50e2      	str	r2, [r4, r3]
 800e070:	e7d0      	b.n	800e014 <_malloc_r+0x20>
 800e072:	428c      	cmp	r4, r1
 800e074:	684b      	ldr	r3, [r1, #4]
 800e076:	bf16      	itet	ne
 800e078:	6063      	strne	r3, [r4, #4]
 800e07a:	6013      	streq	r3, [r2, #0]
 800e07c:	460c      	movne	r4, r1
 800e07e:	e7eb      	b.n	800e058 <_malloc_r+0x64>
 800e080:	460c      	mov	r4, r1
 800e082:	6849      	ldr	r1, [r1, #4]
 800e084:	e7cc      	b.n	800e020 <_malloc_r+0x2c>
 800e086:	1cc4      	adds	r4, r0, #3
 800e088:	f024 0403 	bic.w	r4, r4, #3
 800e08c:	42a0      	cmp	r0, r4
 800e08e:	d005      	beq.n	800e09c <_malloc_r+0xa8>
 800e090:	1a21      	subs	r1, r4, r0
 800e092:	4630      	mov	r0, r6
 800e094:	f000 f808 	bl	800e0a8 <_sbrk_r>
 800e098:	3001      	adds	r0, #1
 800e09a:	d0cf      	beq.n	800e03c <_malloc_r+0x48>
 800e09c:	6025      	str	r5, [r4, #0]
 800e09e:	e7db      	b.n	800e058 <_malloc_r+0x64>
 800e0a0:	200004d0 	.word	0x200004d0
 800e0a4:	200004d4 	.word	0x200004d4

0800e0a8 <_sbrk_r>:
 800e0a8:	b538      	push	{r3, r4, r5, lr}
 800e0aa:	4c06      	ldr	r4, [pc, #24]	; (800e0c4 <_sbrk_r+0x1c>)
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	4605      	mov	r5, r0
 800e0b0:	4608      	mov	r0, r1
 800e0b2:	6023      	str	r3, [r4, #0]
 800e0b4:	f7f3 fa76 	bl	80015a4 <_sbrk>
 800e0b8:	1c43      	adds	r3, r0, #1
 800e0ba:	d102      	bne.n	800e0c2 <_sbrk_r+0x1a>
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	b103      	cbz	r3, 800e0c2 <_sbrk_r+0x1a>
 800e0c0:	602b      	str	r3, [r5, #0]
 800e0c2:	bd38      	pop	{r3, r4, r5, pc}
 800e0c4:	200013e4 	.word	0x200013e4

0800e0c8 <strcpy>:
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0ce:	f803 2b01 	strb.w	r2, [r3], #1
 800e0d2:	2a00      	cmp	r2, #0
 800e0d4:	d1f9      	bne.n	800e0ca <strcpy+0x2>
 800e0d6:	4770      	bx	lr

0800e0d8 <_vsiprintf_r>:
 800e0d8:	b500      	push	{lr}
 800e0da:	b09b      	sub	sp, #108	; 0x6c
 800e0dc:	9100      	str	r1, [sp, #0]
 800e0de:	9104      	str	r1, [sp, #16]
 800e0e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0e4:	9105      	str	r1, [sp, #20]
 800e0e6:	9102      	str	r1, [sp, #8]
 800e0e8:	4905      	ldr	r1, [pc, #20]	; (800e100 <_vsiprintf_r+0x28>)
 800e0ea:	9103      	str	r1, [sp, #12]
 800e0ec:	4669      	mov	r1, sp
 800e0ee:	f000 f86f 	bl	800e1d0 <_svfiprintf_r>
 800e0f2:	9b00      	ldr	r3, [sp, #0]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	701a      	strb	r2, [r3, #0]
 800e0f8:	b01b      	add	sp, #108	; 0x6c
 800e0fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0fe:	bf00      	nop
 800e100:	ffff0208 	.word	0xffff0208

0800e104 <vsiprintf>:
 800e104:	4613      	mov	r3, r2
 800e106:	460a      	mov	r2, r1
 800e108:	4601      	mov	r1, r0
 800e10a:	4802      	ldr	r0, [pc, #8]	; (800e114 <vsiprintf+0x10>)
 800e10c:	6800      	ldr	r0, [r0, #0]
 800e10e:	f7ff bfe3 	b.w	800e0d8 <_vsiprintf_r>
 800e112:	bf00      	nop
 800e114:	2000043c 	.word	0x2000043c

0800e118 <__malloc_lock>:
 800e118:	4770      	bx	lr

0800e11a <__malloc_unlock>:
 800e11a:	4770      	bx	lr

0800e11c <__ssputs_r>:
 800e11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e120:	688e      	ldr	r6, [r1, #8]
 800e122:	429e      	cmp	r6, r3
 800e124:	4682      	mov	sl, r0
 800e126:	460c      	mov	r4, r1
 800e128:	4690      	mov	r8, r2
 800e12a:	4699      	mov	r9, r3
 800e12c:	d837      	bhi.n	800e19e <__ssputs_r+0x82>
 800e12e:	898a      	ldrh	r2, [r1, #12]
 800e130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e134:	d031      	beq.n	800e19a <__ssputs_r+0x7e>
 800e136:	6825      	ldr	r5, [r4, #0]
 800e138:	6909      	ldr	r1, [r1, #16]
 800e13a:	1a6f      	subs	r7, r5, r1
 800e13c:	6965      	ldr	r5, [r4, #20]
 800e13e:	2302      	movs	r3, #2
 800e140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e144:	fb95 f5f3 	sdiv	r5, r5, r3
 800e148:	f109 0301 	add.w	r3, r9, #1
 800e14c:	443b      	add	r3, r7
 800e14e:	429d      	cmp	r5, r3
 800e150:	bf38      	it	cc
 800e152:	461d      	movcc	r5, r3
 800e154:	0553      	lsls	r3, r2, #21
 800e156:	d530      	bpl.n	800e1ba <__ssputs_r+0x9e>
 800e158:	4629      	mov	r1, r5
 800e15a:	f7ff ff4b 	bl	800dff4 <_malloc_r>
 800e15e:	4606      	mov	r6, r0
 800e160:	b950      	cbnz	r0, 800e178 <__ssputs_r+0x5c>
 800e162:	230c      	movs	r3, #12
 800e164:	f8ca 3000 	str.w	r3, [sl]
 800e168:	89a3      	ldrh	r3, [r4, #12]
 800e16a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e16e:	81a3      	strh	r3, [r4, #12]
 800e170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e178:	463a      	mov	r2, r7
 800e17a:	6921      	ldr	r1, [r4, #16]
 800e17c:	f7ff fed8 	bl	800df30 <memcpy>
 800e180:	89a3      	ldrh	r3, [r4, #12]
 800e182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e18a:	81a3      	strh	r3, [r4, #12]
 800e18c:	6126      	str	r6, [r4, #16]
 800e18e:	6165      	str	r5, [r4, #20]
 800e190:	443e      	add	r6, r7
 800e192:	1bed      	subs	r5, r5, r7
 800e194:	6026      	str	r6, [r4, #0]
 800e196:	60a5      	str	r5, [r4, #8]
 800e198:	464e      	mov	r6, r9
 800e19a:	454e      	cmp	r6, r9
 800e19c:	d900      	bls.n	800e1a0 <__ssputs_r+0x84>
 800e19e:	464e      	mov	r6, r9
 800e1a0:	4632      	mov	r2, r6
 800e1a2:	4641      	mov	r1, r8
 800e1a4:	6820      	ldr	r0, [r4, #0]
 800e1a6:	f000 fa93 	bl	800e6d0 <memmove>
 800e1aa:	68a3      	ldr	r3, [r4, #8]
 800e1ac:	1b9b      	subs	r3, r3, r6
 800e1ae:	60a3      	str	r3, [r4, #8]
 800e1b0:	6823      	ldr	r3, [r4, #0]
 800e1b2:	441e      	add	r6, r3
 800e1b4:	6026      	str	r6, [r4, #0]
 800e1b6:	2000      	movs	r0, #0
 800e1b8:	e7dc      	b.n	800e174 <__ssputs_r+0x58>
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	f000 faa1 	bl	800e702 <_realloc_r>
 800e1c0:	4606      	mov	r6, r0
 800e1c2:	2800      	cmp	r0, #0
 800e1c4:	d1e2      	bne.n	800e18c <__ssputs_r+0x70>
 800e1c6:	6921      	ldr	r1, [r4, #16]
 800e1c8:	4650      	mov	r0, sl
 800e1ca:	f7ff fec5 	bl	800df58 <_free_r>
 800e1ce:	e7c8      	b.n	800e162 <__ssputs_r+0x46>

0800e1d0 <_svfiprintf_r>:
 800e1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d4:	461d      	mov	r5, r3
 800e1d6:	898b      	ldrh	r3, [r1, #12]
 800e1d8:	061f      	lsls	r7, r3, #24
 800e1da:	b09d      	sub	sp, #116	; 0x74
 800e1dc:	4680      	mov	r8, r0
 800e1de:	460c      	mov	r4, r1
 800e1e0:	4616      	mov	r6, r2
 800e1e2:	d50f      	bpl.n	800e204 <_svfiprintf_r+0x34>
 800e1e4:	690b      	ldr	r3, [r1, #16]
 800e1e6:	b96b      	cbnz	r3, 800e204 <_svfiprintf_r+0x34>
 800e1e8:	2140      	movs	r1, #64	; 0x40
 800e1ea:	f7ff ff03 	bl	800dff4 <_malloc_r>
 800e1ee:	6020      	str	r0, [r4, #0]
 800e1f0:	6120      	str	r0, [r4, #16]
 800e1f2:	b928      	cbnz	r0, 800e200 <_svfiprintf_r+0x30>
 800e1f4:	230c      	movs	r3, #12
 800e1f6:	f8c8 3000 	str.w	r3, [r8]
 800e1fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1fe:	e0c8      	b.n	800e392 <_svfiprintf_r+0x1c2>
 800e200:	2340      	movs	r3, #64	; 0x40
 800e202:	6163      	str	r3, [r4, #20]
 800e204:	2300      	movs	r3, #0
 800e206:	9309      	str	r3, [sp, #36]	; 0x24
 800e208:	2320      	movs	r3, #32
 800e20a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e20e:	2330      	movs	r3, #48	; 0x30
 800e210:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e214:	9503      	str	r5, [sp, #12]
 800e216:	f04f 0b01 	mov.w	fp, #1
 800e21a:	4637      	mov	r7, r6
 800e21c:	463d      	mov	r5, r7
 800e21e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e222:	b10b      	cbz	r3, 800e228 <_svfiprintf_r+0x58>
 800e224:	2b25      	cmp	r3, #37	; 0x25
 800e226:	d13e      	bne.n	800e2a6 <_svfiprintf_r+0xd6>
 800e228:	ebb7 0a06 	subs.w	sl, r7, r6
 800e22c:	d00b      	beq.n	800e246 <_svfiprintf_r+0x76>
 800e22e:	4653      	mov	r3, sl
 800e230:	4632      	mov	r2, r6
 800e232:	4621      	mov	r1, r4
 800e234:	4640      	mov	r0, r8
 800e236:	f7ff ff71 	bl	800e11c <__ssputs_r>
 800e23a:	3001      	adds	r0, #1
 800e23c:	f000 80a4 	beq.w	800e388 <_svfiprintf_r+0x1b8>
 800e240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e242:	4453      	add	r3, sl
 800e244:	9309      	str	r3, [sp, #36]	; 0x24
 800e246:	783b      	ldrb	r3, [r7, #0]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	f000 809d 	beq.w	800e388 <_svfiprintf_r+0x1b8>
 800e24e:	2300      	movs	r3, #0
 800e250:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e254:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e258:	9304      	str	r3, [sp, #16]
 800e25a:	9307      	str	r3, [sp, #28]
 800e25c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e260:	931a      	str	r3, [sp, #104]	; 0x68
 800e262:	462f      	mov	r7, r5
 800e264:	2205      	movs	r2, #5
 800e266:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e26a:	4850      	ldr	r0, [pc, #320]	; (800e3ac <_svfiprintf_r+0x1dc>)
 800e26c:	f7f1 ffc0 	bl	80001f0 <memchr>
 800e270:	9b04      	ldr	r3, [sp, #16]
 800e272:	b9d0      	cbnz	r0, 800e2aa <_svfiprintf_r+0xda>
 800e274:	06d9      	lsls	r1, r3, #27
 800e276:	bf44      	itt	mi
 800e278:	2220      	movmi	r2, #32
 800e27a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e27e:	071a      	lsls	r2, r3, #28
 800e280:	bf44      	itt	mi
 800e282:	222b      	movmi	r2, #43	; 0x2b
 800e284:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e288:	782a      	ldrb	r2, [r5, #0]
 800e28a:	2a2a      	cmp	r2, #42	; 0x2a
 800e28c:	d015      	beq.n	800e2ba <_svfiprintf_r+0xea>
 800e28e:	9a07      	ldr	r2, [sp, #28]
 800e290:	462f      	mov	r7, r5
 800e292:	2000      	movs	r0, #0
 800e294:	250a      	movs	r5, #10
 800e296:	4639      	mov	r1, r7
 800e298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e29c:	3b30      	subs	r3, #48	; 0x30
 800e29e:	2b09      	cmp	r3, #9
 800e2a0:	d94d      	bls.n	800e33e <_svfiprintf_r+0x16e>
 800e2a2:	b1b8      	cbz	r0, 800e2d4 <_svfiprintf_r+0x104>
 800e2a4:	e00f      	b.n	800e2c6 <_svfiprintf_r+0xf6>
 800e2a6:	462f      	mov	r7, r5
 800e2a8:	e7b8      	b.n	800e21c <_svfiprintf_r+0x4c>
 800e2aa:	4a40      	ldr	r2, [pc, #256]	; (800e3ac <_svfiprintf_r+0x1dc>)
 800e2ac:	1a80      	subs	r0, r0, r2
 800e2ae:	fa0b f000 	lsl.w	r0, fp, r0
 800e2b2:	4318      	orrs	r0, r3
 800e2b4:	9004      	str	r0, [sp, #16]
 800e2b6:	463d      	mov	r5, r7
 800e2b8:	e7d3      	b.n	800e262 <_svfiprintf_r+0x92>
 800e2ba:	9a03      	ldr	r2, [sp, #12]
 800e2bc:	1d11      	adds	r1, r2, #4
 800e2be:	6812      	ldr	r2, [r2, #0]
 800e2c0:	9103      	str	r1, [sp, #12]
 800e2c2:	2a00      	cmp	r2, #0
 800e2c4:	db01      	blt.n	800e2ca <_svfiprintf_r+0xfa>
 800e2c6:	9207      	str	r2, [sp, #28]
 800e2c8:	e004      	b.n	800e2d4 <_svfiprintf_r+0x104>
 800e2ca:	4252      	negs	r2, r2
 800e2cc:	f043 0302 	orr.w	r3, r3, #2
 800e2d0:	9207      	str	r2, [sp, #28]
 800e2d2:	9304      	str	r3, [sp, #16]
 800e2d4:	783b      	ldrb	r3, [r7, #0]
 800e2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800e2d8:	d10c      	bne.n	800e2f4 <_svfiprintf_r+0x124>
 800e2da:	787b      	ldrb	r3, [r7, #1]
 800e2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800e2de:	d133      	bne.n	800e348 <_svfiprintf_r+0x178>
 800e2e0:	9b03      	ldr	r3, [sp, #12]
 800e2e2:	1d1a      	adds	r2, r3, #4
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	9203      	str	r2, [sp, #12]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	bfb8      	it	lt
 800e2ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e2f0:	3702      	adds	r7, #2
 800e2f2:	9305      	str	r3, [sp, #20]
 800e2f4:	4d2e      	ldr	r5, [pc, #184]	; (800e3b0 <_svfiprintf_r+0x1e0>)
 800e2f6:	7839      	ldrb	r1, [r7, #0]
 800e2f8:	2203      	movs	r2, #3
 800e2fa:	4628      	mov	r0, r5
 800e2fc:	f7f1 ff78 	bl	80001f0 <memchr>
 800e300:	b138      	cbz	r0, 800e312 <_svfiprintf_r+0x142>
 800e302:	2340      	movs	r3, #64	; 0x40
 800e304:	1b40      	subs	r0, r0, r5
 800e306:	fa03 f000 	lsl.w	r0, r3, r0
 800e30a:	9b04      	ldr	r3, [sp, #16]
 800e30c:	4303      	orrs	r3, r0
 800e30e:	3701      	adds	r7, #1
 800e310:	9304      	str	r3, [sp, #16]
 800e312:	7839      	ldrb	r1, [r7, #0]
 800e314:	4827      	ldr	r0, [pc, #156]	; (800e3b4 <_svfiprintf_r+0x1e4>)
 800e316:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e31a:	2206      	movs	r2, #6
 800e31c:	1c7e      	adds	r6, r7, #1
 800e31e:	f7f1 ff67 	bl	80001f0 <memchr>
 800e322:	2800      	cmp	r0, #0
 800e324:	d038      	beq.n	800e398 <_svfiprintf_r+0x1c8>
 800e326:	4b24      	ldr	r3, [pc, #144]	; (800e3b8 <_svfiprintf_r+0x1e8>)
 800e328:	bb13      	cbnz	r3, 800e370 <_svfiprintf_r+0x1a0>
 800e32a:	9b03      	ldr	r3, [sp, #12]
 800e32c:	3307      	adds	r3, #7
 800e32e:	f023 0307 	bic.w	r3, r3, #7
 800e332:	3308      	adds	r3, #8
 800e334:	9303      	str	r3, [sp, #12]
 800e336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e338:	444b      	add	r3, r9
 800e33a:	9309      	str	r3, [sp, #36]	; 0x24
 800e33c:	e76d      	b.n	800e21a <_svfiprintf_r+0x4a>
 800e33e:	fb05 3202 	mla	r2, r5, r2, r3
 800e342:	2001      	movs	r0, #1
 800e344:	460f      	mov	r7, r1
 800e346:	e7a6      	b.n	800e296 <_svfiprintf_r+0xc6>
 800e348:	2300      	movs	r3, #0
 800e34a:	3701      	adds	r7, #1
 800e34c:	9305      	str	r3, [sp, #20]
 800e34e:	4619      	mov	r1, r3
 800e350:	250a      	movs	r5, #10
 800e352:	4638      	mov	r0, r7
 800e354:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e358:	3a30      	subs	r2, #48	; 0x30
 800e35a:	2a09      	cmp	r2, #9
 800e35c:	d903      	bls.n	800e366 <_svfiprintf_r+0x196>
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d0c8      	beq.n	800e2f4 <_svfiprintf_r+0x124>
 800e362:	9105      	str	r1, [sp, #20]
 800e364:	e7c6      	b.n	800e2f4 <_svfiprintf_r+0x124>
 800e366:	fb05 2101 	mla	r1, r5, r1, r2
 800e36a:	2301      	movs	r3, #1
 800e36c:	4607      	mov	r7, r0
 800e36e:	e7f0      	b.n	800e352 <_svfiprintf_r+0x182>
 800e370:	ab03      	add	r3, sp, #12
 800e372:	9300      	str	r3, [sp, #0]
 800e374:	4622      	mov	r2, r4
 800e376:	4b11      	ldr	r3, [pc, #68]	; (800e3bc <_svfiprintf_r+0x1ec>)
 800e378:	a904      	add	r1, sp, #16
 800e37a:	4640      	mov	r0, r8
 800e37c:	f3af 8000 	nop.w
 800e380:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e384:	4681      	mov	r9, r0
 800e386:	d1d6      	bne.n	800e336 <_svfiprintf_r+0x166>
 800e388:	89a3      	ldrh	r3, [r4, #12]
 800e38a:	065b      	lsls	r3, r3, #25
 800e38c:	f53f af35 	bmi.w	800e1fa <_svfiprintf_r+0x2a>
 800e390:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e392:	b01d      	add	sp, #116	; 0x74
 800e394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e398:	ab03      	add	r3, sp, #12
 800e39a:	9300      	str	r3, [sp, #0]
 800e39c:	4622      	mov	r2, r4
 800e39e:	4b07      	ldr	r3, [pc, #28]	; (800e3bc <_svfiprintf_r+0x1ec>)
 800e3a0:	a904      	add	r1, sp, #16
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	f000 f882 	bl	800e4ac <_printf_i>
 800e3a8:	e7ea      	b.n	800e380 <_svfiprintf_r+0x1b0>
 800e3aa:	bf00      	nop
 800e3ac:	0800ecc4 	.word	0x0800ecc4
 800e3b0:	0800ecca 	.word	0x0800ecca
 800e3b4:	0800ecce 	.word	0x0800ecce
 800e3b8:	00000000 	.word	0x00000000
 800e3bc:	0800e11d 	.word	0x0800e11d

0800e3c0 <_printf_common>:
 800e3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c4:	4691      	mov	r9, r2
 800e3c6:	461f      	mov	r7, r3
 800e3c8:	688a      	ldr	r2, [r1, #8]
 800e3ca:	690b      	ldr	r3, [r1, #16]
 800e3cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	bfb8      	it	lt
 800e3d4:	4613      	movlt	r3, r2
 800e3d6:	f8c9 3000 	str.w	r3, [r9]
 800e3da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3de:	4606      	mov	r6, r0
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	b112      	cbz	r2, 800e3ea <_printf_common+0x2a>
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	f8c9 3000 	str.w	r3, [r9]
 800e3ea:	6823      	ldr	r3, [r4, #0]
 800e3ec:	0699      	lsls	r1, r3, #26
 800e3ee:	bf42      	ittt	mi
 800e3f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e3f4:	3302      	addmi	r3, #2
 800e3f6:	f8c9 3000 	strmi.w	r3, [r9]
 800e3fa:	6825      	ldr	r5, [r4, #0]
 800e3fc:	f015 0506 	ands.w	r5, r5, #6
 800e400:	d107      	bne.n	800e412 <_printf_common+0x52>
 800e402:	f104 0a19 	add.w	sl, r4, #25
 800e406:	68e3      	ldr	r3, [r4, #12]
 800e408:	f8d9 2000 	ldr.w	r2, [r9]
 800e40c:	1a9b      	subs	r3, r3, r2
 800e40e:	42ab      	cmp	r3, r5
 800e410:	dc28      	bgt.n	800e464 <_printf_common+0xa4>
 800e412:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e416:	6822      	ldr	r2, [r4, #0]
 800e418:	3300      	adds	r3, #0
 800e41a:	bf18      	it	ne
 800e41c:	2301      	movne	r3, #1
 800e41e:	0692      	lsls	r2, r2, #26
 800e420:	d42d      	bmi.n	800e47e <_printf_common+0xbe>
 800e422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e426:	4639      	mov	r1, r7
 800e428:	4630      	mov	r0, r6
 800e42a:	47c0      	blx	r8
 800e42c:	3001      	adds	r0, #1
 800e42e:	d020      	beq.n	800e472 <_printf_common+0xb2>
 800e430:	6823      	ldr	r3, [r4, #0]
 800e432:	68e5      	ldr	r5, [r4, #12]
 800e434:	f8d9 2000 	ldr.w	r2, [r9]
 800e438:	f003 0306 	and.w	r3, r3, #6
 800e43c:	2b04      	cmp	r3, #4
 800e43e:	bf08      	it	eq
 800e440:	1aad      	subeq	r5, r5, r2
 800e442:	68a3      	ldr	r3, [r4, #8]
 800e444:	6922      	ldr	r2, [r4, #16]
 800e446:	bf0c      	ite	eq
 800e448:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e44c:	2500      	movne	r5, #0
 800e44e:	4293      	cmp	r3, r2
 800e450:	bfc4      	itt	gt
 800e452:	1a9b      	subgt	r3, r3, r2
 800e454:	18ed      	addgt	r5, r5, r3
 800e456:	f04f 0900 	mov.w	r9, #0
 800e45a:	341a      	adds	r4, #26
 800e45c:	454d      	cmp	r5, r9
 800e45e:	d11a      	bne.n	800e496 <_printf_common+0xd6>
 800e460:	2000      	movs	r0, #0
 800e462:	e008      	b.n	800e476 <_printf_common+0xb6>
 800e464:	2301      	movs	r3, #1
 800e466:	4652      	mov	r2, sl
 800e468:	4639      	mov	r1, r7
 800e46a:	4630      	mov	r0, r6
 800e46c:	47c0      	blx	r8
 800e46e:	3001      	adds	r0, #1
 800e470:	d103      	bne.n	800e47a <_printf_common+0xba>
 800e472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e47a:	3501      	adds	r5, #1
 800e47c:	e7c3      	b.n	800e406 <_printf_common+0x46>
 800e47e:	18e1      	adds	r1, r4, r3
 800e480:	1c5a      	adds	r2, r3, #1
 800e482:	2030      	movs	r0, #48	; 0x30
 800e484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e488:	4422      	add	r2, r4
 800e48a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e48e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e492:	3302      	adds	r3, #2
 800e494:	e7c5      	b.n	800e422 <_printf_common+0x62>
 800e496:	2301      	movs	r3, #1
 800e498:	4622      	mov	r2, r4
 800e49a:	4639      	mov	r1, r7
 800e49c:	4630      	mov	r0, r6
 800e49e:	47c0      	blx	r8
 800e4a0:	3001      	adds	r0, #1
 800e4a2:	d0e6      	beq.n	800e472 <_printf_common+0xb2>
 800e4a4:	f109 0901 	add.w	r9, r9, #1
 800e4a8:	e7d8      	b.n	800e45c <_printf_common+0x9c>
	...

0800e4ac <_printf_i>:
 800e4ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e4b4:	460c      	mov	r4, r1
 800e4b6:	7e09      	ldrb	r1, [r1, #24]
 800e4b8:	b085      	sub	sp, #20
 800e4ba:	296e      	cmp	r1, #110	; 0x6e
 800e4bc:	4617      	mov	r7, r2
 800e4be:	4606      	mov	r6, r0
 800e4c0:	4698      	mov	r8, r3
 800e4c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e4c4:	f000 80b3 	beq.w	800e62e <_printf_i+0x182>
 800e4c8:	d822      	bhi.n	800e510 <_printf_i+0x64>
 800e4ca:	2963      	cmp	r1, #99	; 0x63
 800e4cc:	d036      	beq.n	800e53c <_printf_i+0x90>
 800e4ce:	d80a      	bhi.n	800e4e6 <_printf_i+0x3a>
 800e4d0:	2900      	cmp	r1, #0
 800e4d2:	f000 80b9 	beq.w	800e648 <_printf_i+0x19c>
 800e4d6:	2958      	cmp	r1, #88	; 0x58
 800e4d8:	f000 8083 	beq.w	800e5e2 <_printf_i+0x136>
 800e4dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e4e4:	e032      	b.n	800e54c <_printf_i+0xa0>
 800e4e6:	2964      	cmp	r1, #100	; 0x64
 800e4e8:	d001      	beq.n	800e4ee <_printf_i+0x42>
 800e4ea:	2969      	cmp	r1, #105	; 0x69
 800e4ec:	d1f6      	bne.n	800e4dc <_printf_i+0x30>
 800e4ee:	6820      	ldr	r0, [r4, #0]
 800e4f0:	6813      	ldr	r3, [r2, #0]
 800e4f2:	0605      	lsls	r5, r0, #24
 800e4f4:	f103 0104 	add.w	r1, r3, #4
 800e4f8:	d52a      	bpl.n	800e550 <_printf_i+0xa4>
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	6011      	str	r1, [r2, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	da03      	bge.n	800e50a <_printf_i+0x5e>
 800e502:	222d      	movs	r2, #45	; 0x2d
 800e504:	425b      	negs	r3, r3
 800e506:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e50a:	486f      	ldr	r0, [pc, #444]	; (800e6c8 <_printf_i+0x21c>)
 800e50c:	220a      	movs	r2, #10
 800e50e:	e039      	b.n	800e584 <_printf_i+0xd8>
 800e510:	2973      	cmp	r1, #115	; 0x73
 800e512:	f000 809d 	beq.w	800e650 <_printf_i+0x1a4>
 800e516:	d808      	bhi.n	800e52a <_printf_i+0x7e>
 800e518:	296f      	cmp	r1, #111	; 0x6f
 800e51a:	d020      	beq.n	800e55e <_printf_i+0xb2>
 800e51c:	2970      	cmp	r1, #112	; 0x70
 800e51e:	d1dd      	bne.n	800e4dc <_printf_i+0x30>
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	f043 0320 	orr.w	r3, r3, #32
 800e526:	6023      	str	r3, [r4, #0]
 800e528:	e003      	b.n	800e532 <_printf_i+0x86>
 800e52a:	2975      	cmp	r1, #117	; 0x75
 800e52c:	d017      	beq.n	800e55e <_printf_i+0xb2>
 800e52e:	2978      	cmp	r1, #120	; 0x78
 800e530:	d1d4      	bne.n	800e4dc <_printf_i+0x30>
 800e532:	2378      	movs	r3, #120	; 0x78
 800e534:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e538:	4864      	ldr	r0, [pc, #400]	; (800e6cc <_printf_i+0x220>)
 800e53a:	e055      	b.n	800e5e8 <_printf_i+0x13c>
 800e53c:	6813      	ldr	r3, [r2, #0]
 800e53e:	1d19      	adds	r1, r3, #4
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6011      	str	r1, [r2, #0]
 800e544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e54c:	2301      	movs	r3, #1
 800e54e:	e08c      	b.n	800e66a <_printf_i+0x1be>
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6011      	str	r1, [r2, #0]
 800e554:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e558:	bf18      	it	ne
 800e55a:	b21b      	sxthne	r3, r3
 800e55c:	e7cf      	b.n	800e4fe <_printf_i+0x52>
 800e55e:	6813      	ldr	r3, [r2, #0]
 800e560:	6825      	ldr	r5, [r4, #0]
 800e562:	1d18      	adds	r0, r3, #4
 800e564:	6010      	str	r0, [r2, #0]
 800e566:	0628      	lsls	r0, r5, #24
 800e568:	d501      	bpl.n	800e56e <_printf_i+0xc2>
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	e002      	b.n	800e574 <_printf_i+0xc8>
 800e56e:	0668      	lsls	r0, r5, #25
 800e570:	d5fb      	bpl.n	800e56a <_printf_i+0xbe>
 800e572:	881b      	ldrh	r3, [r3, #0]
 800e574:	4854      	ldr	r0, [pc, #336]	; (800e6c8 <_printf_i+0x21c>)
 800e576:	296f      	cmp	r1, #111	; 0x6f
 800e578:	bf14      	ite	ne
 800e57a:	220a      	movne	r2, #10
 800e57c:	2208      	moveq	r2, #8
 800e57e:	2100      	movs	r1, #0
 800e580:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e584:	6865      	ldr	r5, [r4, #4]
 800e586:	60a5      	str	r5, [r4, #8]
 800e588:	2d00      	cmp	r5, #0
 800e58a:	f2c0 8095 	blt.w	800e6b8 <_printf_i+0x20c>
 800e58e:	6821      	ldr	r1, [r4, #0]
 800e590:	f021 0104 	bic.w	r1, r1, #4
 800e594:	6021      	str	r1, [r4, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d13d      	bne.n	800e616 <_printf_i+0x16a>
 800e59a:	2d00      	cmp	r5, #0
 800e59c:	f040 808e 	bne.w	800e6bc <_printf_i+0x210>
 800e5a0:	4665      	mov	r5, ip
 800e5a2:	2a08      	cmp	r2, #8
 800e5a4:	d10b      	bne.n	800e5be <_printf_i+0x112>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	07db      	lsls	r3, r3, #31
 800e5aa:	d508      	bpl.n	800e5be <_printf_i+0x112>
 800e5ac:	6923      	ldr	r3, [r4, #16]
 800e5ae:	6862      	ldr	r2, [r4, #4]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	bfde      	ittt	le
 800e5b4:	2330      	movle	r3, #48	; 0x30
 800e5b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e5be:	ebac 0305 	sub.w	r3, ip, r5
 800e5c2:	6123      	str	r3, [r4, #16]
 800e5c4:	f8cd 8000 	str.w	r8, [sp]
 800e5c8:	463b      	mov	r3, r7
 800e5ca:	aa03      	add	r2, sp, #12
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	f7ff fef6 	bl	800e3c0 <_printf_common>
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	d14d      	bne.n	800e674 <_printf_i+0x1c8>
 800e5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5dc:	b005      	add	sp, #20
 800e5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5e2:	4839      	ldr	r0, [pc, #228]	; (800e6c8 <_printf_i+0x21c>)
 800e5e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e5e8:	6813      	ldr	r3, [r2, #0]
 800e5ea:	6821      	ldr	r1, [r4, #0]
 800e5ec:	1d1d      	adds	r5, r3, #4
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	6015      	str	r5, [r2, #0]
 800e5f2:	060a      	lsls	r2, r1, #24
 800e5f4:	d50b      	bpl.n	800e60e <_printf_i+0x162>
 800e5f6:	07ca      	lsls	r2, r1, #31
 800e5f8:	bf44      	itt	mi
 800e5fa:	f041 0120 	orrmi.w	r1, r1, #32
 800e5fe:	6021      	strmi	r1, [r4, #0]
 800e600:	b91b      	cbnz	r3, 800e60a <_printf_i+0x15e>
 800e602:	6822      	ldr	r2, [r4, #0]
 800e604:	f022 0220 	bic.w	r2, r2, #32
 800e608:	6022      	str	r2, [r4, #0]
 800e60a:	2210      	movs	r2, #16
 800e60c:	e7b7      	b.n	800e57e <_printf_i+0xd2>
 800e60e:	064d      	lsls	r5, r1, #25
 800e610:	bf48      	it	mi
 800e612:	b29b      	uxthmi	r3, r3
 800e614:	e7ef      	b.n	800e5f6 <_printf_i+0x14a>
 800e616:	4665      	mov	r5, ip
 800e618:	fbb3 f1f2 	udiv	r1, r3, r2
 800e61c:	fb02 3311 	mls	r3, r2, r1, r3
 800e620:	5cc3      	ldrb	r3, [r0, r3]
 800e622:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e626:	460b      	mov	r3, r1
 800e628:	2900      	cmp	r1, #0
 800e62a:	d1f5      	bne.n	800e618 <_printf_i+0x16c>
 800e62c:	e7b9      	b.n	800e5a2 <_printf_i+0xf6>
 800e62e:	6813      	ldr	r3, [r2, #0]
 800e630:	6825      	ldr	r5, [r4, #0]
 800e632:	6961      	ldr	r1, [r4, #20]
 800e634:	1d18      	adds	r0, r3, #4
 800e636:	6010      	str	r0, [r2, #0]
 800e638:	0628      	lsls	r0, r5, #24
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	d501      	bpl.n	800e642 <_printf_i+0x196>
 800e63e:	6019      	str	r1, [r3, #0]
 800e640:	e002      	b.n	800e648 <_printf_i+0x19c>
 800e642:	066a      	lsls	r2, r5, #25
 800e644:	d5fb      	bpl.n	800e63e <_printf_i+0x192>
 800e646:	8019      	strh	r1, [r3, #0]
 800e648:	2300      	movs	r3, #0
 800e64a:	6123      	str	r3, [r4, #16]
 800e64c:	4665      	mov	r5, ip
 800e64e:	e7b9      	b.n	800e5c4 <_printf_i+0x118>
 800e650:	6813      	ldr	r3, [r2, #0]
 800e652:	1d19      	adds	r1, r3, #4
 800e654:	6011      	str	r1, [r2, #0]
 800e656:	681d      	ldr	r5, [r3, #0]
 800e658:	6862      	ldr	r2, [r4, #4]
 800e65a:	2100      	movs	r1, #0
 800e65c:	4628      	mov	r0, r5
 800e65e:	f7f1 fdc7 	bl	80001f0 <memchr>
 800e662:	b108      	cbz	r0, 800e668 <_printf_i+0x1bc>
 800e664:	1b40      	subs	r0, r0, r5
 800e666:	6060      	str	r0, [r4, #4]
 800e668:	6863      	ldr	r3, [r4, #4]
 800e66a:	6123      	str	r3, [r4, #16]
 800e66c:	2300      	movs	r3, #0
 800e66e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e672:	e7a7      	b.n	800e5c4 <_printf_i+0x118>
 800e674:	6923      	ldr	r3, [r4, #16]
 800e676:	462a      	mov	r2, r5
 800e678:	4639      	mov	r1, r7
 800e67a:	4630      	mov	r0, r6
 800e67c:	47c0      	blx	r8
 800e67e:	3001      	adds	r0, #1
 800e680:	d0aa      	beq.n	800e5d8 <_printf_i+0x12c>
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	079b      	lsls	r3, r3, #30
 800e686:	d413      	bmi.n	800e6b0 <_printf_i+0x204>
 800e688:	68e0      	ldr	r0, [r4, #12]
 800e68a:	9b03      	ldr	r3, [sp, #12]
 800e68c:	4298      	cmp	r0, r3
 800e68e:	bfb8      	it	lt
 800e690:	4618      	movlt	r0, r3
 800e692:	e7a3      	b.n	800e5dc <_printf_i+0x130>
 800e694:	2301      	movs	r3, #1
 800e696:	464a      	mov	r2, r9
 800e698:	4639      	mov	r1, r7
 800e69a:	4630      	mov	r0, r6
 800e69c:	47c0      	blx	r8
 800e69e:	3001      	adds	r0, #1
 800e6a0:	d09a      	beq.n	800e5d8 <_printf_i+0x12c>
 800e6a2:	3501      	adds	r5, #1
 800e6a4:	68e3      	ldr	r3, [r4, #12]
 800e6a6:	9a03      	ldr	r2, [sp, #12]
 800e6a8:	1a9b      	subs	r3, r3, r2
 800e6aa:	42ab      	cmp	r3, r5
 800e6ac:	dcf2      	bgt.n	800e694 <_printf_i+0x1e8>
 800e6ae:	e7eb      	b.n	800e688 <_printf_i+0x1dc>
 800e6b0:	2500      	movs	r5, #0
 800e6b2:	f104 0919 	add.w	r9, r4, #25
 800e6b6:	e7f5      	b.n	800e6a4 <_printf_i+0x1f8>
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d1ac      	bne.n	800e616 <_printf_i+0x16a>
 800e6bc:	7803      	ldrb	r3, [r0, #0]
 800e6be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6c6:	e76c      	b.n	800e5a2 <_printf_i+0xf6>
 800e6c8:	0800ecd5 	.word	0x0800ecd5
 800e6cc:	0800ece6 	.word	0x0800ece6

0800e6d0 <memmove>:
 800e6d0:	4288      	cmp	r0, r1
 800e6d2:	b510      	push	{r4, lr}
 800e6d4:	eb01 0302 	add.w	r3, r1, r2
 800e6d8:	d807      	bhi.n	800e6ea <memmove+0x1a>
 800e6da:	1e42      	subs	r2, r0, #1
 800e6dc:	4299      	cmp	r1, r3
 800e6de:	d00a      	beq.n	800e6f6 <memmove+0x26>
 800e6e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6e4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e6e8:	e7f8      	b.n	800e6dc <memmove+0xc>
 800e6ea:	4283      	cmp	r3, r0
 800e6ec:	d9f5      	bls.n	800e6da <memmove+0xa>
 800e6ee:	1881      	adds	r1, r0, r2
 800e6f0:	1ad2      	subs	r2, r2, r3
 800e6f2:	42d3      	cmn	r3, r2
 800e6f4:	d100      	bne.n	800e6f8 <memmove+0x28>
 800e6f6:	bd10      	pop	{r4, pc}
 800e6f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6fc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e700:	e7f7      	b.n	800e6f2 <memmove+0x22>

0800e702 <_realloc_r>:
 800e702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e704:	4607      	mov	r7, r0
 800e706:	4614      	mov	r4, r2
 800e708:	460e      	mov	r6, r1
 800e70a:	b921      	cbnz	r1, 800e716 <_realloc_r+0x14>
 800e70c:	4611      	mov	r1, r2
 800e70e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e712:	f7ff bc6f 	b.w	800dff4 <_malloc_r>
 800e716:	b922      	cbnz	r2, 800e722 <_realloc_r+0x20>
 800e718:	f7ff fc1e 	bl	800df58 <_free_r>
 800e71c:	4625      	mov	r5, r4
 800e71e:	4628      	mov	r0, r5
 800e720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e722:	f000 f814 	bl	800e74e <_malloc_usable_size_r>
 800e726:	42a0      	cmp	r0, r4
 800e728:	d20f      	bcs.n	800e74a <_realloc_r+0x48>
 800e72a:	4621      	mov	r1, r4
 800e72c:	4638      	mov	r0, r7
 800e72e:	f7ff fc61 	bl	800dff4 <_malloc_r>
 800e732:	4605      	mov	r5, r0
 800e734:	2800      	cmp	r0, #0
 800e736:	d0f2      	beq.n	800e71e <_realloc_r+0x1c>
 800e738:	4631      	mov	r1, r6
 800e73a:	4622      	mov	r2, r4
 800e73c:	f7ff fbf8 	bl	800df30 <memcpy>
 800e740:	4631      	mov	r1, r6
 800e742:	4638      	mov	r0, r7
 800e744:	f7ff fc08 	bl	800df58 <_free_r>
 800e748:	e7e9      	b.n	800e71e <_realloc_r+0x1c>
 800e74a:	4635      	mov	r5, r6
 800e74c:	e7e7      	b.n	800e71e <_realloc_r+0x1c>

0800e74e <_malloc_usable_size_r>:
 800e74e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e752:	1f18      	subs	r0, r3, #4
 800e754:	2b00      	cmp	r3, #0
 800e756:	bfbc      	itt	lt
 800e758:	580b      	ldrlt	r3, [r1, r0]
 800e75a:	18c0      	addlt	r0, r0, r3
 800e75c:	4770      	bx	lr
	...

0800e760 <_init>:
 800e760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e762:	bf00      	nop
 800e764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e766:	bc08      	pop	{r3}
 800e768:	469e      	mov	lr, r3
 800e76a:	4770      	bx	lr

0800e76c <_fini>:
 800e76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76e:	bf00      	nop
 800e770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e772:	bc08      	pop	{r3}
 800e774:	469e      	mov	lr, r3
 800e776:	4770      	bx	lr
