
FlapJack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d69c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800d83c  0800d83c  0001d83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de84  0800de84  000204a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800de84  0800de84  0001de84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de8c  0800de8c  000204a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de8c  0800de8c  0001de8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de90  0800de90  0001de90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004a0  20000000  0800de94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df8  200004a0  0800e334  000204a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002298  0800e334  00022298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028271  00000000  00000000  000204d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000044f5  00000000  00000000  00048741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a08  00000000  00000000  0004cc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001848  00000000  00000000  0004e640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bfa3  00000000  00000000  0004fe88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017733  00000000  00000000  0006be2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00098136  00000000  00000000  0008355e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071cc  00000000  00000000  0011b710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004a0 	.word	0x200004a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d824 	.word	0x0800d824

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004a4 	.word	0x200004a4
 80001dc:	0800d824 	.word	0x0800d824

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <print_pal_error>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void print_pal_error(VL53L0X_Error Status){
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
    char buf[VL53L0X_MAX_STRING_LENGTH];
    VL53L0X_GetPalErrorString(Status, buf);
 800059a:	f107 0208 	add.w	r2, r7, #8
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f007 fc3c 	bl	8007e22 <VL53L0X_GetPalErrorString>
    cdc_printf(buf, Status);
 80005aa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4611      	mov	r1, r2
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f805 	bl	80005c4 <cdc_printf>
}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	; 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <cdc_printf>:

uint8_t msg[1024];

void cdc_printf(const char * fmt, ...){
 80005c4:	b40f      	push	{r0, r1, r2, r3}
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
	// Make a simple function to print to usb
	va_list args;
	va_start(args, fmt);
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	607b      	str	r3, [r7, #4]
    vsprintf((char *)msg, fmt, args);
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	6939      	ldr	r1, [r7, #16]
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <cdc_printf+0x3c>)
 80005d8:	f00c fdf6 	bl	800d1c8 <vsiprintf>
	va_end(args);
	CDC_Transmit_FS(msg, strlen((char *)msg));HAL_Delay(10); // We need to add a little delay or else the databuffer gets overwritten
 80005dc:	4808      	ldr	r0, [pc, #32]	; (8000600 <cdc_printf+0x3c>)
 80005de:	f7ff fdff 	bl	80001e0 <strlen>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <cdc_printf+0x3c>)
 80005e8:	f006 ffce 	bl	8007588 <CDC_Transmit_FS>
 80005ec:	200a      	movs	r0, #10
 80005ee:	f000 fcb5 	bl	8000f5c <HAL_Delay>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005fc:	b004      	add	sp, #16
 80005fe:	4770      	bx	lr
 8000600:	20000524 	.word	0x20000524

08000604 <print_range_status>:

void print_range_status(VL53L0X_RangingMeasurementData_t* pRangingMeasurementData){
 8000604:	b580      	push	{r7, lr}
 8000606:	b08c      	sub	sp, #48	; 0x30
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

    /*
     * New Range Status: data is valid when pRangingMeasurementData->RangeStatus = 0
     */

    RangeStatus = pRangingMeasurementData->RangeStatus;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	7e1b      	ldrb	r3, [r3, #24]
 8000610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    VL53L0X_GetRangeStatusString(RangeStatus, buf);
 8000614:	f107 020c 	add.w	r2, r7, #12
 8000618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f007 fbea 	bl	8007df8 <VL53L0X_GetRangeStatusString>
    cdc_printf("Range Status: %i : %s\r\n", RangeStatus, buf);
 8000624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000628:	f107 020c 	add.w	r2, r7, #12
 800062c:	4619      	mov	r1, r3
 800062e:	4803      	ldr	r0, [pc, #12]	; (800063c <print_range_status+0x38>)
 8000630:	f7ff ffc8 	bl	80005c4 <cdc_printf>

}
 8000634:	bf00      	nop
 8000636:	3730      	adds	r7, #48	; 0x30
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	0800d83c 	.word	0x0800d83c

08000640 <TOF_Init>:
uint8_t isApertureSpads;
uint8_t VhvSettings;
uint8_t PhaseCal;

VL53L0X_Error TOF_Init(VL53L0X_Dev_t *pMyDevice)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
    if(Status == VL53L0X_ERROR_NONE)
 800064c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d10c      	bne.n	800066e <TOF_Init+0x2e>
    {
    	cdc_printf("Call of VL53L0X_DataInit\r\n");
 8000654:	484e      	ldr	r0, [pc, #312]	; (8000790 <TOF_Init+0x150>)
 8000656:	f7ff ffb5 	bl	80005c4 <cdc_printf>
    	Status = VL53L0X_DataInit(pMyDevice); // Data initialization
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f007 fc0a 	bl	8007e74 <VL53L0X_DataInit>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
    	print_pal_error(Status);
 8000664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff91 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 800066e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10c      	bne.n	8000690 <TOF_Init+0x50>
    {
        cdc_printf("Call of VL53L0X_StaticInit\r\n");
 8000676:	4847      	ldr	r0, [pc, #284]	; (8000794 <TOF_Init+0x154>)
 8000678:	f7ff ffa4 	bl	80005c4 <cdc_printf>
        Status = VL53L0X_StaticInit(pMyDevice); // Device Initialization
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f007 fd5d 	bl	800813c <VL53L0X_StaticInit>
 8000682:	4603      	mov	r3, r0
 8000684:	73fb      	strb	r3, [r7, #15]
        print_pal_error(Status);
 8000686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff80 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 8000690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10e      	bne.n	80006b6 <TOF_Init+0x76>
    {
        cdc_printf("Call of VL53L0X_PerformRefCalibration\r\n");
 8000698:	483f      	ldr	r0, [pc, #252]	; (8000798 <TOF_Init+0x158>)
 800069a:	f7ff ff93 	bl	80005c4 <cdc_printf>
        Status = VL53L0X_PerformRefCalibration(pMyDevice,
 800069e:	4a3f      	ldr	r2, [pc, #252]	; (800079c <TOF_Init+0x15c>)
 80006a0:	493f      	ldr	r1, [pc, #252]	; (80007a0 <TOF_Init+0x160>)
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f008 fc58 	bl	8008f58 <VL53L0X_PerformRefCalibration>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]
        		&VhvSettings, &PhaseCal); // Device Initialization
        print_pal_error(Status);
 80006ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ff6d 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 80006b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d116      	bne.n	80006ec <TOF_Init+0xac>
    {
        cdc_printf("Call of VL53L0X_PerformRefSpadManagement\r\n");
 80006be:	4839      	ldr	r0, [pc, #228]	; (80007a4 <TOF_Init+0x164>)
 80006c0:	f7ff ff80 	bl	80005c4 <cdc_printf>
        Status = VL53L0X_PerformRefSpadManagement(pMyDevice,
 80006c4:	4a38      	ldr	r2, [pc, #224]	; (80007a8 <TOF_Init+0x168>)
 80006c6:	4939      	ldr	r1, [pc, #228]	; (80007ac <TOF_Init+0x16c>)
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f009 f8d3 	bl	8009874 <VL53L0X_PerformRefSpadManagement>
 80006ce:	4603      	mov	r3, r0
 80006d0:	73fb      	strb	r3, [r7, #15]
        		&refSpadCount, &isApertureSpads); // Device Initialization
        cdc_printf("refSpadCount = %d, isApertureSpads = %d\r\n", refSpadCount, isApertureSpads);
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <TOF_Init+0x16c>)
 80006d4:	6819      	ldr	r1, [r3, #0]
 80006d6:	4b34      	ldr	r3, [pc, #208]	; (80007a8 <TOF_Init+0x168>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	4834      	ldr	r0, [pc, #208]	; (80007b0 <TOF_Init+0x170>)
 80006de:	f7ff ff71 	bl	80005c4 <cdc_printf>
        print_pal_error(Status);
 80006e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ff52 	bl	8000590 <print_pal_error>
    }

    if(Status == VL53L0X_ERROR_NONE)
 80006ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10d      	bne.n	8000710 <TOF_Init+0xd0>
    {

        // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
        cdc_printf("Call of VL53L0X_SetDeviceMode\r\n");
 80006f4:	482f      	ldr	r0, [pc, #188]	; (80007b4 <TOF_Init+0x174>)
 80006f6:	f7ff ff65 	bl	80005c4 <cdc_printf>
        Status = VL53L0X_SetDeviceMode(pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 80006fa:	2100      	movs	r1, #0
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f007 ff2f 	bl	8008560 <VL53L0X_SetDeviceMode>
 8000702:	4603      	mov	r3, r0
 8000704:	73fb      	strb	r3, [r7, #15]
        print_pal_error(Status);
 8000706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff ff40 	bl	8000590 <print_pal_error>
    }

    // Enable/Disable Sigma and Signal check
    if (Status == VL53L0X_ERROR_NONE) {
 8000710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d106      	bne.n	8000726 <TOF_Init+0xe6>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 8000718:	2201      	movs	r2, #1
 800071a:	2100      	movs	r1, #0
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f008 f99f 	bl	8008a60 <VL53L0X_SetLimitCheckEnable>
 8000722:	4603      	mov	r3, r0
 8000724:	73fb      	strb	r3, [r7, #15]
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
    }
    if (Status == VL53L0X_ERROR_NONE) {
 8000726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d106      	bne.n	800073c <TOF_Init+0xfc>
        Status = VL53L0X_SetLimitCheckEnable(pMyDevice,
 800072e:	2201      	movs	r2, #1
 8000730:	2101      	movs	r1, #1
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f008 f994 	bl	8008a60 <VL53L0X_SetLimitCheckEnable>
 8000738:	4603      	mov	r3, r0
 800073a:	73fb      	strb	r3, [r7, #15]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 800073c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d107      	bne.n	8000754 <TOF_Init+0x114>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 8000744:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000748:	2101      	movs	r1, #1
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f008 fa38 	bl	8008bc0 <VL53L0X_SetLimitCheckValue>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]
        		VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        		(FixPoint1616_t)(0.25*65536));
	}
    if (Status == VL53L0X_ERROR_NONE) {
 8000754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d107      	bne.n	800076c <TOF_Init+0x12c>
        Status = VL53L0X_SetLimitCheckValue(pMyDevice,
 800075c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000760:	2100      	movs	r1, #0
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f008 fa2c 	bl	8008bc0 <VL53L0X_SetLimitCheckValue>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
        		VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
        		(FixPoint1616_t)(32*65536));
    }
    if (Status == VL53L0X_ERROR_NONE) {
 800076c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d106      	bne.n	8000782 <TOF_Init+0x142>
        Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(pMyDevice,
 8000774:	f247 5130 	movw	r1, #30000	; 0x7530
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f007 ff6b 	bl	8008654 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800077e:	4603      	mov	r3, r0
 8000780:	73fb      	strb	r3, [r7, #15]
        		30000);
    }
    return Status;
 8000782:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	0800d854 	.word	0x0800d854
 8000794:	0800d870 	.word	0x0800d870
 8000798:	0800d890 	.word	0x0800d890
 800079c:	2000096c 	.word	0x2000096c
 80007a0:	200009b0 	.word	0x200009b0
 80007a4:	0800d8b8 	.word	0x0800d8b8
 80007a8:	20000964 	.word	0x20000964
 80007ac:	20000968 	.word	0x20000968
 80007b0:	0800d8e4 	.word	0x0800d8e4
 80007b4:	0800d910 	.word	0x0800d910

080007b8 <TOF_Single_Range>:

uint16_t TOF_Single_Range(VL53L0X_Dev_t *pMyDevice){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
    VL53L0X_RangingMeasurementData_t RangingMeasurementData;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    Status = VL53L0X_PerformSingleRangingMeasurement(pMyDevice,
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f008 fe65 	bl	800949c <VL53L0X_PerformSingleRangingMeasurement>
 80007d2:	4603      	mov	r3, r0
 80007d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            		&RangingMeasurementData);
    VL53L0X_GetLimitCheckCurrent(pMyDevice,
 80007d8:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <TOF_Single_Range+0x4c>)
 80007da:	2103      	movs	r1, #3
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f008 fadf 	bl	8008da0 <VL53L0X_GetLimitCheckCurrent>
    VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, &LimitCheckCurrent);
    print_range_status(&RangingMeasurementData);
 80007e2:	f107 0308 	add.w	r3, r7, #8
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff0c 	bl	8000604 <print_range_status>
    if (Status)
 80007ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <TOF_Single_Range+0x40>
    	return 1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e000      	b.n	80007fa <TOF_Single_Range+0x42>
    return RangingMeasurementData.RangeMilliMeter;
 80007f8:	8a3b      	ldrh	r3, [r7, #16]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200004cc 	.word	0x200004cc

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
 800080e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fb32 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f886 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f000 f9a2 	bl	8000b60 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800081c:	f006 fdee 	bl	80073fc <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 8000820:	f000 f916 	bl	8000a50 <MX_TIM3_Init>
  MX_TIM9_Init();
 8000824:	f000 f962 	bl	8000aec <MX_TIM9_Init>
  MX_I2C1_Init();
 8000828:	f000 f8e4 	bl	80009f4 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  Status = -1;
 800082c:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <main+0x110>)
 800082e:	22ff      	movs	r2, #255	; 0xff
 8000830:	701a      	strb	r2, [r3, #0]
  uint16_t range = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
  int16_t a[3] = {0};
 8000838:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	809a      	strh	r2, [r3, #4]
  int16_t g[3] = {0};
 8000842:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	809a      	strh	r2, [r3, #4]
  int16_t t = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	f8a7 31d2 	strh.w	r3, [r7, #466]	; 0x1d2
  VL53L0X_Dev_t MyDevice;
  VL53L0X_Dev_t *pMyDevice = &MyDevice;
 8000852:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000856:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  VL53L0X_Version_t Version;
  VL53L0X_Version_t *pVersion   = &Version;
 800085a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800085e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  VL53L0X_DeviceInfo_t DeviceInfo;

  // set device addr and other configurations
  pMyDevice->I2cDevAddr      = 0x52;
 8000862:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000866:	2252      	movs	r2, #82	; 0x52
 8000868:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
  pMyDevice->comms_type      =  1;
 800086c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000870:	2201      	movs	r2, #1
 8000872:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
  pMyDevice->comms_speed_khz =  400;
 8000876:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800087a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800087e:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

  TOF_Init(pMyDevice);
 8000882:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8000886:	f7ff fedb 	bl	8000640 <TOF_Init>
  mpu_pwr_mgmt(MPU_DEV, 0x0, 0x0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2068      	movs	r0, #104	; 0x68
 8000890:	f005 f972 	bl	8005b78 <mpu_pwr_mgmt>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(Status){ // Hold here until You press 'n'
 8000894:	bf00      	nop
 8000896:	4b20      	ldr	r3, [pc, #128]	; (8000918 <main+0x110>)
 8000898:	f993 3000 	ldrsb.w	r3, [r3]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d1fa      	bne.n	8000896 <main+0x8e>
	  }
	  if (mpu_get_data(MPU_DEV, a, a+1, a+2, &t, g, g+1, g+2) == 0)
 80008a0:	f507 71ee 	add.w	r1, r7, #476	; 0x1dc
 80008a4:	3102      	adds	r1, #2
 80008a6:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 80008aa:	3004      	adds	r0, #4
 80008ac:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80008b0:	3302      	adds	r3, #2
 80008b2:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 80008b6:	3204      	adds	r2, #4
 80008b8:	f507 74ee 	add.w	r4, r7, #476	; 0x1dc
 80008bc:	9203      	str	r2, [sp, #12]
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 80008c4:	9301      	str	r3, [sp, #4]
 80008c6:	f507 73e9 	add.w	r3, r7, #466	; 0x1d2
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	4603      	mov	r3, r0
 80008ce:	460a      	mov	r2, r1
 80008d0:	4621      	mov	r1, r4
 80008d2:	2068      	movs	r0, #104	; 0x68
 80008d4:	f005 f8e6 	bl	8005aa4 <mpu_get_data>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d10a      	bne.n	80008f4 <main+0xec>
		  cdc_printf("x:%d y:%d z:%d\r\n",a[0], a[1], a[2]);
 80008de:	f9b7 31dc 	ldrsh.w	r3, [r7, #476]	; 0x1dc
 80008e2:	4619      	mov	r1, r3
 80008e4:	f9b7 31de 	ldrsh.w	r3, [r7, #478]	; 0x1de
 80008e8:	461a      	mov	r2, r3
 80008ea:	f9b7 31e0 	ldrsh.w	r3, [r7, #480]	; 0x1e0
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <main+0x114>)
 80008f0:	f7ff fe68 	bl	80005c4 <cdc_printf>

	  if(Status == VL53L0X_ERROR_NONE)
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <main+0x110>)
 80008f6:	f993 3000 	ldrsb.w	r3, [r3]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d108      	bne.n	8000910 <main+0x108>
	    {
		  cdc_printf("r:%i\r\n",TOF_Single_Range(pMyDevice));
 80008fe:	f8d7 01e8 	ldr.w	r0, [r7, #488]	; 0x1e8
 8000902:	f7ff ff59 	bl	80007b8 <TOF_Single_Range>
 8000906:	4603      	mov	r3, r0
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <main+0x118>)
 800090c:	f7ff fe5a 	bl	80005c4 <cdc_printf>
	    }
	    Status = -1; // Set the status to -1 so we wait until user issues new read command
 8000910:	4b01      	ldr	r3, [pc, #4]	; (8000918 <main+0x110>)
 8000912:	22ff      	movs	r2, #255	; 0xff
 8000914:	701a      	strb	r2, [r3, #0]
	  while(Status){ // Hold here until You press 'n'
 8000916:	e7bd      	b.n	8000894 <main+0x8c>
 8000918:	20000c88 	.word	0x20000c88
 800091c:	0800d930 	.word	0x0800d930
 8000920:	0800d944 	.word	0x0800d944

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b094      	sub	sp, #80	; 0x50
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2230      	movs	r2, #48	; 0x30
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f00c fb69 	bl	800d00a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
 8000946:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <SystemClock_Config+0xc8>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <SystemClock_Config+0xc8>)
 8000952:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000956:	6413      	str	r3, [r2, #64]	; 0x40
 8000958:	4b24      	ldr	r3, [pc, #144]	; (80009ec <SystemClock_Config+0xc8>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <SystemClock_Config+0xcc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a20      	ldr	r2, [pc, #128]	; (80009f0 <SystemClock_Config+0xcc>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000972:	6013      	str	r3, [r2, #0]
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <SystemClock_Config+0xcc>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	2302      	movs	r3, #2
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800098e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000994:	2319      	movs	r3, #25
 8000996:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000998:	2390      	movs	r3, #144	; 0x90
 800099a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80009a0:	2303      	movs	r3, #3
 80009a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4618      	mov	r0, r3
 80009aa:	f002 fec3 	bl	8003734 <HAL_RCC_OscConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009b4:	f000 f90a 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b8:	230f      	movs	r3, #15
 80009ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009bc:	2302      	movs	r3, #2
 80009be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2102      	movs	r1, #2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 f91d 	bl	8003c14 <HAL_RCC_ClockConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80009e0:	f000 f8f4 	bl	8000bcc <Error_Handler>
  }
}
 80009e4:	bf00      	nop
 80009e6:	3750      	adds	r7, #80	; 0x50
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40023800 	.word	0x40023800
 80009f0:	40007000 	.word	0x40007000

080009f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x50>)
 80009fa:	4a13      	ldr	r2, [pc, #76]	; (8000a48 <MX_I2C1_Init+0x54>)
 80009fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <MX_I2C1_Init+0x58>)
 8000a02:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a16:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a30:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_I2C1_Init+0x50>)
 8000a32:	f000 fd49 	bl	80014c8 <HAL_I2C_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a3c:	f000 f8c6 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200004d0 	.word	0x200004d0
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	00061a80 	.word	0x00061a80

08000a50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <MX_TIM3_Init+0x98>)
 8000a70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000a94:	f003 fa76 	bl	8003f84 <HAL_TIM_Base_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 f895 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000aa8:	f107 0308 	add.w	r3, r7, #8
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000ab0:	f003 fa93 	bl	8003fda <HAL_TIM_ConfigClockSource>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f000 f887 	bl	8000bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_TIM3_Init+0x94>)
 8000acc:	f003 fc56 	bl	800437c <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000ad6:	f000 f879 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3718      	adds	r7, #24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000924 	.word	0x20000924
 8000ae8:	40000400 	.word	0x40000400

08000aec <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	463b      	mov	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_TIM9_Init+0x6c>)
 8000b00:	4a16      	ldr	r2, [pc, #88]	; (8000b5c <MX_TIM9_Init+0x70>)
 8000b02:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_TIM9_Init+0x6c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <MX_TIM9_Init+0x6c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <MX_TIM9_Init+0x6c>)
 8000b12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b16:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <MX_TIM9_Init+0x6c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <MX_TIM9_Init+0x6c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MX_TIM9_Init+0x6c>)
 8000b26:	f003 fa2d 	bl	8003f84 <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8000b30:	f000 f84c 	bl	8000bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_TIM9_Init+0x6c>)
 8000b40:	f003 fa4b 	bl	8003fda <HAL_TIM_ConfigClockSource>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8000b4a:	f000 f83f 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000970 	.word	0x20000970
 8000b5c:	40014000 	.word	0x40014000

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_GPIO_Init+0x68>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40023800 	.word	0x40023800

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <Error_Handler+0x6>

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a0f      	ldr	r2, [pc, #60]	; (8000c20 <HAL_MspInit+0x4c>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x4c>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a19      	ldr	r2, [pc, #100]	; (8000ca8 <HAL_I2C_MspInit+0x84>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d12b      	bne.n	8000c9e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c62:	23c0      	movs	r3, #192	; 0xc0
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c66:	2312      	movs	r3, #18
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c72:	2304      	movs	r3, #4
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480c      	ldr	r0, [pc, #48]	; (8000cb0 <HAL_I2C_MspInit+0x8c>)
 8000c7e:	f000 faa1 	bl	80011c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a08      	ldr	r2, [pc, #32]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_I2C_MspInit+0x88>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c9e:	bf00      	nop
 8000ca0:	3728      	adds	r7, #40	; 0x28
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005400 	.word	0x40005400
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <HAL_TIM_Base_MspInit+0x64>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d10e      	bne.n	8000ce4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8000ce2:	e012      	b.n	8000d0a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM9)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_TIM_Base_MspInit+0x6c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10d      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <HAL_TIM_Base_MspInit+0x68>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40014000 	.word	0x40014000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f8d4 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <OTG_FS_IRQHandler+0x10>)
 8000d7e:	f001 fca6 	bl	80026ce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20001e8c 	.word	0x20001e8c

08000d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <_sbrk+0x5c>)
 8000d96:	4b15      	ldr	r3, [pc, #84]	; (8000dec <_sbrk+0x60>)
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <_sbrk+0x64>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <_sbrk+0x68>)
 8000dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d207      	bcs.n	8000dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dbc:	f00c f8e0 	bl	800cf80 <__errno>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dca:	e009      	b.n	8000de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a05      	ldr	r2, [pc, #20]	; (8000df0 <_sbrk+0x64>)
 8000ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dde:	68fb      	ldr	r3, [r7, #12]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20020000 	.word	0x20020000
 8000dec:	00000400 	.word	0x00000400
 8000df0:	200004bc 	.word	0x200004bc
 8000df4:	20002298 	.word	0x20002298

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <SystemInit+0x28>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <SystemInit+0x28>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SystemInit+0x28>)
 8000e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e12:	609a      	str	r2, [r3, #8]
#endif
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e2a:	e003      	b.n	8000e34 <LoopCopyDataInit>

08000e2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e32:	3104      	adds	r1, #4

08000e34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e34:	480b      	ldr	r0, [pc, #44]	; (8000e64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e36:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e3c:	d3f6      	bcc.n	8000e2c <CopyDataInit>
  ldr  r2, =_sbss
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e40:	e002      	b.n	8000e48 <LoopFillZerobss>

08000e42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e44:	f842 3b04 	str.w	r3, [r2], #4

08000e48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e4c:	d3f9      	bcc.n	8000e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e4e:	f7ff ffd3 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e52:	f00c f89b 	bl	800cf8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fcd7 	bl	8000808 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e60:	0800de94 	.word	0x0800de94
  ldr  r0, =_sdata
 8000e64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e68:	200004a0 	.word	0x200004a0
  ldr  r2, =_sbss
 8000e6c:	200004a0 	.word	0x200004a0
  ldr  r3, = _ebss
 8000e70:	20002298 	.word	0x20002298

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f94d 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 f808 	bl	8000ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe92 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_InitTick+0x54>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x58>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f965 	bl	80011aa <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ef8:	f000 f92d 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x5c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20000008 	.word	0x20000008
 8000f18:	20000004 	.word	0x20000004

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	200009b4 	.word	0x200009b4

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	200009b4 	.word	0x200009b4

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_Delay+0x40>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff29 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff3e 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff31 	bl	8001004 <__NVIC_EnableIRQ>
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ffa2 	bl	80010fc <SysTick_Config>
 80011b8:	4603      	mov	r3, r0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	; 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	e159      	b.n	8001494 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f040 8148 	bne.w	800148e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d00b      	beq.n	800121e <HAL_GPIO_Init+0x5a>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001212:	2b11      	cmp	r3, #17
 8001214:	d003      	beq.n	800121e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b12      	cmp	r3, #18
 800121c:	d130      	bne.n	8001280 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	2203      	movs	r2, #3
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43db      	mvns	r3, r3
 8001230:	69ba      	ldr	r2, [r7, #24]
 8001232:	4013      	ands	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4313      	orrs	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 0201 	and.w	r2, r3, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	689a      	ldr	r2, [r3, #8]
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0xfc>
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	2b12      	cmp	r3, #18
 80012be:	d123      	bne.n	8001308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3208      	adds	r2, #8
 80012c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	69b9      	ldr	r1, [r7, #24]
 8001304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0203 	and.w	r2, r3, #3
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a2 	beq.w	800148e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <HAL_GPIO_Init+0x2e4>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a55      	ldr	r2, [pc, #340]	; (80014a8 <HAL_GPIO_Init+0x2e4>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_GPIO_Init+0x2e4>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001366:	4a51      	ldr	r2, [pc, #324]	; (80014ac <HAL_GPIO_Init+0x2e8>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a48      	ldr	r2, [pc, #288]	; (80014b0 <HAL_GPIO_Init+0x2ec>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0x202>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a47      	ldr	r2, [pc, #284]	; (80014b4 <HAL_GPIO_Init+0x2f0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x1fe>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_GPIO_Init+0x2f4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x1fa>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a45      	ldr	r2, [pc, #276]	; (80014bc <HAL_GPIO_Init+0x2f8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x1f6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a44      	ldr	r2, [pc, #272]	; (80014c0 <HAL_GPIO_Init+0x2fc>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x1f2>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e008      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013b6:	2307      	movs	r3, #7
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e004      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013be:	2302      	movs	r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013c6:	2300      	movs	r3, #0
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	f002 0203 	and.w	r2, r2, #3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4093      	lsls	r3, r2
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d8:	4934      	ldr	r1, [pc, #208]	; (80014ac <HAL_GPIO_Init+0x2e8>)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <HAL_GPIO_Init+0x300>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800140a:	4a2e      	ldr	r2, [pc, #184]	; (80014c4 <HAL_GPIO_Init+0x300>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <HAL_GPIO_Init+0x300>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001434:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <HAL_GPIO_Init+0x300>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143a:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <HAL_GPIO_Init+0x300>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800145e:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <HAL_GPIO_Init+0x300>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_GPIO_Init+0x300>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_GPIO_Init+0x300>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3301      	adds	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	f67f aea2 	bls.w	80011e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800149c:	bf00      	nop
 800149e:	3724      	adds	r7, #36	; 0x24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40013c00 	.word	0x40013c00

080014c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e11f      	b.n	800171a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fb98 	bl	8000c24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2224      	movs	r2, #36	; 0x24
 80014f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0201 	bic.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800151a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800152a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800152c:	f002 fd16 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8001530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	4a7b      	ldr	r2, [pc, #492]	; (8001724 <HAL_I2C_Init+0x25c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d807      	bhi.n	800154c <HAL_I2C_Init+0x84>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4a7a      	ldr	r2, [pc, #488]	; (8001728 <HAL_I2C_Init+0x260>)
 8001540:	4293      	cmp	r3, r2
 8001542:	bf94      	ite	ls
 8001544:	2301      	movls	r3, #1
 8001546:	2300      	movhi	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	e006      	b.n	800155a <HAL_I2C_Init+0x92>
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4a77      	ldr	r2, [pc, #476]	; (800172c <HAL_I2C_Init+0x264>)
 8001550:	4293      	cmp	r3, r2
 8001552:	bf94      	ite	ls
 8001554:	2301      	movls	r3, #1
 8001556:	2300      	movhi	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0db      	b.n	800171a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4a72      	ldr	r2, [pc, #456]	; (8001730 <HAL_I2C_Init+0x268>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	0c9b      	lsrs	r3, r3, #18
 800156c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68ba      	ldr	r2, [r7, #8]
 800157e:	430a      	orrs	r2, r1
 8001580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a64      	ldr	r2, [pc, #400]	; (8001724 <HAL_I2C_Init+0x25c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d802      	bhi.n	800159c <HAL_I2C_Init+0xd4>
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	3301      	adds	r3, #1
 800159a:	e009      	b.n	80015b0 <HAL_I2C_Init+0xe8>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4a63      	ldr	r2, [pc, #396]	; (8001734 <HAL_I2C_Init+0x26c>)
 80015a8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ac:	099b      	lsrs	r3, r3, #6
 80015ae:	3301      	adds	r3, #1
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	6812      	ldr	r2, [r2, #0]
 80015b4:	430b      	orrs	r3, r1
 80015b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4956      	ldr	r1, [pc, #344]	; (8001724 <HAL_I2C_Init+0x25c>)
 80015cc:	428b      	cmp	r3, r1
 80015ce:	d80d      	bhi.n	80015ec <HAL_I2C_Init+0x124>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e59      	subs	r1, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	fbb1 f3f3 	udiv	r3, r1, r3
 80015de:	3301      	adds	r3, #1
 80015e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	bf38      	it	cc
 80015e8:	2304      	movcc	r3, #4
 80015ea:	e04f      	b.n	800168c <HAL_I2C_Init+0x1c4>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d111      	bne.n	8001618 <HAL_I2C_Init+0x150>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	440b      	add	r3, r1
 8001602:	fbb0 f3f3 	udiv	r3, r0, r3
 8001606:	3301      	adds	r3, #1
 8001608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800160c:	2b00      	cmp	r3, #0
 800160e:	bf0c      	ite	eq
 8001610:	2301      	moveq	r3, #1
 8001612:	2300      	movne	r3, #0
 8001614:	b2db      	uxtb	r3, r3
 8001616:	e012      	b.n	800163e <HAL_I2C_Init+0x176>
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	1e58      	subs	r0, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	0099      	lsls	r1, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	fbb0 f3f3 	udiv	r3, r0, r3
 800162e:	3301      	adds	r3, #1
 8001630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_Init+0x17e>
 8001642:	2301      	movs	r3, #1
 8001644:	e022      	b.n	800168c <HAL_I2C_Init+0x1c4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10e      	bne.n	800166c <HAL_I2C_Init+0x1a4>
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1e58      	subs	r0, r3, #1
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6859      	ldr	r1, [r3, #4]
 8001656:	460b      	mov	r3, r1
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	440b      	add	r3, r1
 800165c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001660:	3301      	adds	r3, #1
 8001662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800166a:	e00f      	b.n	800168c <HAL_I2C_Init+0x1c4>
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	1e58      	subs	r0, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	0099      	lsls	r1, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001682:	3301      	adds	r3, #1
 8001684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	6809      	ldr	r1, [r1, #0]
 8001690:	4313      	orrs	r3, r2
 8001692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6911      	ldr	r1, [r2, #16]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	68d2      	ldr	r2, [r2, #12]
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695a      	ldr	r2, [r3, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2220      	movs	r2, #32
 8001706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	000186a0 	.word	0x000186a0
 8001728:	001e847f 	.word	0x001e847f
 800172c:	003d08ff 	.word	0x003d08ff
 8001730:	431bde83 	.word	0x431bde83
 8001734:	10624dd3 	.word	0x10624dd3

08001738 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4603      	mov	r3, r0
 8001748:	817b      	strh	r3, [r7, #10]
 800174a:	460b      	mov	r3, r1
 800174c:	813b      	strh	r3, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001752:	f7ff fbf7 	bl	8000f44 <HAL_GetTick>
 8001756:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b20      	cmp	r3, #32
 8001762:	f040 80d9 	bne.w	8001918 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2319      	movs	r3, #25
 800176c:	2201      	movs	r2, #1
 800176e:	496d      	ldr	r1, [pc, #436]	; (8001924 <HAL_I2C_Mem_Write+0x1ec>)
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 fc7f 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800177c:	2302      	movs	r3, #2
 800177e:	e0cc      	b.n	800191a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_I2C_Mem_Write+0x56>
 800178a:	2302      	movs	r3, #2
 800178c:	e0c5      	b.n	800191a <HAL_I2C_Mem_Write+0x1e2>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d007      	beq.n	80017b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2221      	movs	r2, #33	; 0x21
 80017c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2240      	movs	r2, #64	; 0x40
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a4d      	ldr	r2, [pc, #308]	; (8001928 <HAL_I2C_Mem_Write+0x1f0>)
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017f6:	88f8      	ldrh	r0, [r7, #6]
 80017f8:	893a      	ldrh	r2, [r7, #8]
 80017fa:	8979      	ldrh	r1, [r7, #10]
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4603      	mov	r3, r0
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fab6 	bl	8001d78 <I2C_RequestMemoryWrite>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d052      	beq.n	80018b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e081      	b.n	800191a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 fd00 	bl	8002220 <I2C_WaitOnTXEFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2b04      	cmp	r3, #4
 800182c:	d107      	bne.n	800183e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800183c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06b      	b.n	800191a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	781a      	ldrb	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	1c5a      	adds	r2, r3, #1
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	3b01      	subs	r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001868:	b29b      	uxth	r3, r3
 800186a:	3b01      	subs	r3, #1
 800186c:	b29a      	uxth	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b04      	cmp	r3, #4
 800187e:	d11b      	bne.n	80018b8 <HAL_I2C_Mem_Write+0x180>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001884:	2b00      	cmp	r3, #0
 8001886:	d017      	beq.n	80018b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	781a      	ldrb	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	1c5a      	adds	r2, r3, #1
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	3b01      	subs	r3, #1
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1aa      	bne.n	8001816 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f000 fcec 	bl	80022a2 <I2C_WaitOnBTFFlagUntilTimeout>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00d      	beq.n	80018ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d107      	bne.n	80018e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e016      	b.n	800191a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2220      	movs	r2, #32
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	e000      	b.n	800191a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001918:	2302      	movs	r3, #2
  }
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	00100002 	.word	0x00100002
 8001928:	ffff0000 	.word	0xffff0000

0800192c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	; 0x30
 8001930:	af02      	add	r7, sp, #8
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	4608      	mov	r0, r1
 8001936:	4611      	mov	r1, r2
 8001938:	461a      	mov	r2, r3
 800193a:	4603      	mov	r3, r0
 800193c:	817b      	strh	r3, [r7, #10]
 800193e:	460b      	mov	r3, r1
 8001940:	813b      	strh	r3, [r7, #8]
 8001942:	4613      	mov	r3, r2
 8001944:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001946:	f7ff fafd 	bl	8000f44 <HAL_GetTick>
 800194a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b20      	cmp	r3, #32
 8001956:	f040 8208 	bne.w	8001d6a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2319      	movs	r3, #25
 8001960:	2201      	movs	r2, #1
 8001962:	497b      	ldr	r1, [pc, #492]	; (8001b50 <HAL_I2C_Mem_Read+0x224>)
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 fb85 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001970:	2302      	movs	r3, #2
 8001972:	e1fb      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_I2C_Mem_Read+0x56>
 800197e:	2302      	movs	r3, #2
 8001980:	e1f4      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d007      	beq.n	80019a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2222      	movs	r2, #34	; 0x22
 80019bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2240      	movs	r2, #64	; 0x40
 80019c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019de:	b29a      	uxth	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a5b      	ldr	r2, [pc, #364]	; (8001b54 <HAL_I2C_Mem_Read+0x228>)
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019ea:	88f8      	ldrh	r0, [r7, #6]
 80019ec:	893a      	ldrh	r2, [r7, #8]
 80019ee:	8979      	ldrh	r1, [r7, #10]
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4603      	mov	r3, r0
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 fa52 	bl	8001ea4 <I2C_RequestMemoryRead>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1b0      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d113      	bne.n	8001a3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695b      	ldr	r3, [r3, #20]
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	623b      	str	r3, [r7, #32]
 8001a26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e184      	b.n	8001d44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d11b      	bne.n	8001a7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e164      	b.n	8001d44 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d11b      	bne.n	8001aba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	e144      	b.n	8001d44 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001ad0:	e138      	b.n	8001d44 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	f200 80f1 	bhi.w	8001cbe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d123      	bne.n	8001b2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 fc1b 	bl	8002324 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e139      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b14:	3b01      	subs	r3, #1
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b2a:	e10b      	b.n	8001d44 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d14e      	bne.n	8001bd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4906      	ldr	r1, [pc, #24]	; (8001b58 <HAL_I2C_Mem_Read+0x22c>)
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 fa98 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e10e      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
 8001b4e:	bf00      	nop
 8001b50:	00100002 	.word	0x00100002
 8001b54:	ffff0000 	.word	0xffff0000
 8001b58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691a      	ldr	r2, [r3, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bd0:	e0b8      	b.n	8001d44 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4966      	ldr	r1, [pc, #408]	; (8001d74 <HAL_I2C_Mem_Read+0x448>)
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fa49 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0bf      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c34:	2200      	movs	r2, #0
 8001c36:	494f      	ldr	r1, [pc, #316]	; (8001d74 <HAL_I2C_Mem_Read+0x448>)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 fa1b 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e091      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	b2d2      	uxtb	r2, r2
 8001c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	3b01      	subs	r3, #1
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cbc:	e042      	b.n	8001d44 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fb2e 	bl	8002324 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e04c      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cdc:	b2d2      	uxtb	r2, r2
 8001cde:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d118      	bne.n	8001d44 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f47f aec2 	bne.w	8001ad2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	e000      	b.n	8001d6c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001d6a:	2302      	movs	r3, #2
  }
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	00010004 	.word	0x00010004

08001d78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	4608      	mov	r0, r1
 8001d82:	4611      	mov	r1, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	817b      	strh	r3, [r7, #10]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	813b      	strh	r3, [r7, #8]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f960 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc8:	d103      	bne.n	8001dd2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e05f      	b.n	8001e96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dd6:	897b      	ldrh	r3, [r7, #10]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001de4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	6a3a      	ldr	r2, [r7, #32]
 8001dea:	492d      	ldr	r1, [pc, #180]	; (8001ea0 <I2C_RequestMemoryWrite+0x128>)
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f998 	bl	8002122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e04c      	b.n	8001e96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	6a39      	ldr	r1, [r7, #32]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fa02 	bl	8002220 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00d      	beq.n	8001e3e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d107      	bne.n	8001e3a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e38:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e02b      	b.n	8001e96 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e44:	893b      	ldrh	r3, [r7, #8]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	611a      	str	r2, [r3, #16]
 8001e4e:	e021      	b.n	8001e94 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e50:	893b      	ldrh	r3, [r7, #8]
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	6a39      	ldr	r1, [r7, #32]
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f9dc 	bl	8002220 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00d      	beq.n	8001e8a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d107      	bne.n	8001e86 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e84:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e005      	b.n	8001e96 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e8a:	893b      	ldrh	r3, [r7, #8]
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	00010002 	.word	0x00010002

08001ea4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	4608      	mov	r0, r1
 8001eae:	4611      	mov	r1, r2
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	817b      	strh	r3, [r7, #10]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	813b      	strh	r3, [r7, #8]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001edc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f8c2 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00d      	beq.n	8001f12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f04:	d103      	bne.n	8001f0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e0aa      	b.n	8002068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f12:	897b      	ldrh	r3, [r7, #10]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	461a      	mov	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	6a3a      	ldr	r2, [r7, #32]
 8001f26:	4952      	ldr	r1, [pc, #328]	; (8002070 <I2C_RequestMemoryRead+0x1cc>)
 8001f28:	68f8      	ldr	r0, [r7, #12]
 8001f2a:	f000 f8fa 	bl	8002122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e097      	b.n	8002068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f50:	6a39      	ldr	r1, [r7, #32]
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f964 	bl	8002220 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d107      	bne.n	8001f76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e076      	b.n	8002068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d105      	bne.n	8001f8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f80:	893b      	ldrh	r3, [r7, #8]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	611a      	str	r2, [r3, #16]
 8001f8a:	e021      	b.n	8001fd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f8c:	893b      	ldrh	r3, [r7, #8]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	6a39      	ldr	r1, [r7, #32]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f93e 	bl	8002220 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00d      	beq.n	8001fc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d107      	bne.n	8001fc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e050      	b.n	8002068 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc6:	893b      	ldrh	r3, [r7, #8]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd2:	6a39      	ldr	r1, [r7, #32]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f000 f923 	bl	8002220 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00d      	beq.n	8001ffc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d107      	bne.n	8001ff8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e035      	b.n	8002068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	2200      	movs	r2, #0
 8002014:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 f82b 	bl	8002074 <I2C_WaitOnFlagUntilTimeout>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002032:	d103      	bne.n	800203c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e013      	b.n	8002068 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002040:	897b      	ldrh	r3, [r7, #10]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	6a3a      	ldr	r2, [r7, #32]
 8002054:	4906      	ldr	r1, [pc, #24]	; (8002070 <I2C_RequestMemoryRead+0x1cc>)
 8002056:	68f8      	ldr	r0, [r7, #12]
 8002058:	f000 f863 	bl	8002122 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3718      	adds	r7, #24
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	00010002 	.word	0x00010002

08002074 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002084:	e025      	b.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800208c:	d021      	beq.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208e:	f7fe ff59 	bl	8000f44 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d302      	bcc.n	80020a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d116      	bne.n	80020d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f043 0220 	orr.w	r2, r3, #32
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e023      	b.n	800211a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d10d      	bne.n	80020f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	43da      	mvns	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4013      	ands	r3, r2
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	bf0c      	ite	eq
 80020ee:	2301      	moveq	r3, #1
 80020f0:	2300      	movne	r3, #0
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	461a      	mov	r2, r3
 80020f6:	e00c      	b.n	8002112 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4013      	ands	r3, r2
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	429a      	cmp	r2, r3
 8002116:	d0b6      	beq.n	8002086 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002130:	e051      	b.n	80021d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002140:	d123      	bne.n	800218a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002150:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800215a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f043 0204 	orr.w	r2, r3, #4
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e046      	b.n	8002218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002190:	d021      	beq.n	80021d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002192:	f7fe fed7 	bl	8000f44 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d302      	bcc.n	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d116      	bne.n	80021d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f043 0220 	orr.w	r2, r3, #32
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e020      	b.n	8002218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d10c      	bne.n	80021fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	43da      	mvns	r2, r3
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4013      	ands	r3, r2
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	e00b      	b.n	8002212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	43da      	mvns	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf14      	ite	ne
 800220c:	2301      	movne	r3, #1
 800220e:	2300      	moveq	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d18d      	bne.n	8002132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800222c:	e02d      	b.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f8ce 	bl	80023d0 <I2C_IsAcknowledgeFailed>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e02d      	b.n	800229a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002244:	d021      	beq.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002246:	f7fe fe7d 	bl	8000f44 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	d302      	bcc.n	800225c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d116      	bne.n	800228a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f043 0220 	orr.w	r2, r3, #32
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e007      	b.n	800229a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d1ca      	bne.n	800222e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b084      	sub	sp, #16
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ae:	e02d      	b.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f88d 	bl	80023d0 <I2C_IsAcknowledgeFailed>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e02d      	b.n	800231c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c6:	d021      	beq.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7fe fe3c 	bl	8000f44 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f043 0220 	orr.w	r2, r3, #32
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e007      	b.n	800231c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b04      	cmp	r3, #4
 8002318:	d1ca      	bne.n	80022b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002330:	e042      	b.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b10      	cmp	r3, #16
 800233e:	d119      	bne.n	8002374 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0210 	mvn.w	r2, #16
 8002348:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e029      	b.n	80023c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002374:	f7fe fde6 	bl	8000f44 <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	429a      	cmp	r2, r3
 8002382:	d302      	bcc.n	800238a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2220      	movs	r2, #32
 8002394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f043 0220 	orr.w	r2, r3, #32
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e007      	b.n	80023c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c2:	2b40      	cmp	r3, #64	; 0x40
 80023c4:	d1b5      	bne.n	8002332 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e6:	d11b      	bne.n	8002420 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2220      	movs	r2, #32
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f043 0204 	orr.w	r2, r3, #4
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e000      	b.n	8002422 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800242e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002430:	b08f      	sub	sp, #60	; 0x3c
 8002432:	af0a      	add	r7, sp, #40	; 0x28
 8002434:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e10f      	b.n	8002660 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f005 f9da 	bl	8007814 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2203      	movs	r2, #3
 8002464:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d102      	bne.n	800247a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f002 f8ff 	bl	8004682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	687e      	ldr	r6, [r7, #4]
 800248c:	466d      	mov	r5, sp
 800248e:	f106 0410 	add.w	r4, r6, #16
 8002492:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002494:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800249e:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a2:	1d33      	adds	r3, r6, #4
 80024a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a6:	6838      	ldr	r0, [r7, #0]
 80024a8:	f001 ffd6 	bl	8004458 <USB_CoreInit>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2202      	movs	r2, #2
 80024b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0d0      	b.n	8002660 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f002 f8ed 	bl	80046a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	e04a      	b.n	8002566 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024d0:	7bfa      	ldrb	r2, [r7, #15]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	333d      	adds	r3, #61	; 0x3d
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024e4:	7bfa      	ldrb	r2, [r7, #15]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	333c      	adds	r3, #60	; 0x3c
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	b298      	uxth	r0, r3
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3342      	adds	r3, #66	; 0x42
 800250c:	4602      	mov	r2, r0
 800250e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	333f      	adds	r3, #63	; 0x3f
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	3344      	adds	r3, #68	; 0x44
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3348      	adds	r3, #72	; 0x48
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	1a9b      	subs	r3, r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3350      	adds	r3, #80	; 0x50
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	3301      	adds	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	7bfa      	ldrb	r2, [r7, #15]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	429a      	cmp	r2, r3
 800256e:	d3af      	bcc.n	80024d0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002570:	2300      	movs	r3, #0
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e044      	b.n	8002600 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025a2:	7bfa      	ldrb	r2, [r7, #15]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	00db      	lsls	r3, r3, #3
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	3301      	adds	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	7bfa      	ldrb	r2, [r7, #15]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3b5      	bcc.n	8002576 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	687e      	ldr	r6, [r7, #4]
 8002612:	466d      	mov	r5, sp
 8002614:	f106 0410 	add.w	r4, r6, #16
 8002618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002620:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002624:	e885 0003 	stmia.w	r5, {r0, r1}
 8002628:	1d33      	adds	r3, r6, #4
 800262a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262c:	6838      	ldr	r0, [r7, #0]
 800262e:	f002 f863 	bl	80046f8 <USB_DevInit>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e00d      	b.n	8002660 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f003 f8ab 	bl	80057b4 <USB_DevDisconnect>

  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002668 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_PCD_Start+0x1c>
 8002680:	2302      	movs	r3, #2
 8002682:	e020      	b.n	80026c6 <HAL_PCD_Start+0x5e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002690:	2b01      	cmp	r3, #1
 8002692:	d109      	bne.n	80026a8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002698:	2b01      	cmp	r3, #1
 800269a:	d005      	beq.n	80026a8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 ffd7 	bl	8004660 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 f85b 	bl	8005772 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026ce:	b590      	push	{r4, r7, lr}
 80026d0:	b08d      	sub	sp, #52	; 0x34
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f003 f919 	bl	800591c <USB_GetMode>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f040 839d 	bne.w	8002e2c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f003 f87d 	bl	80057f6 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8393 	beq.w	8002e2a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f003 f874 	bl	80057f6 <USB_ReadInterrupts>
 800270e:	4603      	mov	r3, r0
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b02      	cmp	r3, #2
 8002716:	d107      	bne.n	8002728 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f002 0202 	and.w	r2, r2, #2
 8002726:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 f862 	bl	80057f6 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d161      	bne.n	8002800 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0210 	bic.w	r2, r2, #16
 800274a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	f003 020f 	and.w	r2, r3, #15
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	3304      	adds	r3, #4
 800276a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	0c5b      	lsrs	r3, r3, #17
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	2b02      	cmp	r3, #2
 8002776:	d124      	bne.n	80027c2 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d035      	beq.n	80027f0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	091b      	lsrs	r3, r3, #4
 800278c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800278e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	6a38      	ldr	r0, [r7, #32]
 8002798:	f002 fec8 	bl	800552c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	091b      	lsrs	r3, r3, #4
 80027a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a8:	441a      	add	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ba:	441a      	add	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	619a      	str	r2, [r3, #24]
 80027c0:	e016      	b.n	80027f0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	0c5b      	lsrs	r3, r3, #17
 80027c6:	f003 030f 	and.w	r3, r3, #15
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d110      	bne.n	80027f0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80027d4:	2208      	movs	r2, #8
 80027d6:	4619      	mov	r1, r3
 80027d8:	6a38      	ldr	r0, [r7, #32]
 80027da:	f002 fea7 	bl	800552c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ea:	441a      	add	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699a      	ldr	r2, [r3, #24]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0210 	orr.w	r2, r2, #16
 80027fe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f002 fff6 	bl	80057f6 <USB_ReadInterrupts>
 800280a:	4603      	mov	r3, r0
 800280c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002810:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002814:	d16e      	bne.n	80028f4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f002 fffc 	bl	800581c <USB_ReadDevAllOutEpInterrupt>
 8002824:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002826:	e062      	b.n	80028ee <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d057      	beq.n	80028e2 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f003 f821 	bl	8005884 <USB_ReadDevOutEPInterrupt>
 8002842:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00c      	beq.n	8002868 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	2301      	movs	r3, #1
 800285e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fdb0 	bl	80033c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00c      	beq.n	800288c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287e:	461a      	mov	r2, r3
 8002880:	2308      	movs	r3, #8
 8002882:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 feaa 	bl	80035e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	461a      	mov	r2, r3
 80028a4:	2310      	movs	r3, #16
 80028a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	015a      	lsls	r2, r3, #5
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	4413      	add	r3, r2
 80028ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028be:	461a      	mov	r2, r3
 80028c0:	2320      	movs	r3, #32
 80028c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d009      	beq.n	80028e2 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028da:	461a      	mov	r2, r3
 80028dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	3301      	adds	r3, #1
 80028e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80028e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d199      	bne.n	8002828 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 ff7c 	bl	80057f6 <USB_ReadInterrupts>
 80028fe:	4603      	mov	r3, r0
 8002900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002904:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002908:	f040 80c0 	bne.w	8002a8c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f002 ff9d 	bl	8005850 <USB_ReadDevAllInEpInterrupt>
 8002916:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800291c:	e0b2      	b.n	8002a84 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800291e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a7 	beq.w	8002a78 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f002 ffc3 	bl	80058c0 <USB_ReadDevInEPInterrupt>
 800293a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d057      	beq.n	80029f6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	f003 030f 	and.w	r3, r3, #15
 800294c:	2201      	movs	r2, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	69f9      	ldr	r1, [r7, #28]
 8002962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002966:	4013      	ands	r3, r2
 8002968:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	4413      	add	r3, r2
 8002972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002976:	461a      	mov	r2, r3
 8002978:	2301      	movs	r3, #1
 800297a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d132      	bne.n	80029ea <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3348      	adds	r3, #72	; 0x48
 8002994:	6819      	ldr	r1, [r3, #0]
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4403      	add	r3, r0
 80029a4:	3344      	adds	r3, #68	; 0x44
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4419      	add	r1, r3
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4403      	add	r3, r0
 80029b8:	3348      	adds	r3, #72	; 0x48
 80029ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d113      	bne.n	80029ea <HAL_PCD_IRQHandler+0x31c>
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3350      	adds	r3, #80	; 0x50
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d108      	bne.n	80029ea <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029e2:	461a      	mov	r2, r3
 80029e4:	2101      	movs	r1, #1
 80029e6:	f002 ffcb 	bl	8005980 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f004 ff90 	bl	8007916 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d008      	beq.n	8002a12 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2308      	movs	r3, #8
 8002a10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2310      	movs	r3, #16
 8002a2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a44:	461a      	mov	r2, r3
 8002a46:	2340      	movs	r3, #64	; 0x40
 8002a48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d008      	beq.n	8002a66 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a60:	461a      	mov	r2, r3
 8002a62:	2302      	movs	r3, #2
 8002a64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fc1b 	bl	80032ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f47f af49 	bne.w	800291e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f002 feb0 	bl	80057f6 <USB_ReadInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aa0:	d122      	bne.n	8002ae8 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d108      	bne.n	8002ad2 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ac8:	2100      	movs	r1, #0
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 fe26 	bl	800371c <HAL_PCDEx_LPM_Callback>
 8002ad0:	e002      	b.n	8002ad8 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f004 ff8c 	bl	80079f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f002 fe82 	bl	80057f6 <USB_ReadInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002afc:	d112      	bne.n	8002b24 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d102      	bne.n	8002b14 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f004 ff48 	bl	80079a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002b22:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f002 fe64 	bl	80057f6 <USB_ReadInterrupts>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b38:	f040 80c7 	bne.w	8002cca <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b4a:	f023 0301 	bic.w	r3, r3, #1
 8002b4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2110      	movs	r1, #16
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 ff32 	bl	80049c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b60:	e056      	b.n	8002c10 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	015a      	lsls	r2, r3, #5
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	4413      	add	r3, r2
 8002b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	015a      	lsls	r2, r3, #5
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b86:	0151      	lsls	r1, r2, #5
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	440a      	add	r2, r1
 8002b8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b94:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ba6:	0151      	lsls	r1, r2, #5
 8002ba8:	69fa      	ldr	r2, [r7, #28]
 8002baa:	440a      	add	r2, r1
 8002bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002bb0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002bb4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	015a      	lsls	r2, r3, #5
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bda:	0151      	lsls	r1, r2, #5
 8002bdc:	69fa      	ldr	r2, [r7, #28]
 8002bde:	440a      	add	r2, r1
 8002be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002be8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bfa:	0151      	lsls	r1, r2, #5
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	440a      	add	r2, r1
 8002c00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d3a3      	bcc.n	8002b62 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002c2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c46:	f043 030b 	orr.w	r3, r3, #11
 8002c4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	69fa      	ldr	r2, [r7, #28]
 8002c58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c5c:	f043 030b 	orr.w	r3, r3, #11
 8002c60:	6453      	str	r3, [r2, #68]	; 0x44
 8002c62:	e015      	b.n	8002c90 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c76:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002c7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c8a:	f043 030b 	orr.w	r3, r3, #11
 8002c8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002ca2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f002 fe63 	bl	8005980 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695a      	ldr	r2, [r3, #20]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f002 fd91 	bl	80057f6 <USB_ReadInterrupts>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cde:	d124      	bne.n	8002d2a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fe27 	bl	8005938 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fec7 	bl	8004a82 <USB_GetDevSpeed>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681c      	ldr	r4, [r3, #0]
 8002d00:	f001 f920 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8002d04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4620      	mov	r0, r4
 8002d10:	f001 fc04 	bl	800451c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f004 fe26 	bl	8007966 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695a      	ldr	r2, [r3, #20]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f002 fd61 	bl	80057f6 <USB_ReadInterrupts>
 8002d34:	4603      	mov	r3, r0
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d10a      	bne.n	8002d54 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f004 fe03 	bl	800794a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f002 0208 	and.w	r2, r2, #8
 8002d52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f002 fd4c 	bl	80057f6 <USB_ReadInterrupts>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d68:	d10f      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	4619      	mov	r1, r3
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f004 fe5b 	bl	8007a30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 fd31 	bl	80057f6 <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f004 fe2e 	bl	8007a0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f002 fd16 	bl	80057f6 <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd4:	d10a      	bne.n	8002dec <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f004 fe3c 	bl	8007a54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f002 fd00 	bl	80057f6 <USB_ReadInterrupts>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f003 0304 	and.w	r3, r3, #4
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d115      	bne.n	8002e2c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f004 fe2c 	bl	8007a70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
 8002e28:	e000      	b.n	8002e2c <HAL_PCD_IRQHandler+0x75e>
      return;
 8002e2a:	bf00      	nop
    }
  }
}
 8002e2c:	3734      	adds	r7, #52	; 0x34
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}

08002e32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_PCD_SetAddress+0x1a>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e013      	b.n	8002e74 <HAL_PCD_SetAddress+0x42>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	78fa      	ldrb	r2, [r7, #3]
 8002e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fc5e 	bl	8005726 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	4608      	mov	r0, r1
 8002e86:	4611      	mov	r1, r2
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	70fb      	strb	r3, [r7, #3]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	803b      	strh	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	da0f      	bge.n	8002ec2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	f003 020f 	and.w	r2, r3, #15
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	3338      	adds	r3, #56	; 0x38
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	705a      	strb	r2, [r3, #1]
 8002ec0:	e00f      	b.n	8002ee2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ec2:	78fb      	ldrb	r3, [r7, #3]
 8002ec4:	f003 020f 	and.w	r2, r3, #15
 8002ec8:	4613      	mov	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3304      	adds	r3, #4
 8002eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee2:	78fb      	ldrb	r3, [r7, #3]
 8002ee4:	f003 030f 	and.w	r3, r3, #15
 8002ee8:	b2da      	uxtb	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eee:	883a      	ldrh	r2, [r7, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	78ba      	ldrb	r2, [r7, #2]
 8002ef8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	785b      	ldrb	r3, [r3, #1]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f0c:	78bb      	ldrb	r3, [r7, #2]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d102      	bne.n	8002f18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_PCD_EP_Open+0xaa>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e00e      	b.n	8002f44 <HAL_PCD_EP_Open+0xc8>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68f9      	ldr	r1, [r7, #12]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f001 fdc9 	bl	8004acc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f42:	7afb      	ldrb	r3, [r7, #11]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	460b      	mov	r3, r1
 8002f56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	da0f      	bge.n	8002f80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	3338      	adds	r3, #56	; 0x38
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	705a      	strb	r2, [r3, #1]
 8002f7e:	e00f      	b.n	8002fa0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	f003 020f 	and.w	r2, r3, #15
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	3304      	adds	r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d101      	bne.n	8002fba <HAL_PCD_EP_Close+0x6e>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e00e      	b.n	8002fd8 <HAL_PCD_EP_Close+0x8c>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f001 fe07 	bl	8004bdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	460b      	mov	r3, r1
 8002fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff0:	7afb      	ldrb	r3, [r7, #11]
 8002ff2:	f003 020f 	and.w	r2, r3, #15
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	3304      	adds	r3, #4
 8003008:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2200      	movs	r2, #0
 8003020:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003022:	7afb      	ldrb	r3, [r7, #11]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	b2da      	uxtb	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	6979      	ldr	r1, [r7, #20]
 8003054:	f002 f8e2 	bl	800521c <USB_EP0StartXfer>
 8003058:	e008      	b.n	800306c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	461a      	mov	r2, r3
 8003066:	6979      	ldr	r1, [r7, #20]
 8003068:	f001 fe94 	bl	8004d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003098:	681b      	ldr	r3, [r3, #0]
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	460b      	mov	r3, r1
 80030b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 020f 	and.w	r2, r3, #15
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	1a9b      	subs	r3, r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	3338      	adds	r3, #56	; 0x38
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	3304      	adds	r3, #4
 80030cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2201      	movs	r2, #1
 80030e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e6:	7afb      	ldrb	r3, [r7, #11]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d102      	bne.n	8003100 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003100:	7afb      	ldrb	r3, [r7, #11]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	461a      	mov	r2, r3
 8003116:	6979      	ldr	r1, [r7, #20]
 8003118:	f002 f880 	bl	800521c <USB_EP0StartXfer>
 800311c:	e008      	b.n	8003130 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	461a      	mov	r2, r3
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	f001 fe32 	bl	8004d94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003146:	78fb      	ldrb	r3, [r7, #3]
 8003148:	f003 020f 	and.w	r2, r3, #15
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	429a      	cmp	r2, r3
 8003152:	d901      	bls.n	8003158 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e050      	b.n	80031fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da0f      	bge.n	8003180 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3338      	adds	r3, #56	; 0x38
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	705a      	strb	r2, [r3, #1]
 800317e:	e00d      	b.n	800319c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	4413      	add	r3, r2
 8003192:	3304      	adds	r3, #4
 8003194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2201      	movs	r2, #1
 80031a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_PCD_EP_SetStall+0x82>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e01e      	b.n	80031fa <HAL_PCD_EP_SetStall+0xc0>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68f9      	ldr	r1, [r7, #12]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 f9d7 	bl	800557e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	b2d9      	uxtb	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031ea:	461a      	mov	r2, r3
 80031ec:	f002 fbc8 	bl	8005980 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	429a      	cmp	r2, r3
 800321a:	d901      	bls.n	8003220 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e042      	b.n	80032a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da0f      	bge.n	8003248 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	3338      	adds	r3, #56	; 0x38
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2201      	movs	r2, #1
 8003244:	705a      	strb	r2, [r3, #1]
 8003246:	e00f      	b.n	8003268 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	f003 020f 	and.w	r2, r3, #15
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	b2da      	uxtb	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_PCD_EP_ClrStall+0x86>
 8003284:	2302      	movs	r3, #2
 8003286:	e00e      	b.n	80032a6 <HAL_PCD_EP_ClrStall+0xa4>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68f9      	ldr	r1, [r7, #12]
 8003296:	4618      	mov	r0, r3
 8003298:	f002 f9df 	bl	800565a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b08a      	sub	sp, #40	; 0x28
 80032b2:	af02      	add	r7, sp, #8
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	4613      	mov	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	3338      	adds	r3, #56	; 0x38
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d901      	bls.n	80032e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e06c      	b.n	80033c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	695a      	ldr	r2, [r3, #20]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d902      	bls.n	8003302 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3303      	adds	r3, #3
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800330a:	e02b      	b.n	8003364 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	695a      	ldr	r2, [r3, #20]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	429a      	cmp	r2, r3
 8003320:	d902      	bls.n	8003328 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3303      	adds	r3, #3
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68d9      	ldr	r1, [r3, #12]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003340:	b2db      	uxtb	r3, r3
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	4603      	mov	r3, r0
 8003346:	6978      	ldr	r0, [r7, #20]
 8003348:	f002 f8bb 	bl	80054c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	441a      	add	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	441a      	add	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	b29b      	uxth	r3, r3
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	429a      	cmp	r2, r3
 8003378:	d809      	bhi.n	800338e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	699a      	ldr	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003382:	429a      	cmp	r2, r3
 8003384:	d203      	bcs.n	800338e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1be      	bne.n	800330c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	429a      	cmp	r2, r3
 8003398:	d811      	bhi.n	80033be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	2201      	movs	r2, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	6939      	ldr	r1, [r7, #16]
 80033b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ba:	4013      	ands	r3, r2
 80033bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	333c      	adds	r3, #60	; 0x3c
 80033e0:	3304      	adds	r3, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	f040 80a0 	bne.w	8003540 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d015      	beq.n	8003436 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a72      	ldr	r2, [pc, #456]	; (80035d8 <PCD_EP_OutXfrComplete_int+0x210>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f240 80dd 	bls.w	80035ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80d7 	beq.w	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342c:	461a      	mov	r2, r3
 800342e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003432:	6093      	str	r3, [r2, #8]
 8003434:	e0cb      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	2320      	movs	r3, #32
 8003450:	6093      	str	r3, [r2, #8]
 8003452:	e0bc      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 80b7 	bne.w	80035ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a5d      	ldr	r2, [pc, #372]	; (80035d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d90f      	bls.n	8003488 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00a      	beq.n	8003488 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347e:	461a      	mov	r2, r3
 8003480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003484:	6093      	str	r3, [r2, #8]
 8003486:	e0a2      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800349a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	0159      	lsls	r1, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	440b      	add	r3, r1
 80034a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80034ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4403      	add	r3, r0
 80034be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4419      	add	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4403      	add	r3, r0
 80034fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003500:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d114      	bne.n	8003532 <PCD_EP_OutXfrComplete_int+0x16a>
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d108      	bne.n	8003532 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800352a:	461a      	mov	r2, r3
 800352c:	2101      	movs	r1, #1
 800352e:	f002 fa27 	bl	8005980 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f004 f9d1 	bl	80078e0 <HAL_PCD_DataOutStageCallback>
 800353e:	e046      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4a26      	ldr	r2, [pc, #152]	; (80035dc <PCD_EP_OutXfrComplete_int+0x214>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d124      	bne.n	8003592 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355e:	461a      	mov	r2, r3
 8003560:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003564:	6093      	str	r3, [r2, #8]
 8003566:	e032      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d008      	beq.n	8003584 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357e:	461a      	mov	r2, r3
 8003580:	2320      	movs	r3, #32
 8003582:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	4619      	mov	r1, r3
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f004 f9a8 	bl	80078e0 <HAL_PCD_DataOutStageCallback>
 8003590:	e01d      	b.n	80035ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d114      	bne.n	80035c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035ba:	461a      	mov	r2, r3
 80035bc:	2100      	movs	r1, #0
 80035be:	f002 f9df 	bl	8005980 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f004 f989 	bl	80078e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	4f54300a 	.word	0x4f54300a
 80035dc:	4f54310a 	.word	0x4f54310a

080035e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	333c      	adds	r3, #60	; 0x3c
 80035f8:	3304      	adds	r3, #4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	4a15      	ldr	r2, [pc, #84]	; (8003668 <PCD_EP_OutSetupPacket_int+0x88>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d90e      	bls.n	8003634 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362c:	461a      	mov	r2, r3
 800362e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003632:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f004 f941 	bl	80078bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4a0a      	ldr	r2, [pc, #40]	; (8003668 <PCD_EP_OutSetupPacket_int+0x88>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d90c      	bls.n	800365c <PCD_EP_OutSetupPacket_int+0x7c>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003654:	461a      	mov	r2, r3
 8003656:	2101      	movs	r1, #1
 8003658:	f002 f992 	bl	8005980 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	4f54300a 	.word	0x4f54300a

0800366c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
 8003678:	4613      	mov	r3, r2
 800367a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003684:	78fb      	ldrb	r3, [r7, #3]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d107      	bne.n	800369a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800368a:	883b      	ldrh	r3, [r7, #0]
 800368c:	0419      	lsls	r1, r3, #16
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	430a      	orrs	r2, r1
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
 8003698:	e028      	b.n	80036ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4413      	add	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e00d      	b.n	80036ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	3340      	adds	r3, #64	; 0x40
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	0c1b      	lsrs	r3, r3, #16
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4413      	add	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	3301      	adds	r3, #1
 80036c8:	73fb      	strb	r3, [r7, #15]
 80036ca:	7bfa      	ldrb	r2, [r7, #15]
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d3ec      	bcc.n	80036ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036d4:	883b      	ldrh	r3, [r7, #0]
 80036d6:	0418      	lsls	r0, r3, #16
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6819      	ldr	r1, [r3, #0]
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	3b01      	subs	r3, #1
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	4302      	orrs	r2, r0
 80036e4:	3340      	adds	r3, #64	; 0x40
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b083      	sub	sp, #12
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	460b      	mov	r3, r1
 8003704:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e25b      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d075      	beq.n	800383e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003752:	4ba3      	ldr	r3, [pc, #652]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b04      	cmp	r3, #4
 800375c:	d00c      	beq.n	8003778 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800375e:	4ba0      	ldr	r3, [pc, #640]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003766:	2b08      	cmp	r3, #8
 8003768:	d112      	bne.n	8003790 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800376a:	4b9d      	ldr	r3, [pc, #628]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003776:	d10b      	bne.n	8003790 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	4b99      	ldr	r3, [pc, #612]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05b      	beq.n	800383c <HAL_RCC_OscConfig+0x108>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d157      	bne.n	800383c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e236      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003798:	d106      	bne.n	80037a8 <HAL_RCC_OscConfig+0x74>
 800379a:	4b91      	ldr	r3, [pc, #580]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a90      	ldr	r2, [pc, #576]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e01d      	b.n	80037e4 <HAL_RCC_OscConfig+0xb0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x98>
 80037b2:	4b8b      	ldr	r3, [pc, #556]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a8a      	ldr	r2, [pc, #552]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a87      	ldr	r2, [pc, #540]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0xb0>
 80037cc:	4b84      	ldr	r3, [pc, #528]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a83      	ldr	r2, [pc, #524]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b81      	ldr	r3, [pc, #516]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a80      	ldr	r2, [pc, #512]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80037de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d013      	beq.n	8003814 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ec:	f7fd fbaa 	bl	8000f44 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f4:	f7fd fba6 	bl	8000f44 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b64      	cmp	r3, #100	; 0x64
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e1fb      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003806:	4b76      	ldr	r3, [pc, #472]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0f0      	beq.n	80037f4 <HAL_RCC_OscConfig+0xc0>
 8003812:	e014      	b.n	800383e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003814:	f7fd fb96 	bl	8000f44 <HAL_GetTick>
 8003818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800381a:	e008      	b.n	800382e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381c:	f7fd fb92 	bl	8000f44 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b64      	cmp	r3, #100	; 0x64
 8003828:	d901      	bls.n	800382e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e1e7      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800382e:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f0      	bne.n	800381c <HAL_RCC_OscConfig+0xe8>
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800383c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d063      	beq.n	8003912 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800384a:	4b65      	ldr	r3, [pc, #404]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00b      	beq.n	800386e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003856:	4b62      	ldr	r3, [pc, #392]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800385e:	2b08      	cmp	r3, #8
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003862:	4b5f      	ldr	r3, [pc, #380]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d116      	bne.n	800389c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386e:	4b5c      	ldr	r3, [pc, #368]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_RCC_OscConfig+0x152>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d001      	beq.n	8003886 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e1bb      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003886:	4b56      	ldr	r3, [pc, #344]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	4952      	ldr	r1, [pc, #328]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003896:	4313      	orrs	r3, r2
 8003898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800389a:	e03a      	b.n	8003912 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a4:	4b4f      	ldr	r3, [pc, #316]	; (80039e4 <HAL_RCC_OscConfig+0x2b0>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fd fb4b 	bl	8000f44 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038b2:	f7fd fb47 	bl	8000f44 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e19c      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c4:	4b46      	ldr	r3, [pc, #280]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d0:	4b43      	ldr	r3, [pc, #268]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	4940      	ldr	r1, [pc, #256]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
 80038e4:	e015      	b.n	8003912 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038e6:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <HAL_RCC_OscConfig+0x2b0>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fb2a 	bl	8000f44 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038f4:	f7fd fb26 	bl	8000f44 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e17b      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003906:	4b36      	ldr	r3, [pc, #216]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	2b00      	cmp	r3, #0
 800391c:	d030      	beq.n	8003980 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003926:	4b30      	ldr	r3, [pc, #192]	; (80039e8 <HAL_RCC_OscConfig+0x2b4>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392c:	f7fd fb0a 	bl	8000f44 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003934:	f7fd fb06 	bl	8000f44 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e15b      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x200>
 8003952:	e015      	b.n	8003980 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003954:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCC_OscConfig+0x2b4>)
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395a:	f7fd faf3 	bl	8000f44 <HAL_GetTick>
 800395e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003962:	f7fd faef 	bl	8000f44 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e144      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003974:	4b1a      	ldr	r3, [pc, #104]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1f0      	bne.n	8003962 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 80a0 	beq.w	8003ace <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <HAL_RCC_OscConfig+0x2ac>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_OscConfig+0x2b8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d121      	bne.n	8003a0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_RCC_OscConfig+0x2b8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a07      	ldr	r2, [pc, #28]	; (80039ec <HAL_RCC_OscConfig+0x2b8>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fd fab5 	bl	8000f44 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e011      	b.n	8003a02 <HAL_RCC_OscConfig+0x2ce>
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	42470000 	.word	0x42470000
 80039e8:	42470e80 	.word	0x42470e80
 80039ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f0:	f7fd faa8 	bl	8000f44 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0fd      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a02:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <HAL_RCC_OscConfig+0x4d4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d106      	bne.n	8003a24 <HAL_RCC_OscConfig+0x2f0>
 8003a16:	4b7d      	ldr	r3, [pc, #500]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1a:	4a7c      	ldr	r2, [pc, #496]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6713      	str	r3, [r2, #112]	; 0x70
 8003a22:	e01c      	b.n	8003a5e <HAL_RCC_OscConfig+0x32a>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	2b05      	cmp	r3, #5
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x312>
 8003a2c:	4b77      	ldr	r3, [pc, #476]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a30:	4a76      	ldr	r2, [pc, #472]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	6713      	str	r3, [r2, #112]	; 0x70
 8003a38:	4b74      	ldr	r3, [pc, #464]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3c:	4a73      	ldr	r2, [pc, #460]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	6713      	str	r3, [r2, #112]	; 0x70
 8003a44:	e00b      	b.n	8003a5e <HAL_RCC_OscConfig+0x32a>
 8003a46:	4b71      	ldr	r3, [pc, #452]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	4a70      	ldr	r2, [pc, #448]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
 8003a52:	4b6e      	ldr	r3, [pc, #440]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	4a6d      	ldr	r2, [pc, #436]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d015      	beq.n	8003a92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a66:	f7fd fa6d 	bl	8000f44 <HAL_GetTick>
 8003a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6c:	e00a      	b.n	8003a84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f7fd fa69 	bl	8000f44 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e0bc      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	4b61      	ldr	r3, [pc, #388]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ee      	beq.n	8003a6e <HAL_RCC_OscConfig+0x33a>
 8003a90:	e014      	b.n	8003abc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a92:	f7fd fa57 	bl	8000f44 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fd fa53 	bl	8000f44 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e0a6      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	4b56      	ldr	r3, [pc, #344]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ee      	bne.n	8003a9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d105      	bne.n	8003ace <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	4a51      	ldr	r2, [pc, #324]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003ac8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003acc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8092 	beq.w	8003bfc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad8:	4b4c      	ldr	r3, [pc, #304]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d05c      	beq.n	8003b9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d141      	bne.n	8003b70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aec:	4b48      	ldr	r3, [pc, #288]	; (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fd fa27 	bl	8000f44 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afa:	f7fd fa23 	bl	8000f44 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e078      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0c:	4b3f      	ldr	r3, [pc, #252]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	019b      	lsls	r3, r3, #6
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	3b01      	subs	r3, #1
 8003b32:	041b      	lsls	r3, r3, #16
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	4933      	ldr	r1, [pc, #204]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b42:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fd f9fc 	bl	8000f44 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fd f9f8 	bl	8000f44 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e04d      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b62:	4b2a      	ldr	r3, [pc, #168]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x41c>
 8003b6e:	e045      	b.n	8003bfc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b70:	4b27      	ldr	r3, [pc, #156]	; (8003c10 <HAL_RCC_OscConfig+0x4dc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fd f9e5 	bl	8000f44 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fd f9e1 	bl	8000f44 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e036      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b90:	4b1e      	ldr	r3, [pc, #120]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0x44a>
 8003b9c:	e02e      	b.n	8003bfc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e029      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <HAL_RCC_OscConfig+0x4d8>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d11c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d115      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d106      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	42470060 	.word	0x42470060

08003c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0cc      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c28:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 030f 	and.w	r3, r3, #15
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d90c      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b65      	ldr	r3, [pc, #404]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0b8      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4a58      	ldr	r2, [pc, #352]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c80:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a52      	ldr	r2, [pc, #328]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b50      	ldr	r3, [pc, #320]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	494d      	ldr	r1, [pc, #308]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d044      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d119      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e07f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d003      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd2:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e06f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e067      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf2:	4b37      	ldr	r3, [pc, #220]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f023 0203 	bic.w	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4934      	ldr	r1, [pc, #208]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d04:	f7fd f91e 	bl	8000f44 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0c:	f7fd f91a 	bl	8000f44 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e04f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 020c 	and.w	r2, r3, #12
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d1eb      	bne.n	8003d0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d34:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d20c      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e032      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4916      	ldr	r1, [pc, #88]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d86:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	490e      	ldr	r1, [pc, #56]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d9a:	f000 f821 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d9e:	4601      	mov	r1, r0
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_ClockConfig+0x1bc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	5cd3      	ldrb	r3, [r2, r3]
 8003dae:	fa21 f303 	lsr.w	r3, r1, r3
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd f87e 	bl	8000ebc <HAL_InitTick>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40023c00 	.word	0x40023c00
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	0800de38 	.word	0x0800de38
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	20000004 	.word	0x20000004

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df6:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d007      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x32>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d008      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x38>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 808d 	bne.w	8003f26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e0c:	4b4b      	ldr	r3, [pc, #300]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003e0e:	60bb      	str	r3, [r7, #8]
       break;
 8003e10:	e08c      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e12:	4b4b      	ldr	r3, [pc, #300]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e14:	60bb      	str	r3, [r7, #8]
      break;
 8003e16:	e089      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e18:	4b47      	ldr	r3, [pc, #284]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e22:	4b45      	ldr	r3, [pc, #276]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d023      	beq.n	8003e76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2e:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	099b      	lsrs	r3, r3, #6
 8003e34:	f04f 0400 	mov.w	r4, #0
 8003e38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	ea03 0501 	and.w	r5, r3, r1
 8003e44:	ea04 0602 	and.w	r6, r4, r2
 8003e48:	4a3d      	ldr	r2, [pc, #244]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e4a:	fb02 f106 	mul.w	r1, r2, r6
 8003e4e:	2200      	movs	r2, #0
 8003e50:	fb02 f205 	mul.w	r2, r2, r5
 8003e54:	440a      	add	r2, r1
 8003e56:	493a      	ldr	r1, [pc, #232]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003e58:	fba5 0101 	umull	r0, r1, r5, r1
 8003e5c:	1853      	adds	r3, r2, r1
 8003e5e:	4619      	mov	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f04f 0400 	mov.w	r4, #0
 8003e66:	461a      	mov	r2, r3
 8003e68:	4623      	mov	r3, r4
 8003e6a:	f7fc fa11 	bl	8000290 <__aeabi_uldivmod>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	460c      	mov	r4, r1
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e049      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e76:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	f04f 0400 	mov.w	r4, #0
 8003e80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	ea03 0501 	and.w	r5, r3, r1
 8003e8c:	ea04 0602 	and.w	r6, r4, r2
 8003e90:	4629      	mov	r1, r5
 8003e92:	4632      	mov	r2, r6
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	f04f 0400 	mov.w	r4, #0
 8003e9c:	0154      	lsls	r4, r2, #5
 8003e9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ea2:	014b      	lsls	r3, r1, #5
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4622      	mov	r2, r4
 8003ea8:	1b49      	subs	r1, r1, r5
 8003eaa:	eb62 0206 	sbc.w	r2, r2, r6
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	f04f 0400 	mov.w	r4, #0
 8003eb6:	0194      	lsls	r4, r2, #6
 8003eb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ebc:	018b      	lsls	r3, r1, #6
 8003ebe:	1a5b      	subs	r3, r3, r1
 8003ec0:	eb64 0402 	sbc.w	r4, r4, r2
 8003ec4:	f04f 0100 	mov.w	r1, #0
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	00e2      	lsls	r2, r4, #3
 8003ece:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ed2:	00d9      	lsls	r1, r3, #3
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	4614      	mov	r4, r2
 8003ed8:	195b      	adds	r3, r3, r5
 8003eda:	eb44 0406 	adc.w	r4, r4, r6
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	02a2      	lsls	r2, r4, #10
 8003ee8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003eec:	0299      	lsls	r1, r3, #10
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4614      	mov	r4, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f04f 0400 	mov.w	r4, #0
 8003efc:	461a      	mov	r2, r3
 8003efe:	4623      	mov	r3, r4
 8003f00:	f7fc f9c6 	bl	8000290 <__aeabi_uldivmod>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	0c1b      	lsrs	r3, r3, #16
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	3301      	adds	r3, #1
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f22:	60bb      	str	r3, [r7, #8]
      break;
 8003f24:	e002      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f26:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003f28:	60bb      	str	r3, [r7, #8]
      break;
 8003f2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	017d7840 	.word	0x017d7840

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000000 	.word	0x20000000

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4601      	mov	r1, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4a03      	ldr	r2, [pc, #12]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	0800de48 	.word	0x0800de48

08003f84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e01d      	b.n	8003fd2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7fc fe82 	bl	8000cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	f000 f8c0 	bl	8004148 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b084      	sub	sp, #16
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <HAL_TIM_ConfigClockSource+0x18>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e0a6      	b.n	8004140 <HAL_TIM_ConfigClockSource+0x166>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004010:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004018:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b40      	cmp	r3, #64	; 0x40
 8004028:	d067      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0x120>
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d80b      	bhi.n	8004046 <HAL_TIM_ConfigClockSource+0x6c>
 800402e:	2b10      	cmp	r3, #16
 8004030:	d073      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x140>
 8004032:	2b10      	cmp	r3, #16
 8004034:	d802      	bhi.n	800403c <HAL_TIM_ConfigClockSource+0x62>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d06f      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800403a:	e078      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800403c:	2b20      	cmp	r3, #32
 800403e:	d06c      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x140>
 8004040:	2b30      	cmp	r3, #48	; 0x30
 8004042:	d06a      	beq.n	800411a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004044:	e073      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004046:	2b70      	cmp	r3, #112	; 0x70
 8004048:	d00d      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x8c>
 800404a:	2b70      	cmp	r3, #112	; 0x70
 800404c:	d804      	bhi.n	8004058 <HAL_TIM_ConfigClockSource+0x7e>
 800404e:	2b50      	cmp	r3, #80	; 0x50
 8004050:	d033      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0xe0>
 8004052:	2b60      	cmp	r3, #96	; 0x60
 8004054:	d041      	beq.n	80040da <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004056:	e06a      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405c:	d066      	beq.n	800412c <HAL_TIM_ConfigClockSource+0x152>
 800405e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004062:	d017      	beq.n	8004094 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004064:	e063      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	f000 f961 	bl	800433c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004088:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	609a      	str	r2, [r3, #8]
      break;
 8004092:	e04c      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6899      	ldr	r1, [r3, #8]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f000 f94a 	bl	800433c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040b6:	609a      	str	r2, [r3, #8]
      break;
 80040b8:	e039      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f000 f8be 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2150      	movs	r1, #80	; 0x50
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f917 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 80040d8:	e029      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6859      	ldr	r1, [r3, #4]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f000 f8dd 	bl	80042a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2160      	movs	r1, #96	; 0x60
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 f907 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 80040f8:	e019      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6859      	ldr	r1, [r3, #4]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	461a      	mov	r2, r3
 8004108:	f000 f89e 	bl	8004248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2140      	movs	r1, #64	; 0x40
 8004112:	4618      	mov	r0, r3
 8004114:	f000 f8f7 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 8004118:	e009      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4619      	mov	r1, r3
 8004124:	4610      	mov	r0, r2
 8004126:	f000 f8ee 	bl	8004306 <TIM_ITRx_SetConfig>
      break;
 800412a:	e000      	b.n	800412e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800412c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a34      	ldr	r2, [pc, #208]	; (800422c <TIM_Base_SetConfig+0xe4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00f      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004166:	d00b      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a31      	ldr	r2, [pc, #196]	; (8004230 <TIM_Base_SetConfig+0xe8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d007      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a30      	ldr	r2, [pc, #192]	; (8004234 <TIM_Base_SetConfig+0xec>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d003      	beq.n	8004180 <TIM_Base_SetConfig+0x38>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a2f      	ldr	r2, [pc, #188]	; (8004238 <TIM_Base_SetConfig+0xf0>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d108      	bne.n	8004192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a25      	ldr	r2, [pc, #148]	; (800422c <TIM_Base_SetConfig+0xe4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d01b      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d017      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a22      	ldr	r2, [pc, #136]	; (8004230 <TIM_Base_SetConfig+0xe8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a21      	ldr	r2, [pc, #132]	; (8004234 <TIM_Base_SetConfig+0xec>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d00f      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a20      	ldr	r2, [pc, #128]	; (8004238 <TIM_Base_SetConfig+0xf0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00b      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1f      	ldr	r2, [pc, #124]	; (800423c <TIM_Base_SetConfig+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d007      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a1e      	ldr	r2, [pc, #120]	; (8004240 <TIM_Base_SetConfig+0xf8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d003      	beq.n	80041d2 <TIM_Base_SetConfig+0x8a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <TIM_Base_SetConfig+0xfc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d108      	bne.n	80041e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a08      	ldr	r2, [pc, #32]	; (800422c <TIM_Base_SetConfig+0xe4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d103      	bne.n	8004218 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	615a      	str	r2, [r3, #20]
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40010000 	.word	0x40010000
 8004230:	40000400 	.word	0x40000400
 8004234:	40000800 	.word	0x40000800
 8004238:	40000c00 	.word	0x40000c00
 800423c:	40014000 	.word	0x40014000
 8004240:	40014400 	.word	0x40014400
 8004244:	40014800 	.word	0x40014800

08004248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 030a 	bic.w	r3, r3, #10
 8004284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b087      	sub	sp, #28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	f023 0210 	bic.w	r2, r3, #16
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	031b      	lsls	r3, r3, #12
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004306:	b480      	push	{r7}
 8004308:	b085      	sub	sp, #20
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	f043 0307 	orr.w	r3, r3, #7
 8004328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	609a      	str	r2, [r3, #8]
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	021a      	lsls	r2, r3, #8
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	431a      	orrs	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	609a      	str	r2, [r3, #8]
}
 8004370:	bf00      	nop
 8004372:	371c      	adds	r7, #28
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004390:	2302      	movs	r3, #2
 8004392:	e050      	b.n	8004436 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d018      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d013      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a18      	ldr	r2, [pc, #96]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d00e      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a16      	ldr	r2, [pc, #88]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a15      	ldr	r2, [pc, #84]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a13      	ldr	r2, [pc, #76]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d10c      	bne.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004410:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	4313      	orrs	r3, r2
 800441a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40010000 	.word	0x40010000
 8004448:	40000400 	.word	0x40000400
 800444c:	40000800 	.word	0x40000800
 8004450:	40000c00 	.word	0x40000c00
 8004454:	40014000 	.word	0x40014000

08004458 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004458:	b084      	sub	sp, #16
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	f107 001c 	add.w	r0, r7, #28
 8004466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	2b01      	cmp	r3, #1
 800446e:	d122      	bne.n	80044b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f001 fac6 	bl	8005a3c <USB_CoreReset>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e01a      	b.n	80044ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 faba 	bl	8005a3c <USB_CoreReset>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
 80044de:	e005      	b.n	80044ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10b      	bne.n	800450a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f043 0206 	orr.w	r2, r3, #6
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004516:	b004      	add	sp, #16
 8004518:	4770      	bx	lr
	...

0800451c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	4613      	mov	r3, r2
 8004528:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d165      	bne.n	80045fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4a41      	ldr	r2, [pc, #260]	; (8004638 <USB_SetTurnaroundTime+0x11c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d906      	bls.n	8004546 <USB_SetTurnaroundTime+0x2a>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4a40      	ldr	r2, [pc, #256]	; (800463c <USB_SetTurnaroundTime+0x120>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d802      	bhi.n	8004546 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004540:	230f      	movs	r3, #15
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e062      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4a3c      	ldr	r2, [pc, #240]	; (800463c <USB_SetTurnaroundTime+0x120>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d906      	bls.n	800455c <USB_SetTurnaroundTime+0x40>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4a3b      	ldr	r2, [pc, #236]	; (8004640 <USB_SetTurnaroundTime+0x124>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d802      	bhi.n	800455c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004556:	230e      	movs	r3, #14
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	e057      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4a38      	ldr	r2, [pc, #224]	; (8004640 <USB_SetTurnaroundTime+0x124>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d906      	bls.n	8004572 <USB_SetTurnaroundTime+0x56>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4a37      	ldr	r2, [pc, #220]	; (8004644 <USB_SetTurnaroundTime+0x128>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d802      	bhi.n	8004572 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800456c:	230d      	movs	r3, #13
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e04c      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4a33      	ldr	r2, [pc, #204]	; (8004644 <USB_SetTurnaroundTime+0x128>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d906      	bls.n	8004588 <USB_SetTurnaroundTime+0x6c>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4a32      	ldr	r2, [pc, #200]	; (8004648 <USB_SetTurnaroundTime+0x12c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d802      	bhi.n	8004588 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004582:	230c      	movs	r3, #12
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e041      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a2f      	ldr	r2, [pc, #188]	; (8004648 <USB_SetTurnaroundTime+0x12c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d906      	bls.n	800459e <USB_SetTurnaroundTime+0x82>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4a2e      	ldr	r2, [pc, #184]	; (800464c <USB_SetTurnaroundTime+0x130>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d802      	bhi.n	800459e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004598:	230b      	movs	r3, #11
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e036      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a2a      	ldr	r2, [pc, #168]	; (800464c <USB_SetTurnaroundTime+0x130>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d906      	bls.n	80045b4 <USB_SetTurnaroundTime+0x98>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4a29      	ldr	r2, [pc, #164]	; (8004650 <USB_SetTurnaroundTime+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d802      	bhi.n	80045b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045ae:	230a      	movs	r3, #10
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e02b      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a26      	ldr	r2, [pc, #152]	; (8004650 <USB_SetTurnaroundTime+0x134>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d906      	bls.n	80045ca <USB_SetTurnaroundTime+0xae>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a25      	ldr	r2, [pc, #148]	; (8004654 <USB_SetTurnaroundTime+0x138>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d802      	bhi.n	80045ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045c4:	2309      	movs	r3, #9
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e020      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <USB_SetTurnaroundTime+0x138>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d906      	bls.n	80045e0 <USB_SetTurnaroundTime+0xc4>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4a20      	ldr	r2, [pc, #128]	; (8004658 <USB_SetTurnaroundTime+0x13c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d802      	bhi.n	80045e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045da:	2308      	movs	r3, #8
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e015      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <USB_SetTurnaroundTime+0x13c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d906      	bls.n	80045f6 <USB_SetTurnaroundTime+0xda>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a1c      	ldr	r2, [pc, #112]	; (800465c <USB_SetTurnaroundTime+0x140>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d802      	bhi.n	80045f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045f0:	2307      	movs	r3, #7
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e00a      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045f6:	2306      	movs	r3, #6
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e007      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004602:	2309      	movs	r3, #9
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e001      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004608:	2309      	movs	r3, #9
 800460a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	029b      	lsls	r3, r3, #10
 8004620:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	00d8acbf 	.word	0x00d8acbf
 800463c:	00e4e1bf 	.word	0x00e4e1bf
 8004640:	00f423ff 	.word	0x00f423ff
 8004644:	0106737f 	.word	0x0106737f
 8004648:	011a499f 	.word	0x011a499f
 800464c:	01312cff 	.word	0x01312cff
 8004650:	014ca43f 	.word	0x014ca43f
 8004654:	016e35ff 	.word	0x016e35ff
 8004658:	01a6ab1f 	.word	0x01a6ab1f
 800465c:	01e847ff 	.word	0x01e847ff

08004660 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f023 0201 	bic.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d106      	bne.n	80046d0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	60da      	str	r2, [r3, #12]
 80046ce:	e00b      	b.n	80046e8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	e001      	b.n	80046e8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e003      	b.n	80046f0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046e8:	2032      	movs	r0, #50	; 0x32
 80046ea:	f7fc fc37 	bl	8000f5c <HAL_Delay>

  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046f8:	b084      	sub	sp, #16
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b086      	sub	sp, #24
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
 8004702:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	e009      	b.n	800472c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	3340      	adds	r3, #64	; 0x40
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	2200      	movs	r2, #0
 8004724:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	3301      	adds	r3, #1
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b0e      	cmp	r3, #14
 8004730:	d9f2      	bls.n	8004718 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11c      	bne.n	8004772 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
 8004770:	e00b      	b.n	800478a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004776:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004790:	461a      	mov	r2, r3
 8004792:	2300      	movs	r3, #0
 8004794:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479c:	4619      	mov	r1, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047a4:	461a      	mov	r2, r3
 80047a6:	680b      	ldr	r3, [r1, #0]
 80047a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10c      	bne.n	80047ca <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d104      	bne.n	80047c0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047b6:	2100      	movs	r1, #0
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f949 	bl	8004a50 <USB_SetDevSpeed>
 80047be:	e008      	b.n	80047d2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80047c0:	2101      	movs	r1, #1
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f944 	bl	8004a50 <USB_SetDevSpeed>
 80047c8:	e003      	b.n	80047d2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047ca:	2103      	movs	r1, #3
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f93f 	bl	8004a50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047d2:	2110      	movs	r1, #16
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f8f3 	bl	80049c0 <USB_FlushTxFifo>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f911 	bl	8004a0c <USB_FlushRxFifo>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fa:	461a      	mov	r2, r3
 80047fc:	2300      	movs	r3, #0
 80047fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	461a      	mov	r2, r3
 8004808:	2300      	movs	r3, #0
 800480a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004812:	461a      	mov	r2, r3
 8004814:	2300      	movs	r3, #0
 8004816:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004818:	2300      	movs	r3, #0
 800481a:	613b      	str	r3, [r7, #16]
 800481c:	e043      	b.n	80048a6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	015a      	lsls	r2, r3, #5
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4413      	add	r3, r2
 8004826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004834:	d118      	bne.n	8004868 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	015a      	lsls	r2, r3, #5
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004848:	461a      	mov	r2, r3
 800484a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	e013      	b.n	800487a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485e:	461a      	mov	r2, r3
 8004860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e008      	b.n	800487a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	461a      	mov	r2, r3
 8004876:	2300      	movs	r3, #0
 8004878:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4413      	add	r3, r2
 8004882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004886:	461a      	mov	r2, r3
 8004888:	2300      	movs	r3, #0
 800488a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	461a      	mov	r2, r3
 800489a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800489e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	3301      	adds	r3, #1
 80048a4:	613b      	str	r3, [r7, #16]
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d3b7      	bcc.n	800481e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ae:	2300      	movs	r3, #0
 80048b0:	613b      	str	r3, [r7, #16]
 80048b2:	e043      	b.n	800493c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048ca:	d118      	bne.n	80048fe <USB_DevInit+0x206>
    {
      if (i == 0U)
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048de:	461a      	mov	r2, r3
 80048e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e013      	b.n	8004910 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048f4:	461a      	mov	r2, r3
 80048f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e008      	b.n	8004910 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490a:	461a      	mov	r2, r3
 800490c:	2300      	movs	r3, #0
 800490e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	461a      	mov	r2, r3
 800491e:	2300      	movs	r3, #0
 8004920:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	461a      	mov	r2, r3
 8004930:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004934:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3301      	adds	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	429a      	cmp	r2, r3
 8004942:	d3b7      	bcc.n	80048b4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004956:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004964:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	f043 0210 	orr.w	r2, r3, #16
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <USB_DevInit+0x2c4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f043 0208 	orr.w	r2, r3, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d107      	bne.n	80049ac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049a4:	f043 0304 	orr.w	r3, r3, #4
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049b8:	b004      	add	sp, #16
 80049ba:	4770      	bx	lr
 80049bc:	803c3800 	.word	0x803c3800

080049c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	019b      	lsls	r3, r3, #6
 80049d2:	f043 0220 	orr.w	r2, r3, #32
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <USB_FlushTxFifo+0x48>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d901      	bls.n	80049ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e006      	b.n	80049fa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0320 	and.w	r3, r3, #32
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d0f0      	beq.n	80049da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	00030d40 	.word	0x00030d40

08004a0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2210      	movs	r2, #16
 8004a1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3301      	adds	r3, #1
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a09      	ldr	r2, [pc, #36]	; (8004a4c <USB_FlushRxFifo+0x40>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e006      	b.n	8004a3e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d0f0      	beq.n	8004a1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	00030d40 	.word	0x00030d40

08004a50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a70:	4313      	orrs	r3, r2
 8004a72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b087      	sub	sp, #28
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 0306 	and.w	r3, r3, #6
 8004a9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
 8004aa6:	e00a      	b.n	8004abe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d002      	beq.n	8004ab4 <USB_GetDevSpeed+0x32>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d102      	bne.n	8004aba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	75fb      	strb	r3, [r7, #23]
 8004ab8:	e001      	b.n	8004abe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004aba:	230f      	movs	r3, #15
 8004abc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d13a      	bne.n	8004b5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	2101      	movs	r1, #1
 8004afa:	fa01 f303 	lsl.w	r3, r1, r3
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	68f9      	ldr	r1, [r7, #12]
 8004b02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	015a      	lsls	r2, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4413      	add	r3, r2
 8004b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d155      	bne.n	8004bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	78db      	ldrb	r3, [r3, #3]
 8004b3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	059b      	lsls	r3, r3, #22
 8004b42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b44:	4313      	orrs	r3, r2
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	e036      	b.n	8004bcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b64:	69da      	ldr	r2, [r3, #28]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	2101      	movs	r1, #1
 8004b70:	fa01 f303 	lsl.w	r3, r1, r3
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	68f9      	ldr	r1, [r7, #12]
 8004b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d11a      	bne.n	8004bcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	78db      	ldrb	r3, [r3, #3]
 8004bb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	0151      	lsls	r1, r2, #5
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	440a      	add	r2, r1
 8004bbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d161      	bne.n	8004cbc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0e:	d11f      	bne.n	8004c50 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	0151      	lsls	r1, r2, #5
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	440a      	add	r2, r1
 8004c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c2e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	0151      	lsls	r1, r2, #5
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	440a      	add	r2, r1
 8004c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	f003 030f 	and.w	r3, r3, #15
 8004c60:	2101      	movs	r1, #1
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	43db      	mvns	r3, r3
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c70:	4013      	ands	r3, r2
 8004c72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	f003 030f 	and.w	r3, r3, #15
 8004c84:	2101      	movs	r1, #1
 8004c86:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	68f9      	ldr	r1, [r7, #12]
 8004c90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c94:	4013      	ands	r3, r2
 8004c96:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	0159      	lsls	r1, r3, #5
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	440b      	add	r3, r1
 8004cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	4b35      	ldr	r3, [pc, #212]	; (8004d8c <USB_DeactivateEndpoint+0x1b0>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]
 8004cba:	e060      	b.n	8004d7e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd2:	d11f      	bne.n	8004d14 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cf2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	2101      	movs	r1, #1
 8004d26:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2a:	041b      	lsls	r3, r3, #16
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d34:	4013      	ands	r3, r2
 8004d36:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f003 030f 	and.w	r3, r3, #15
 8004d48:	2101      	movs	r1, #1
 8004d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4e:	041b      	lsls	r3, r3, #16
 8004d50:	43db      	mvns	r3, r3
 8004d52:	68f9      	ldr	r1, [r7, #12]
 8004d54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d58:	4013      	ands	r3, r2
 8004d5a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	0159      	lsls	r1, r3, #5
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	440b      	add	r3, r1
 8004d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d76:	4619      	mov	r1, r3
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <USB_DeactivateEndpoint+0x1b4>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	ec337800 	.word	0xec337800
 8004d90:	eff37800 	.word	0xeff37800

08004d94 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b08a      	sub	sp, #40	; 0x28
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	f040 815c 	bne.w	800506e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d132      	bne.n	8004e24 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1c:	0cdb      	lsrs	r3, r3, #19
 8004e1e:	04db      	lsls	r3, r3, #19
 8004e20:	6113      	str	r3, [r2, #16]
 8004e22:	e074      	b.n	8004f0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	0151      	lsls	r1, r2, #5
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	440a      	add	r2, r1
 8004e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3e:	0cdb      	lsrs	r3, r3, #19
 8004e40:	04db      	lsls	r3, r3, #19
 8004e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	0151      	lsls	r1, r2, #5
 8004e56:	69fa      	ldr	r2, [r7, #28]
 8004e58:	440a      	add	r2, r1
 8004e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	6959      	ldr	r1, [r3, #20]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	440b      	add	r3, r1
 8004e80:	1e59      	subs	r1, r3, #1
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e8a:	04d9      	lsls	r1, r3, #19
 8004e8c:	4b9d      	ldr	r3, [pc, #628]	; (8005104 <USB_EPStartXfer+0x370>)
 8004e8e:	400b      	ands	r3, r1
 8004e90:	69b9      	ldr	r1, [r7, #24]
 8004e92:	0148      	lsls	r0, r1, #5
 8004e94:	69f9      	ldr	r1, [r7, #28]
 8004e96:	4401      	add	r1, r0
 8004e98:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eb6:	69b9      	ldr	r1, [r7, #24]
 8004eb8:	0148      	lsls	r0, r1, #5
 8004eba:	69f9      	ldr	r1, [r7, #28]
 8004ebc:	4401      	add	r1, r0
 8004ebe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	78db      	ldrb	r3, [r3, #3]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d11f      	bne.n	8004f0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004eec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d14b      	bne.n	8004fac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	78db      	ldrb	r3, [r3, #3]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d128      	bne.n	8004f8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d110      	bne.n	8004f6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	e00f      	b.n	8004f8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fa8:	6013      	str	r3, [r2, #0]
 8004faa:	e12f      	b.n	800520c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	78db      	ldrb	r3, [r3, #3]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d015      	beq.n	8005000 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 8117 	beq.w	800520c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	2101      	movs	r1, #1
 8004ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff4:	69f9      	ldr	r1, [r7, #28]
 8004ff6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	634b      	str	r3, [r1, #52]	; 0x34
 8004ffe:	e105      	b.n	800520c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500c:	2b00      	cmp	r3, #0
 800500e:	d110      	bne.n	8005032 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	0151      	lsls	r1, r2, #5
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	440a      	add	r2, r1
 8005026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	e00f      	b.n	8005052 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	0151      	lsls	r1, r2, #5
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	440a      	add	r2, r1
 8005048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800504c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005050:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	68d9      	ldr	r1, [r3, #12]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	781a      	ldrb	r2, [r3, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	b298      	uxth	r0, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	9300      	str	r3, [sp, #0]
 8005064:	4603      	mov	r3, r0
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fa2b 	bl	80054c2 <USB_WritePacket>
 800506c:	e0ce      	b.n	800520c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005088:	0cdb      	lsrs	r3, r3, #19
 800508a:	04db      	lsls	r3, r3, #19
 800508c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d126      	bne.n	8005108 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	0148      	lsls	r0, r1, #5
 80050d4:	69f9      	ldr	r1, [r7, #28]
 80050d6:	4401      	add	r1, r0
 80050d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050dc:	4313      	orrs	r3, r2
 80050de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	0151      	lsls	r1, r2, #5
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	440a      	add	r2, r1
 80050f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050fe:	6113      	str	r3, [r2, #16]
 8005100:	e036      	b.n	8005170 <USB_EPStartXfer+0x3dc>
 8005102:	bf00      	nop
 8005104:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	695a      	ldr	r2, [r3, #20]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	4413      	add	r3, r2
 8005112:	1e5a      	subs	r2, r3, #1
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	fbb2 f3f3 	udiv	r3, r2, r3
 800511c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	8afb      	ldrh	r3, [r7, #22]
 800512e:	04d9      	lsls	r1, r3, #19
 8005130:	4b39      	ldr	r3, [pc, #228]	; (8005218 <USB_EPStartXfer+0x484>)
 8005132:	400b      	ands	r3, r1
 8005134:	69b9      	ldr	r1, [r7, #24]
 8005136:	0148      	lsls	r0, r1, #5
 8005138:	69f9      	ldr	r1, [r7, #28]
 800513a:	4401      	add	r1, r0
 800513c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005140:	4313      	orrs	r3, r2
 8005142:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	8af9      	ldrh	r1, [r7, #22]
 8005158:	fb01 f303 	mul.w	r3, r1, r3
 800515c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005160:	69b9      	ldr	r1, [r7, #24]
 8005162:	0148      	lsls	r0, r1, #5
 8005164:	69f9      	ldr	r1, [r7, #28]
 8005166:	4401      	add	r1, r0
 8005168:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800516c:	4313      	orrs	r3, r2
 800516e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d10d      	bne.n	8005192 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	68d9      	ldr	r1, [r3, #12]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518e:	460a      	mov	r2, r1
 8005190:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	78db      	ldrb	r3, [r3, #3]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d128      	bne.n	80051ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d110      	bne.n	80051cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	69fa      	ldr	r2, [r7, #28]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e00f      	b.n	80051ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69ba      	ldr	r2, [r7, #24]
 80051dc:	0151      	lsls	r1, r2, #5
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	440a      	add	r2, r1
 80051e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	69fa      	ldr	r2, [r7, #28]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005206:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800520a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	1ff80000 	.word	0x1ff80000

0800521c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	4613      	mov	r3, r2
 8005228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	785b      	ldrb	r3, [r3, #1]
 8005238:	2b01      	cmp	r3, #1
 800523a:	f040 80cd 	bne.w	80053d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	695b      	ldr	r3, [r3, #20]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d132      	bne.n	80052ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	440a      	add	r2, r1
 8005280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005288:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	0cdb      	lsrs	r3, r3, #19
 80052a6:	04db      	lsls	r3, r3, #19
 80052a8:	6113      	str	r3, [r2, #16]
 80052aa:	e04e      	b.n	800534a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c6:	0cdb      	lsrs	r3, r3, #19
 80052c8:	04db      	lsls	r3, r3, #19
 80052ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	0151      	lsls	r1, r2, #5
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	440a      	add	r2, r1
 80052e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	695a      	ldr	r2, [r3, #20]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d903      	bls.n	8005304 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005322:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	4413      	add	r3, r2
 800532c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	695b      	ldr	r3, [r3, #20]
 8005336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533a:	6939      	ldr	r1, [r7, #16]
 800533c:	0148      	lsls	r0, r1, #5
 800533e:	6979      	ldr	r1, [r7, #20]
 8005340:	4401      	add	r1, r0
 8005342:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005346:	4313      	orrs	r3, r2
 8005348:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d11e      	bne.n	800538e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d009      	beq.n	800536c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	461a      	mov	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	4413      	add	r3, r2
 8005374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005386:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	e092      	b.n	80054b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d07e      	beq.n	80054b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	2101      	movs	r1, #1
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	6979      	ldr	r1, [r7, #20]
 80053ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053d2:	4313      	orrs	r3, r2
 80053d4:	634b      	str	r3, [r1, #52]	; 0x34
 80053d6:	e06d      	b.n	80054b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053f2:	0cdb      	lsrs	r3, r3, #19
 80053f4:	04db      	lsls	r3, r3, #19
 80053f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	440a      	add	r2, r1
 800540e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005412:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005416:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800541a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d003      	beq.n	800542c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	0151      	lsls	r1, r2, #5
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	440a      	add	r2, r1
 8005442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005446:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800544a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	015a      	lsls	r2, r3, #5
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4413      	add	r3, r2
 8005454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005462:	6939      	ldr	r1, [r7, #16]
 8005464:	0148      	lsls	r0, r1, #5
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	4401      	add	r1, r0
 800546a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800546e:	4313      	orrs	r3, r2
 8005470:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005472:	79fb      	ldrb	r3, [r7, #7]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d10d      	bne.n	8005494 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68d9      	ldr	r1, [r3, #12]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	460a      	mov	r2, r1
 8005492:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	0151      	lsls	r1, r2, #5
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	440a      	add	r2, r1
 80054aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b089      	sub	sp, #36	; 0x24
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	4611      	mov	r1, r2
 80054ce:	461a      	mov	r2, r3
 80054d0:	460b      	mov	r3, r1
 80054d2:	71fb      	strb	r3, [r7, #7]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80054e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d11a      	bne.n	800551e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054e8:	88bb      	ldrh	r3, [r7, #4]
 80054ea:	3303      	adds	r3, #3
 80054ec:	089b      	lsrs	r3, r3, #2
 80054ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	61bb      	str	r3, [r7, #24]
 80054f4:	e00f      	b.n	8005516 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	031a      	lsls	r2, r3, #12
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005502:	461a      	mov	r2, r3
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6013      	str	r3, [r2, #0]
      pSrc++;
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3304      	adds	r3, #4
 800550e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	3301      	adds	r3, #1
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d3eb      	bcc.n	80054f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3724      	adds	r7, #36	; 0x24
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005542:	88fb      	ldrh	r3, [r7, #6]
 8005544:	3303      	adds	r3, #3
 8005546:	089b      	lsrs	r3, r3, #2
 8005548:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e00b      	b.n	8005568 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	601a      	str	r2, [r3, #0]
    pDest++;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	3304      	adds	r3, #4
 8005560:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	3301      	adds	r3, #1
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	429a      	cmp	r2, r3
 800556e:	d3ef      	bcc.n	8005550 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005570:	69fb      	ldr	r3, [r7, #28]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3724      	adds	r7, #36	; 0x24
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d12c      	bne.n	80055f4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	db12      	blt.n	80055d2 <USB_EPSetStall+0x54>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00f      	beq.n	80055d2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055d0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	015a      	lsls	r2, r3, #5
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4413      	add	r3, r2
 80055da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68ba      	ldr	r2, [r7, #8]
 80055e2:	0151      	lsls	r1, r2, #5
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	440a      	add	r2, r1
 80055e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	e02b      	b.n	800564c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	015a      	lsls	r2, r3, #5
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	db12      	blt.n	800562c <USB_EPSetStall+0xae>
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00f      	beq.n	800562c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005626:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800562a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	0151      	lsls	r1, r2, #5
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	440a      	add	r2, r1
 8005642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800564a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800565a:	b480      	push	{r7}
 800565c:	b085      	sub	sp, #20
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
 8005662:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d128      	bne.n	80056c8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005690:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005694:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	78db      	ldrb	r3, [r3, #3]
 800569a:	2b03      	cmp	r3, #3
 800569c:	d003      	beq.n	80056a6 <USB_EPClearStall+0x4c>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	78db      	ldrb	r3, [r3, #3]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d138      	bne.n	8005718 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	e027      	b.n	8005718 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	78db      	ldrb	r3, [r3, #3]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d003      	beq.n	80056f8 <USB_EPClearStall+0x9e>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	78db      	ldrb	r3, [r3, #3]
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d10f      	bne.n	8005718 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005716:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005726:	b480      	push	{r7}
 8005728:	b085      	sub	sp, #20
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005744:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005748:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800575a:	68f9      	ldr	r1, [r7, #12]
 800575c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005760:	4313      	orrs	r3, r2
 8005762:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800578c:	f023 0303 	bic.w	r3, r3, #3
 8005790:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057a0:	f023 0302 	bic.w	r3, r3, #2
 80057a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057ce:	f023 0303 	bic.w	r3, r3, #3
 80057d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e2:	f043 0302 	orr.w	r3, r3, #2
 80057e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b085      	sub	sp, #20
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4013      	ands	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	0c1b      	lsrs	r3, r3, #16
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	b29b      	uxth	r3, r3
}
 8005878:	4618      	mov	r0, r3
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	460b      	mov	r3, r1
 800588e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005894:	78fb      	ldrb	r3, [r7, #3]
 8005896:	015a      	lsls	r2, r3, #5
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	4413      	add	r3, r2
 800589c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058b2:	68bb      	ldr	r3, [r7, #8]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	460b      	mov	r3, r1
 80058ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	fa22 f303 	lsr.w	r3, r2, r3
 80058f0:	01db      	lsls	r3, r3, #7
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80058fa:	78fb      	ldrb	r3, [r7, #3]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4013      	ands	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800590e:	68bb      	ldr	r3, [r7, #8]
}
 8005910:	4618      	mov	r0, r3
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	f003 0301 	and.w	r3, r3, #1
}
 800592c:	4618      	mov	r0, r3
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005952:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005956:	f023 0307 	bic.w	r3, r3, #7
 800595a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800596a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800596e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	460b      	mov	r3, r1
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	333c      	adds	r3, #60	; 0x3c
 8005996:	3304      	adds	r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4a26      	ldr	r2, [pc, #152]	; (8005a38 <USB_EP0_OutStart+0xb8>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d90a      	bls.n	80059ba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059b4:	d101      	bne.n	80059ba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e037      	b.n	8005a2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c0:	461a      	mov	r2, r3
 80059c2:	2300      	movs	r3, #0
 80059c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e8:	f043 0318 	orr.w	r3, r3, #24
 80059ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059fc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a02:	7afb      	ldrb	r3, [r7, #11]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d10f      	bne.n	8005a28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	4f54300a 	.word	0x4f54300a

08005a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4a13      	ldr	r2, [pc, #76]	; (8005aa0 <USB_CoreReset+0x64>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e01b      	b.n	8005a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	daf2      	bge.n	8005a48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f043 0201 	orr.w	r2, r3, #1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3301      	adds	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4a09      	ldr	r2, [pc, #36]	; (8005aa0 <USB_CoreReset+0x64>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e006      	b.n	8005a92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d0f0      	beq.n	8005a72 <USB_CoreReset+0x36>

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	00030d40 	.word	0x00030d40

08005aa4 <mpu_get_data>:
int mpu_get_acel_config(uint16_t dev_addr, uint8_t *config){
	return HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, MPU_ACF, 1, config, 1, HAL_MAX_DELAY);
}


int mpu_get_data(uint16_t dev_addr, int16_t *x, int16_t *y, int16_t *z, int16_t *t, int16_t *a, int16_t *b, int16_t *g){
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08c      	sub	sp, #48	; 0x30
 8005aa8:	af04      	add	r7, sp, #16
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	81fb      	strh	r3, [r7, #14]
	uint8_t status = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	77fb      	strb	r3, [r7, #31]
	uint8_t d[14] = {0} ;
 8005ab8:	f107 0310 	add.w	r3, r7, #16
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	605a      	str	r2, [r3, #4]
 8005ac2:	609a      	str	r2, [r3, #8]
 8005ac4:	819a      	strh	r2, [r3, #12]
	status = HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, MPU_DAT, 1, d, 14, HAL_MAX_DELAY);
 8005ac6:	89fb      	ldrh	r3, [r7, #14]
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	b299      	uxth	r1, r3
 8005acc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ad0:	9302      	str	r3, [sp, #8]
 8005ad2:	230e      	movs	r3, #14
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	f107 0310 	add.w	r3, r7, #16
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	2301      	movs	r3, #1
 8005ade:	223b      	movs	r2, #59	; 0x3b
 8005ae0:	4824      	ldr	r0, [pc, #144]	; (8005b74 <mpu_get_data+0xd0>)
 8005ae2:	f7fb ff23 	bl	800192c <HAL_I2C_Mem_Read>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	77fb      	strb	r3, [r7, #31]
	*x = (uint16_t)d[0]<<8 | (uint16_t)d[1];
 8005aea:	7c3b      	ldrb	r3, [r7, #16]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	b21a      	sxth	r2, r3
 8005af0:	7c7b      	ldrb	r3, [r7, #17]
 8005af2:	b21b      	sxth	r3, r3
 8005af4:	4313      	orrs	r3, r2
 8005af6:	b21a      	sxth	r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	801a      	strh	r2, [r3, #0]
	*y = (uint16_t)d[2]<<8 | (uint16_t)d[3];
 8005afc:	7cbb      	ldrb	r3, [r7, #18]
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	b21a      	sxth	r2, r3
 8005b02:	7cfb      	ldrb	r3, [r7, #19]
 8005b04:	b21b      	sxth	r3, r3
 8005b06:	4313      	orrs	r3, r2
 8005b08:	b21a      	sxth	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	801a      	strh	r2, [r3, #0]
	*z = (uint16_t)d[4]<<8 | (uint16_t)d[5];
 8005b0e:	7d3b      	ldrb	r3, [r7, #20]
 8005b10:	021b      	lsls	r3, r3, #8
 8005b12:	b21a      	sxth	r2, r3
 8005b14:	7d7b      	ldrb	r3, [r7, #21]
 8005b16:	b21b      	sxth	r3, r3
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	b21a      	sxth	r2, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	801a      	strh	r2, [r3, #0]

	*t = (uint16_t)d[6]<<8 | (uint16_t)d[7];
 8005b20:	7dbb      	ldrb	r3, [r7, #22]
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	b21a      	sxth	r2, r3
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	b21b      	sxth	r3, r3
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b21a      	sxth	r2, r3
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	801a      	strh	r2, [r3, #0]

	*a = (uint16_t)d[8]<<8 | (uint16_t)d[9];
 8005b32:	7e3b      	ldrb	r3, [r7, #24]
 8005b34:	021b      	lsls	r3, r3, #8
 8005b36:	b21a      	sxth	r2, r3
 8005b38:	7e7b      	ldrb	r3, [r7, #25]
 8005b3a:	b21b      	sxth	r3, r3
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	b21a      	sxth	r2, r3
 8005b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b42:	801a      	strh	r2, [r3, #0]
	*b = (uint16_t)d[10]<<8 | (uint16_t)d[11];
 8005b44:	7ebb      	ldrb	r3, [r7, #26]
 8005b46:	021b      	lsls	r3, r3, #8
 8005b48:	b21a      	sxth	r2, r3
 8005b4a:	7efb      	ldrb	r3, [r7, #27]
 8005b4c:	b21b      	sxth	r3, r3
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	b21a      	sxth	r2, r3
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	801a      	strh	r2, [r3, #0]
	*g = (uint16_t)d[12]<<8 | (uint16_t)d[13];
 8005b56:	7f3b      	ldrb	r3, [r7, #28]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	b21a      	sxth	r2, r3
 8005b5c:	7f7b      	ldrb	r3, [r7, #29]
 8005b5e:	b21b      	sxth	r3, r3
 8005b60:	4313      	orrs	r3, r2
 8005b62:	b21a      	sxth	r2, r3
 8005b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b66:	801a      	strh	r2, [r3, #0]

	return status;
 8005b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200004d0 	.word	0x200004d0

08005b78 <mpu_pwr_mgmt>:

int mpu_pwr_mgmt(uint16_t dev_addr, uint8_t config1, uint8_t config2){
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af04      	add	r7, sp, #16
 8005b7e:	4603      	mov	r3, r0
 8005b80:	80fb      	strh	r3, [r7, #6]
 8005b82:	460b      	mov	r3, r1
 8005b84:	717b      	strb	r3, [r7, #5]
 8005b86:	4613      	mov	r3, r2
 8005b88:	713b      	strb	r3, [r7, #4]
	// bit4 - na
	// bit3 - set to 1 disable temperature sensor
	// bit2-0 - set clock, just have this set to 0
	// Register 2
	// Just set this byte to zero, or it will put everything in standby mode
	int status = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
	status = HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, MPU_PW1, 1, &config1, 1, HAL_MAX_DELAY);
 8005b8e:	88fb      	ldrh	r3, [r7, #6]
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	b299      	uxth	r1, r3
 8005b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b98:	9302      	str	r3, [sp, #8]
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	1d7b      	adds	r3, r7, #5
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	226b      	movs	r2, #107	; 0x6b
 8005ba6:	480e      	ldr	r0, [pc, #56]	; (8005be0 <mpu_pwr_mgmt+0x68>)
 8005ba8:	f7fb fdc6 	bl	8001738 <HAL_I2C_Mem_Write>
 8005bac:	4603      	mov	r3, r0
 8005bae:	60fb      	str	r3, [r7, #12]
	return status | HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, MPU_PW2, 1, &config2, 1, HAL_MAX_DELAY);
 8005bb0:	88fb      	ldrh	r3, [r7, #6]
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	b299      	uxth	r1, r3
 8005bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bba:	9302      	str	r3, [sp, #8]
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	9301      	str	r3, [sp, #4]
 8005bc0:	1d3b      	adds	r3, r7, #4
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	226c      	movs	r2, #108	; 0x6c
 8005bc8:	4805      	ldr	r0, [pc, #20]	; (8005be0 <mpu_pwr_mgmt+0x68>)
 8005bca:	f7fb fdb5 	bl	8001738 <HAL_I2C_Mem_Write>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
	return status;
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	200004d0 	.word	0x200004d0

08005be4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	460b      	mov	r3, r1
 8005bee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bf4:	f007 f9ee 	bl	800cfd4 <malloc>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d105      	bne.n	8005c0e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e066      	b.n	8005cdc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7c1b      	ldrb	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d119      	bne.n	8005c52 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c22:	2202      	movs	r2, #2
 8005c24:	2181      	movs	r1, #129	; 0x81
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f001 ff97 	bl	8007b5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c36:	2202      	movs	r2, #2
 8005c38:	2101      	movs	r1, #1
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f001 ff8d 	bl	8007b5a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005c50:	e016      	b.n	8005c80 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005c52:	2340      	movs	r3, #64	; 0x40
 8005c54:	2202      	movs	r2, #2
 8005c56:	2181      	movs	r1, #129	; 0x81
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 ff7e 	bl	8007b5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005c64:	2340      	movs	r3, #64	; 0x40
 8005c66:	2202      	movs	r2, #2
 8005c68:	2101      	movs	r1, #1
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f001 ff75 	bl	8007b5a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005c80:	2308      	movs	r3, #8
 8005c82:	2203      	movs	r2, #3
 8005c84:	2182      	movs	r1, #130	; 0x82
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f001 ff67 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7c1b      	ldrb	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f002 f838 	bl	8007d38 <USBD_LL_PrepareReceive>
 8005cc8:	e007      	b.n	8005cda <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cd0:	2340      	movs	r3, #64	; 0x40
 8005cd2:	2101      	movs	r1, #1
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f002 f82f 	bl	8007d38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	460b      	mov	r3, r1
 8005cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005cf4:	2181      	movs	r1, #129	; 0x81
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 ff55 	bl	8007ba6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005d02:	2101      	movs	r1, #1
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f001 ff4e 	bl	8007ba6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005d12:	2182      	movs	r1, #130	; 0x82
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 ff46 	bl	8007ba6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00e      	beq.n	8005d52 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d44:	4618      	mov	r0, r3
 8005d46:	f007 f94d 	bl	800cfe4 <free>
    pdev->pClassData = NULL;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3710      	adds	r7, #16
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005d6c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d03a      	beq.n	8005dfc <USBD_CDC_Setup+0xa0>
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	f040 8097 	bne.w	8005eba <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	88db      	ldrh	r3, [r3, #6]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d029      	beq.n	8005de8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	b25b      	sxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	da11      	bge.n	8005dc2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005daa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	88d2      	ldrh	r2, [r2, #6]
 8005db0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005db2:	6939      	ldr	r1, [r7, #16]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	88db      	ldrh	r3, [r3, #6]
 8005db8:	461a      	mov	r2, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 fa9d 	bl	80072fa <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005dc0:	e082      	b.n	8005ec8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	785a      	ldrb	r2, [r3, #1]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	88db      	ldrh	r3, [r3, #6]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005dd8:	6939      	ldr	r1, [r7, #16]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	88db      	ldrh	r3, [r3, #6]
 8005dde:	461a      	mov	r2, r3
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 fab6 	bl	8007352 <USBD_CtlPrepareRx>
    break;
 8005de6:	e06f      	b.n	8005ec8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	7850      	ldrb	r0, [r2, #1]
 8005df4:	2200      	movs	r2, #0
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	4798      	blx	r3
    break;
 8005dfa:	e065      	b.n	8005ec8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	785b      	ldrb	r3, [r3, #1]
 8005e00:	2b0b      	cmp	r3, #11
 8005e02:	d84f      	bhi.n	8005ea4 <USBD_CDC_Setup+0x148>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <USBD_CDC_Setup+0xb0>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e3d 	.word	0x08005e3d
 8005e10:	08005eb3 	.word	0x08005eb3
 8005e14:	08005ea5 	.word	0x08005ea5
 8005e18:	08005ea5 	.word	0x08005ea5
 8005e1c:	08005ea5 	.word	0x08005ea5
 8005e20:	08005ea5 	.word	0x08005ea5
 8005e24:	08005ea5 	.word	0x08005ea5
 8005e28:	08005ea5 	.word	0x08005ea5
 8005e2c:	08005ea5 	.word	0x08005ea5
 8005e30:	08005ea5 	.word	0x08005ea5
 8005e34:	08005e65 	.word	0x08005e65
 8005e38:	08005e8d 	.word	0x08005e8d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d107      	bne.n	8005e56 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f001 fa53 	bl	80072fa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e54:	e030      	b.n	8005eb8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 f9dd 	bl	8007218 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	75fb      	strb	r3, [r7, #23]
      break;
 8005e62:	e029      	b.n	8005eb8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d107      	bne.n	8005e7e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e6e:	f107 030f 	add.w	r3, r7, #15
 8005e72:	2201      	movs	r2, #1
 8005e74:	4619      	mov	r1, r3
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f001 fa3f 	bl	80072fa <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005e7c:	e01c      	b.n	8005eb8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f001 f9c9 	bl	8007218 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e86:	2303      	movs	r3, #3
 8005e88:	75fb      	strb	r3, [r7, #23]
      break;
 8005e8a:	e015      	b.n	8005eb8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d00f      	beq.n	8005eb6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f001 f9bd 	bl	8007218 <USBD_CtlError>
        ret = USBD_FAIL;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005ea2:	e008      	b.n	8005eb6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8005ea4:	6839      	ldr	r1, [r7, #0]
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f001 f9b6 	bl	8007218 <USBD_CtlError>
      ret = USBD_FAIL;
 8005eac:	2303      	movs	r3, #3
 8005eae:	75fb      	strb	r3, [r7, #23]
      break;
 8005eb0:	e002      	b.n	8005eb8 <USBD_CDC_Setup+0x15c>
      break;
 8005eb2:	bf00      	nop
 8005eb4:	e008      	b.n	8005ec8 <USBD_CDC_Setup+0x16c>
      break;
 8005eb6:	bf00      	nop
    }
    break;
 8005eb8:	e006      	b.n	8005ec8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8005eba:	6839      	ldr	r1, [r7, #0]
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 f9ab 	bl	8007218 <USBD_CtlError>
    ret = USBD_FAIL;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	75fb      	strb	r3, [r7, #23]
    break;
 8005ec6:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop

08005ed4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005ee6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e049      	b.n	8005f8a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005efc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005efe:	78fa      	ldrb	r2, [r7, #3]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	4613      	mov	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	440b      	add	r3, r1
 8005f0c:	3318      	adds	r3, #24
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d029      	beq.n	8005f68 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3318      	adds	r3, #24
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	78f9      	ldrb	r1, [r7, #3]
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	1a5b      	subs	r3, r3, r1
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4403      	add	r3, r0
 8005f34:	3344      	adds	r3, #68	; 0x44
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	fbb2 f1f3 	udiv	r1, r2, r3
 8005f3c:	fb03 f301 	mul.w	r3, r3, r1
 8005f40:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d110      	bne.n	8005f68 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4413      	add	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	3318      	adds	r3, #24
 8005f56:	2200      	movs	r2, #0
 8005f58:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f5a:	78f9      	ldrb	r1, [r7, #3]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	2200      	movs	r2, #0
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f001 fec8 	bl	8007cf6 <USBD_LL_Transmit>
 8005f66:	e00f      	b.n	8005f88 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f84:	78fa      	ldrb	r2, [r7, #3]
 8005f86:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3710      	adds	r7, #16
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fa4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e015      	b.n	8005fe0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 fede 	bl	8007d7a <USBD_LL_GetRxDataSize>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ff6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d015      	beq.n	800602e <USBD_CDC_EP0_RxReady+0x46>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006008:	2bff      	cmp	r3, #255	; 0xff
 800600a:	d010      	beq.n	800602e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800601a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006022:	b292      	uxth	r2, r2
 8006024:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	22ff      	movs	r2, #255	; 0xff
 800602a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2243      	movs	r2, #67	; 0x43
 8006044:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006046:	4b03      	ldr	r3, [pc, #12]	; (8006054 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr
 8006054:	20000094 	.word	0x20000094

08006058 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2243      	movs	r2, #67	; 0x43
 8006064:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006066:	4b03      	ldr	r3, [pc, #12]	; (8006074 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr
 8006074:	20000050 	.word	0x20000050

08006078 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2243      	movs	r2, #67	; 0x43
 8006084:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006086:	4b03      	ldr	r3, [pc, #12]	; (8006094 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	200000d8 	.word	0x200000d8

08006098 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	220a      	movs	r2, #10
 80060a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80060a6:	4b03      	ldr	r3, [pc, #12]	; (80060b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	2000000c 	.word	0x2000000c

080060b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e004      	b.n	80060d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	370c      	adds	r7, #12
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b087      	sub	sp, #28
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060f4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	371c      	adds	r7, #28
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006124:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800612e:	2300      	movs	r3, #0
}
 8006130:	4618      	mov	r0, r3
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800614a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800615a:	2303      	movs	r3, #3
 800615c:	e01a      	b.n	8006194 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006164:	2b00      	cmp	r3, #0
 8006166:	d114      	bne.n	8006192 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2201      	movs	r2, #1
 800616c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006186:	2181      	movs	r1, #129	; 0x81
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fdb4 	bl	8007cf6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006192:	7bfb      	ldrb	r3, [r7, #15]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e016      	b.n	80061e8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	7c1b      	ldrb	r3, [r3, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061cc:	2101      	movs	r1, #1
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 fdb2 	bl	8007d38 <USBD_LL_PrepareReceive>
 80061d4:	e007      	b.n	80061e6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061dc:	2340      	movs	r3, #64	; 0x40
 80061de:	2101      	movs	r1, #1
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 fda9 	bl	8007d38 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4613      	mov	r3, r2
 80061fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006204:	2303      	movs	r3, #3
 8006206:	e025      	b.n	8006254 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	79fa      	ldrb	r2, [r7, #7]
 8006246:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f001 fc1f 	bl	8007a8c <USBD_LL_Init>
 800624e:	4603      	mov	r3, r0
 8006250:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006252:	7dfb      	ldrb	r3, [r7, #23]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	e010      	b.n	8006296 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	f107 020e 	add.w	r2, r7, #14
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
 800628c:	4602      	mov	r2, r0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b082      	sub	sp, #8
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fc3c 	bl	8007b24 <USBD_LL_Start>
 80062ac:	4603      	mov	r3, r0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	460b      	mov	r3, r1
 80062d6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	78fa      	ldrb	r2, [r7, #3]
 80062f0:	4611      	mov	r1, r2
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
 80062f6:	4603      	mov	r3, r0
 80062f8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	460b      	mov	r3, r1
 800630e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d007      	beq.n	800632a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	78fa      	ldrb	r2, [r7, #3]
 8006324:	4611      	mov	r1, r2
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
  }

  return USBD_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f000 ff2c 	bl	80071a4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	2b01      	cmp	r3, #1
 800636e:	d00e      	beq.n	800638e <USBD_LL_SetupStage+0x5a>
 8006370:	2b01      	cmp	r3, #1
 8006372:	d302      	bcc.n	800637a <USBD_LL_SetupStage+0x46>
 8006374:	2b02      	cmp	r3, #2
 8006376:	d014      	beq.n	80063a2 <USBD_LL_SetupStage+0x6e>
 8006378:	e01d      	b.n	80063b6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fa18 	bl	80067b8 <USBD_StdDevReq>
 8006388:	4603      	mov	r3, r0
 800638a:	73fb      	strb	r3, [r7, #15]
      break;
 800638c:	e020      	b.n	80063d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006394:	4619      	mov	r1, r3
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa7c 	bl	8006894 <USBD_StdItfReq>
 800639c:	4603      	mov	r3, r0
 800639e:	73fb      	strb	r3, [r7, #15]
      break;
 80063a0:	e016      	b.n	80063d0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063a8:	4619      	mov	r1, r3
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fab8 	bl	8006920 <USBD_StdEPReq>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]
      break;
 80063b4:	e00c      	b.n	80063d0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 fc0d 	bl	8007be4 <USBD_LL_StallEP>
 80063ca:	4603      	mov	r3, r0
 80063cc:	73fb      	strb	r3, [r7, #15]
      break;
 80063ce:	bf00      	nop
  }

  return ret;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b086      	sub	sp, #24
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	460b      	mov	r3, r1
 80063e4:	607a      	str	r2, [r7, #4]
 80063e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80063e8:	7afb      	ldrb	r3, [r7, #11]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d137      	bne.n	800645e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063f4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d14a      	bne.n	8006496 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	429a      	cmp	r2, r3
 800640a:	d913      	bls.n	8006434 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	4293      	cmp	r3, r2
 8006424:	bf28      	it	cs
 8006426:	4613      	movcs	r3, r2
 8006428:	461a      	mov	r2, r3
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f000 ffad 	bl	800738c <USBD_CtlContinueRx>
 8006432:	e030      	b.n	8006496 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006446:	2b03      	cmp	r3, #3
 8006448:	d105      	bne.n	8006456 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 ffa9 	bl	80073ae <USBD_CtlSendStatus>
 800645c:	e01b      	b.n	8006496 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d013      	beq.n	8006492 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006470:	2b03      	cmp	r3, #3
 8006472:	d10e      	bne.n	8006492 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	7afa      	ldrb	r2, [r7, #11]
 800647e:	4611      	mov	r1, r2
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	4798      	blx	r3
 8006484:	4603      	mov	r3, r0
 8006486:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006488:	7dfb      	ldrb	r3, [r7, #23]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
 8006490:	e002      	b.n	8006498 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006492:	2303      	movs	r3, #3
 8006494:	e000      	b.n	8006498 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3718      	adds	r7, #24
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	460b      	mov	r3, r1
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80064ae:	7afb      	ldrb	r3, [r7, #11]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d16a      	bne.n	800658a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	3314      	adds	r3, #20
 80064b8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d155      	bne.n	8006570 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	689a      	ldr	r2, [r3, #8]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d914      	bls.n	80064fa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	1ad2      	subs	r2, r2, r3
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	461a      	mov	r2, r3
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 ff22 	bl	8007330 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064ec:	2300      	movs	r3, #0
 80064ee:	2200      	movs	r2, #0
 80064f0:	2100      	movs	r1, #0
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f001 fc20 	bl	8007d38 <USBD_LL_PrepareReceive>
 80064f8:	e03a      	b.n	8006570 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	429a      	cmp	r2, r3
 8006504:	d11c      	bne.n	8006540 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800650e:	429a      	cmp	r2, r3
 8006510:	d316      	bcc.n	8006540 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800651c:	429a      	cmp	r2, r3
 800651e:	d20f      	bcs.n	8006540 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006520:	2200      	movs	r2, #0
 8006522:	2100      	movs	r1, #0
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 ff03 	bl	8007330 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006532:	2300      	movs	r3, #0
 8006534:	2200      	movs	r2, #0
 8006536:	2100      	movs	r1, #0
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f001 fbfd 	bl	8007d38 <USBD_LL_PrepareReceive>
 800653e:	e017      	b.n	8006570 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00a      	beq.n	8006562 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006552:	2b03      	cmp	r3, #3
 8006554:	d105      	bne.n	8006562 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006562:	2180      	movs	r1, #128	; 0x80
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f001 fb3d 	bl	8007be4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f000 ff32 	bl	80073d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006576:	2b01      	cmp	r3, #1
 8006578:	d123      	bne.n	80065c2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff fe9b 	bl	80062b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006588:	e01b      	b.n	80065c2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d013      	beq.n	80065be <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800659c:	2b03      	cmp	r3, #3
 800659e:	d10e      	bne.n	80065be <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	7afa      	ldrb	r2, [r7, #11]
 80065aa:	4611      	mov	r1, r2
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	4798      	blx	r3
 80065b0:	4603      	mov	r3, r0
 80065b2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	e002      	b.n	80065c4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065be:	2303      	movs	r3, #3
 80065c0:	e000      	b.n	80065c4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d009      	beq.n	8006610 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6852      	ldr	r2, [r2, #4]
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	4611      	mov	r1, r2
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006610:	2340      	movs	r3, #64	; 0x40
 8006612:	2200      	movs	r2, #0
 8006614:	2100      	movs	r1, #0
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f001 fa9f 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2240      	movs	r2, #64	; 0x40
 8006628:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	2200      	movs	r2, #0
 8006630:	2180      	movs	r1, #128	; 0x80
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fa91 	bl	8007b5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2240      	movs	r2, #64	; 0x40
 8006642:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	78fa      	ldrb	r2, [r7, #3]
 800665e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	370c      	adds	r7, #12
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2204      	movs	r2, #4
 8006686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d105      	bne.n	80066b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	2b03      	cmp	r3, #3
 80066d4:	d10b      	bne.n	80066ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d005      	beq.n	80066ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6852      	ldr	r2, [r2, #4]
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	4611      	mov	r1, r2
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	4798      	blx	r3
  }

  return USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800677a:	b480      	push	{r7}
 800677c:	b087      	sub	sp, #28
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	3301      	adds	r3, #1
 8006790:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006798:	8a3b      	ldrh	r3, [r7, #16]
 800679a:	021b      	lsls	r3, r3, #8
 800679c:	b21a      	sxth	r2, r3
 800679e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	b21b      	sxth	r3, r3
 80067a6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80067a8:	89fb      	ldrh	r3, [r7, #14]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	371c      	adds	r7, #28
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
	...

080067b8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d004      	beq.n	80067dc <USBD_StdDevReq+0x24>
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d002      	beq.n	80067dc <USBD_StdDevReq+0x24>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <USBD_StdDevReq+0x38>
 80067da:	e050      	b.n	800687e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]
    break;
 80067ee:	e04b      	b.n	8006888 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	785b      	ldrb	r3, [r3, #1]
 80067f4:	2b09      	cmp	r3, #9
 80067f6:	d83c      	bhi.n	8006872 <USBD_StdDevReq+0xba>
 80067f8:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <USBD_StdDevReq+0x48>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	08006855 	.word	0x08006855
 8006804:	08006869 	.word	0x08006869
 8006808:	08006873 	.word	0x08006873
 800680c:	0800685f 	.word	0x0800685f
 8006810:	08006873 	.word	0x08006873
 8006814:	08006833 	.word	0x08006833
 8006818:	08006829 	.word	0x08006829
 800681c:	08006873 	.word	0x08006873
 8006820:	0800684b 	.word	0x0800684b
 8006824:	0800683d 	.word	0x0800683d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006828:	6839      	ldr	r1, [r7, #0]
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f9ce 	bl	8006bcc <USBD_GetDescriptor>
      break;
 8006830:	e024      	b.n	800687c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fb33 	bl	8006ea0 <USBD_SetAddress>
      break;
 800683a:	e01f      	b.n	800687c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800683c:	6839      	ldr	r1, [r7, #0]
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fb70 	bl	8006f24 <USBD_SetConfig>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
      break;
 8006848:	e018      	b.n	800687c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800684a:	6839      	ldr	r1, [r7, #0]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fc0d 	bl	800706c <USBD_GetConfig>
      break;
 8006852:	e013      	b.n	800687c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006854:	6839      	ldr	r1, [r7, #0]
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fc3c 	bl	80070d4 <USBD_GetStatus>
      break;
 800685c:	e00e      	b.n	800687c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800685e:	6839      	ldr	r1, [r7, #0]
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fc6a 	bl	800713a <USBD_SetFeature>
      break;
 8006866:	e009      	b.n	800687c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fc79 	bl	8007162 <USBD_ClrFeature>
      break;
 8006870:	e004      	b.n	800687c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fccf 	bl	8007218 <USBD_CtlError>
      break;
 800687a:	bf00      	nop
    }
    break;
 800687c:	e004      	b.n	8006888 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fcc9 	bl	8007218 <USBD_CtlError>
    break;
 8006886:	bf00      	nop
  }

  return ret;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop

08006894 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d003      	beq.n	80068b6 <USBD_StdItfReq+0x22>
 80068ae:	2b40      	cmp	r3, #64	; 0x40
 80068b0:	d001      	beq.n	80068b6 <USBD_StdItfReq+0x22>
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d12a      	bne.n	800690c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068bc:	3b01      	subs	r3, #1
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d81d      	bhi.n	80068fe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	889b      	ldrh	r3, [r3, #4]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d813      	bhi.n	80068f4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	6839      	ldr	r1, [r7, #0]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
 80068da:	4603      	mov	r3, r0
 80068dc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	88db      	ldrh	r3, [r3, #6]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d110      	bne.n	8006908 <USBD_StdItfReq+0x74>
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10d      	bne.n	8006908 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fd5e 	bl	80073ae <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80068f2:	e009      	b.n	8006908 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fc8e 	bl	8007218 <USBD_CtlError>
      break;
 80068fc:	e004      	b.n	8006908 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fc89 	bl	8007218 <USBD_CtlError>
      break;
 8006906:	e000      	b.n	800690a <USBD_StdItfReq+0x76>
      break;
 8006908:	bf00      	nop
    }
    break;
 800690a:	e004      	b.n	8006916 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fc82 	bl	8007218 <USBD_CtlError>
    break;
 8006914:	bf00      	nop
  }

  return ret;
 8006916:	7bfb      	ldrb	r3, [r7, #15]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	889b      	ldrh	r3, [r3, #4]
 8006932:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800693c:	2b20      	cmp	r3, #32
 800693e:	d004      	beq.n	800694a <USBD_StdEPReq+0x2a>
 8006940:	2b40      	cmp	r3, #64	; 0x40
 8006942:	d002      	beq.n	800694a <USBD_StdEPReq+0x2a>
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <USBD_StdEPReq+0x3e>
 8006948:	e135      	b.n	8006bb6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
    break;
 800695c:	e130      	b.n	8006bc0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	785b      	ldrb	r3, [r3, #1]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d03e      	beq.n	80069e4 <USBD_StdEPReq+0xc4>
 8006966:	2b03      	cmp	r3, #3
 8006968:	d002      	beq.n	8006970 <USBD_StdEPReq+0x50>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d077      	beq.n	8006a5e <USBD_StdEPReq+0x13e>
 800696e:	e11c      	b.n	8006baa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006976:	2b02      	cmp	r3, #2
 8006978:	d002      	beq.n	8006980 <USBD_StdEPReq+0x60>
 800697a:	2b03      	cmp	r3, #3
 800697c:	d015      	beq.n	80069aa <USBD_StdEPReq+0x8a>
 800697e:	e02b      	b.n	80069d8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006980:	7bbb      	ldrb	r3, [r7, #14]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00c      	beq.n	80069a0 <USBD_StdEPReq+0x80>
 8006986:	7bbb      	ldrb	r3, [r7, #14]
 8006988:	2b80      	cmp	r3, #128	; 0x80
 800698a:	d009      	beq.n	80069a0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 f927 	bl	8007be4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006996:	2180      	movs	r1, #128	; 0x80
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 f923 	bl	8007be4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800699e:	e020      	b.n	80069e2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fc38 	bl	8007218 <USBD_CtlError>
        break;
 80069a8:	e01b      	b.n	80069e2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	885b      	ldrh	r3, [r3, #2]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10e      	bne.n	80069d0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80069b2:	7bbb      	ldrb	r3, [r7, #14]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <USBD_StdEPReq+0xb0>
 80069b8:	7bbb      	ldrb	r3, [r7, #14]
 80069ba:	2b80      	cmp	r3, #128	; 0x80
 80069bc:	d008      	beq.n	80069d0 <USBD_StdEPReq+0xb0>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	88db      	ldrh	r3, [r3, #6]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 f90a 	bl	8007be4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fcec 	bl	80073ae <USBD_CtlSendStatus>

        break;
 80069d6:	e004      	b.n	80069e2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fc1c 	bl	8007218 <USBD_CtlError>
        break;
 80069e0:	bf00      	nop
      }
      break;
 80069e2:	e0e7      	b.n	8006bb4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d002      	beq.n	80069f4 <USBD_StdEPReq+0xd4>
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d015      	beq.n	8006a1e <USBD_StdEPReq+0xfe>
 80069f2:	e02d      	b.n	8006a50 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <USBD_StdEPReq+0xf4>
 80069fa:	7bbb      	ldrb	r3, [r7, #14]
 80069fc:	2b80      	cmp	r3, #128	; 0x80
 80069fe:	d009      	beq.n	8006a14 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a00:	7bbb      	ldrb	r3, [r7, #14]
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 f8ed 	bl	8007be4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a0a:	2180      	movs	r1, #128	; 0x80
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 f8e9 	bl	8007be4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006a12:	e023      	b.n	8006a5c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fbfe 	bl	8007218 <USBD_CtlError>
        break;
 8006a1c:	e01e      	b.n	8006a5c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d119      	bne.n	8006a5a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006a26:	7bbb      	ldrb	r3, [r7, #14]
 8006a28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006a30:	7bbb      	ldrb	r3, [r7, #14]
 8006a32:	4619      	mov	r1, r3
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f001 f8f4 	bl	8007c22 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fcb7 	bl	80073ae <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
        }
        break;
 8006a4e:	e004      	b.n	8006a5a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fbe0 	bl	8007218 <USBD_CtlError>
        break;
 8006a58:	e000      	b.n	8006a5c <USBD_StdEPReq+0x13c>
        break;
 8006a5a:	bf00      	nop
      }
      break;
 8006a5c:	e0aa      	b.n	8006bb4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d002      	beq.n	8006a6e <USBD_StdEPReq+0x14e>
 8006a68:	2b03      	cmp	r3, #3
 8006a6a:	d032      	beq.n	8006ad2 <USBD_StdEPReq+0x1b2>
 8006a6c:	e097      	b.n	8006b9e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a6e:	7bbb      	ldrb	r3, [r7, #14]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <USBD_StdEPReq+0x164>
 8006a74:	7bbb      	ldrb	r3, [r7, #14]
 8006a76:	2b80      	cmp	r3, #128	; 0x80
 8006a78:	d004      	beq.n	8006a84 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fbcb 	bl	8007218 <USBD_CtlError>
          break;
 8006a82:	e091      	b.n	8006ba8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	da0b      	bge.n	8006aa4 <USBD_StdEPReq+0x184>
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a92:	4613      	mov	r3, r2
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	3310      	adds	r3, #16
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	e00b      	b.n	8006abc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006aa4:	7bbb      	ldrb	r3, [r7, #14]
 8006aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006aaa:	4613      	mov	r3, r2
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4413      	add	r3, r2
 8006aba:	3304      	adds	r3, #4
 8006abc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fc15 	bl	80072fa <USBD_CtlSendData>
        break;
 8006ad0:	e06a      	b.n	8006ba8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006ad2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	da11      	bge.n	8006afe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	f003 020f 	and.w	r2, r3, #15
 8006ae0:	6879      	ldr	r1, [r7, #4]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	009b      	lsls	r3, r3, #2
 8006ae6:	4413      	add	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	440b      	add	r3, r1
 8006aec:	3324      	adds	r3, #36	; 0x24
 8006aee:	881b      	ldrh	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d117      	bne.n	8006b24 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fb8e 	bl	8007218 <USBD_CtlError>
            break;
 8006afc:	e054      	b.n	8006ba8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006afe:	7bbb      	ldrb	r3, [r7, #14]
 8006b00:	f003 020f 	and.w	r2, r3, #15
 8006b04:	6879      	ldr	r1, [r7, #4]
 8006b06:	4613      	mov	r3, r2
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	440b      	add	r3, r1
 8006b10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 fb7b 	bl	8007218 <USBD_CtlError>
            break;
 8006b22:	e041      	b.n	8006ba8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	da0b      	bge.n	8006b44 <USBD_StdEPReq+0x224>
 8006b2c:	7bbb      	ldrb	r3, [r7, #14]
 8006b2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	3310      	adds	r3, #16
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	4413      	add	r3, r2
 8006b40:	3304      	adds	r3, #4
 8006b42:	e00b      	b.n	8006b5c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	4413      	add	r3, r2
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <USBD_StdEPReq+0x24a>
 8006b64:	7bbb      	ldrb	r3, [r7, #14]
 8006b66:	2b80      	cmp	r3, #128	; 0x80
 8006b68:	d103      	bne.n	8006b72 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	601a      	str	r2, [r3, #0]
 8006b70:	e00e      	b.n	8006b90 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 f872 	bl	8007c60 <USBD_LL_IsStallEP>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d003      	beq.n	8006b8a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2201      	movs	r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e002      	b.n	8006b90 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2202      	movs	r2, #2
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fbaf 	bl	80072fa <USBD_CtlSendData>
          break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fb39 	bl	8007218 <USBD_CtlError>
        break;
 8006ba6:	bf00      	nop
      }
      break;
 8006ba8:	e004      	b.n	8006bb4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006baa:	6839      	ldr	r1, [r7, #0]
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fb33 	bl	8007218 <USBD_CtlError>
      break;
 8006bb2:	bf00      	nop
    }
    break;
 8006bb4:	e004      	b.n	8006bc0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fb2d 	bl	8007218 <USBD_CtlError>
    break;
 8006bbe:	bf00      	nop
  }

  return ret;
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	885b      	ldrh	r3, [r3, #2]
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	3b01      	subs	r3, #1
 8006bec:	2b06      	cmp	r3, #6
 8006bee:	f200 8128 	bhi.w	8006e42 <USBD_GetDescriptor+0x276>
 8006bf2:	a201      	add	r2, pc, #4	; (adr r2, 8006bf8 <USBD_GetDescriptor+0x2c>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c15 	.word	0x08006c15
 8006bfc:	08006c2d 	.word	0x08006c2d
 8006c00:	08006c6d 	.word	0x08006c6d
 8006c04:	08006e43 	.word	0x08006e43
 8006c08:	08006e43 	.word	0x08006e43
 8006c0c:	08006de3 	.word	0x08006de3
 8006c10:	08006e0f 	.word	0x08006e0f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	7c12      	ldrb	r2, [r2, #16]
 8006c20:	f107 0108 	add.w	r1, r7, #8
 8006c24:	4610      	mov	r0, r2
 8006c26:	4798      	blx	r3
 8006c28:	60f8      	str	r0, [r7, #12]
    break;
 8006c2a:	e112      	b.n	8006e52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	7c1b      	ldrb	r3, [r3, #16]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10d      	bne.n	8006c50 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	f107 0208 	add.w	r2, r7, #8
 8006c40:	4610      	mov	r0, r2
 8006c42:	4798      	blx	r3
 8006c44:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006c4e:	e100      	b.n	8006e52 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f107 0208 	add.w	r2, r7, #8
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	4798      	blx	r3
 8006c60:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	2202      	movs	r2, #2
 8006c68:	701a      	strb	r2, [r3, #0]
    break;
 8006c6a:	e0f2      	b.n	8006e52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	885b      	ldrh	r3, [r3, #2]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	2b05      	cmp	r3, #5
 8006c74:	f200 80ac 	bhi.w	8006dd0 <USBD_GetDescriptor+0x204>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <USBD_GetDescriptor+0xb4>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006c99 	.word	0x08006c99
 8006c84:	08006ccd 	.word	0x08006ccd
 8006c88:	08006d01 	.word	0x08006d01
 8006c8c:	08006d35 	.word	0x08006d35
 8006c90:	08006d69 	.word	0x08006d69
 8006c94:	08006d9d 	.word	0x08006d9d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00b      	beq.n	8006cbc <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	7c12      	ldrb	r2, [r2, #16]
 8006cb0:	f107 0108 	add.w	r1, r7, #8
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4798      	blx	r3
 8006cb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cba:	e091      	b.n	8006de0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 faaa 	bl	8007218 <USBD_CtlError>
        err++;
 8006cc4:	7afb      	ldrb	r3, [r7, #11]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	72fb      	strb	r3, [r7, #11]
      break;
 8006cca:	e089      	b.n	8006de0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00b      	beq.n	8006cf0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	7c12      	ldrb	r2, [r2, #16]
 8006ce4:	f107 0108 	add.w	r1, r7, #8
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
 8006cec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006cee:	e077      	b.n	8006de0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fa90 	bl	8007218 <USBD_CtlError>
        err++;
 8006cf8:	7afb      	ldrb	r3, [r7, #11]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	72fb      	strb	r3, [r7, #11]
      break;
 8006cfe:	e06f      	b.n	8006de0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	687a      	ldr	r2, [r7, #4]
 8006d16:	7c12      	ldrb	r2, [r2, #16]
 8006d18:	f107 0108 	add.w	r1, r7, #8
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
 8006d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d22:	e05d      	b.n	8006de0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d24:	6839      	ldr	r1, [r7, #0]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fa76 	bl	8007218 <USBD_CtlError>
        err++;
 8006d2c:	7afb      	ldrb	r3, [r7, #11]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	72fb      	strb	r3, [r7, #11]
      break;
 8006d32:	e055      	b.n	8006de0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	7c12      	ldrb	r2, [r2, #16]
 8006d4c:	f107 0108 	add.w	r1, r7, #8
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
 8006d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d56:	e043      	b.n	8006de0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fa5c 	bl	8007218 <USBD_CtlError>
        err++;
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	3301      	adds	r3, #1
 8006d64:	72fb      	strb	r3, [r7, #11]
      break;
 8006d66:	e03b      	b.n	8006de0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	7c12      	ldrb	r2, [r2, #16]
 8006d80:	f107 0108 	add.w	r1, r7, #8
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d8a:	e029      	b.n	8006de0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fa42 	bl	8007218 <USBD_CtlError>
        err++;
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	3301      	adds	r3, #1
 8006d98:	72fb      	strb	r3, [r7, #11]
      break;
 8006d9a:	e021      	b.n	8006de0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	7c12      	ldrb	r2, [r2, #16]
 8006db4:	f107 0108 	add.w	r1, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dbe:	e00f      	b.n	8006de0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006dc0:	6839      	ldr	r1, [r7, #0]
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fa28 	bl	8007218 <USBD_CtlError>
        err++;
 8006dc8:	7afb      	ldrb	r3, [r7, #11]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	72fb      	strb	r3, [r7, #11]
      break;
 8006dce:	e007      	b.n	8006de0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa20 	bl	8007218 <USBD_CtlError>
      err++;
 8006dd8:	7afb      	ldrb	r3, [r7, #11]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006dde:	bf00      	nop
    }
    break;
 8006de0:	e037      	b.n	8006e52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	7c1b      	ldrb	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d109      	bne.n	8006dfe <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df2:	f107 0208 	add.w	r2, r7, #8
 8006df6:	4610      	mov	r0, r2
 8006df8:	4798      	blx	r3
 8006dfa:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006dfc:	e029      	b.n	8006e52 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 fa09 	bl	8007218 <USBD_CtlError>
      err++;
 8006e06:	7afb      	ldrb	r3, [r7, #11]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	72fb      	strb	r3, [r7, #11]
    break;
 8006e0c:	e021      	b.n	8006e52 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	7c1b      	ldrb	r3, [r3, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10d      	bne.n	8006e32 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e1e:	f107 0208 	add.w	r2, r7, #8
 8006e22:	4610      	mov	r0, r2
 8006e24:	4798      	blx	r3
 8006e26:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	2207      	movs	r2, #7
 8006e2e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006e30:	e00f      	b.n	8006e52 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f9ef 	bl	8007218 <USBD_CtlError>
      err++;
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	72fb      	strb	r3, [r7, #11]
    break;
 8006e40:	e007      	b.n	8006e52 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006e42:	6839      	ldr	r1, [r7, #0]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f9e7 	bl	8007218 <USBD_CtlError>
    err++;
 8006e4a:	7afb      	ldrb	r3, [r7, #11]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	72fb      	strb	r3, [r7, #11]
    break;
 8006e50:	bf00      	nop
  }

  if (err != 0U)
 8006e52:	7afb      	ldrb	r3, [r7, #11]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d11e      	bne.n	8006e96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	88db      	ldrh	r3, [r3, #6]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d016      	beq.n	8006e8e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8006e60:	893b      	ldrh	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00e      	beq.n	8006e84 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	88da      	ldrh	r2, [r3, #6]
 8006e6a:	893b      	ldrh	r3, [r7, #8]
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	bf28      	it	cs
 8006e70:	4613      	movcs	r3, r2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e76:	893b      	ldrh	r3, [r7, #8]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fa3c 	bl	80072fa <USBD_CtlSendData>
 8006e82:	e009      	b.n	8006e98 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f9c6 	bl	8007218 <USBD_CtlError>
 8006e8c:	e004      	b.n	8006e98 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa8d 	bl	80073ae <USBD_CtlSendStatus>
 8006e94:	e000      	b.n	8006e98 <USBD_GetDescriptor+0x2cc>
    return;
 8006e96:	bf00      	nop
    }
  }
}
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop

08006ea0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	889b      	ldrh	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d130      	bne.n	8006f14 <USBD_SetAddress+0x74>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	88db      	ldrh	r3, [r3, #6]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d12c      	bne.n	8006f14 <USBD_SetAddress+0x74>
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	885b      	ldrh	r3, [r3, #2]
 8006ebe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec0:	d828      	bhi.n	8006f14 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	885b      	ldrh	r3, [r3, #2]
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ecc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d104      	bne.n	8006ee2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f99c 	bl	8007218 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ee0:	e01c      	b.n	8006f1c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7bfa      	ldrb	r2, [r7, #15]
 8006ee6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fee2 	bl	8007cb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fa5a 	bl	80073ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f08:	e008      	b.n	8006f1c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f12:	e003      	b.n	8006f1c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f97e 	bl	8007218 <USBD_CtlError>
  }
}
 8006f1c:	bf00      	nop
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	885b      	ldrh	r3, [r3, #2]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	4b4b      	ldr	r3, [pc, #300]	; (8007068 <USBD_SetConfig+0x144>)
 8006f3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006f3c:	4b4a      	ldr	r3, [pc, #296]	; (8007068 <USBD_SetConfig+0x144>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d905      	bls.n	8006f50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f966 	bl	8007218 <USBD_CtlError>
    return USBD_FAIL;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e087      	b.n	8007060 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d002      	beq.n	8006f60 <USBD_SetConfig+0x3c>
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d025      	beq.n	8006faa <USBD_SetConfig+0x86>
 8006f5e:	e071      	b.n	8007044 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8006f60:	4b41      	ldr	r3, [pc, #260]	; (8007068 <USBD_SetConfig+0x144>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01c      	beq.n	8006fa2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8006f68:	4b3f      	ldr	r3, [pc, #252]	; (8007068 <USBD_SetConfig+0x144>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f72:	4b3d      	ldr	r3, [pc, #244]	; (8007068 <USBD_SetConfig+0x144>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff f9a7 	bl	80062cc <USBD_SetClassConfig>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f944 	bl	8007218 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006f90:	e065      	b.n	800705e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa0b 	bl	80073ae <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006fa0:	e05d      	b.n	800705e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa03 	bl	80073ae <USBD_CtlSendStatus>
    break;
 8006fa8:	e059      	b.n	800705e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8006faa:	4b2f      	ldr	r3, [pc, #188]	; (8007068 <USBD_SetConfig+0x144>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d112      	bne.n	8006fd8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8006fba:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <USBD_SetConfig+0x144>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006fc4:	4b28      	ldr	r3, [pc, #160]	; (8007068 <USBD_SetConfig+0x144>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff f99a 	bl	8006304 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f9ec 	bl	80073ae <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8006fd6:	e042      	b.n	800705e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8006fd8:	4b23      	ldr	r3, [pc, #140]	; (8007068 <USBD_SetConfig+0x144>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d02a      	beq.n	800703c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	4619      	mov	r1, r3
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7ff f988 	bl	8006304 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8006ff4:	4b1c      	ldr	r3, [pc, #112]	; (8007068 <USBD_SetConfig+0x144>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ffe:	4b1a      	ldr	r3, [pc, #104]	; (8007068 <USBD_SetConfig+0x144>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff f961 	bl	80062cc <USBD_SetClassConfig>
 800700a:	4603      	mov	r3, r0
 800700c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800700e:	7bfb      	ldrb	r3, [r7, #15]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00f      	beq.n	8007034 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f8fe 	bl	8007218 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	b2db      	uxtb	r3, r3
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff f96d 	bl	8006304 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007032:	e014      	b.n	800705e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f9ba 	bl	80073ae <USBD_CtlSendStatus>
    break;
 800703a:	e010      	b.n	800705e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f9b6 	bl	80073ae <USBD_CtlSendStatus>
    break;
 8007042:	e00c      	b.n	800705e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007044:	6839      	ldr	r1, [r7, #0]
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f8e6 	bl	8007218 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800704c:	4b06      	ldr	r3, [pc, #24]	; (8007068 <USBD_SetConfig+0x144>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff f956 	bl	8006304 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007058:	2303      	movs	r3, #3
 800705a:	73fb      	strb	r3, [r7, #15]
    break;
 800705c:	bf00      	nop
  }

  return ret;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200004c0 	.word	0x200004c0

0800706c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	88db      	ldrh	r3, [r3, #6]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d004      	beq.n	8007088 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800707e:	6839      	ldr	r1, [r7, #0]
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 f8c9 	bl	8007218 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007086:	e021      	b.n	80070cc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800708e:	2b01      	cmp	r3, #1
 8007090:	db17      	blt.n	80070c2 <USBD_GetConfig+0x56>
 8007092:	2b02      	cmp	r3, #2
 8007094:	dd02      	ble.n	800709c <USBD_GetConfig+0x30>
 8007096:	2b03      	cmp	r3, #3
 8007098:	d00b      	beq.n	80070b2 <USBD_GetConfig+0x46>
 800709a:	e012      	b.n	80070c2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3308      	adds	r3, #8
 80070a6:	2201      	movs	r2, #1
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f925 	bl	80072fa <USBD_CtlSendData>
      break;
 80070b0:	e00c      	b.n	80070cc <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	3304      	adds	r3, #4
 80070b6:	2201      	movs	r2, #1
 80070b8:	4619      	mov	r1, r3
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f91d 	bl	80072fa <USBD_CtlSendData>
      break;
 80070c0:	e004      	b.n	80070cc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f8a7 	bl	8007218 <USBD_CtlError>
      break;
 80070ca:	bf00      	nop
}
 80070cc:	bf00      	nop
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e4:	3b01      	subs	r3, #1
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d81e      	bhi.n	8007128 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	88db      	ldrh	r3, [r3, #6]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d004      	beq.n	80070fc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f88f 	bl	8007218 <USBD_CtlError>
      break;
 80070fa:	e01a      	b.n	8007132 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007108:	2b00      	cmp	r3, #0
 800710a:	d005      	beq.n	8007118 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f043 0202 	orr.w	r2, r3, #2
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	330c      	adds	r3, #12
 800711c:	2202      	movs	r2, #2
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f8ea 	bl	80072fa <USBD_CtlSendData>
    break;
 8007126:	e004      	b.n	8007132 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8007128:	6839      	ldr	r1, [r7, #0]
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f874 	bl	8007218 <USBD_CtlError>
    break;
 8007130:	bf00      	nop
  }
}
 8007132:	bf00      	nop
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b082      	sub	sp, #8
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	885b      	ldrh	r3, [r3, #2]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d106      	bne.n	800715a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f92a 	bl	80073ae <USBD_CtlSendStatus>
  }
}
 800715a:	bf00      	nop
 800715c:	3708      	adds	r7, #8
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007162:	b580      	push	{r7, lr}
 8007164:	b082      	sub	sp, #8
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007172:	3b01      	subs	r3, #1
 8007174:	2b02      	cmp	r3, #2
 8007176:	d80b      	bhi.n	8007190 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	885b      	ldrh	r3, [r3, #2]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d10c      	bne.n	800719a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 f910 	bl	80073ae <USBD_CtlSendStatus>
      }
      break;
 800718e:	e004      	b.n	800719a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f840 	bl	8007218 <USBD_CtlError>
      break;
 8007198:	e000      	b.n	800719c <USBD_ClrFeature+0x3a>
      break;
 800719a:	bf00      	nop
  }
}
 800719c:	bf00      	nop
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	781a      	ldrb	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	781a      	ldrb	r2, [r3, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fad3 	bl	800677a <SWAPBYTE>
 80071d4:	4603      	mov	r3, r0
 80071d6:	461a      	mov	r2, r3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f7ff fac6 	bl	800677a <SWAPBYTE>
 80071ee:	4603      	mov	r3, r0
 80071f0:	461a      	mov	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3301      	adds	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f7ff fab9 	bl	800677a <SWAPBYTE>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	80da      	strh	r2, [r3, #6]
}
 8007210:	bf00      	nop
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007222:	2180      	movs	r1, #128	; 0x80
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fcdd 	bl	8007be4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800722a:	2100      	movs	r1, #0
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 fcd9 	bl	8007be4 <USBD_LL_StallEP>
}
 8007232:	bf00      	nop
 8007234:	3708      	adds	r7, #8
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800723a:	b580      	push	{r7, lr}
 800723c:	b086      	sub	sp, #24
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d036      	beq.n	80072be <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007254:	6938      	ldr	r0, [r7, #16]
 8007256:	f000 f836 	bl	80072c6 <USBD_GetLen>
 800725a:	4603      	mov	r3, r0
 800725c:	3301      	adds	r3, #1
 800725e:	b29b      	uxth	r3, r3
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	b29a      	uxth	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	4413      	add	r3, r2
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	701a      	strb	r2, [r3, #0]
  idx++;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	3301      	adds	r3, #1
 8007278:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	4413      	add	r3, r2
 8007280:	2203      	movs	r2, #3
 8007282:	701a      	strb	r2, [r3, #0]
  idx++;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	3301      	adds	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800728a:	e013      	b.n	80072b4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	4413      	add	r3, r2
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	7812      	ldrb	r2, [r2, #0]
 8007296:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3301      	adds	r3, #1
 800729c:	613b      	str	r3, [r7, #16]
    idx++;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	3301      	adds	r3, #1
 80072a2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	4413      	add	r3, r2
 80072aa:	2200      	movs	r2, #0
 80072ac:	701a      	strb	r2, [r3, #0]
    idx++;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	3301      	adds	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1e7      	bne.n	800728c <USBD_GetString+0x52>
 80072bc:	e000      	b.n	80072c0 <USBD_GetString+0x86>
    return;
 80072be:	bf00      	nop
  }
}
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072d6:	e005      	b.n	80072e4 <USBD_GetLen+0x1e>
  {
    len++;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	3301      	adds	r3, #1
 80072dc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3301      	adds	r3, #1
 80072e2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f5      	bne.n	80072d8 <USBD_GetLen+0x12>
  }

  return len;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b084      	sub	sp, #16
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	60b9      	str	r1, [r7, #8]
 8007304:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2202      	movs	r2, #2
 800730a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	2100      	movs	r1, #0
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 fce8 	bl	8007cf6 <USBD_LL_Transmit>

  return USBD_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	2100      	movs	r1, #0
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 fcd7 	bl	8007cf6 <USBD_LL_Transmit>

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2203      	movs	r2, #3
 8007362:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	2100      	movs	r1, #0
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fcdb 	bl	8007d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	2100      	movs	r1, #0
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f000 fcca 	bl	8007d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2204      	movs	r2, #4
 80073ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073be:	2300      	movs	r3, #0
 80073c0:	2200      	movs	r2, #0
 80073c2:	2100      	movs	r1, #0
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fc96 	bl	8007cf6 <USBD_LL_Transmit>

  return USBD_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2205      	movs	r2, #5
 80073e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073e4:	2300      	movs	r3, #0
 80073e6:	2200      	movs	r2, #0
 80073e8:	2100      	movs	r1, #0
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fca4 	bl	8007d38 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
	...

080073fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007400:	2200      	movs	r2, #0
 8007402:	4912      	ldr	r1, [pc, #72]	; (800744c <MX_USB_DEVICE_Init+0x50>)
 8007404:	4812      	ldr	r0, [pc, #72]	; (8007450 <MX_USB_DEVICE_Init+0x54>)
 8007406:	f7fe fef3 	bl	80061f0 <USBD_Init>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007410:	f7f9 fbdc 	bl	8000bcc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007414:	490f      	ldr	r1, [pc, #60]	; (8007454 <MX_USB_DEVICE_Init+0x58>)
 8007416:	480e      	ldr	r0, [pc, #56]	; (8007450 <MX_USB_DEVICE_Init+0x54>)
 8007418:	f7fe ff20 	bl	800625c <USBD_RegisterClass>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007422:	f7f9 fbd3 	bl	8000bcc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007426:	490c      	ldr	r1, [pc, #48]	; (8007458 <MX_USB_DEVICE_Init+0x5c>)
 8007428:	4809      	ldr	r0, [pc, #36]	; (8007450 <MX_USB_DEVICE_Init+0x54>)
 800742a:	f7fe fe45 	bl	80060b8 <USBD_CDC_RegisterInterface>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007434:	f7f9 fbca 	bl	8000bcc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007438:	4805      	ldr	r0, [pc, #20]	; (8007450 <MX_USB_DEVICE_Init+0x54>)
 800743a:	f7fe ff30 	bl	800629e <USBD_Start>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007444:	f7f9 fbc2 	bl	8000bcc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007448:	bf00      	nop
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20000130 	.word	0x20000130
 8007450:	200009b8 	.word	0x200009b8
 8007454:	20000018 	.word	0x20000018
 8007458:	2000011c 	.word	0x2000011c

0800745c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007460:	2200      	movs	r2, #0
 8007462:	4905      	ldr	r1, [pc, #20]	; (8007478 <CDC_Init_FS+0x1c>)
 8007464:	4805      	ldr	r0, [pc, #20]	; (800747c <CDC_Init_FS+0x20>)
 8007466:	f7fe fe3c 	bl	80060e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800746a:	4905      	ldr	r1, [pc, #20]	; (8007480 <CDC_Init_FS+0x24>)
 800746c:	4803      	ldr	r0, [pc, #12]	; (800747c <CDC_Init_FS+0x20>)
 800746e:	f7fe fe51 	bl	8006114 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007472:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007474:	4618      	mov	r0, r3
 8007476:	bd80      	pop	{r7, pc}
 8007478:	2000148c 	.word	0x2000148c
 800747c:	200009b8 	.word	0x200009b8
 8007480:	20000c8c 	.word	0x20000c8c

08007484 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007488:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800748a:	4618      	mov	r0, r3
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
 80074a0:	4613      	mov	r3, r2
 80074a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	2b23      	cmp	r3, #35	; 0x23
 80074a8:	d84a      	bhi.n	8007540 <CDC_Control_FS+0xac>
 80074aa:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <CDC_Control_FS+0x1c>)
 80074ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b0:	08007541 	.word	0x08007541
 80074b4:	08007541 	.word	0x08007541
 80074b8:	08007541 	.word	0x08007541
 80074bc:	08007541 	.word	0x08007541
 80074c0:	08007541 	.word	0x08007541
 80074c4:	08007541 	.word	0x08007541
 80074c8:	08007541 	.word	0x08007541
 80074cc:	08007541 	.word	0x08007541
 80074d0:	08007541 	.word	0x08007541
 80074d4:	08007541 	.word	0x08007541
 80074d8:	08007541 	.word	0x08007541
 80074dc:	08007541 	.word	0x08007541
 80074e0:	08007541 	.word	0x08007541
 80074e4:	08007541 	.word	0x08007541
 80074e8:	08007541 	.word	0x08007541
 80074ec:	08007541 	.word	0x08007541
 80074f0:	08007541 	.word	0x08007541
 80074f4:	08007541 	.word	0x08007541
 80074f8:	08007541 	.word	0x08007541
 80074fc:	08007541 	.word	0x08007541
 8007500:	08007541 	.word	0x08007541
 8007504:	08007541 	.word	0x08007541
 8007508:	08007541 	.word	0x08007541
 800750c:	08007541 	.word	0x08007541
 8007510:	08007541 	.word	0x08007541
 8007514:	08007541 	.word	0x08007541
 8007518:	08007541 	.word	0x08007541
 800751c:	08007541 	.word	0x08007541
 8007520:	08007541 	.word	0x08007541
 8007524:	08007541 	.word	0x08007541
 8007528:	08007541 	.word	0x08007541
 800752c:	08007541 	.word	0x08007541
 8007530:	08007541 	.word	0x08007541
 8007534:	08007541 	.word	0x08007541
 8007538:	08007541 	.word	0x08007541
 800753c:	08007541 	.word	0x08007541
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007540:	bf00      	nop
  }

  return (USBD_OK);
 8007542:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007544:	4618      	mov	r0, r3
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (Buf[0] == 'n')
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b6e      	cmp	r3, #110	; 0x6e
 8007560:	d102      	bne.n	8007568 <CDC_Receive_FS+0x18>
	  Status = 0;
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <CDC_Receive_FS+0x30>)
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007568:	6879      	ldr	r1, [r7, #4]
 800756a:	4806      	ldr	r0, [pc, #24]	; (8007584 <CDC_Receive_FS+0x34>)
 800756c:	f7fe fdd2 	bl	8006114 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007570:	4804      	ldr	r0, [pc, #16]	; (8007584 <CDC_Receive_FS+0x34>)
 8007572:	f7fe fe13 	bl	800619c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007576:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007578:	4618      	mov	r0, r3
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20000c88 	.word	0x20000c88
 8007584:	200009b8 	.word	0x200009b8

08007588 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007594:	2300      	movs	r3, #0
 8007596:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007598:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <CDC_Transmit_FS+0x48>)
 800759a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800759e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e00b      	b.n	80075c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80075ae:	887b      	ldrh	r3, [r7, #2]
 80075b0:	461a      	mov	r2, r3
 80075b2:	6879      	ldr	r1, [r7, #4]
 80075b4:	4806      	ldr	r0, [pc, #24]	; (80075d0 <CDC_Transmit_FS+0x48>)
 80075b6:	f7fe fd94 	bl	80060e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80075ba:	4805      	ldr	r0, [pc, #20]	; (80075d0 <CDC_Transmit_FS+0x48>)
 80075bc:	f7fe fdbe 	bl	800613c <USBD_CDC_TransmitPacket>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	200009b8 	.word	0x200009b8

080075d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	4613      	mov	r3, r2
 80075e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
	...

080075f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	6039      	str	r1, [r7, #0]
 8007602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2212      	movs	r2, #18
 8007608:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800760a:	4b03      	ldr	r3, [pc, #12]	; (8007618 <USBD_FS_DeviceDescriptor+0x20>)
}
 800760c:	4618      	mov	r0, r3
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	2000014c 	.word	0x2000014c

0800761c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2204      	movs	r2, #4
 800762c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800762e:	4b03      	ldr	r3, [pc, #12]	; (800763c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	20000160 	.word	0x20000160

08007640 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	6039      	str	r1, [r7, #0]
 800764a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d105      	bne.n	800765e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	4907      	ldr	r1, [pc, #28]	; (8007674 <USBD_FS_ProductStrDescriptor+0x34>)
 8007656:	4808      	ldr	r0, [pc, #32]	; (8007678 <USBD_FS_ProductStrDescriptor+0x38>)
 8007658:	f7ff fdef 	bl	800723a <USBD_GetString>
 800765c:	e004      	b.n	8007668 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	4904      	ldr	r1, [pc, #16]	; (8007674 <USBD_FS_ProductStrDescriptor+0x34>)
 8007662:	4805      	ldr	r0, [pc, #20]	; (8007678 <USBD_FS_ProductStrDescriptor+0x38>)
 8007664:	f7ff fde9 	bl	800723a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007668:	4b02      	ldr	r3, [pc, #8]	; (8007674 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	20001c8c 	.word	0x20001c8c
 8007678:	0800d94c 	.word	0x0800d94c

0800767c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	6039      	str	r1, [r7, #0]
 8007686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	4904      	ldr	r1, [pc, #16]	; (800769c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800768c:	4804      	ldr	r0, [pc, #16]	; (80076a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800768e:	f7ff fdd4 	bl	800723a <USBD_GetString>
  return USBD_StrDesc;
 8007692:	4b02      	ldr	r3, [pc, #8]	; (800769c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20001c8c 	.word	0x20001c8c
 80076a0:	0800d964 	.word	0x0800d964

080076a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	6039      	str	r1, [r7, #0]
 80076ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	221a      	movs	r2, #26
 80076b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076b6:	f000 f843 	bl	8007740 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076ba:	4b02      	ldr	r3, [pc, #8]	; (80076c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000164 	.word	0x20000164

080076c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4603      	mov	r3, r0
 80076d0:	6039      	str	r1, [r7, #0]
 80076d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d105      	bne.n	80076e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	4907      	ldr	r1, [pc, #28]	; (80076fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80076de:	4808      	ldr	r0, [pc, #32]	; (8007700 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076e0:	f7ff fdab 	bl	800723a <USBD_GetString>
 80076e4:	e004      	b.n	80076f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	4904      	ldr	r1, [pc, #16]	; (80076fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80076ea:	4805      	ldr	r0, [pc, #20]	; (8007700 <USBD_FS_ConfigStrDescriptor+0x38>)
 80076ec:	f7ff fda5 	bl	800723a <USBD_GetString>
  }
  return USBD_StrDesc;
 80076f0:	4b02      	ldr	r3, [pc, #8]	; (80076fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20001c8c 	.word	0x20001c8c
 8007700:	0800d978 	.word	0x0800d978

08007704 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
 800770a:	4603      	mov	r3, r0
 800770c:	6039      	str	r1, [r7, #0]
 800770e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d105      	bne.n	8007722 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	4907      	ldr	r1, [pc, #28]	; (8007738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800771a:	4808      	ldr	r0, [pc, #32]	; (800773c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800771c:	f7ff fd8d 	bl	800723a <USBD_GetString>
 8007720:	e004      	b.n	800772c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4904      	ldr	r1, [pc, #16]	; (8007738 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007726:	4805      	ldr	r0, [pc, #20]	; (800773c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007728:	f7ff fd87 	bl	800723a <USBD_GetString>
  }
  return USBD_StrDesc;
 800772c:	4b02      	ldr	r3, [pc, #8]	; (8007738 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20001c8c 	.word	0x20001c8c
 800773c:	0800d984 	.word	0x0800d984

08007740 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007746:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <Get_SerialNum+0x44>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800774c:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <Get_SerialNum+0x48>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007752:	4b0e      	ldr	r3, [pc, #56]	; (800778c <Get_SerialNum+0x4c>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4413      	add	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d009      	beq.n	800777a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007766:	2208      	movs	r2, #8
 8007768:	4909      	ldr	r1, [pc, #36]	; (8007790 <Get_SerialNum+0x50>)
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f814 	bl	8007798 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007770:	2204      	movs	r2, #4
 8007772:	4908      	ldr	r1, [pc, #32]	; (8007794 <Get_SerialNum+0x54>)
 8007774:	68b8      	ldr	r0, [r7, #8]
 8007776:	f000 f80f 	bl	8007798 <IntToUnicode>
  }
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	1fff7a10 	.word	0x1fff7a10
 8007788:	1fff7a14 	.word	0x1fff7a14
 800778c:	1fff7a18 	.word	0x1fff7a18
 8007790:	20000166 	.word	0x20000166
 8007794:	20000176 	.word	0x20000176

08007798 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	4613      	mov	r3, r2
 80077a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
 80077ae:	e027      	b.n	8007800 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	0f1b      	lsrs	r3, r3, #28
 80077b4:	2b09      	cmp	r3, #9
 80077b6:	d80b      	bhi.n	80077d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	0f1b      	lsrs	r3, r3, #28
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	4619      	mov	r1, r3
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	440b      	add	r3, r1
 80077c8:	3230      	adds	r2, #48	; 0x30
 80077ca:	b2d2      	uxtb	r2, r2
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e00a      	b.n	80077e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	0f1b      	lsrs	r3, r3, #28
 80077d4:	b2da      	uxtb	r2, r3
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	4619      	mov	r1, r3
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	440b      	add	r3, r1
 80077e0:	3237      	adds	r2, #55	; 0x37
 80077e2:	b2d2      	uxtb	r2, r2
 80077e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077ec:	7dfb      	ldrb	r3, [r7, #23]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	3301      	adds	r3, #1
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4413      	add	r3, r2
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	3301      	adds	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]
 8007800:	7dfa      	ldrb	r2, [r7, #23]
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	429a      	cmp	r2, r3
 8007806:	d3d3      	bcc.n	80077b0 <IntToUnicode+0x18>
  }
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08a      	sub	sp, #40	; 0x28
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800781c:	f107 0314 	add.w	r3, r7, #20
 8007820:	2200      	movs	r2, #0
 8007822:	601a      	str	r2, [r3, #0]
 8007824:	605a      	str	r2, [r3, #4]
 8007826:	609a      	str	r2, [r3, #8]
 8007828:	60da      	str	r2, [r3, #12]
 800782a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007834:	d13a      	bne.n	80078ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007836:	2300      	movs	r3, #0
 8007838:	613b      	str	r3, [r7, #16]
 800783a:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <HAL_PCD_MspInit+0xa0>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <HAL_PCD_MspInit+0xa0>)
 8007840:	f043 0301 	orr.w	r3, r3, #1
 8007844:	6313      	str	r3, [r2, #48]	; 0x30
 8007846:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <HAL_PCD_MspInit+0xa0>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	613b      	str	r3, [r7, #16]
 8007850:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007852:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007858:	2302      	movs	r3, #2
 800785a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007860:	2303      	movs	r3, #3
 8007862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007864:	230a      	movs	r3, #10
 8007866:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007868:	f107 0314 	add.w	r3, r7, #20
 800786c:	4619      	mov	r1, r3
 800786e:	4812      	ldr	r0, [pc, #72]	; (80078b8 <HAL_PCD_MspInit+0xa4>)
 8007870:	f7f9 fca8 	bl	80011c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <HAL_PCD_MspInit+0xa0>)
 8007876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007878:	4a0e      	ldr	r2, [pc, #56]	; (80078b4 <HAL_PCD_MspInit+0xa0>)
 800787a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800787e:	6353      	str	r3, [r2, #52]	; 0x34
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <HAL_PCD_MspInit+0xa0>)
 8007886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007888:	4a0a      	ldr	r2, [pc, #40]	; (80078b4 <HAL_PCD_MspInit+0xa0>)
 800788a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800788e:	6453      	str	r3, [r2, #68]	; 0x44
 8007890:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <HAL_PCD_MspInit+0xa0>)
 8007892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800789c:	2200      	movs	r2, #0
 800789e:	2100      	movs	r1, #0
 80078a0:	2043      	movs	r0, #67	; 0x43
 80078a2:	f7f9 fc58 	bl	8001156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078a6:	2043      	movs	r0, #67	; 0x43
 80078a8:	f7f9 fc71 	bl	800118e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078ac:	bf00      	nop
 80078ae:	3728      	adds	r7, #40	; 0x28
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	40023800 	.word	0x40023800
 80078b8:	40020000 	.word	0x40020000

080078bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80078d0:	4619      	mov	r1, r3
 80078d2:	4610      	mov	r0, r2
 80078d4:	f7fe fd2e 	bl	8006334 <USBD_LL_SetupStage>
}
 80078d8:	bf00      	nop
 80078da:	3708      	adds	r7, #8
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	460b      	mov	r3, r1
 80078ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80078f2:	78fa      	ldrb	r2, [r7, #3]
 80078f4:	6879      	ldr	r1, [r7, #4]
 80078f6:	4613      	mov	r3, r2
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	440b      	add	r3, r1
 8007900:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	4619      	mov	r1, r3
 800790a:	f7fe fd66 	bl	80063da <USBD_LL_DataOutStage>
}
 800790e:	bf00      	nop
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b082      	sub	sp, #8
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	460b      	mov	r3, r1
 8007920:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007928:	78fa      	ldrb	r2, [r7, #3]
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	1a9b      	subs	r3, r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	3348      	adds	r3, #72	; 0x48
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	4619      	mov	r1, r3
 800793e:	f7fe fdaf 	bl	80064a0 <USBD_LL_DataInStage>
}
 8007942:	bf00      	nop
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b082      	sub	sp, #8
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007958:	4618      	mov	r0, r3
 800795a:	f7fe feb3 	bl	80066c4 <USBD_LL_SOF>
}
 800795e:	bf00      	nop
 8007960:	3708      	adds	r7, #8
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}

08007966 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007966:	b580      	push	{r7, lr}
 8007968:	b084      	sub	sp, #16
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800796e:	2301      	movs	r3, #1
 8007970:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d001      	beq.n	800797e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800797a:	f7f9 f927 	bl	8000bcc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007984:	7bfa      	ldrb	r2, [r7, #15]
 8007986:	4611      	mov	r1, r2
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe fe60 	bl	800664e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007994:	4618      	mov	r0, r3
 8007996:	f7fe fe19 	bl	80065cc <USBD_LL_Reset>
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fe5b 	bl	800666e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d005      	beq.n	80079e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80079d8:	4b04      	ldr	r3, [pc, #16]	; (80079ec <HAL_PCD_SuspendCallback+0x48>)
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	4a03      	ldr	r2, [pc, #12]	; (80079ec <HAL_PCD_SuspendCallback+0x48>)
 80079de:	f043 0306 	orr.w	r3, r3, #6
 80079e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	e000ed00 	.word	0xe000ed00

080079f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7fe fe4a 	bl	8006698 <USBD_LL_Resume>
}
 8007a04:	bf00      	nop
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	460b      	mov	r3, r1
 8007a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a1e:	78fa      	ldrb	r2, [r7, #3]
 8007a20:	4611      	mov	r1, r2
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fe75 	bl	8006712 <USBD_LL_IsoOUTIncomplete>
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	4611      	mov	r1, r2
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe fe56 	bl	80066f8 <USBD_LL_IsoINIncomplete>
}
 8007a4c:	bf00      	nop
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fe62 	bl	800672c <USBD_LL_DevConnected>
}
 8007a68:	bf00      	nop
 8007a6a:	3708      	adds	r7, #8
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}

08007a70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fe5f 	bl	8006742 <USBD_LL_DevDisconnected>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d13c      	bne.n	8007b16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007a9c:	4a20      	ldr	r2, [pc, #128]	; (8007b20 <USBD_LL_Init+0x94>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <USBD_LL_Init+0x94>)
 8007aa8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007aac:	4b1c      	ldr	r3, [pc, #112]	; (8007b20 <USBD_LL_Init+0x94>)
 8007aae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ab2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007ab4:	4b1a      	ldr	r3, [pc, #104]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007aba:	4b19      	ldr	r3, [pc, #100]	; (8007b20 <USBD_LL_Init+0x94>)
 8007abc:	2202      	movs	r2, #2
 8007abe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007ac0:	4b17      	ldr	r3, [pc, #92]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007ac6:	4b16      	ldr	r3, [pc, #88]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ac8:	2202      	movs	r2, #2
 8007aca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007acc:	4b14      	ldr	r3, [pc, #80]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007ad2:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ad8:	4b11      	ldr	r3, [pc, #68]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ada:	2200      	movs	r2, #0
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ade:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ae4:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <USBD_LL_Init+0x94>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007aea:	480d      	ldr	r0, [pc, #52]	; (8007b20 <USBD_LL_Init+0x94>)
 8007aec:	f7fa fc9f 	bl	800242e <HAL_PCD_Init>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007af6:	f7f9 f869 	bl	8000bcc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007afa:	2180      	movs	r1, #128	; 0x80
 8007afc:	4808      	ldr	r0, [pc, #32]	; (8007b20 <USBD_LL_Init+0x94>)
 8007afe:	f7fb fdfc 	bl	80036fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b02:	2240      	movs	r2, #64	; 0x40
 8007b04:	2100      	movs	r1, #0
 8007b06:	4806      	ldr	r0, [pc, #24]	; (8007b20 <USBD_LL_Init+0x94>)
 8007b08:	f7fb fdb0 	bl	800366c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b0c:	2280      	movs	r2, #128	; 0x80
 8007b0e:	2101      	movs	r1, #1
 8007b10:	4803      	ldr	r0, [pc, #12]	; (8007b20 <USBD_LL_Init+0x94>)
 8007b12:	f7fb fdab 	bl	800366c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20001e8c 	.word	0x20001e8c

08007b24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fa fd94 	bl	8002668 <HAL_PCD_Start>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 f92a 	bl	8007da0 <USBD_Get_USB_Status>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	4608      	mov	r0, r1
 8007b64:	4611      	mov	r1, r2
 8007b66:	461a      	mov	r2, r3
 8007b68:	4603      	mov	r3, r0
 8007b6a:	70fb      	strb	r3, [r7, #3]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	70bb      	strb	r3, [r7, #2]
 8007b70:	4613      	mov	r3, r2
 8007b72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007b82:	78bb      	ldrb	r3, [r7, #2]
 8007b84:	883a      	ldrh	r2, [r7, #0]
 8007b86:	78f9      	ldrb	r1, [r7, #3]
 8007b88:	f7fb f978 	bl	8002e7c <HAL_PCD_EP_Open>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 f904 	bl	8007da0 <USBD_Get_USB_Status>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ba6:	b580      	push	{r7, lr}
 8007ba8:	b084      	sub	sp, #16
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	4611      	mov	r1, r2
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fb f9c1 	bl	8002f4c <HAL_PCD_EP_Close>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 f8e5 	bl	8007da0 <USBD_Get_USB_Status>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bda:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007bfe:	78fa      	ldrb	r2, [r7, #3]
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fb fa99 	bl	800313a <HAL_PCD_EP_SetStall>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f000 f8c6 	bl	8007da0 <USBD_Get_USB_Status>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3710      	adds	r7, #16
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	4611      	mov	r1, r2
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fb fade 	bl	8003202 <HAL_PCD_EP_ClrStall>
 8007c46:	4603      	mov	r3, r0
 8007c48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f8a7 	bl	8007da0 <USBD_Get_USB_Status>
 8007c52:	4603      	mov	r3, r0
 8007c54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007c72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da0b      	bge.n	8007c94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c82:	68f9      	ldr	r1, [r7, #12]
 8007c84:	4613      	mov	r3, r2
 8007c86:	00db      	lsls	r3, r3, #3
 8007c88:	1a9b      	subs	r3, r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	333e      	adds	r3, #62	; 0x3e
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	e00b      	b.n	8007cac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c9a:	68f9      	ldr	r1, [r7, #12]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	00db      	lsls	r3, r3, #3
 8007ca0:	1a9b      	subs	r3, r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	440b      	add	r3, r1
 8007ca6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007caa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fb f8ab 	bl	8002e32 <HAL_PCD_SetAddress>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f85c 	bl	8007da0 <USBD_Get_USB_Status>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	607a      	str	r2, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	460b      	mov	r3, r1
 8007d04:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d14:	7af9      	ldrb	r1, [r7, #11]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f7fb f9c4 	bl	80030a6 <HAL_PCD_EP_Transmit>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 f83b 	bl	8007da0 <USBD_Get_USB_Status>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d2e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3718      	adds	r7, #24
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	460b      	mov	r3, r1
 8007d46:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d56:	7af9      	ldrb	r1, [r7, #11]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	f7fb f940 	bl	8002fe0 <HAL_PCD_EP_Receive>
 8007d60:	4603      	mov	r3, r0
 8007d62:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 f81a 	bl	8007da0 <USBD_Get_USB_Status>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007d70:	7dbb      	ldrb	r3, [r7, #22]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d8c:	78fa      	ldrb	r2, [r7, #3]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fb f970 	bl	8003076 <HAL_PCD_EP_GetRxCount>
 8007d96:	4603      	mov	r3, r0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	4603      	mov	r3, r0
 8007da8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007dae:	79fb      	ldrb	r3, [r7, #7]
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d817      	bhi.n	8007de4 <USBD_Get_USB_Status+0x44>
 8007db4:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <USBD_Get_USB_Status+0x1c>)
 8007db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dba:	bf00      	nop
 8007dbc:	08007dcd 	.word	0x08007dcd
 8007dc0:	08007dd3 	.word	0x08007dd3
 8007dc4:	08007dd9 	.word	0x08007dd9
 8007dc8:	08007ddf 	.word	0x08007ddf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd0:	e00b      	b.n	8007dea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd6:	e008      	b.n	8007dea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	73fb      	strb	r3, [r7, #15]
    break;
 8007ddc:	e005      	b.n	8007dea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dde:	2303      	movs	r3, #3
 8007de0:	73fb      	strb	r3, [r7, #15]
    break;
 8007de2:	e002      	b.n	8007dea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	73fb      	strb	r3, [r7, #15]
    break;
 8007de8:	bf00      	nop
  }
  return usb_status;
 8007dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <VL53L0X_GetRangeStatusString>:
	return Status;
}

VL53L0X_Error VL53L0X_GetRangeStatusString(uint8_t RangeStatus,
	char *pRangeStatusString)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_range_status_string(RangeStatus,
 8007e08:	79fb      	ldrb	r3, [r7, #7]
 8007e0a:	6839      	ldr	r1, [r7, #0]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f004 fc29 	bl	800c664 <VL53L0X_get_range_status_string>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]
		pRangeStatusString);

	LOG_FUNCTION_END(Status);
	return Status;
 8007e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <VL53L0X_GetPalErrorString>:

VL53L0X_Error VL53L0X_GetPalErrorString(VL53L0X_Error PalErrorCode,
	char *pPalErrorString)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	4603      	mov	r3, r0
 8007e2a:	6039      	str	r1, [r7, #0]
 8007e2c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_pal_error_string(PalErrorCode, pPalErrorString);
 8007e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f004 fc8d 	bl	800c758 <VL53L0X_get_pal_error_string>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fd1d 	bl	800989e <VL53L0X_get_offset_calibration_data_micro_meter>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <VL53L0X_DataInit>:
	return Status;
}


VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007e74:	b5b0      	push	{r4, r5, r7, lr}
 8007e76:	b096      	sub	sp, #88	; 0x58
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007e82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2188      	movs	r1, #136	; 0x88
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f004 ff8f 	bl	800cdb2 <VL53L0X_WrByte>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ea8:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007eb2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a9e      	ldr	r2, [pc, #632]	; (8008134 <VL53L0X_DataInit+0x2c0>)
 8007eba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a9d      	ldr	r2, [pc, #628]	; (8008138 <VL53L0X_DataInit+0x2c4>)
 8007ec2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007ecc:	f107 0310 	add.w	r3, r7, #16
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fab4 	bl	8008440 <VL53L0X_GetDeviceParameters>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007ede:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d112      	bne.n	8007f0c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007eea:	2300      	movs	r3, #0
 8007eec:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f103 0410 	add.w	r4, r3, #16
 8007ef4:	f107 0510 	add.w	r5, r7, #16
 8007ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007efc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2264      	movs	r2, #100	; 0x64
 8007f10:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007f1a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007f24:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007f2e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	2180      	movs	r1, #128	; 0x80
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f004 ff37 	bl	800cdb2 <VL53L0X_WrByte>
 8007f44:	4603      	mov	r3, r0
 8007f46:	461a      	mov	r2, r3
 8007f48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007f52:	2201      	movs	r2, #1
 8007f54:	21ff      	movs	r1, #255	; 0xff
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f004 ff2b 	bl	800cdb2 <VL53L0X_WrByte>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f64:	4313      	orrs	r3, r2
 8007f66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f004 ff1f 	bl	800cdb2 <VL53L0X_WrByte>
 8007f74:	4603      	mov	r3, r0
 8007f76:	461a      	mov	r2, r3
 8007f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8007f82:	f107 030f 	add.w	r3, r7, #15
 8007f86:	461a      	mov	r2, r3
 8007f88:	2191      	movs	r1, #145	; 0x91
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f004 ff8f 	bl	800ceae <VL53L0X_RdByte>
 8007f90:	4603      	mov	r3, r0
 8007f92:	461a      	mov	r2, r3
 8007f94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8007f9e:	7bfa      	ldrb	r2, [r7, #15]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	2100      	movs	r1, #0
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f004 ff01 	bl	800cdb2 <VL53L0X_WrByte>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	21ff      	movs	r1, #255	; 0xff
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f004 fef5 	bl	800cdb2 <VL53L0X_WrByte>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	2180      	movs	r1, #128	; 0x80
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f004 fee9 	bl	800cdb2 <VL53L0X_WrByte>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007fee:	2300      	movs	r3, #0
 8007ff0:	653b      	str	r3, [r7, #80]	; 0x50
 8007ff2:	e014      	b.n	800801e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8007ff4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d114      	bne.n	8008026 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	2201      	movs	r2, #1
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fd2b 	bl	8008a60 <VL53L0X_SetLimitCheckEnable>
 800800a:	4603      	mov	r3, r0
 800800c:	461a      	mov	r2, r3
 800800e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008012:	4313      	orrs	r3, r2
 8008014:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800801a:	3301      	adds	r3, #1
 800801c:	653b      	str	r3, [r7, #80]	; 0x50
 800801e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008020:	2b05      	cmp	r3, #5
 8008022:	dde7      	ble.n	8007ff4 <VL53L0X_DataInit+0x180>
 8008024:	e000      	b.n	8008028 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8008026:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008028:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800802c:	2b00      	cmp	r3, #0
 800802e:	d107      	bne.n	8008040 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008030:	2200      	movs	r2, #0
 8008032:	2102      	movs	r1, #2
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fd13 	bl	8008a60 <VL53L0X_SetLimitCheckEnable>
 800803a:	4603      	mov	r3, r0
 800803c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008040:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008044:	2b00      	cmp	r3, #0
 8008046:	d107      	bne.n	8008058 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008048:	2200      	movs	r2, #0
 800804a:	2103      	movs	r1, #3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fd07 	bl	8008a60 <VL53L0X_SetLimitCheckEnable>
 8008052:	4603      	mov	r3, r0
 8008054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008058:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800805c:	2b00      	cmp	r3, #0
 800805e:	d107      	bne.n	8008070 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008060:	2200      	movs	r2, #0
 8008062:	2104      	movs	r1, #4
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fcfb 	bl	8008a60 <VL53L0X_SetLimitCheckEnable>
 800806a:	4603      	mov	r3, r0
 800806c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008070:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008074:	2b00      	cmp	r3, #0
 8008076:	d107      	bne.n	8008088 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008078:	2200      	movs	r2, #0
 800807a:	2105      	movs	r1, #5
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fcef 	bl	8008a60 <VL53L0X_SetLimitCheckEnable>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008088:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800808c:	2b00      	cmp	r3, #0
 800808e:	d108      	bne.n	80080a2 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008090:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008094:	2100      	movs	r1, #0
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fd92 	bl	8008bc0 <VL53L0X_SetLimitCheckValue>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80080a2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d108      	bne.n	80080bc <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80080aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80080ae:	2101      	movs	r1, #1
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fd85 	bl	8008bc0 <VL53L0X_SetLimitCheckValue>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d108      	bne.n	80080d6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80080c4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80080c8:	2102      	movs	r1, #2
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fd78 	bl	8008bc0 <VL53L0X_SetLimitCheckValue>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d107      	bne.n	80080ee <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80080de:	2200      	movs	r2, #0
 80080e0:	2103      	movs	r1, #3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fd6c 	bl	8008bc0 <VL53L0X_SetLimitCheckValue>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080ee:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10f      	bne.n	8008116 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	22ff      	movs	r2, #255	; 0xff
 80080fa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80080fe:	22ff      	movs	r2, #255	; 0xff
 8008100:	2101      	movs	r1, #1
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f004 fe55 	bl	800cdb2 <VL53L0X_WrByte>
 8008108:	4603      	mov	r3, r0
 800810a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8008116:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800811a:	2b00      	cmp	r3, #0
 800811c:	d103      	bne.n	8008126 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8008126:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800812a:	4618      	mov	r0, r3
 800812c:	3758      	adds	r7, #88	; 0x58
 800812e:	46bd      	mov	sp, r7
 8008130:	bdb0      	pop	{r4, r5, r7, pc}
 8008132:	bf00      	nop
 8008134:	00016b85 	.word	0x00016b85
 8008138:	000970a4 	.word	0x000970a4

0800813c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800813c:	b5b0      	push	{r4, r5, r7, lr}
 800813e:	b09e      	sub	sp, #120	; 0x78
 8008140:	af02      	add	r7, sp, #8
 8008142:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008144:	2300      	movs	r3, #0
 8008146:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800814a:	f107 031c 	add.w	r3, r7, #28
 800814e:	2240      	movs	r2, #64	; 0x40
 8008150:	2100      	movs	r1, #0
 8008152:	4618      	mov	r0, r3
 8008154:	f004 ff59 	bl	800d00a <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8008172:	2300      	movs	r3, #0
 8008174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8008178:	2101      	movs	r1, #1
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f002 fad2 	bl	800a724 <VL53L0X_get_info_from_device>
 8008180:	4603      	mov	r3, r0
 8008182:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800818c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8008194:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8008198:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800819c:	2b01      	cmp	r3, #1
 800819e:	d80d      	bhi.n	80081bc <VL53L0X_StaticInit+0x80>
 80081a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d102      	bne.n	80081ae <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80081a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081aa:	2b20      	cmp	r3, #32
 80081ac:	d806      	bhi.n	80081bc <VL53L0X_StaticInit+0x80>
 80081ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10e      	bne.n	80081d4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80081b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081b8:	2b0c      	cmp	r3, #12
 80081ba:	d90b      	bls.n	80081d4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80081bc:	f107 0218 	add.w	r2, r7, #24
 80081c0:	f107 0314 	add.w	r3, r7, #20
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 fd64 	bl	8009c94 <VL53L0X_perform_ref_spad_management>
 80081cc:	4603      	mov	r3, r0
 80081ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80081d2:	e009      	b.n	80081e8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80081d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081d8:	461a      	mov	r2, r3
 80081da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f001 ff65 	bl	800a0ac <VL53L0X_set_reference_spads>
 80081e2:	4603      	mov	r3, r0
 80081e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80081e8:	4b94      	ldr	r3, [pc, #592]	; (800843c <VL53L0X_StaticInit+0x300>)
 80081ea:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80081ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10f      	bne.n	8008214 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80081fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80081fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008202:	2b00      	cmp	r3, #0
 8008204:	d104      	bne.n	8008210 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800820c:	66bb      	str	r3, [r7, #104]	; 0x68
 800820e:	e001      	b.n	8008214 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8008210:	4b8a      	ldr	r3, [pc, #552]	; (800843c <VL53L0X_StaticInit+0x300>)
 8008212:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8008214:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008218:	2b00      	cmp	r3, #0
 800821a:	d106      	bne.n	800822a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800821c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f003 fb9c 	bl	800b95c <VL53L0X_load_tuning_settings>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800822a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8008232:	2300      	movs	r3, #0
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	2304      	movs	r3, #4
 8008238:	2200      	movs	r2, #0
 800823a:	2100      	movs	r1, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 f95d 	bl	80094fc <VL53L0X_SetGpioConfig>
 8008242:	4603      	mov	r3, r0
 8008244:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008248:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800824c:	2b00      	cmp	r3, #0
 800824e:	d121      	bne.n	8008294 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008250:	2201      	movs	r2, #1
 8008252:	21ff      	movs	r1, #255	; 0xff
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f004 fdac 	bl	800cdb2 <VL53L0X_WrByte>
 800825a:	4603      	mov	r3, r0
 800825c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8008260:	f107 031a 	add.w	r3, r7, #26
 8008264:	461a      	mov	r2, r3
 8008266:	2184      	movs	r1, #132	; 0x84
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f004 fe3f 	bl	800ceec <VL53L0X_RdWord>
 800826e:	4603      	mov	r3, r0
 8008270:	461a      	mov	r2, r3
 8008272:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008276:	4313      	orrs	r3, r2
 8008278:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800827c:	2200      	movs	r2, #0
 800827e:	21ff      	movs	r1, #255	; 0xff
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f004 fd96 	bl	800cdb2 <VL53L0X_WrByte>
 8008286:	4603      	mov	r3, r0
 8008288:	461a      	mov	r2, r3
 800828a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800828e:	4313      	orrs	r3, r2
 8008290:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008294:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008298:	2b00      	cmp	r3, #0
 800829a:	d105      	bne.n	80082a8 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800829c:	8b7b      	ldrh	r3, [r7, #26]
 800829e:	011b      	lsls	r3, r3, #4
 80082a0:	461a      	mov	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 80082a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d108      	bne.n	80082c2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80082b0:	f107 031c 	add.w	r3, r7, #28
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f8c2 	bl	8008440 <VL53L0X_GetDeviceParameters>
 80082bc:	4603      	mov	r3, r0
 80082be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80082c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d110      	bne.n	80082ec <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80082ca:	f107 0319 	add.w	r3, r7, #25
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9a0 	bl	8008616 <VL53L0X_GetFractionEnable>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80082dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d103      	bne.n	80082ec <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80082e4:	7e7a      	ldrb	r2, [r7, #25]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80082ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d10e      	bne.n	8008312 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f103 0410 	add.w	r4, r3, #16
 80082fa:	f107 051c 	add.w	r5, r7, #28
 80082fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800830a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800830e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8008312:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008316:	2b00      	cmp	r3, #0
 8008318:	d111      	bne.n	800833e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800831a:	f107 0319 	add.w	r3, r7, #25
 800831e:	461a      	mov	r2, r3
 8008320:	2101      	movs	r1, #1
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f004 fdc3 	bl	800ceae <VL53L0X_RdByte>
 8008328:	4603      	mov	r3, r0
 800832a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800832e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008332:	2b00      	cmp	r3, #0
 8008334:	d103      	bne.n	800833e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8008336:	7e7a      	ldrb	r2, [r7, #25]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800833e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008342:	2b00      	cmp	r3, #0
 8008344:	d107      	bne.n	8008356 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8008346:	2200      	movs	r2, #0
 8008348:	2100      	movs	r1, #0
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f9c0 	bl	80086d0 <VL53L0X_SetSequenceStepEnable>
 8008350:	4603      	mov	r3, r0
 8008352:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008356:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800835a:	2b00      	cmp	r3, #0
 800835c:	d107      	bne.n	800836e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800835e:	2200      	movs	r2, #0
 8008360:	2102      	movs	r1, #2
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f9b4 	bl	80086d0 <VL53L0X_SetSequenceStepEnable>
 8008368:	4603      	mov	r3, r0
 800836a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800836e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008372:	2b00      	cmp	r3, #0
 8008374:	d103      	bne.n	800837e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2203      	movs	r2, #3
 800837a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800837e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008382:	2b00      	cmp	r3, #0
 8008384:	d109      	bne.n	800839a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8008386:	f107 0313 	add.w	r3, r7, #19
 800838a:	461a      	mov	r2, r3
 800838c:	2100      	movs	r1, #0
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f000 f986 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 8008394:	4603      	mov	r3, r0
 8008396:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800839a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80083a2:	7cfa      	ldrb	r2, [r7, #19]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80083aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d109      	bne.n	80083c6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80083b2:	f107 0313 	add.w	r3, r7, #19
 80083b6:	461a      	mov	r2, r3
 80083b8:	2101      	movs	r1, #1
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f970 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80083c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80083ce:	7cfa      	ldrb	r2, [r7, #19]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80083d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d109      	bne.n	80083f2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80083de:	f107 030c 	add.w	r3, r7, #12
 80083e2:	461a      	mov	r2, r3
 80083e4:	2103      	movs	r1, #3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f002 ff1c 	bl	800b224 <get_sequence_step_timeout>
 80083ec:	4603      	mov	r3, r0
 80083ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80083f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8008402:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008406:	2b00      	cmp	r3, #0
 8008408:	d109      	bne.n	800841e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800840a:	f107 030c 	add.w	r3, r7, #12
 800840e:	461a      	mov	r2, r3
 8008410:	2104      	movs	r1, #4
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f002 ff06 	bl	800b224 <get_sequence_step_timeout>
 8008418:	4603      	mov	r3, r0
 800841a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800841e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008422:	2b00      	cmp	r3, #0
 8008424:	d103      	bne.n	800842e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800842e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8008432:	4618      	mov	r0, r3
 8008434:	3770      	adds	r7, #112	; 0x70
 8008436:	46bd      	mov	sp, r7
 8008438:	bdb0      	pop	{r4, r5, r7, pc}
 800843a:	bf00      	nop
 800843c:	20000180 	.word	0x20000180

08008440 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 f8cc 	bl	80085f0 <VL53L0X_GetDeviceMode>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800845c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d107      	bne.n	8008474 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	3308      	adds	r3, #8
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa7c 	bl	8008968 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d102      	bne.n	8008482 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2200      	movs	r2, #0
 8008480:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8008482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d107      	bne.n	800849a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	3310      	adds	r3, #16
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fab2 	bl	80089fa <VL53L0X_GetXTalkCompensationRateMegaCps>
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800849a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d107      	bne.n	80084b2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	3314      	adds	r3, #20
 80084a6:	4619      	mov	r1, r3
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff fcd0 	bl	8007e4e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80084ae:	4603      	mov	r3, r0
 80084b0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80084b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d134      	bne.n	8008524 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	e02a      	b.n	8008516 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80084c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d12a      	bne.n	800851e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	b299      	uxth	r1, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	3308      	adds	r3, #8
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	4413      	add	r3, r2
 80084d6:	3304      	adds	r3, #4
 80084d8:	461a      	mov	r2, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fbd2 	bl	8008c84 <VL53L0X_GetLimitCheckValue>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	7bfb      	ldrb	r3, [r7, #15]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80084ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d117      	bne.n	8008522 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	b299      	uxth	r1, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	3318      	adds	r3, #24
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4413      	add	r3, r2
 80084fe:	461a      	mov	r2, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fb39 	bl	8008b78 <VL53L0X_GetLimitCheckEnable>
 8008506:	4603      	mov	r3, r0
 8008508:	461a      	mov	r2, r3
 800850a:	7bfb      	ldrb	r3, [r7, #15]
 800850c:	4313      	orrs	r3, r2
 800850e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	3301      	adds	r3, #1
 8008514:	60bb      	str	r3, [r7, #8]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b05      	cmp	r3, #5
 800851a:	ddd1      	ble.n	80084c0 <VL53L0X_GetDeviceParameters+0x80>
 800851c:	e002      	b.n	8008524 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800851e:	bf00      	nop
 8008520:	e000      	b.n	8008524 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8008522:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d107      	bne.n	800853c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	333c      	adds	r3, #60	; 0x3c
 8008530:	4619      	mov	r1, r3
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fcaa 	bl	8008e8c <VL53L0X_GetWrapAroundCheckEnable>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800853c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d107      	bne.n	8008554 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	3304      	adds	r3, #4
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 f895 	bl	800867a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008554:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	2b15      	cmp	r3, #21
 8008574:	d832      	bhi.n	80085dc <VL53L0X_SetDeviceMode+0x7c>
 8008576:	a201      	add	r2, pc, #4	; (adr r2, 800857c <VL53L0X_SetDeviceMode+0x1c>)
 8008578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857c:	080085d5 	.word	0x080085d5
 8008580:	080085d5 	.word	0x080085d5
 8008584:	080085dd 	.word	0x080085dd
 8008588:	080085d5 	.word	0x080085d5
 800858c:	080085dd 	.word	0x080085dd
 8008590:	080085dd 	.word	0x080085dd
 8008594:	080085dd 	.word	0x080085dd
 8008598:	080085dd 	.word	0x080085dd
 800859c:	080085dd 	.word	0x080085dd
 80085a0:	080085dd 	.word	0x080085dd
 80085a4:	080085dd 	.word	0x080085dd
 80085a8:	080085dd 	.word	0x080085dd
 80085ac:	080085dd 	.word	0x080085dd
 80085b0:	080085dd 	.word	0x080085dd
 80085b4:	080085dd 	.word	0x080085dd
 80085b8:	080085dd 	.word	0x080085dd
 80085bc:	080085dd 	.word	0x080085dd
 80085c0:	080085dd 	.word	0x080085dd
 80085c4:	080085dd 	.word	0x080085dd
 80085c8:	080085dd 	.word	0x080085dd
 80085cc:	080085d5 	.word	0x080085d5
 80085d0:	080085d5 	.word	0x080085d5
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	741a      	strb	r2, [r3, #16]
		break;
 80085da:	e001      	b.n	80085e0 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80085dc:	23f8      	movs	r3, #248	; 0xf8
 80085de:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	7c1a      	ldrb	r2, [r3, #16]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	2109      	movs	r1, #9
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f004 fc40 	bl	800ceae <VL53L0X_RdByte>
 800862e:	4603      	mov	r3, r0
 8008630:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d106      	bne.n	8008648 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	b2da      	uxtb	r2, r3
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8008648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f002 ffe7 	bl	800b638 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800866a:	4603      	mov	r3, r0
 800866c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800866e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f003 f8b4 	bl	800b7f8 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8008690:	4603      	mov	r3, r0
 8008692:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	460b      	mov	r3, r1
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086ae:	2300      	movs	r3, #0
 80086b0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80086b2:	7afb      	ldrb	r3, [r7, #11]
 80086b4:	687a      	ldr	r2, [r7, #4]
 80086b6:	4619      	mov	r1, r3
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f002 ff86 	bl	800b5ca <VL53L0X_get_vcsel_pulse_period>
 80086be:	4603      	mov	r3, r0
 80086c0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80086c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
	...

080086d0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
 80086dc:	4613      	mov	r3, r2
 80086de:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086e0:	2300      	movs	r3, #0
 80086e2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80086ec:	f107 030f 	add.w	r3, r7, #15
 80086f0:	461a      	mov	r2, r3
 80086f2:	2101      	movs	r1, #1
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f004 fbda 	bl	800ceae <VL53L0X_RdByte>
 80086fa:	4603      	mov	r3, r0
 80086fc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8008702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d15a      	bne.n	80087c0 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800870a:	78bb      	ldrb	r3, [r7, #2]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d12b      	bne.n	8008768 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	2b04      	cmp	r3, #4
 8008714:	d825      	bhi.n	8008762 <VL53L0X_SetSequenceStepEnable+0x92>
 8008716:	a201      	add	r2, pc, #4	; (adr r2, 800871c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8008718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871c:	08008731 	.word	0x08008731
 8008720:	0800873b 	.word	0x0800873b
 8008724:	08008745 	.word	0x08008745
 8008728:	0800874f 	.word	0x0800874f
 800872c:	08008759 	.word	0x08008759
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8008730:	7dbb      	ldrb	r3, [r7, #22]
 8008732:	f043 0310 	orr.w	r3, r3, #16
 8008736:	75bb      	strb	r3, [r7, #22]
				break;
 8008738:	e043      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800873a:	7dbb      	ldrb	r3, [r7, #22]
 800873c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008740:	75bb      	strb	r3, [r7, #22]
				break;
 8008742:	e03e      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8008744:	7dbb      	ldrb	r3, [r7, #22]
 8008746:	f043 0304 	orr.w	r3, r3, #4
 800874a:	75bb      	strb	r3, [r7, #22]
				break;
 800874c:	e039      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800874e:	7dbb      	ldrb	r3, [r7, #22]
 8008750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008754:	75bb      	strb	r3, [r7, #22]
				break;
 8008756:	e034      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8008758:	7dbb      	ldrb	r3, [r7, #22]
 800875a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800875e:	75bb      	strb	r3, [r7, #22]
				break;
 8008760:	e02f      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008762:	23fc      	movs	r3, #252	; 0xfc
 8008764:	75fb      	strb	r3, [r7, #23]
 8008766:	e02c      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	2b04      	cmp	r3, #4
 800876c:	d825      	bhi.n	80087ba <VL53L0X_SetSequenceStepEnable+0xea>
 800876e:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	08008789 	.word	0x08008789
 8008778:	08008793 	.word	0x08008793
 800877c:	0800879d 	.word	0x0800879d
 8008780:	080087a7 	.word	0x080087a7
 8008784:	080087b1 	.word	0x080087b1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8008788:	7dbb      	ldrb	r3, [r7, #22]
 800878a:	f023 0310 	bic.w	r3, r3, #16
 800878e:	75bb      	strb	r3, [r7, #22]
				break;
 8008790:	e017      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8008792:	7dbb      	ldrb	r3, [r7, #22]
 8008794:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8008798:	75bb      	strb	r3, [r7, #22]
				break;
 800879a:	e012      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800879c:	7dbb      	ldrb	r3, [r7, #22]
 800879e:	f023 0304 	bic.w	r3, r3, #4
 80087a2:	75bb      	strb	r3, [r7, #22]
				break;
 80087a4:	e00d      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80087a6:	7dbb      	ldrb	r3, [r7, #22]
 80087a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ac:	75bb      	strb	r3, [r7, #22]
				break;
 80087ae:	e008      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80087b0:	7dbb      	ldrb	r3, [r7, #22]
 80087b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087b6:	75bb      	strb	r3, [r7, #22]
				break;
 80087b8:	e003      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087ba:	23fc      	movs	r3, #252	; 0xfc
 80087bc:	75fb      	strb	r3, [r7, #23]
 80087be:	e000      	b.n	80087c2 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80087c0:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	7dba      	ldrb	r2, [r7, #22]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d01e      	beq.n	8008808 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80087ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d107      	bne.n	80087e2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80087d2:	7dbb      	ldrb	r3, [r7, #22]
 80087d4:	461a      	mov	r2, r3
 80087d6:	2101      	movs	r1, #1
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f004 faea 	bl	800cdb2 <VL53L0X_WrByte>
 80087de:	4603      	mov	r3, r0
 80087e0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80087e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d103      	bne.n	80087f2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	7dba      	ldrb	r2, [r7, #22]
 80087ee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80087f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d106      	bne.n	8008808 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008800:	6939      	ldr	r1, [r7, #16]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff ff26 	bl	8008654 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8008808:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	607b      	str	r3, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	72fb      	strb	r3, [r7, #11]
 8008822:	4613      	mov	r3, r2
 8008824:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008826:	2300      	movs	r3, #0
 8008828:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008830:	7afb      	ldrb	r3, [r7, #11]
 8008832:	2b04      	cmp	r3, #4
 8008834:	d836      	bhi.n	80088a4 <sequence_step_enabled+0x90>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <sequence_step_enabled+0x28>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	08008851 	.word	0x08008851
 8008840:	08008863 	.word	0x08008863
 8008844:	08008875 	.word	0x08008875
 8008848:	08008887 	.word	0x08008887
 800884c:	08008899 	.word	0x08008899
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008850:	7abb      	ldrb	r3, [r7, #10]
 8008852:	111b      	asrs	r3, r3, #4
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	701a      	strb	r2, [r3, #0]
		break;
 8008860:	e022      	b.n	80088a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008862:	7abb      	ldrb	r3, [r7, #10]
 8008864:	10db      	asrs	r3, r3, #3
 8008866:	b2db      	uxtb	r3, r3
 8008868:	f003 0301 	and.w	r3, r3, #1
 800886c:	b2da      	uxtb	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	701a      	strb	r2, [r3, #0]
		break;
 8008872:	e019      	b.n	80088a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008874:	7abb      	ldrb	r3, [r7, #10]
 8008876:	109b      	asrs	r3, r3, #2
 8008878:	b2db      	uxtb	r3, r3
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	b2da      	uxtb	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	701a      	strb	r2, [r3, #0]
		break;
 8008884:	e010      	b.n	80088a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8008886:	7abb      	ldrb	r3, [r7, #10]
 8008888:	119b      	asrs	r3, r3, #6
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	b2da      	uxtb	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	701a      	strb	r2, [r3, #0]
		break;
 8008896:	e007      	b.n	80088a8 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8008898:	7abb      	ldrb	r3, [r7, #10]
 800889a:	09db      	lsrs	r3, r3, #7
 800889c:	b2da      	uxtb	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	701a      	strb	r2, [r3, #0]
		break;
 80088a2:	e001      	b.n	80088a8 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088a4:	23fc      	movs	r3, #252	; 0xfc
 80088a6:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80088a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	371c      	adds	r7, #28
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088c2:	2300      	movs	r3, #0
 80088c4:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80088ca:	f107 030e 	add.w	r3, r7, #14
 80088ce:	461a      	mov	r2, r3
 80088d0:	2101      	movs	r1, #1
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f004 faeb 	bl	800ceae <VL53L0X_RdByte>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80088dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d107      	bne.n	80088f4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80088e4:	7bba      	ldrb	r2, [r7, #14]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	2100      	movs	r1, #0
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff ff92 	bl	8008814 <sequence_step_enabled>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80088f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d108      	bne.n	800890e <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80088fc:	7bba      	ldrb	r2, [r7, #14]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	3302      	adds	r3, #2
 8008902:	2101      	movs	r1, #1
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7ff ff85 	bl	8008814 <sequence_step_enabled>
 800890a:	4603      	mov	r3, r0
 800890c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800890e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d108      	bne.n	8008928 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8008916:	7bba      	ldrb	r2, [r7, #14]
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	3301      	adds	r3, #1
 800891c:	2102      	movs	r1, #2
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff ff78 	bl	8008814 <sequence_step_enabled>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d108      	bne.n	8008942 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008930:	7bba      	ldrb	r2, [r7, #14]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	3303      	adds	r3, #3
 8008936:	2103      	movs	r1, #3
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f7ff ff6b 	bl	8008814 <sequence_step_enabled>
 800893e:	4603      	mov	r3, r0
 8008940:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d108      	bne.n	800895c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800894a:	7bba      	ldrb	r2, [r7, #14]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	3304      	adds	r3, #4
 8008950:	2104      	movs	r1, #4
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f7ff ff5e 	bl	8008814 <sequence_step_enabled>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800895c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8008976:	f107 030c 	add.w	r3, r7, #12
 800897a:	461a      	mov	r2, r3
 800897c:	21f8      	movs	r1, #248	; 0xf8
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f004 fab4 	bl	800ceec <VL53L0X_RdWord>
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8008988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d108      	bne.n	80089a2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008990:	f107 0308 	add.w	r3, r7, #8
 8008994:	461a      	mov	r2, r3
 8008996:	2104      	movs	r1, #4
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f004 fac6 	bl	800cf2a <VL53L0X_RdDWord>
 800899e:	4603      	mov	r3, r0
 80089a0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10c      	bne.n	80089c4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80089aa:	89bb      	ldrh	r3, [r7, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	89ba      	ldrh	r2, [r7, #12]
 80089b4:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80089c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089da:	2300      	movs	r3, #0
 80089dc:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	7f1b      	ldrb	r3, [r3, #28]
 80089e2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	7bba      	ldrb	r2, [r7, #14]
 80089e8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80089ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3714      	adds	r7, #20
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b086      	sub	sp, #24
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a04:	2300      	movs	r3, #0
 8008a06:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8008a08:	f107 030e 	add.w	r3, r7, #14
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	2120      	movs	r1, #32
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f004 fa6b 	bl	800ceec <VL53L0X_RdWord>
 8008a16:	4603      	mov	r3, r0
 8008a18:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8008a1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d118      	bne.n	8008a54 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008a22:	89fb      	ldrh	r3, [r7, #14]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d109      	bne.n	8008a3c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	693a      	ldr	r2, [r7, #16]
 8008a32:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	771a      	strb	r2, [r3, #28]
 8008a3a:	e00b      	b.n	8008a54 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8008a3c:	89fb      	ldrh	r3, [r7, #14]
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	693a      	ldr	r2, [r7, #16]
 8008a4c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3718      	adds	r7, #24
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	807b      	strh	r3, [r7, #2]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a70:	2300      	movs	r3, #0
 8008a72:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008a74:	2300      	movs	r3, #0
 8008a76:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008a80:	887b      	ldrh	r3, [r7, #2]
 8008a82:	2b05      	cmp	r3, #5
 8008a84:	d902      	bls.n	8008a8c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008a86:	23fc      	movs	r3, #252	; 0xfc
 8008a88:	75fb      	strb	r3, [r7, #23]
 8008a8a:	e05b      	b.n	8008b44 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008a8c:	787b      	ldrb	r3, [r7, #1]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8008a92:	2300      	movs	r3, #0
 8008a94:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	73bb      	strb	r3, [r7, #14]
 8008a9e:	e00a      	b.n	8008ab6 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008aa0:	887b      	ldrh	r3, [r7, #2]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	330c      	adds	r3, #12
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8008ab6:	887b      	ldrh	r3, [r7, #2]
 8008ab8:	2b05      	cmp	r3, #5
 8008aba:	d841      	bhi.n	8008b40 <VL53L0X_SetLimitCheckEnable+0xe0>
 8008abc:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <VL53L0X_SetLimitCheckEnable+0x64>)
 8008abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac2:	bf00      	nop
 8008ac4:	08008add 	.word	0x08008add
 8008ac8:	08008ae7 	.word	0x08008ae7
 8008acc:	08008afd 	.word	0x08008afd
 8008ad0:	08008b07 	.word	0x08008b07
 8008ad4:	08008b11 	.word	0x08008b11
 8008ad8:	08008b29 	.word	0x08008b29

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	7bfa      	ldrb	r2, [r7, #15]
 8008ae0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008ae4:	e02e      	b.n	8008b44 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	461a      	mov	r2, r3
 8008aee:	2144      	movs	r1, #68	; 0x44
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f004 f97e 	bl	800cdf2 <VL53L0X_WrWord>
 8008af6:	4603      	mov	r3, r0
 8008af8:	75fb      	strb	r3, [r7, #23]

			break;
 8008afa:	e023      	b.n	8008b44 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	7bfa      	ldrb	r2, [r7, #15]
 8008b00:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008b04:	e01e      	b.n	8008b44 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	7bfa      	ldrb	r2, [r7, #15]
 8008b0a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8008b0e:	e019      	b.n	8008b44 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	005b      	lsls	r3, r3, #1
 8008b14:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008b16:	7b7b      	ldrb	r3, [r7, #13]
 8008b18:	22fe      	movs	r2, #254	; 0xfe
 8008b1a:	2160      	movs	r1, #96	; 0x60
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f004 f988 	bl	800ce32 <VL53L0X_UpdateByte>
 8008b22:	4603      	mov	r3, r0
 8008b24:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8008b26:	e00d      	b.n	8008b44 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8008b28:	7bbb      	ldrb	r3, [r7, #14]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008b2e:	7b7b      	ldrb	r3, [r7, #13]
 8008b30:	22ef      	movs	r2, #239	; 0xef
 8008b32:	2160      	movs	r1, #96	; 0x60
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f004 f97c 	bl	800ce32 <VL53L0X_UpdateByte>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8008b3e:	e001      	b.n	8008b44 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b40:	23fc      	movs	r3, #252	; 0xfc
 8008b42:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d10f      	bne.n	8008b6c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008b4c:	787b      	ldrb	r3, [r7, #1]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008b52:	887b      	ldrh	r3, [r7, #2]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	4413      	add	r3, r2
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008b5e:	e005      	b.n	8008b6c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008b60:	887b      	ldrh	r3, [r7, #2]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	4413      	add	r3, r2
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008b6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3718      	adds	r7, #24
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b087      	sub	sp, #28
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	460b      	mov	r3, r1
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008b8a:	897b      	ldrh	r3, [r7, #10]
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	d905      	bls.n	8008b9c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008b90:	23fc      	movs	r3, #252	; 0xfc
 8008b92:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	e008      	b.n	8008bae <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008b9c:	897b      	ldrh	r3, [r7, #10]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ba6:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7dba      	ldrb	r2, [r7, #22]
 8008bac:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	371c      	adds	r7, #28
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
	...

08008bc0 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008bd2:	897b      	ldrh	r3, [r7, #10]
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bdc:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008bde:	7dbb      	ldrb	r3, [r7, #22]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d107      	bne.n	8008bf4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008be4:	897b      	ldrh	r3, [r7, #10]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	330c      	adds	r3, #12
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	605a      	str	r2, [r3, #4]
 8008bf2:	e040      	b.n	8008c76 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008bf4:	897b      	ldrh	r3, [r7, #10]
 8008bf6:	2b05      	cmp	r3, #5
 8008bf8:	d830      	bhi.n	8008c5c <VL53L0X_SetLimitCheckValue+0x9c>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <VL53L0X_SetLimitCheckValue+0x40>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c19 	.word	0x08008c19
 8008c04:	08008c21 	.word	0x08008c21
 8008c08:	08008c37 	.word	0x08008c37
 8008c0c:	08008c3f 	.word	0x08008c3f
 8008c10:	08008c47 	.word	0x08008c47
 8008c14:	08008c47 	.word	0x08008c47

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008c1e:	e01f      	b.n	8008c60 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	461a      	mov	r2, r3
 8008c28:	2144      	movs	r1, #68	; 0x44
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f004 f8e1 	bl	800cdf2 <VL53L0X_WrWord>
 8008c30:	4603      	mov	r3, r0
 8008c32:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008c34:	e014      	b.n	8008c60 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8008c3c:	e010      	b.n	8008c60 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008c44:	e00c      	b.n	8008c60 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	2164      	movs	r1, #100	; 0x64
 8008c50:	68f8      	ldr	r0, [r7, #12]
 8008c52:	f004 f8ce 	bl	800cdf2 <VL53L0X_WrWord>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008c5a:	e001      	b.n	8008c60 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008c5c:	23fc      	movs	r3, #252	; 0xfc
 8008c5e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d106      	bne.n	8008c76 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008c68:	897b      	ldrh	r3, [r7, #10]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	330c      	adds	r3, #12
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	4413      	add	r3, r2
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop

08008c84 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	607a      	str	r2, [r7, #4]
 8008c90:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8008c9a:	897b      	ldrh	r3, [r7, #10]
 8008c9c:	2b05      	cmp	r3, #5
 8008c9e:	d847      	bhi.n	8008d30 <VL53L0X_GetLimitCheckValue+0xac>
 8008ca0:	a201      	add	r2, pc, #4	; (adr r2, 8008ca8 <VL53L0X_GetLimitCheckValue+0x24>)
 8008ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca6:	bf00      	nop
 8008ca8:	08008cc1 	.word	0x08008cc1
 8008cac:	08008ccd 	.word	0x08008ccd
 8008cb0:	08008cf3 	.word	0x08008cf3
 8008cb4:	08008cff 	.word	0x08008cff
 8008cb8:	08008d0b 	.word	0x08008d0b
 8008cbc:	08008d0b 	.word	0x08008d0b

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc4:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	77bb      	strb	r3, [r7, #30]
		break;
 8008cca:	e033      	b.n	8008d34 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008ccc:	f107 0316 	add.w	r3, r7, #22
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	2144      	movs	r1, #68	; 0x44
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f004 f909 	bl	800ceec <VL53L0X_RdWord>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008cde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d102      	bne.n	8008cec <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008ce6:	8afb      	ldrh	r3, [r7, #22]
 8008ce8:	025b      	lsls	r3, r3, #9
 8008cea:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008cec:	2301      	movs	r3, #1
 8008cee:	77bb      	strb	r3, [r7, #30]
		break;
 8008cf0:	e020      	b.n	8008d34 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	77bb      	strb	r3, [r7, #30]
		break;
 8008cfc:	e01a      	b.n	8008d34 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d02:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	77bb      	strb	r3, [r7, #30]
		break;
 8008d08:	e014      	b.n	8008d34 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008d0a:	f107 0316 	add.w	r3, r7, #22
 8008d0e:	461a      	mov	r2, r3
 8008d10:	2164      	movs	r1, #100	; 0x64
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f004 f8ea 	bl	800ceec <VL53L0X_RdWord>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008d1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d102      	bne.n	8008d2a <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008d24:	8afb      	ldrh	r3, [r7, #22]
 8008d26:	025b      	lsls	r3, r3, #9
 8008d28:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	77bb      	strb	r3, [r7, #30]
		break;
 8008d2e:	e001      	b.n	8008d34 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008d30:	23fc      	movs	r3, #252	; 0xfc
 8008d32:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008d34:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d12a      	bne.n	8008d92 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008d3c:	7fbb      	ldrb	r3, [r7, #30]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d124      	bne.n	8008d8c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d110      	bne.n	8008d6a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8008d48:	897b      	ldrh	r3, [r7, #10]
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008d5c:	897b      	ldrh	r3, [r7, #10]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008d68:	e013      	b.n	8008d92 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008d70:	897b      	ldrh	r3, [r7, #10]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	330c      	adds	r3, #12
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008d7e:	897b      	ldrh	r3, [r7, #10]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4413      	add	r3, r2
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008d8a:	e002      	b.n	8008d92 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d92:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop

08008da0 <VL53L0X_GetLimitCheckCurrent>:

VL53L0X_Error VL53L0X_GetLimitCheckCurrent(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckCurrent)
{
 8008da0:	b4b0      	push	{r4, r5, r7}
 8008da2:	b08d      	sub	sp, #52	; 0x34
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	460b      	mov	r3, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	VL53L0X_RangingMeasurementData_t LastRangeDataBuffer;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008db4:	897b      	ldrh	r3, [r7, #10]
 8008db6:	2b05      	cmp	r3, #5
 8008db8:	d903      	bls.n	8008dc2 <VL53L0X_GetLimitCheckCurrent+0x22>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008dba:	23fc      	movs	r3, #252	; 0xfc
 8008dbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008dc0:	e05d      	b.n	8008e7e <VL53L0X_GetLimitCheckCurrent+0xde>
	} else {
		switch (LimitCheckId) {
 8008dc2:	897b      	ldrh	r3, [r7, #10]
 8008dc4:	2b05      	cmp	r3, #5
 8008dc6:	d857      	bhi.n	8008e78 <VL53L0X_GetLimitCheckCurrent+0xd8>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <VL53L0X_GetLimitCheckCurrent+0x30>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008de9 	.word	0x08008de9
 8008dd4:	08008df5 	.word	0x08008df5
 8008dd8:	08008e13 	.word	0x08008e13
 8008ddc:	08008e1f 	.word	0x08008e1f
 8008de0:	08008e3d 	.word	0x08008e3d
 8008de4:	08008e5b 	.word	0x08008e5b
		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev, SigmaEstimate);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	601a      	str	r2, [r3, #0]

			break;
 8008df2:	e044      	b.n	8008e7e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f107 0410 	add.w	r4, r7, #16
 8008dfa:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8008e0a:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	601a      	str	r2, [r3, #0]

			break;
 8008e10:	e035      	b.n	8008e7e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
			/* Need to run a ranging to have the latest values */
			*pLimitCheckCurrent = PALDevDataGet(Dev,
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	601a      	str	r2, [r3, #0]
				LastSignalRefMcps);

			break;
 8008e1c:	e02f      	b.n	8008e7e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f107 0410 	add.w	r4, r7, #16
 8008e24:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8008e34:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	601a      	str	r2, [r3, #0]

			break;
 8008e3a:	e020      	b.n	8008e7e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f107 0410 	add.w	r4, r7, #16
 8008e42:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8008e52:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	601a      	str	r2, [r3, #0]

			break;
 8008e58:	e011      	b.n	8008e7e <VL53L0X_GetLimitCheckCurrent+0xde>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
			/* Need to run a ranging to have the latest values */
			LastRangeDataBuffer = PALDevDataGet(Dev,
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f107 0410 	add.w	r4, r7, #16
 8008e60:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				LastRangeMeasure);
			*pLimitCheckCurrent =
				LastRangeDataBuffer.SignalRateRtnMegaCps;
 8008e70:	69fa      	ldr	r2, [r7, #28]
			*pLimitCheckCurrent =
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	601a      	str	r2, [r3, #0]

			break;
 8008e76:	e002      	b.n	8008e7e <VL53L0X_GetLimitCheckCurrent+0xde>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008e78:	23fc      	movs	r3, #252	; 0xfc
 8008e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e7e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f

}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3734      	adds	r7, #52	; 0x34
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bcb0      	pop	{r4, r5, r7}
 8008e8a:	4770      	bx	lr

08008e8c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e96:	2300      	movs	r3, #0
 8008e98:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008e9a:	f107 030e 	add.w	r3, r7, #14
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	2101      	movs	r1, #1
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f004 f803 	bl	800ceae <VL53L0X_RdByte>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10e      	bne.n	8008ed2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008eb4:	7bba      	ldrb	r2, [r7, #14]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008ebc:	7bbb      	ldrb	r3, [r7, #14]
 8008ebe:	b25b      	sxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	da03      	bge.n	8008ecc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e002      	b.n	8008ed2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781a      	ldrb	r2, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008efc:	f107 030e 	add.w	r3, r7, #14
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff fb74 	bl	80085f0 <VL53L0X_GetDeviceMode>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d107      	bne.n	8008f24 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d104      	bne.n	8008f24 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 f898 	bl	8009050 <VL53L0X_StartMeasurement>
 8008f20:	4603      	mov	r3, r0
 8008f22:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f001 fb3f 	bl	800a5b0 <VL53L0X_measurement_poll_for_completion>
 8008f32:	4603      	mov	r3, r0
 8008f34:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d106      	bne.n	8008f4c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2203      	movs	r2, #3
 8008f48:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f64:	2300      	movs	r3, #0
 8008f66:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008f68:	2301      	movs	r3, #1
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	68b9      	ldr	r1, [r7, #8]
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f001 fae1 	bl	800a536 <VL53L0X_perform_ref_calibration>
 8008f74:	4603      	mov	r3, r0
 8008f76:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3718      	adds	r7, #24
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b086      	sub	sp, #24
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008f9a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008f9c:	7dbb      	ldrb	r3, [r7, #22]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d005      	beq.n	8008fae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008fa2:	7dbb      	ldrb	r3, [r7, #22]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d002      	beq.n	8008fae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008fa8:	7dbb      	ldrb	r3, [r7, #22]
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d147      	bne.n	800903e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008fae:	f107 030c 	add.w	r3, r7, #12
 8008fb2:	f107 0210 	add.w	r2, r7, #16
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fbc3 	bl	8009744 <VL53L0X_GetInterruptThresholds>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008fc8:	d803      	bhi.n	8008fd2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008fca:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008fcc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008fd0:	d935      	bls.n	800903e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008fd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d131      	bne.n	800903e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008fda:	78fb      	ldrb	r3, [r7, #3]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d006      	beq.n	8008fee <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008fe0:	491a      	ldr	r1, [pc, #104]	; (800904c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f002 fcba 	bl	800b95c <VL53L0X_load_tuning_settings>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	75fb      	strb	r3, [r7, #23]
 8008fec:	e027      	b.n	800903e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008fee:	2204      	movs	r2, #4
 8008ff0:	21ff      	movs	r1, #255	; 0xff
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f003 fedd 	bl	800cdb2 <VL53L0X_WrByte>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	7dfb      	ldrb	r3, [r7, #23]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009002:	2200      	movs	r2, #0
 8009004:	2170      	movs	r1, #112	; 0x70
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f003 fed3 	bl	800cdb2 <VL53L0X_WrByte>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	7dfb      	ldrb	r3, [r7, #23]
 8009012:	4313      	orrs	r3, r2
 8009014:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009016:	2200      	movs	r2, #0
 8009018:	21ff      	movs	r1, #255	; 0xff
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f003 fec9 	bl	800cdb2 <VL53L0X_WrByte>
 8009020:	4603      	mov	r3, r0
 8009022:	461a      	mov	r2, r3
 8009024:	7dfb      	ldrb	r3, [r7, #23]
 8009026:	4313      	orrs	r3, r2
 8009028:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800902a:	2200      	movs	r2, #0
 800902c:	2180      	movs	r1, #128	; 0x80
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f003 febf 	bl	800cdb2 <VL53L0X_WrByte>
 8009034:	4603      	mov	r3, r0
 8009036:	461a      	mov	r2, r3
 8009038:	7dfb      	ldrb	r3, [r7, #23]
 800903a:	4313      	orrs	r3, r2
 800903c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800903e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009042:	4618      	mov	r0, r3
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	20000274 	.word	0x20000274

08009050 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009058:	2300      	movs	r3, #0
 800905a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800905c:	2301      	movs	r3, #1
 800905e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009060:	f107 030e 	add.w	r3, r7, #14
 8009064:	4619      	mov	r1, r3
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f7ff fac2 	bl	80085f0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800906c:	2201      	movs	r2, #1
 800906e:	2180      	movs	r1, #128	; 0x80
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f003 fe9e 	bl	800cdb2 <VL53L0X_WrByte>
 8009076:	4603      	mov	r3, r0
 8009078:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800907a:	2201      	movs	r2, #1
 800907c:	21ff      	movs	r1, #255	; 0xff
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f003 fe97 	bl	800cdb2 <VL53L0X_WrByte>
 8009084:	4603      	mov	r3, r0
 8009086:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009088:	2200      	movs	r2, #0
 800908a:	2100      	movs	r1, #0
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f003 fe90 	bl	800cdb2 <VL53L0X_WrByte>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800909c:	461a      	mov	r2, r3
 800909e:	2191      	movs	r1, #145	; 0x91
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f003 fe86 	bl	800cdb2 <VL53L0X_WrByte>
 80090a6:	4603      	mov	r3, r0
 80090a8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80090aa:	2201      	movs	r2, #1
 80090ac:	2100      	movs	r1, #0
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f003 fe7f 	bl	800cdb2 <VL53L0X_WrByte>
 80090b4:	4603      	mov	r3, r0
 80090b6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80090b8:	2200      	movs	r2, #0
 80090ba:	21ff      	movs	r1, #255	; 0xff
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f003 fe78 	bl	800cdb2 <VL53L0X_WrByte>
 80090c2:	4603      	mov	r3, r0
 80090c4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80090c6:	2200      	movs	r2, #0
 80090c8:	2180      	movs	r1, #128	; 0x80
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f003 fe71 	bl	800cdb2 <VL53L0X_WrByte>
 80090d0:	4603      	mov	r3, r0
 80090d2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80090d4:	7bbb      	ldrb	r3, [r7, #14]
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d037      	beq.n	800914a <VL53L0X_StartMeasurement+0xfa>
 80090da:	2b03      	cmp	r3, #3
 80090dc:	d04f      	beq.n	800917e <VL53L0X_StartMeasurement+0x12e>
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d167      	bne.n	80091b2 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80090e2:	2201      	movs	r2, #1
 80090e4:	2100      	movs	r1, #0
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f003 fe63 	bl	800cdb2 <VL53L0X_WrByte>
 80090ec:	4603      	mov	r3, r0
 80090ee:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80090f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d15d      	bne.n	80091b8 <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80090fc:	2300      	movs	r3, #0
 80090fe:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d008      	beq.n	8009118 <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8009106:	f107 030d 	add.w	r3, r7, #13
 800910a:	461a      	mov	r2, r3
 800910c:	2100      	movs	r1, #0
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f003 fecd 	bl	800ceae <VL53L0X_RdByte>
 8009114:	4603      	mov	r3, r0
 8009116:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	3301      	adds	r3, #1
 800911c:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800911e:	7b7a      	ldrb	r2, [r7, #13]
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	4013      	ands	r3, r2
 8009124:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009126:	7bfa      	ldrb	r2, [r7, #15]
 8009128:	429a      	cmp	r2, r3
 800912a:	d107      	bne.n	800913c <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 800912c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800913a:	d3e1      	bcc.n	8009100 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009142:	d339      	bcc.n	80091b8 <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009144:	23f9      	movs	r3, #249	; 0xf9
 8009146:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009148:	e036      	b.n	80091b8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800914a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d105      	bne.n	800915e <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009152:	2101      	movs	r1, #1
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff ff15 	bl	8008f84 <VL53L0X_CheckAndLoadInterruptSettings>
 800915a:	4603      	mov	r3, r0
 800915c:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800915e:	2202      	movs	r2, #2
 8009160:	2100      	movs	r1, #0
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f003 fe25 	bl	800cdb2 <VL53L0X_WrByte>
 8009168:	4603      	mov	r3, r0
 800916a:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800916c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d123      	bne.n	80091bc <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2204      	movs	r2, #4
 8009178:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800917c:	e01e      	b.n	80091bc <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800917e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d105      	bne.n	8009192 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009186:	2101      	movs	r1, #1
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7ff fefb 	bl	8008f84 <VL53L0X_CheckAndLoadInterruptSettings>
 800918e:	4603      	mov	r3, r0
 8009190:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009192:	2204      	movs	r2, #4
 8009194:	2100      	movs	r1, #0
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f003 fe0b 	bl	800cdb2 <VL53L0X_WrByte>
 800919c:	4603      	mov	r3, r0
 800919e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80091a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10b      	bne.n	80091c0 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2204      	movs	r2, #4
 80091ac:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80091b0:	e006      	b.n	80091c0 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80091b2:	23f8      	movs	r3, #248	; 0xf8
 80091b4:	75fb      	strb	r3, [r7, #23]
 80091b6:	e004      	b.n	80091c2 <VL53L0X_StartMeasurement+0x172>
		break;
 80091b8:	bf00      	nop
 80091ba:	e002      	b.n	80091c2 <VL53L0X_StartMeasurement+0x172>
		break;
 80091bc:	bf00      	nop
 80091be:	e000      	b.n	80091c2 <VL53L0X_StartMeasurement+0x172>
		break;
 80091c0:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80091c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80091d8:	2300      	movs	r3, #0
 80091da:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80091e2:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80091e4:	7bbb      	ldrb	r3, [r7, #14]
 80091e6:	2b04      	cmp	r3, #4
 80091e8:	d112      	bne.n	8009210 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80091ea:	f107 0308 	add.w	r3, r7, #8
 80091ee:	4619      	mov	r1, r3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fb1d 	bl	8009830 <VL53L0X_GetInterruptMaskStatus>
 80091f6:	4603      	mov	r3, r0
 80091f8:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	d103      	bne.n	8009208 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	2201      	movs	r2, #1
 8009204:	701a      	strb	r2, [r3, #0]
 8009206:	e01c      	b.n	8009242 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	e018      	b.n	8009242 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8009210:	f107 030d 	add.w	r3, r7, #13
 8009214:	461a      	mov	r2, r3
 8009216:	2114      	movs	r1, #20
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f003 fe48 	bl	800ceae <VL53L0X_RdByte>
 800921e:	4603      	mov	r3, r0
 8009220:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8009222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10b      	bne.n	8009242 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800922a:	7b7b      	ldrb	r3, [r7, #13]
 800922c:	f003 0301 	and.w	r3, r3, #1
 8009230:	2b00      	cmp	r3, #0
 8009232:	d003      	beq.n	800923c <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2201      	movs	r2, #1
 8009238:	701a      	strb	r2, [r3, #0]
 800923a:	e002      	b.n	8009242 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2200      	movs	r2, #0
 8009240:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009246:	4618      	mov	r0, r3
 8009248:	3710      	adds	r7, #16
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}
	...

08009250 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8009250:	b5b0      	push	{r4, r5, r7, lr}
 8009252:	b096      	sub	sp, #88	; 0x58
 8009254:	af02      	add	r7, sp, #8
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800925a:	2300      	movs	r3, #0
 800925c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8009260:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009264:	230c      	movs	r3, #12
 8009266:	2114      	movs	r1, #20
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f003 fd7d 	bl	800cd68 <VL53L0X_ReadMulti>
 800926e:	4603      	mov	r3, r0
 8009270:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8009274:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 80d2 	bne.w	8009422 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	2200      	movs	r2, #0
 8009282:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	2200      	movs	r2, #0
 8009288:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800928a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800928e:	b29b      	uxth	r3, r3
 8009290:	021b      	lsls	r3, r3, #8
 8009292:	b29a      	uxth	r2, r3
 8009294:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009298:	b29b      	uxth	r3, r3
 800929a:	4413      	add	r3, r2
 800929c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	2200      	movs	r2, #0
 80092a4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80092a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	021b      	lsls	r3, r3, #8
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4413      	add	r3, r2
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	025b      	lsls	r3, r3, #9
 80092bc:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092c2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80092c4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	021b      	lsls	r3, r3, #8
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4413      	add	r3, r2
 80092d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80092da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80092de:	025b      	lsls	r3, r3, #9
 80092e0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80092e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	4413      	add	r3, r2
 80092f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009302:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8009304:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8009312:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800931a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800931e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009320:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009324:	d047      	beq.n	80093b6 <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8009326:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009328:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800932c:	fb02 f303 	mul.w	r3, r2, r3
 8009330:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009334:	4a58      	ldr	r2, [pc, #352]	; (8009498 <VL53L0X_GetRangingMeasurementData+0x248>)
 8009336:	fb82 1203 	smull	r1, r2, r2, r3
 800933a:	1192      	asrs	r2, r2, #6
 800933c:	17db      	asrs	r3, r3, #31
 800933e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8009340:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a1b      	ldr	r3, [r3, #32]
 8009348:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	7f1b      	ldrb	r3, [r3, #28]
 800934e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8009352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009356:	2b00      	cmp	r3, #0
 8009358:	d02d      	beq.n	80093b6 <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800935a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800935c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8009360:	fb02 f303 	mul.w	r3, r2, r3
 8009364:	121b      	asrs	r3, r3, #8
 8009366:	461a      	mov	r2, r3
				if ((SignalRate
 8009368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800936a:	4293      	cmp	r3, r2
 800936c:	d10d      	bne.n	800938a <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 800936e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8009376:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800937a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800937e:	e016      	b.n	80093ae <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8009380:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8009384:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009388:	e011      	b.n	80093ae <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800938a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800938e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009390:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8009394:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009396:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800939a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800939e:	121b      	asrs	r3, r3, #8
 80093a0:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80093a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093a4:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80093a6:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80093aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80093ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80093b2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80093b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00d      	beq.n	80093da <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80093be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80093c2:	089b      	lsrs	r3, r3, #2
 80093c4:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80093ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	019b      	lsls	r3, r3, #6
 80093d2:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	75da      	strb	r2, [r3, #23]
 80093d8:	e006      	b.n	80093e8 <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80093e0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	2200      	movs	r2, #0
 80093e6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80093e8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80093ec:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80093f0:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	4613      	mov	r3, r2
 80093fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f002 ff54 	bl	800c2ac <VL53L0X_get_pal_range_status>
 8009404:	4603      	mov	r3, r0
 8009406:	461a      	mov	r2, r3
 8009408:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800940c:	4313      	orrs	r3, r2
 800940e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8009412:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009416:	2b00      	cmp	r3, #0
 8009418:	d103      	bne.n	8009422 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800941a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009422:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8009426:	2b00      	cmp	r3, #0
 8009428:	d12f      	bne.n	800948a <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f107 040c 	add.w	r4, r7, #12
 8009430:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8009434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009438:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800943c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8009444:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800944a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8009452:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8009458:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800945e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8009464:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800946a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8009470:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800947a:	f107 050c 	add.w	r5, r7, #12
 800947e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009482:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009486:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800948a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800948e:	4618      	mov	r0, r3
 8009490:	3750      	adds	r7, #80	; 0x50
 8009492:	46bd      	mov	sp, r7
 8009494:	bdb0      	pop	{r4, r5, r7, pc}
 8009496:	bf00      	nop
 8009498:	10624dd3 	.word	0x10624dd3

0800949c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80094aa:	2100      	movs	r1, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff f857 	bl	8008560 <VL53L0X_SetDeviceMode>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80094b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d104      	bne.n	80094c8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7ff fd16 	bl	8008ef0 <VL53L0X_PerformSingleMeasurement>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80094c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d105      	bne.n	80094dc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80094d0:	6839      	ldr	r1, [r7, #0]
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff febc 	bl	8009250 <VL53L0X_GetRangingMeasurementData>
 80094d8:	4603      	mov	r3, r0
 80094da:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80094dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d105      	bne.n	80094f0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80094e4:	2100      	movs	r1, #0
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f962 	bl	80097b0 <VL53L0X_ClearInterruptMask>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80094f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3710      	adds	r7, #16
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	461a      	mov	r2, r3
 800950a:	4603      	mov	r3, r0
 800950c:	70fb      	strb	r3, [r7, #3]
 800950e:	460b      	mov	r3, r1
 8009510:	70bb      	strb	r3, [r7, #2]
 8009512:	4613      	mov	r3, r2
 8009514:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009516:	2300      	movs	r3, #0
 8009518:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8009520:	23f6      	movs	r3, #246	; 0xf6
 8009522:	73fb      	strb	r3, [r7, #15]
 8009524:	e107      	b.n	8009736 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009526:	78bb      	ldrb	r3, [r7, #2]
 8009528:	2b14      	cmp	r3, #20
 800952a:	d110      	bne.n	800954e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800952c:	7e3b      	ldrb	r3, [r7, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d102      	bne.n	8009538 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8009532:	2310      	movs	r3, #16
 8009534:	73bb      	strb	r3, [r7, #14]
 8009536:	e001      	b.n	800953c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009538:	2301      	movs	r3, #1
 800953a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	461a      	mov	r2, r3
 8009540:	2184      	movs	r1, #132	; 0x84
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f003 fc35 	bl	800cdb2 <VL53L0X_WrByte>
 8009548:	4603      	mov	r3, r0
 800954a:	73fb      	strb	r3, [r7, #15]
 800954c:	e0f3      	b.n	8009736 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800954e:	78bb      	ldrb	r3, [r7, #2]
 8009550:	2b15      	cmp	r3, #21
 8009552:	f040 8097 	bne.w	8009684 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009556:	2201      	movs	r2, #1
 8009558:	21ff      	movs	r1, #255	; 0xff
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f003 fc29 	bl	800cdb2 <VL53L0X_WrByte>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	4313      	orrs	r3, r2
 8009568:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f003 fc1f 	bl	800cdb2 <VL53L0X_WrByte>
 8009574:	4603      	mov	r3, r0
 8009576:	461a      	mov	r2, r3
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	4313      	orrs	r3, r2
 800957c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800957e:	2200      	movs	r2, #0
 8009580:	21ff      	movs	r1, #255	; 0xff
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f003 fc15 	bl	800cdb2 <VL53L0X_WrByte>
 8009588:	4603      	mov	r3, r0
 800958a:	461a      	mov	r2, r3
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4313      	orrs	r3, r2
 8009590:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009592:	2201      	movs	r2, #1
 8009594:	2180      	movs	r1, #128	; 0x80
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f003 fc0b 	bl	800cdb2 <VL53L0X_WrByte>
 800959c:	4603      	mov	r3, r0
 800959e:	461a      	mov	r2, r3
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80095a6:	2202      	movs	r2, #2
 80095a8:	2185      	movs	r1, #133	; 0x85
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f003 fc01 	bl	800cdb2 <VL53L0X_WrByte>
 80095b0:	4603      	mov	r3, r0
 80095b2:	461a      	mov	r2, r3
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80095ba:	2204      	movs	r2, #4
 80095bc:	21ff      	movs	r1, #255	; 0xff
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f003 fbf7 	bl	800cdb2 <VL53L0X_WrByte>
 80095c4:	4603      	mov	r3, r0
 80095c6:	461a      	mov	r2, r3
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80095ce:	2200      	movs	r2, #0
 80095d0:	21cd      	movs	r1, #205	; 0xcd
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f003 fbed 	bl	800cdb2 <VL53L0X_WrByte>
 80095d8:	4603      	mov	r3, r0
 80095da:	461a      	mov	r2, r3
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	4313      	orrs	r3, r2
 80095e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80095e2:	2211      	movs	r2, #17
 80095e4:	21cc      	movs	r1, #204	; 0xcc
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f003 fbe3 	bl	800cdb2 <VL53L0X_WrByte>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80095f6:	2207      	movs	r2, #7
 80095f8:	21ff      	movs	r1, #255	; 0xff
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f003 fbd9 	bl	800cdb2 <VL53L0X_WrByte>
 8009600:	4603      	mov	r3, r0
 8009602:	461a      	mov	r2, r3
 8009604:	7bfb      	ldrb	r3, [r7, #15]
 8009606:	4313      	orrs	r3, r2
 8009608:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800960a:	2200      	movs	r2, #0
 800960c:	21be      	movs	r1, #190	; 0xbe
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f003 fbcf 	bl	800cdb2 <VL53L0X_WrByte>
 8009614:	4603      	mov	r3, r0
 8009616:	461a      	mov	r2, r3
 8009618:	7bfb      	ldrb	r3, [r7, #15]
 800961a:	4313      	orrs	r3, r2
 800961c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800961e:	2206      	movs	r2, #6
 8009620:	21ff      	movs	r1, #255	; 0xff
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f003 fbc5 	bl	800cdb2 <VL53L0X_WrByte>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	4313      	orrs	r3, r2
 8009630:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8009632:	2209      	movs	r2, #9
 8009634:	21cc      	movs	r1, #204	; 0xcc
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f003 fbbb 	bl	800cdb2 <VL53L0X_WrByte>
 800963c:	4603      	mov	r3, r0
 800963e:	461a      	mov	r2, r3
 8009640:	7bfb      	ldrb	r3, [r7, #15]
 8009642:	4313      	orrs	r3, r2
 8009644:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009646:	2200      	movs	r2, #0
 8009648:	21ff      	movs	r1, #255	; 0xff
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f003 fbb1 	bl	800cdb2 <VL53L0X_WrByte>
 8009650:	4603      	mov	r3, r0
 8009652:	461a      	mov	r2, r3
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	4313      	orrs	r3, r2
 8009658:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800965a:	2201      	movs	r2, #1
 800965c:	21ff      	movs	r1, #255	; 0xff
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f003 fba7 	bl	800cdb2 <VL53L0X_WrByte>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	4313      	orrs	r3, r2
 800966c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800966e:	2200      	movs	r2, #0
 8009670:	2100      	movs	r1, #0
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f003 fb9d 	bl	800cdb2 <VL53L0X_WrByte>
 8009678:	4603      	mov	r3, r0
 800967a:	461a      	mov	r2, r3
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	4313      	orrs	r3, r2
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	e058      	b.n	8009736 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8009684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d121      	bne.n	80096d0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800968c:	787b      	ldrb	r3, [r7, #1]
 800968e:	2b04      	cmp	r3, #4
 8009690:	d81b      	bhi.n	80096ca <VL53L0X_SetGpioConfig+0x1ce>
 8009692:	a201      	add	r2, pc, #4	; (adr r2, 8009698 <VL53L0X_SetGpioConfig+0x19c>)
 8009694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009698:	080096ad 	.word	0x080096ad
 800969c:	080096b3 	.word	0x080096b3
 80096a0:	080096b9 	.word	0x080096b9
 80096a4:	080096bf 	.word	0x080096bf
 80096a8:	080096c5 	.word	0x080096c5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73bb      	strb	r3, [r7, #14]
				break;
 80096b0:	e00f      	b.n	80096d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80096b2:	2301      	movs	r3, #1
 80096b4:	73bb      	strb	r3, [r7, #14]
				break;
 80096b6:	e00c      	b.n	80096d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80096b8:	2302      	movs	r3, #2
 80096ba:	73bb      	strb	r3, [r7, #14]
				break;
 80096bc:	e009      	b.n	80096d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80096be:	2303      	movs	r3, #3
 80096c0:	73bb      	strb	r3, [r7, #14]
				break;
 80096c2:	e006      	b.n	80096d2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80096c4:	2304      	movs	r3, #4
 80096c6:	73bb      	strb	r3, [r7, #14]
				break;
 80096c8:	e003      	b.n	80096d2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80096ca:	23f5      	movs	r3, #245	; 0xf5
 80096cc:	73fb      	strb	r3, [r7, #15]
 80096ce:	e000      	b.n	80096d2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80096d0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80096d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d107      	bne.n	80096ea <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80096da:	7bbb      	ldrb	r3, [r7, #14]
 80096dc:	461a      	mov	r2, r3
 80096de:	210a      	movs	r1, #10
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f003 fb66 	bl	800cdb2 <VL53L0X_WrByte>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80096ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10f      	bne.n	8009712 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80096f2:	7e3b      	ldrb	r3, [r7, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d102      	bne.n	80096fe <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	73bb      	strb	r3, [r7, #14]
 80096fc:	e001      	b.n	8009702 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80096fe:	2310      	movs	r3, #16
 8009700:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8009702:	7bbb      	ldrb	r3, [r7, #14]
 8009704:	22ef      	movs	r2, #239	; 0xef
 8009706:	2184      	movs	r1, #132	; 0x84
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f003 fb92 	bl	800ce32 <VL53L0X_UpdateByte>
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8009712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d103      	bne.n	8009722 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	787a      	ldrb	r2, [r7, #1]
 800971e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8009722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d105      	bne.n	8009736 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800972a:	2100      	movs	r1, #0
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f83f 	bl	80097b0 <VL53L0X_ClearInterruptMask>
 8009732:	4603      	mov	r3, r0
 8009734:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009736:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop

08009744 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	607a      	str	r2, [r7, #4]
 800974e:	603b      	str	r3, [r7, #0]
 8009750:	460b      	mov	r3, r1
 8009752:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009754:	2300      	movs	r3, #0
 8009756:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009758:	f107 0314 	add.w	r3, r7, #20
 800975c:	461a      	mov	r2, r3
 800975e:	210e      	movs	r1, #14
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f003 fbc3 	bl	800ceec <VL53L0X_RdWord>
 8009766:	4603      	mov	r3, r0
 8009768:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800976a:	8abb      	ldrh	r3, [r7, #20]
 800976c:	045b      	lsls	r3, r3, #17
 800976e:	461a      	mov	r2, r3
 8009770:	4b0e      	ldr	r3, [pc, #56]	; (80097ac <VL53L0X_GetInterruptThresholds+0x68>)
 8009772:	4013      	ands	r3, r2
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8009778:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10f      	bne.n	80097a0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8009780:	f107 0314 	add.w	r3, r7, #20
 8009784:	461a      	mov	r2, r3
 8009786:	210c      	movs	r1, #12
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f003 fbaf 	bl	800ceec <VL53L0X_RdWord>
 800978e:	4603      	mov	r3, r0
 8009790:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8009792:	8abb      	ldrh	r3, [r7, #20]
 8009794:	045b      	lsls	r3, r3, #17
 8009796:	461a      	mov	r2, r3
 8009798:	4b04      	ldr	r3, [pc, #16]	; (80097ac <VL53L0X_GetInterruptThresholds+0x68>)
 800979a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	1ffe0000 	.word	0x1ffe0000

080097b0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80097c2:	2201      	movs	r2, #1
 80097c4:	210b      	movs	r1, #11
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f003 faf3 	bl	800cdb2 <VL53L0X_WrByte>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80097d0:	2200      	movs	r2, #0
 80097d2:	210b      	movs	r1, #11
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f003 faec 	bl	800cdb2 <VL53L0X_WrByte>
 80097da:	4603      	mov	r3, r0
 80097dc:	461a      	mov	r2, r3
 80097de:	7bfb      	ldrb	r3, [r7, #15]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80097e4:	f107 030d 	add.w	r3, r7, #13
 80097e8:	461a      	mov	r2, r3
 80097ea:	2113      	movs	r1, #19
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f003 fb5e 	bl	800ceae <VL53L0X_RdByte>
 80097f2:	4603      	mov	r3, r0
 80097f4:	461a      	mov	r2, r3
 80097f6:	7bfb      	ldrb	r3, [r7, #15]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	3301      	adds	r3, #1
 8009800:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8009802:	7b7b      	ldrb	r3, [r7, #13]
 8009804:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8009808:	2b00      	cmp	r3, #0
 800980a:	d006      	beq.n	800981a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800980c:	7bbb      	ldrb	r3, [r7, #14]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d803      	bhi.n	800981a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8009812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0d3      	beq.n	80097c2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800981a:	7bbb      	ldrb	r3, [r7, #14]
 800981c:	2b02      	cmp	r3, #2
 800981e:	d901      	bls.n	8009824 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8009820:	23f4      	movs	r3, #244	; 0xf4
 8009822:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009824:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800983e:	f107 030e 	add.w	r3, r7, #14
 8009842:	461a      	mov	r2, r3
 8009844:	2113      	movs	r1, #19
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f003 fb31 	bl	800ceae <VL53L0X_RdByte>
 800984c:	4603      	mov	r3, r0
 800984e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8009850:	7bbb      	ldrb	r3, [r7, #14]
 8009852:	f003 0207 	and.w	r2, r3, #7
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	f003 0318 	and.w	r3, r3, #24
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8009864:	23fa      	movs	r3, #250	; 0xfa
 8009866:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b086      	sub	sp, #24
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009880:	2300      	movs	r3, #0
 8009882:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	68b9      	ldr	r1, [r7, #8]
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 fa03 	bl	8009c94 <VL53L0X_perform_ref_spad_management>
 800988e:	4603      	mov	r3, r0
 8009890:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8009892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098a8:	2300      	movs	r3, #0
 80098aa:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80098ac:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80098b0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80098b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098b6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80098b8:	f107 0308 	add.w	r3, r7, #8
 80098bc:	461a      	mov	r2, r3
 80098be:	2128      	movs	r1, #40	; 0x28
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f003 fb13 	bl	800ceec <VL53L0X_RdWord>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80098ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d11e      	bne.n	8009910 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80098d2:	893b      	ldrh	r3, [r7, #8]
 80098d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098d8:	b29b      	uxth	r3, r3
 80098da:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80098dc:	893b      	ldrh	r3, [r7, #8]
 80098de:	461a      	mov	r2, r3
 80098e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	dd0b      	ble.n	8009900 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80098e8:	893a      	ldrh	r2, [r7, #8]
 80098ea:	897b      	ldrh	r3, [r7, #10]
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	b21b      	sxth	r3, r3
 80098f2:	461a      	mov	r2, r3
					* 250;
 80098f4:	23fa      	movs	r3, #250	; 0xfa
 80098f6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	e007      	b.n	8009910 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009900:	893b      	ldrh	r3, [r7, #8]
 8009902:	b21b      	sxth	r3, r3
 8009904:	461a      	mov	r2, r3
 8009906:	23fa      	movs	r3, #250	; 0xfa
 8009908:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009910:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800991c:	b480      	push	{r7}
 800991e:	b08b      	sub	sp, #44	; 0x2c
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
 8009928:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800992a:	2308      	movs	r3, #8
 800992c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009938:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009942:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	fbb3 f2f2 	udiv	r2, r3, r2
 800994c:	69b9      	ldr	r1, [r7, #24]
 800994e:	fb01 f202 	mul.w	r2, r1, r2
 8009952:	1a9b      	subs	r3, r3, r2
 8009954:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
 800995a:	e030      	b.n	80099be <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800995c:	2300      	movs	r3, #0
 800995e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009964:	4413      	add	r3, r2
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800996a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	429a      	cmp	r2, r3
 8009970:	d11e      	bne.n	80099b0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8009972:	7ffa      	ldrb	r2, [r7, #31]
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	fa42 f303 	asr.w	r3, r2, r3
 800997a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8009980:	e016      	b.n	80099b0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8009982:	7ffb      	ldrb	r3, [r7, #31]
 8009984:	f003 0301 	and.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00b      	beq.n	80099a4 <get_next_good_spad+0x88>
				success = 1;
 800998c:	2301      	movs	r3, #1
 800998e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	fb02 f203 	mul.w	r2, r2, r3
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	4413      	add	r3, r2
 800999c:	461a      	mov	r2, r3
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	601a      	str	r2, [r3, #0]
				break;
 80099a2:	e009      	b.n	80099b8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80099a4:	7ffb      	ldrb	r3, [r7, #31]
 80099a6:	085b      	lsrs	r3, r3, #1
 80099a8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80099aa:	6a3b      	ldr	r3, [r7, #32]
 80099ac:	3301      	adds	r3, #1
 80099ae:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80099b0:	6a3a      	ldr	r2, [r7, #32]
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d3e4      	bcc.n	8009982 <get_next_good_spad+0x66>
				coarseIndex++) {
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	3301      	adds	r3, #1
 80099bc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80099be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d202      	bcs.n	80099cc <get_next_good_spad+0xb0>
 80099c6:	7fbb      	ldrb	r3, [r7, #30]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0c7      	beq.n	800995c <get_next_good_spad+0x40>
		}
	}
}
 80099cc:	bf00      	nop
 80099ce:	372c      	adds	r7, #44	; 0x2c
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80099e0:	2301      	movs	r3, #1
 80099e2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	099b      	lsrs	r3, r3, #6
 80099e8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80099ea:	4a07      	ldr	r2, [pc, #28]	; (8009a08 <is_aperture+0x30>)
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <is_aperture+0x22>
		isAperture = 0;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80099fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	2000042c 	.word	0x2000042c

08009a0c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b089      	sub	sp, #36	; 0x24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009a1c:	2308      	movs	r3, #8
 8009a1e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a28:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009a32:	69b9      	ldr	r1, [r7, #24]
 8009a34:	fb01 f202 	mul.w	r2, r1, r2
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d302      	bcc.n	8009a4a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009a44:	23ce      	movs	r3, #206	; 0xce
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e010      	b.n	8009a6c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	4413      	add	r3, r2
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	b25a      	sxtb	r2, r3
 8009a54:	2101      	movs	r1, #1
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5c:	b25b      	sxtb	r3, r3
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	b259      	sxtb	r1, r3
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	4413      	add	r3, r2
 8009a68:	b2ca      	uxtb	r2, r1
 8009a6a:	701a      	strb	r2, [r3, #0]

	return status;
 8009a6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3724      	adds	r7, #36	; 0x24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8009a86:	2306      	movs	r3, #6
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	21b0      	movs	r1, #176	; 0xb0
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f003 f944 	bl	800cd1a <VL53L0X_WriteMulti>
 8009a92:	4603      	mov	r3, r0
 8009a94:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8009a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3710      	adds	r7, #16
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8009aac:	2306      	movs	r3, #6
 8009aae:	683a      	ldr	r2, [r7, #0]
 8009ab0:	21b0      	movs	r1, #176	; 0xb0
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f003 f958 	bl	800cd68 <VL53L0X_ReadMulti>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8009abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08c      	sub	sp, #48	; 0x30
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	60f8      	str	r0, [r7, #12]
 8009ad0:	607a      	str	r2, [r7, #4]
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8009ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ae0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ae4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aea:	e02b      	b.n	8009b44 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009aec:	f107 031c 	add.w	r3, r7, #28
 8009af0:	6a3a      	ldr	r2, [r7, #32]
 8009af2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7ff ff11 	bl	800991c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009afa:	69fb      	ldr	r3, [r7, #28]
 8009afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b00:	d103      	bne.n	8009b0a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009b02:	23ce      	movs	r3, #206	; 0xce
 8009b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009b08:	e020      	b.n	8009b4c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b10:	4413      	add	r3, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff ff60 	bl	80099d8 <is_aperture>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d003      	beq.n	8009b2a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009b22:	23ce      	movs	r3, #206	; 0xce
 8009b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009b28:	e010      	b.n	8009b4c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8009b2e:	6a3a      	ldr	r2, [r7, #32]
 8009b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b32:	6838      	ldr	r0, [r7, #0]
 8009b34:	f7ff ff6a 	bl	8009a0c <enable_spad_bit>
		currentSpad++;
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	3301      	adds	r3, #1
 8009b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d3cf      	bcc.n	8009aec <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8009b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b4e:	6a3a      	ldr	r2, [r7, #32]
 8009b50:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009b52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d106      	bne.n	8009b68 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	68f8      	ldr	r0, [r7, #12]
 8009b5e:	f7ff ff8d 	bl	8009a7c <set_ref_spad_map>
 8009b62:	4603      	mov	r3, r0
 8009b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009b68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d121      	bne.n	8009bb4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8009b70:	f107 0314 	add.w	r3, r7, #20
 8009b74:	4619      	mov	r1, r3
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff ff93 	bl	8009aa2 <get_ref_spad_map>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8009b86:	e011      	b.n	8009bac <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	4413      	add	r3, r2
 8009b8e:	781a      	ldrb	r2, [r3, #0]
 8009b90:	f107 0114 	add.w	r1, r7, #20
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	440b      	add	r3, r1
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d003      	beq.n	8009ba6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009b9e:	23ce      	movs	r3, #206	; 0xce
 8009ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8009ba4:	e006      	b.n	8009bb4 <enable_ref_spads+0xec>
			}
			i++;
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	3301      	adds	r3, #1
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8009bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d3e9      	bcc.n	8009b88 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8009bb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3730      	adds	r7, #48	; 0x30
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08a      	sub	sp, #40	; 0x28
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009bdc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009be0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d107      	bne.n	8009bf8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009be8:	22c0      	movs	r2, #192	; 0xc0
 8009bea:	2101      	movs	r1, #1
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f003 f8e0 	bl	800cdb2 <VL53L0X_WrByte>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009bf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d108      	bne.n	8009c12 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009c00:	f107 0308 	add.w	r3, r7, #8
 8009c04:	4619      	mov	r1, r3
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f7ff fc48 	bl	800949c <VL53L0X_PerformSingleRangingMeasurement>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009c12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d107      	bne.n	8009c2a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	21ff      	movs	r1, #255	; 0xff
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f003 f8c7 	bl	800cdb2 <VL53L0X_WrByte>
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009c2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d107      	bne.n	8009c42 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	21b6      	movs	r1, #182	; 0xb6
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f003 f958 	bl	800ceec <VL53L0X_RdWord>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009c42:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d107      	bne.n	8009c5a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	21ff      	movs	r1, #255	; 0xff
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f003 f8af 	bl	800cdb2 <VL53L0X_WrByte>
 8009c54:	4603      	mov	r3, r0
 8009c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8009c5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d112      	bne.n	8009c88 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009c62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009c66:	461a      	mov	r2, r3
 8009c68:	2101      	movs	r1, #1
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f003 f8a1 	bl	800cdb2 <VL53L0X_WrByte>
 8009c70:	4603      	mov	r3, r0
 8009c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8009c76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d104      	bne.n	8009c88 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009c84:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8009c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3728      	adds	r7, #40	; 0x28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8009c94:	b590      	push	{r4, r7, lr}
 8009c96:	b09d      	sub	sp, #116	; 0x74
 8009c98:	af06      	add	r7, sp, #24
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8009ca6:	23b4      	movs	r3, #180	; 0xb4
 8009ca8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8009cac:	2303      	movs	r3, #3
 8009cae:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8009cb0:	232c      	movs	r3, #44	; 0x2c
 8009cb2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8009cc0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009cc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 8009cce:	2306      	movs	r3, #6
 8009cd0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8009cf8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8009cfe:	e009      	b.n	8009d14 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d04:	4413      	add	r3, r2
 8009d06:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d10:	3301      	adds	r3, #1
 8009d12:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d3f1      	bcc.n	8009d00 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	21ff      	movs	r1, #255	; 0xff
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f003 f846 	bl	800cdb2 <VL53L0X_WrByte>
 8009d26:	4603      	mov	r3, r0
 8009d28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009d2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d107      	bne.n	8009d44 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009d34:	2200      	movs	r2, #0
 8009d36:	214f      	movs	r1, #79	; 0x4f
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f003 f83a 	bl	800cdb2 <VL53L0X_WrByte>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009d44:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d107      	bne.n	8009d5c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009d4c:	222c      	movs	r2, #44	; 0x2c
 8009d4e:	214e      	movs	r1, #78	; 0x4e
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f003 f82e 	bl	800cdb2 <VL53L0X_WrByte>
 8009d56:	4603      	mov	r3, r0
 8009d58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009d5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d107      	bne.n	8009d74 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009d64:	2200      	movs	r2, #0
 8009d66:	21ff      	movs	r1, #255	; 0xff
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f003 f822 	bl	800cdb2 <VL53L0X_WrByte>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009d74:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d109      	bne.n	8009d90 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8009d7c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009d80:	461a      	mov	r2, r3
 8009d82:	21b6      	movs	r1, #182	; 0xb6
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f003 f814 	bl	800cdb2 <VL53L0X_WrByte>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8009d90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d107      	bne.n	8009da8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2180      	movs	r1, #128	; 0x80
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f003 f808 	bl	800cdb2 <VL53L0X_WrByte>
 8009da2:	4603      	mov	r3, r0
 8009da4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8009da8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10a      	bne.n	8009dc6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8009db0:	f107 0210 	add.w	r2, r7, #16
 8009db4:	f107 0111 	add.w	r1, r7, #17
 8009db8:	2300      	movs	r3, #0
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f000 fbbb 	bl	800a536 <VL53L0X_perform_ref_calibration>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009dc6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d121      	bne.n	8009e12 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8009dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dd4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ddc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009dea:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009dee:	f107 0218 	add.w	r2, r7, #24
 8009df2:	9204      	str	r2, [sp, #16]
 8009df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009df6:	9203      	str	r2, [sp, #12]
 8009df8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dfa:	9202      	str	r2, [sp, #8]
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	4623      	mov	r3, r4
 8009e04:	4602      	mov	r2, r0
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	f7ff fe5e 	bl	8009ac8 <enable_ref_spads>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e12:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d174      	bne.n	8009f04 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009e1a:	69bb      	ldr	r3, [r7, #24]
 8009e1c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8009e1e:	f107 0312 	add.w	r3, r7, #18
 8009e22:	4619      	mov	r1, r3
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f7ff fecb 	bl	8009bc0 <perform_ref_signal_measurement>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009e30:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d161      	bne.n	8009efc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009e38:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009e3a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d25d      	bcs.n	8009efc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009e40:	2300      	movs	r3, #0
 8009e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e44:	e009      	b.n	8009e5a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e56:	3301      	adds	r3, #1
 8009e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d3f1      	bcc.n	8009e46 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009e62:	e002      	b.n	8009e6a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e66:	3301      	adds	r3, #1
 8009e68:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8009e6a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8009e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e70:	4413      	add	r3, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7ff fdb0 	bl	80099d8 <is_aperture>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d103      	bne.n	8009e86 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8009e7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d3ee      	bcc.n	8009e64 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8009e86:	2301      	movs	r3, #1
 8009e88:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8009e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e8c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8009e9a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009e9e:	f107 0218 	add.w	r2, r7, #24
 8009ea2:	9204      	str	r2, [sp, #16]
 8009ea4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ea6:	9203      	str	r2, [sp, #12]
 8009ea8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009eaa:	9202      	str	r2, [sp, #8]
 8009eac:	9301      	str	r3, [sp, #4]
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	9300      	str	r3, [sp, #0]
 8009eb2:	4623      	mov	r3, r4
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	68f8      	ldr	r0, [r7, #12]
 8009eb8:	f7ff fe06 	bl	8009ac8 <enable_ref_spads>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009ec2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d11b      	bne.n	8009f02 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009ece:	f107 0312 	add.w	r3, r7, #18
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f7ff fe73 	bl	8009bc0 <perform_ref_signal_measurement>
 8009eda:	4603      	mov	r3, r0
 8009edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009ee0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d10c      	bne.n	8009f02 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009ee8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009eea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d208      	bcs.n	8009f02 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009efa:	e002      	b.n	8009f02 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f00:	e000      	b.n	8009f04 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009f02:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009f04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 80af 	bne.w	800a06c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009f0e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009f10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009f12:	429a      	cmp	r2, r3
 8009f14:	f240 80aa 	bls.w	800a06c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f20:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009f28:	f107 031c 	add.w	r3, r7, #28
 8009f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f003 f860 	bl	800cff4 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009f34:	8a7b      	ldrh	r3, [r7, #18]
 8009f36:	461a      	mov	r2, r3
 8009f38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	bfb8      	it	lt
 8009f40:	425b      	neglt	r3, r3
 8009f42:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009f4a:	e086      	b.n	800a05a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009f52:	f107 0314 	add.w	r3, r7, #20
 8009f56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f5a:	f7ff fcdf 	bl	800991c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f64:	d103      	bne.n	8009f6e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009f66:	23ce      	movs	r3, #206	; 0xce
 8009f68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009f6c:	e07e      	b.n	800a06c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009f6e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009f72:	697a      	ldr	r2, [r7, #20]
 8009f74:	4413      	add	r3, r2
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7ff fd2e 	bl	80099d8 <is_aperture>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	461a      	mov	r2, r3
 8009f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d003      	beq.n	8009f8e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8009f86:	2301      	movs	r3, #1
 8009f88:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8009f8c:	e06e      	b.n	800a06c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f90:	3301      	adds	r3, #1
 8009f92:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009f9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f7ff fd32 	bl	8009a0c <enable_spad_bit>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009fae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10c      	bne.n	8009fd0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fb8:	3301      	adds	r3, #1
 8009fba:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f7ff fd59 	bl	8009a7c <set_ref_spad_map>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009fd0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d146      	bne.n	800a066 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009fd8:	f107 0312 	add.w	r3, r7, #18
 8009fdc:	4619      	mov	r1, r3
 8009fde:	68f8      	ldr	r0, [r7, #12]
 8009fe0:	f7ff fdee 	bl	8009bc0 <perform_ref_signal_measurement>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009fea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d13b      	bne.n	800a06a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009ff2:	8a7b      	ldrh	r3, [r7, #18]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	bfb8      	it	lt
 8009ffe:	425b      	neglt	r3, r3
 800a000:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800a002:	8a7b      	ldrh	r3, [r7, #18]
 800a004:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a006:	429a      	cmp	r2, r3
 800a008:	d21c      	bcs.n	800a044 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800a00a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a00e:	429a      	cmp	r2, r3
 800a010:	d914      	bls.n	800a03c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800a012:	f107 031c 	add.w	r3, r7, #28
 800a016:	4619      	mov	r1, r3
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7ff fd2f 	bl	8009a7c <set_ref_spad_map>
 800a01e:	4603      	mov	r3, r0
 800a020:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800a02a:	f107 011c 	add.w	r1, r7, #28
 800a02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a030:	4618      	mov	r0, r3
 800a032:	f002 ffdf 	bl	800cff4 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800a036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a038:	3b01      	subs	r3, #1
 800a03a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800a03c:	2301      	movs	r3, #1
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a042:	e00a      	b.n	800a05a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800a04e:	f107 031c 	add.w	r3, r7, #28
 800a052:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a054:	4618      	mov	r0, r3
 800a056:	f002 ffcd 	bl	800cff4 <memcpy>
		while (!complete) {
 800a05a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f43f af74 	beq.w	8009f4c <VL53L0X_perform_ref_spad_management+0x2b8>
 800a064:	e002      	b.n	800a06c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a066:	bf00      	nop
 800a068:	e000      	b.n	800a06c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800a06a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a06c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800a070:	2b00      	cmp	r3, #0
 800a072:	d115      	bne.n	800a0a0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a078:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800a080:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	781a      	ldrb	r2, [r3, #0]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800a0a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	375c      	adds	r7, #92	; 0x5c
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd90      	pop	{r4, r7, pc}

0800a0ac <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800a0ac:	b590      	push	{r4, r7, lr}
 800a0ae:	b093      	sub	sp, #76	; 0x4c
 800a0b0:	af06      	add	r7, sp, #24
 800a0b2:	60f8      	str	r0, [r7, #12]
 800a0b4:	60b9      	str	r1, [r7, #8]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800a0c4:	23b4      	movs	r3, #180	; 0xb4
 800a0c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800a0ca:	2306      	movs	r3, #6
 800a0cc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800a0ce:	232c      	movs	r3, #44	; 0x2c
 800a0d0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	21ff      	movs	r1, #255	; 0xff
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f002 fe6b 	bl	800cdb2 <VL53L0X_WrByte>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a0e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d107      	bne.n	800a0fa <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	214f      	movs	r1, #79	; 0x4f
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f002 fe5f 	bl	800cdb2 <VL53L0X_WrByte>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800a0fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d107      	bne.n	800a112 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800a102:	222c      	movs	r2, #44	; 0x2c
 800a104:	214e      	movs	r1, #78	; 0x4e
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f002 fe53 	bl	800cdb2 <VL53L0X_WrByte>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800a112:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a116:	2b00      	cmp	r3, #0
 800a118:	d107      	bne.n	800a12a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a11a:	2200      	movs	r2, #0
 800a11c:	21ff      	movs	r1, #255	; 0xff
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f002 fe47 	bl	800cdb2 <VL53L0X_WrByte>
 800a124:	4603      	mov	r3, r0
 800a126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800a12a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800a132:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a136:	461a      	mov	r2, r3
 800a138:	21b6      	movs	r1, #182	; 0xb6
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f002 fe39 	bl	800cdb2 <VL53L0X_WrByte>
 800a140:	4603      	mov	r3, r0
 800a142:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800a146:	2300      	movs	r3, #0
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
 800a14a:	e009      	b.n	800a160 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	4413      	add	r3, r2
 800a152:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800a156:	2200      	movs	r2, #0
 800a158:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800a15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15c:	3301      	adds	r3, #1
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24
 800a160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	429a      	cmp	r2, r3
 800a166:	d3f1      	bcc.n	800a14c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d011      	beq.n	800a192 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a16e:	e002      	b.n	800a176 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	3301      	adds	r3, #1
 800a174:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800a176:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17c:	4413      	add	r3, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff fc2a 	bl	80099d8 <is_aperture>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d103      	bne.n	800a192 <VL53L0X_set_reference_spads+0xe6>
 800a18a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d3ee      	bcc.n	800a170 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800a19e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1a2:	79f9      	ldrb	r1, [r7, #7]
 800a1a4:	f107 0214 	add.w	r2, r7, #20
 800a1a8:	9204      	str	r2, [sp, #16]
 800a1aa:	68ba      	ldr	r2, [r7, #8]
 800a1ac:	9203      	str	r2, [sp, #12]
 800a1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b0:	9202      	str	r2, [sp, #8]
 800a1b2:	9301      	str	r3, [sp, #4]
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	4623      	mov	r3, r4
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	f7ff fc83 	bl	8009ac8 <enable_ref_spads>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800a1c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10c      	bne.n	800a1ea <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	79fa      	ldrb	r2, [r7, #7]
 800a1e6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800a1ea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3734      	adds	r7, #52	; 0x34
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd90      	pop	{r4, r7, pc}

0800a1f6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	460b      	mov	r3, r1
 800a200:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a202:	2300      	movs	r3, #0
 800a204:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d10a      	bne.n	800a224 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	f043 0301 	orr.w	r3, r3, #1
 800a214:	b2db      	uxtb	r3, r3
 800a216:	461a      	mov	r2, r3
 800a218:	2100      	movs	r1, #0
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f002 fdc9 	bl	800cdb2 <VL53L0X_WrByte>
 800a220:	4603      	mov	r3, r0
 800a222:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800a224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d104      	bne.n	800a236 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f9bf 	bl	800a5b0 <VL53L0X_measurement_poll_for_completion>
 800a232:	4603      	mov	r3, r0
 800a234:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d105      	bne.n	800a24a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a23e:	2100      	movs	r1, #0
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f7ff fab5 	bl	80097b0 <VL53L0X_ClearInterruptMask>
 800a246:	4603      	mov	r3, r0
 800a248:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d106      	bne.n	800a260 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800a252:	2200      	movs	r2, #0
 800a254:	2100      	movs	r1, #0
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f002 fdab 	bl	800cdb2 <VL53L0X_WrByte>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800a260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a264:	4618      	mov	r0, r3
 800a266:	3710      	adds	r7, #16
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	4608      	mov	r0, r1
 800a276:	4611      	mov	r1, r2
 800a278:	461a      	mov	r2, r3
 800a27a:	4603      	mov	r3, r0
 800a27c:	70fb      	strb	r3, [r7, #3]
 800a27e:	460b      	mov	r3, r1
 800a280:	70bb      	strb	r3, [r7, #2]
 800a282:	4613      	mov	r3, r2
 800a284:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a286:	2300      	movs	r3, #0
 800a288:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800a28a:	2300      	movs	r3, #0
 800a28c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a28e:	2201      	movs	r2, #1
 800a290:	21ff      	movs	r1, #255	; 0xff
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f002 fd8d 	bl	800cdb2 <VL53L0X_WrByte>
 800a298:	4603      	mov	r3, r0
 800a29a:	461a      	mov	r2, r3
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f002 fd83 	bl	800cdb2 <VL53L0X_WrByte>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	7bfb      	ldrb	r3, [r7, #15]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	21ff      	movs	r1, #255	; 0xff
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f002 fd79 	bl	800cdb2 <VL53L0X_WrByte>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d01e      	beq.n	800a30e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800a2d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d009      	beq.n	800a2ec <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	21cb      	movs	r1, #203	; 0xcb
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f002 fde6 	bl	800ceae <VL53L0X_RdByte>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a2ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d02a      	beq.n	800a34a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800a2f4:	f107 030e 	add.w	r3, r7, #14
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	21ee      	movs	r1, #238	; 0xee
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f002 fdd6 	bl	800ceae <VL53L0X_RdByte>
 800a302:	4603      	mov	r3, r0
 800a304:	461a      	mov	r2, r3
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	4313      	orrs	r3, r2
 800a30a:	73fb      	strb	r3, [r7, #15]
 800a30c:	e01d      	b.n	800a34a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800a30e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00a      	beq.n	800a32c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800a316:	78bb      	ldrb	r3, [r7, #2]
 800a318:	461a      	mov	r2, r3
 800a31a:	21cb      	movs	r1, #203	; 0xcb
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f002 fd48 	bl	800cdb2 <VL53L0X_WrByte>
 800a322:	4603      	mov	r3, r0
 800a324:	461a      	mov	r2, r3
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	4313      	orrs	r3, r2
 800a32a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800a32c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00a      	beq.n	800a34a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800a334:	787b      	ldrb	r3, [r7, #1]
 800a336:	2280      	movs	r2, #128	; 0x80
 800a338:	21ee      	movs	r1, #238	; 0xee
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f002 fd79 	bl	800ce32 <VL53L0X_UpdateByte>
 800a340:	4603      	mov	r3, r0
 800a342:	461a      	mov	r2, r3
 800a344:	7bfb      	ldrb	r3, [r7, #15]
 800a346:	4313      	orrs	r3, r2
 800a348:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a34a:	2201      	movs	r2, #1
 800a34c:	21ff      	movs	r1, #255	; 0xff
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f002 fd2f 	bl	800cdb2 <VL53L0X_WrByte>
 800a354:	4603      	mov	r3, r0
 800a356:	461a      	mov	r2, r3
 800a358:	7bfb      	ldrb	r3, [r7, #15]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a35e:	2201      	movs	r2, #1
 800a360:	2100      	movs	r1, #0
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f002 fd25 	bl	800cdb2 <VL53L0X_WrByte>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	7bfb      	ldrb	r3, [r7, #15]
 800a36e:	4313      	orrs	r3, r2
 800a370:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a372:	2200      	movs	r2, #0
 800a374:	21ff      	movs	r1, #255	; 0xff
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f002 fd1b 	bl	800cdb2 <VL53L0X_WrByte>
 800a37c:	4603      	mov	r3, r0
 800a37e:	461a      	mov	r2, r3
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	4313      	orrs	r3, r2
 800a384:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800a386:	7bbb      	ldrb	r3, [r7, #14]
 800a388:	f023 0310 	bic.w	r3, r3, #16
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	701a      	strb	r2, [r3, #0]

	return Status;
 800a392:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3710      	adds	r7, #16
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b08a      	sub	sp, #40	; 0x28
 800a3a2:	af04      	add	r7, sp, #16
 800a3a4:	60f8      	str	r0, [r7, #12]
 800a3a6:	60b9      	str	r1, [r7, #8]
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	71fb      	strb	r3, [r7, #7]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a3c8:	79bb      	ldrb	r3, [r7, #6]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d003      	beq.n	800a3d6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a3d4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	2101      	movs	r1, #1
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f002 fce9 	bl	800cdb2 <VL53L0X_WrByte>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a3e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d105      	bne.n	800a3f8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800a3ec:	2140      	movs	r1, #64	; 0x40
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff ff01 	bl	800a1f6 <VL53L0X_perform_single_ref_calibration>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d115      	bne.n	800a42c <VL53L0X_perform_vhv_calibration+0x8e>
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d112      	bne.n	800a42c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a406:	7d39      	ldrb	r1, [r7, #20]
 800a408:	7d7a      	ldrb	r2, [r7, #21]
 800a40a:	2300      	movs	r3, #0
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	2301      	movs	r3, #1
 800a410:	9302      	str	r3, [sp, #8]
 800a412:	f107 0313 	add.w	r3, r7, #19
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	460b      	mov	r3, r1
 800a41e:	2101      	movs	r1, #1
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff ff23 	bl	800a26c <VL53L0X_ref_calibration_io>
 800a426:	4603      	mov	r3, r0
 800a428:	75fb      	strb	r3, [r7, #23]
 800a42a:	e002      	b.n	800a432 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2200      	movs	r2, #0
 800a430:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a432:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d112      	bne.n	800a460 <VL53L0X_perform_vhv_calibration+0xc2>
 800a43a:	79bb      	ldrb	r3, [r7, #6]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00f      	beq.n	800a460 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a440:	7dbb      	ldrb	r3, [r7, #22]
 800a442:	461a      	mov	r2, r3
 800a444:	2101      	movs	r1, #1
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f002 fcb3 	bl	800cdb2 <VL53L0X_WrByte>
 800a44c:	4603      	mov	r3, r0
 800a44e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a450:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d103      	bne.n	800a460 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	7dba      	ldrb	r2, [r7, #22]
 800a45c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a460:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08a      	sub	sp, #40	; 0x28
 800a470:	af04      	add	r7, sp, #16
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	4611      	mov	r1, r2
 800a478:	461a      	mov	r2, r3
 800a47a:	460b      	mov	r3, r1
 800a47c:	71fb      	strb	r3, [r7, #7]
 800a47e:	4613      	mov	r3, r2
 800a480:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a482:	2300      	movs	r3, #0
 800a484:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a486:	2300      	movs	r3, #0
 800a488:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800a492:	79bb      	ldrb	r3, [r7, #6]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d003      	beq.n	800a4a0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a49e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800a4a0:	2202      	movs	r2, #2
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f002 fc84 	bl	800cdb2 <VL53L0X_WrByte>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800a4ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d105      	bne.n	800a4c2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f7ff fe9c 	bl	800a1f6 <VL53L0X_perform_single_ref_calibration>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800a4c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d115      	bne.n	800a4f6 <VL53L0X_perform_phase_calibration+0x8a>
 800a4ca:	79fb      	ldrb	r3, [r7, #7]
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d112      	bne.n	800a4f6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a4d0:	7d39      	ldrb	r1, [r7, #20]
 800a4d2:	7d7a      	ldrb	r2, [r7, #21]
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	9303      	str	r3, [sp, #12]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	9302      	str	r3, [sp, #8]
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	f107 0313 	add.w	r3, r7, #19
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	2101      	movs	r1, #1
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	f7ff febe 	bl	800a26c <VL53L0X_ref_calibration_io>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	75fb      	strb	r3, [r7, #23]
 800a4f4:	e002      	b.n	800a4fc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a4fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d112      	bne.n	800a52a <VL53L0X_perform_phase_calibration+0xbe>
 800a504:	79bb      	ldrb	r3, [r7, #6]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00f      	beq.n	800a52a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a50a:	7dbb      	ldrb	r3, [r7, #22]
 800a50c:	461a      	mov	r2, r3
 800a50e:	2101      	movs	r1, #1
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f002 fc4e 	bl	800cdb2 <VL53L0X_WrByte>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a51a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	7dba      	ldrb	r2, [r7, #22]
 800a526:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a52a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3718      	adds	r7, #24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b086      	sub	sp, #24
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	60f8      	str	r0, [r7, #12]
 800a53e:	60b9      	str	r1, [r7, #8]
 800a540:	607a      	str	r2, [r7, #4]
 800a542:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a544:	2300      	movs	r3, #0
 800a546:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a552:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	2300      	movs	r3, #0
 800a558:	68b9      	ldr	r1, [r7, #8]
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7ff ff1f 	bl	800a39e <VL53L0X_perform_vhv_calibration>
 800a560:	4603      	mov	r3, r0
 800a562:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a564:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d107      	bne.n	800a57c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a56c:	78fa      	ldrb	r2, [r7, #3]
 800a56e:	2300      	movs	r3, #0
 800a570:	6879      	ldr	r1, [r7, #4]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff ff7a 	bl	800a46c <VL53L0X_perform_phase_calibration>
 800a578:	4603      	mov	r3, r0
 800a57a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a57c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10f      	bne.n	800a5a4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a584:	7dbb      	ldrb	r3, [r7, #22]
 800a586:	461a      	mov	r2, r3
 800a588:	2101      	movs	r1, #1
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f002 fc11 	bl	800cdb2 <VL53L0X_WrByte>
 800a590:	4603      	mov	r3, r0
 800a592:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	7dba      	ldrb	r2, [r7, #22]
 800a5a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a5a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a5c4:	f107 030f 	add.w	r3, r7, #15
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7fe fdff 	bl	80091ce <VL53L0X_GetMeasurementDataReady>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a5d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d110      	bne.n	800a5fe <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d00f      	beq.n	800a602 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a5ee:	d302      	bcc.n	800a5f6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a5f0:	23f9      	movs	r3, #249	; 0xf9
 800a5f2:	75fb      	strb	r3, [r7, #23]
			break;
 800a5f4:	e006      	b.n	800a604 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f002 fcb6 	bl	800cf68 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a5fc:	e7e2      	b.n	800a5c4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a5fe:	bf00      	nop
 800a600:	e000      	b.n	800a604 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800a602:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800a604:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a61e:	79fb      	ldrb	r3, [r7, #7]
 800a620:	3301      	adds	r3, #1
 800a622:	b2db      	uxtb	r3, r3
 800a624:	005b      	lsls	r3, r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a628:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800a636:	b480      	push	{r7}
 800a638:	b085      	sub	sp, #20
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a646:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800a648:	e002      	b.n	800a650 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	089b      	lsrs	r3, r3, #2
 800a64e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	429a      	cmp	r2, r3
 800a656:	d8f8      	bhi.n	800a64a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a658:	e017      	b.n	800a68a <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	4413      	add	r3, r2
 800a660:	687a      	ldr	r2, [r7, #4]
 800a662:	429a      	cmp	r2, r3
 800a664:	d30b      	bcc.n	800a67e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	4413      	add	r3, r2
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	085b      	lsrs	r3, r3, #1
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	4413      	add	r3, r2
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	e002      	b.n	800a684 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	085b      	lsrs	r3, r3, #1
 800a682:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	089b      	lsrs	r3, r3, #2
 800a688:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d1e4      	bne.n	800a65a <VL53L0X_isqrt+0x24>
	}

	return res;
 800a690:	68fb      	ldr	r3, [r7, #12]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b086      	sub	sp, #24
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2183      	movs	r1, #131	; 0x83
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f002 fb7f 	bl	800cdb2 <VL53L0X_WrByte>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800a6be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d11e      	bne.n	800a704 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a6ca:	f107 030f 	add.w	r3, r7, #15
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	2183      	movs	r1, #131	; 0x83
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f002 fbeb 	bl	800ceae <VL53L0X_RdByte>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10a      	bne.n	800a6f8 <VL53L0X_device_read_strobe+0x5a>
 800a6e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d106      	bne.n	800a6f8 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a6f6:	d3e8      	bcc.n	800a6ca <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a6fe:	d301      	bcc.n	800a704 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a700:	23f9      	movs	r3, #249	; 0xf9
 800a702:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800a704:	2201      	movs	r2, #1
 800a706:	2183      	movs	r1, #131	; 0x83
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f002 fb52 	bl	800cdb2 <VL53L0X_WrByte>
 800a70e:	4603      	mov	r3, r0
 800a710:	461a      	mov	r2, r3
 800a712:	7dfb      	ldrb	r3, [r7, #23]
 800a714:	4313      	orrs	r3, r2
 800a716:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a718:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b098      	sub	sp, #96	; 0x60
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a730:	2300      	movs	r3, #0
 800a732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a746:	2300      	movs	r3, #0
 800a748:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a754:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a758:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a75e:	2300      	movs	r3, #0
 800a760:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a76c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800a770:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a774:	2b07      	cmp	r3, #7
 800a776:	f000 8408 	beq.w	800af8a <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a77a:	2201      	movs	r2, #1
 800a77c:	2180      	movs	r1, #128	; 0x80
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f002 fb17 	bl	800cdb2 <VL53L0X_WrByte>
 800a784:	4603      	mov	r3, r0
 800a786:	461a      	mov	r2, r3
 800a788:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a78c:	4313      	orrs	r3, r2
 800a78e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a792:	2201      	movs	r2, #1
 800a794:	21ff      	movs	r1, #255	; 0xff
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f002 fb0b 	bl	800cdb2 <VL53L0X_WrByte>
 800a79c:	4603      	mov	r3, r0
 800a79e:	461a      	mov	r2, r3
 800a7a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f002 faff 	bl	800cdb2 <VL53L0X_WrByte>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a7c2:	2206      	movs	r2, #6
 800a7c4:	21ff      	movs	r1, #255	; 0xff
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f002 faf3 	bl	800cdb2 <VL53L0X_WrByte>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a7da:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a7de:	461a      	mov	r2, r3
 800a7e0:	2183      	movs	r1, #131	; 0x83
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f002 fb63 	bl	800ceae <VL53L0X_RdByte>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a7f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7fa:	f043 0304 	orr.w	r3, r3, #4
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	461a      	mov	r2, r3
 800a802:	2183      	movs	r1, #131	; 0x83
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f002 fad4 	bl	800cdb2 <VL53L0X_WrByte>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a812:	4313      	orrs	r3, r2
 800a814:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a818:	2207      	movs	r2, #7
 800a81a:	21ff      	movs	r1, #255	; 0xff
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f002 fac8 	bl	800cdb2 <VL53L0X_WrByte>
 800a822:	4603      	mov	r3, r0
 800a824:	461a      	mov	r2, r3
 800a826:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a82a:	4313      	orrs	r3, r2
 800a82c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a830:	2201      	movs	r2, #1
 800a832:	2181      	movs	r1, #129	; 0x81
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f002 fabc 	bl	800cdb2 <VL53L0X_WrByte>
 800a83a:	4603      	mov	r3, r0
 800a83c:	461a      	mov	r2, r3
 800a83e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a842:	4313      	orrs	r3, r2
 800a844:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f002 fb8d 	bl	800cf68 <VL53L0X_PollingDelay>
 800a84e:	4603      	mov	r3, r0
 800a850:	461a      	mov	r2, r3
 800a852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a856:	4313      	orrs	r3, r2
 800a858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a85c:	2201      	movs	r2, #1
 800a85e:	2180      	movs	r1, #128	; 0x80
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f002 faa6 	bl	800cdb2 <VL53L0X_WrByte>
 800a866:	4603      	mov	r3, r0
 800a868:	461a      	mov	r2, r3
 800a86a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a86e:	4313      	orrs	r3, r2
 800a870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a874:	78fb      	ldrb	r3, [r7, #3]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f000 8098 	beq.w	800a9b0 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a884:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f040 8091 	bne.w	800a9b0 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a88e:	226b      	movs	r2, #107	; 0x6b
 800a890:	2194      	movs	r1, #148	; 0x94
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f002 fa8d 	bl	800cdb2 <VL53L0X_WrByte>
 800a898:	4603      	mov	r3, r0
 800a89a:	461a      	mov	r2, r3
 800a89c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fef9 	bl	800a69e <VL53L0X_device_read_strobe>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a8ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8be:	461a      	mov	r2, r3
 800a8c0:	2190      	movs	r1, #144	; 0x90
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f002 fb31 	bl	800cf2a <VL53L0X_RdDWord>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	0a1b      	lsrs	r3, r3, #8
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8e0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e6:	0bdb      	lsrs	r3, r3, #15
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	f003 0301 	and.w	r3, r3, #1
 800a8ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a8f2:	2224      	movs	r2, #36	; 0x24
 800a8f4:	2194      	movs	r1, #148	; 0x94
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f002 fa5b 	bl	800cdb2 <VL53L0X_WrByte>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	461a      	mov	r2, r3
 800a900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a904:	4313      	orrs	r3, r2
 800a906:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f7ff fec7 	bl	800a69e <VL53L0X_device_read_strobe>
 800a910:	4603      	mov	r3, r0
 800a912:	461a      	mov	r2, r3
 800a914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a918:	4313      	orrs	r3, r2
 800a91a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a91e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a922:	461a      	mov	r2, r3
 800a924:	2190      	movs	r1, #144	; 0x90
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f002 faff 	bl	800cf2a <VL53L0X_RdDWord>
 800a92c:	4603      	mov	r3, r0
 800a92e:	461a      	mov	r2, r3
 800a930:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a934:	4313      	orrs	r3, r2
 800a936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93c:	0e1b      	lsrs	r3, r3, #24
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a944:	0c1b      	lsrs	r3, r3, #16
 800a946:	b2db      	uxtb	r3, r3
 800a948:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	0a1b      	lsrs	r3, r3, #8
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a954:	b2db      	uxtb	r3, r3
 800a956:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a958:	2225      	movs	r2, #37	; 0x25
 800a95a:	2194      	movs	r1, #148	; 0x94
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f002 fa28 	bl	800cdb2 <VL53L0X_WrByte>
 800a962:	4603      	mov	r3, r0
 800a964:	461a      	mov	r2, r3
 800a966:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a96a:	4313      	orrs	r3, r2
 800a96c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7ff fe94 	bl	800a69e <VL53L0X_device_read_strobe>
 800a976:	4603      	mov	r3, r0
 800a978:	461a      	mov	r2, r3
 800a97a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a97e:	4313      	orrs	r3, r2
 800a980:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a988:	461a      	mov	r2, r3
 800a98a:	2190      	movs	r1, #144	; 0x90
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f002 facc 	bl	800cf2a <VL53L0X_RdDWord>
 800a992:	4603      	mov	r3, r0
 800a994:	461a      	mov	r2, r3
 800a996:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a99a:	4313      	orrs	r3, r2
 800a99c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a2:	0e1b      	lsrs	r3, r3, #24
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	0c1b      	lsrs	r3, r3, #16
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a9b0:	78fb      	ldrb	r3, [r7, #3]
 800a9b2:	f003 0302 	and.w	r3, r3, #2
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f000 8189 	beq.w	800acce <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a9bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a9c0:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f040 8182 	bne.w	800acce <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	2194      	movs	r1, #148	; 0x94
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f002 f9ef 	bl	800cdb2 <VL53L0X_WrByte>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7ff fe5b 	bl	800a69e <VL53L0X_device_read_strobe>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a9f6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	2190      	movs	r1, #144	; 0x90
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f002 fa55 	bl	800ceae <VL53L0X_RdByte>
 800aa04:	4603      	mov	r3, r0
 800aa06:	461a      	mov	r2, r3
 800aa08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800aa12:	227b      	movs	r2, #123	; 0x7b
 800aa14:	2194      	movs	r1, #148	; 0x94
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f002 f9cb 	bl	800cdb2 <VL53L0X_WrByte>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa24:	4313      	orrs	r3, r2
 800aa26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f7ff fe37 	bl	800a69e <VL53L0X_device_read_strobe>
 800aa30:	4603      	mov	r3, r0
 800aa32:	461a      	mov	r2, r3
 800aa34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800aa3e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800aa42:	461a      	mov	r2, r3
 800aa44:	2190      	movs	r1, #144	; 0x90
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f002 fa31 	bl	800ceae <VL53L0X_RdByte>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa54:	4313      	orrs	r3, r2
 800aa56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800aa5a:	2277      	movs	r2, #119	; 0x77
 800aa5c:	2194      	movs	r1, #148	; 0x94
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f002 f9a7 	bl	800cdb2 <VL53L0X_WrByte>
 800aa64:	4603      	mov	r3, r0
 800aa66:	461a      	mov	r2, r3
 800aa68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa6c:	4313      	orrs	r3, r2
 800aa6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f7ff fe13 	bl	800a69e <VL53L0X_device_read_strobe>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa80:	4313      	orrs	r3, r2
 800aa82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800aa86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	2190      	movs	r1, #144	; 0x90
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f002 fa4b 	bl	800cf2a <VL53L0X_RdDWord>
 800aa94:	4603      	mov	r3, r0
 800aa96:	461a      	mov	r2, r3
 800aa98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	0e5b      	lsrs	r3, r3, #25
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	0c9b      	lsrs	r3, r3, #18
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	0adb      	lsrs	r3, r3, #11
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aac8:	b2db      	uxtb	r3, r3
 800aaca:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	091b      	lsrs	r3, r3, #4
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	00db      	lsls	r3, r3, #3
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800aaec:	2278      	movs	r2, #120	; 0x78
 800aaee:	2194      	movs	r1, #148	; 0x94
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f002 f95e 	bl	800cdb2 <VL53L0X_WrByte>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	461a      	mov	r2, r3
 800aafa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aafe:	4313      	orrs	r3, r2
 800ab00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f7ff fdca 	bl	800a69e <VL53L0X_device_read_strobe>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab12:	4313      	orrs	r3, r2
 800ab14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ab18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	2190      	movs	r1, #144	; 0x90
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f002 fa02 	bl	800cf2a <VL53L0X_RdDWord>
 800ab26:	4603      	mov	r3, r0
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	0f5b      	lsrs	r3, r3, #29
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab3e:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800ab40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ab44:	4413      	add	r3, r2
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4c:	0d9b      	lsrs	r3, r3, #22
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	0bdb      	lsrs	r3, r3, #15
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab68:	0a1b      	lsrs	r3, r3, #8
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800ab74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab76:	085b      	lsrs	r3, r3, #1
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	019b      	lsls	r3, r3, #6
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800ab94:	2279      	movs	r2, #121	; 0x79
 800ab96:	2194      	movs	r1, #148	; 0x94
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f002 f90a 	bl	800cdb2 <VL53L0X_WrByte>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	461a      	mov	r2, r3
 800aba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aba6:	4313      	orrs	r3, r2
 800aba8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f7ff fd76 	bl	800a69e <VL53L0X_device_read_strobe>
 800abb2:	4603      	mov	r3, r0
 800abb4:	461a      	mov	r2, r3
 800abb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abba:	4313      	orrs	r3, r2
 800abbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800abc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800abc4:	461a      	mov	r2, r3
 800abc6:	2190      	movs	r1, #144	; 0x90
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f002 f9ae 	bl	800cf2a <VL53L0X_RdDWord>
 800abce:	4603      	mov	r3, r0
 800abd0:	461a      	mov	r2, r3
 800abd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abd6:	4313      	orrs	r3, r2
 800abd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	0e9b      	lsrs	r3, r3, #26
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe6:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800abe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800abec:	4413      	add	r3, r2
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800abf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf4:	0cdb      	lsrs	r3, r3, #19
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	0b1b      	lsrs	r3, r3, #12
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	095b      	lsrs	r3, r3, #5
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800ac2e:	227a      	movs	r2, #122	; 0x7a
 800ac30:	2194      	movs	r1, #148	; 0x94
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f002 f8bd 	bl	800cdb2 <VL53L0X_WrByte>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac40:	4313      	orrs	r3, r2
 800ac42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff fd29 	bl	800a69e <VL53L0X_device_read_strobe>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	461a      	mov	r2, r3
 800ac50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac54:	4313      	orrs	r3, r2
 800ac56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ac5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ac5e:	461a      	mov	r2, r3
 800ac60:	2190      	movs	r1, #144	; 0x90
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f002 f961 	bl	800cf2a <VL53L0X_RdDWord>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac70:	4313      	orrs	r3, r2
 800ac72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	0f9b      	lsrs	r3, r3, #30
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac80:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800ac82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ac86:	4413      	add	r3, r2
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800ac8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac8e:	0ddb      	lsrs	r3, r3, #23
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac9c:	0c1b      	lsrs	r3, r3, #16
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800aca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acaa:	0a5b      	lsrs	r3, r3, #9
 800acac:	b2db      	uxtb	r3, r3
 800acae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	089b      	lsrs	r3, r3, #2
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acc2:	b2db      	uxtb	r3, r3
 800acc4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800acc8:	2300      	movs	r3, #0
 800acca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	f003 0304 	and.w	r3, r3, #4
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80f1 	beq.w	800aebc <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800acda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800acde:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f040 80ea 	bne.w	800aebc <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800ace8:	227b      	movs	r2, #123	; 0x7b
 800acea:	2194      	movs	r1, #148	; 0x94
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f002 f860 	bl	800cdb2 <VL53L0X_WrByte>
 800acf2:	4603      	mov	r3, r0
 800acf4:	461a      	mov	r2, r3
 800acf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acfa:	4313      	orrs	r3, r2
 800acfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff fccc 	bl	800a69e <VL53L0X_device_read_strobe>
 800ad06:	4603      	mov	r3, r0
 800ad08:	461a      	mov	r2, r3
 800ad0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800ad14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ad18:	461a      	mov	r2, r3
 800ad1a:	2190      	movs	r1, #144	; 0x90
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f002 f904 	bl	800cf2a <VL53L0X_RdDWord>
 800ad22:	4603      	mov	r3, r0
 800ad24:	461a      	mov	r2, r3
 800ad26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800ad30:	227c      	movs	r2, #124	; 0x7c
 800ad32:	2194      	movs	r1, #148	; 0x94
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f002 f83c 	bl	800cdb2 <VL53L0X_WrByte>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad42:	4313      	orrs	r3, r2
 800ad44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff fca8 	bl	800a69e <VL53L0X_device_read_strobe>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	461a      	mov	r2, r3
 800ad52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad56:	4313      	orrs	r3, r2
 800ad58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800ad5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad60:	461a      	mov	r2, r3
 800ad62:	2190      	movs	r1, #144	; 0x90
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f002 f8e0 	bl	800cf2a <VL53L0X_RdDWord>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad72:	4313      	orrs	r3, r2
 800ad74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800ad78:	2273      	movs	r2, #115	; 0x73
 800ad7a:	2194      	movs	r1, #148	; 0x94
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f002 f818 	bl	800cdb2 <VL53L0X_WrByte>
 800ad82:	4603      	mov	r3, r0
 800ad84:	461a      	mov	r2, r3
 800ad86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f7ff fc84 	bl	800a69e <VL53L0X_device_read_strobe>
 800ad96:	4603      	mov	r3, r0
 800ad98:	461a      	mov	r2, r3
 800ad9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ada4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ada8:	461a      	mov	r2, r3
 800adaa:	2190      	movs	r1, #144	; 0x90
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f002 f8bc 	bl	800cf2a <VL53L0X_RdDWord>
 800adb2:	4603      	mov	r3, r0
 800adb4:	461a      	mov	r2, r3
 800adb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adba:	4313      	orrs	r3, r2
 800adbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800adc8:	2274      	movs	r2, #116	; 0x74
 800adca:	2194      	movs	r1, #148	; 0x94
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f001 fff0 	bl	800cdb2 <VL53L0X_WrByte>
 800add2:	4603      	mov	r3, r0
 800add4:	461a      	mov	r2, r3
 800add6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adda:	4313      	orrs	r3, r2
 800addc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff fc5c 	bl	800a69e <VL53L0X_device_read_strobe>
 800ade6:	4603      	mov	r3, r0
 800ade8:	461a      	mov	r2, r3
 800adea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adee:	4313      	orrs	r3, r2
 800adf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800adf4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800adf8:	461a      	mov	r2, r3
 800adfa:	2190      	movs	r1, #144	; 0x90
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f002 f894 	bl	800cf2a <VL53L0X_RdDWord>
 800ae02:	4603      	mov	r3, r0
 800ae04:	461a      	mov	r2, r3
 800ae06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800ae14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae16:	4313      	orrs	r3, r2
 800ae18:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800ae1a:	2275      	movs	r2, #117	; 0x75
 800ae1c:	2194      	movs	r1, #148	; 0x94
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f001 ffc7 	bl	800cdb2 <VL53L0X_WrByte>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7ff fc33 	bl	800a69e <VL53L0X_device_read_strobe>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae40:	4313      	orrs	r3, r2
 800ae42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ae46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	2190      	movs	r1, #144	; 0x90
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f002 f86b 	bl	800cf2a <VL53L0X_RdDWord>
 800ae54:	4603      	mov	r3, r0
 800ae56:	461a      	mov	r2, r3
 800ae58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800ae62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae64:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800ae6a:	2276      	movs	r2, #118	; 0x76
 800ae6c:	2194      	movs	r1, #148	; 0x94
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f001 ff9f 	bl	800cdb2 <VL53L0X_WrByte>
 800ae74:	4603      	mov	r3, r0
 800ae76:	461a      	mov	r2, r3
 800ae78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f7ff fc0b 	bl	800a69e <VL53L0X_device_read_strobe>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae90:	4313      	orrs	r3, r2
 800ae92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ae96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	2190      	movs	r1, #144	; 0x90
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f002 f843 	bl	800cf2a <VL53L0X_RdDWord>
 800aea4:	4603      	mov	r3, r0
 800aea6:	461a      	mov	r2, r3
 800aea8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeac:	4313      	orrs	r3, r2
 800aeae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800aeb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800aebc:	2200      	movs	r2, #0
 800aebe:	2181      	movs	r1, #129	; 0x81
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 ff76 	bl	800cdb2 <VL53L0X_WrByte>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aece:	4313      	orrs	r3, r2
 800aed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800aed4:	2206      	movs	r2, #6
 800aed6:	21ff      	movs	r1, #255	; 0xff
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f001 ff6a 	bl	800cdb2 <VL53L0X_WrByte>
 800aede:	4603      	mov	r3, r0
 800aee0:	461a      	mov	r2, r3
 800aee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aee6:	4313      	orrs	r3, r2
 800aee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800aeec:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800aef0:	461a      	mov	r2, r3
 800aef2:	2183      	movs	r1, #131	; 0x83
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 ffda 	bl	800ceae <VL53L0X_RdByte>
 800aefa:	4603      	mov	r3, r0
 800aefc:	461a      	mov	r2, r3
 800aefe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af02:	4313      	orrs	r3, r2
 800af04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800af08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af0c:	f023 0304 	bic.w	r3, r3, #4
 800af10:	b2db      	uxtb	r3, r3
 800af12:	461a      	mov	r2, r3
 800af14:	2183      	movs	r1, #131	; 0x83
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f001 ff4b 	bl	800cdb2 <VL53L0X_WrByte>
 800af1c:	4603      	mov	r3, r0
 800af1e:	461a      	mov	r2, r3
 800af20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af24:	4313      	orrs	r3, r2
 800af26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af2a:	2201      	movs	r2, #1
 800af2c:	21ff      	movs	r1, #255	; 0xff
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f001 ff3f 	bl	800cdb2 <VL53L0X_WrByte>
 800af34:	4603      	mov	r3, r0
 800af36:	461a      	mov	r2, r3
 800af38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af3c:	4313      	orrs	r3, r2
 800af3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800af42:	2201      	movs	r2, #1
 800af44:	2100      	movs	r1, #0
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 ff33 	bl	800cdb2 <VL53L0X_WrByte>
 800af4c:	4603      	mov	r3, r0
 800af4e:	461a      	mov	r2, r3
 800af50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af54:	4313      	orrs	r3, r2
 800af56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af5a:	2200      	movs	r2, #0
 800af5c:	21ff      	movs	r1, #255	; 0xff
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 ff27 	bl	800cdb2 <VL53L0X_WrByte>
 800af64:	4603      	mov	r3, r0
 800af66:	461a      	mov	r2, r3
 800af68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af6c:	4313      	orrs	r3, r2
 800af6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800af72:	2200      	movs	r2, #0
 800af74:	2180      	movs	r1, #128	; 0x80
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 ff1b 	bl	800cdb2 <VL53L0X_WrByte>
 800af7c:	4603      	mov	r3, r0
 800af7e:	461a      	mov	r2, r3
 800af80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af84:	4313      	orrs	r3, r2
 800af86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800af8a:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f040 808f 	bne.w	800b0b2 <VL53L0X_get_info_from_device+0x98e>
 800af94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af98:	2b07      	cmp	r3, #7
 800af9a:	f000 808a 	beq.w	800b0b2 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800af9e:	78fb      	ldrb	r3, [r7, #3]
 800afa0:	f003 0301 	and.w	r3, r3, #1
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d024      	beq.n	800aff2 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800afa8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800afac:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d11e      	bne.n	800aff2 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800afba:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800afc4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800afc8:	2300      	movs	r3, #0
 800afca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afcc:	e00e      	b.n	800afec <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800afce:	f107 0208 	add.w	r2, r7, #8
 800afd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afd4:	4413      	add	r3, r2
 800afd6:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afdc:	4413      	add	r3, r2
 800afde:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800afe2:	460a      	mov	r2, r1
 800afe4:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800afe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe8:	3301      	adds	r3, #1
 800afea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afee:	2b05      	cmp	r3, #5
 800aff0:	dded      	ble.n	800afce <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800aff2:	78fb      	ldrb	r3, [r7, #3]
 800aff4:	f003 0302 	and.w	r3, r3, #2
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d018      	beq.n	800b02e <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800affc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b000:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b004:	2b00      	cmp	r3, #0
 800b006:	d112      	bne.n	800b02e <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b008:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b012:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	33f3      	adds	r3, #243	; 0xf3
 800b020:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800b022:	f107 0310 	add.w	r3, r7, #16
 800b026:	4619      	mov	r1, r3
 800b028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b02a:	f002 f8af 	bl	800d18c <strcpy>

		}

		if (((option & 4) == 4) &&
 800b02e:	78fb      	ldrb	r3, [r7, #3]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d030      	beq.n	800b09a <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800b038:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b03c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800b040:	2b00      	cmp	r3, #0
 800b042:	d12a      	bne.n	800b09a <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800b054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b056:	025b      	lsls	r3, r3, #9
 800b058:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b05e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800b062:	2300      	movs	r3, #0
 800b064:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800b068:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d011      	beq.n	800b092 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800b06e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800b076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b078:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b07c:	fb02 f303 	mul.w	r3, r2, r3
 800b080:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800b082:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800b086:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800b08a:	425b      	negs	r3, r3
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800b092:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800b09a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800b09e:	78fb      	ldrb	r3, [r7, #3]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800b0a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b0b2:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3760      	adds	r7, #96	; 0x60
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800b0be:	b490      	push	{r4, r7}
 800b0c0:	b086      	sub	sp, #24
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	460b      	mov	r3, r1
 800b0c8:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800b0ca:	f240 6377 	movw	r3, #1655	; 0x677
 800b0ce:	f04f 0400 	mov.w	r4, #0
 800b0d2:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 800b0d6:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800b0da:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800b0dc:	78fb      	ldrb	r3, [r7, #3]
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3718      	adds	r7, #24
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc90      	pop	{r4, r7}
 800b0f6:	4770      	bx	lr

0800b0f8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800b100:	2300      	movs	r3, #0
 800b102:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d017      	beq.n	800b142 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3b01      	subs	r3, #1
 800b116:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b118:	e005      	b.n	800b126 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	085b      	lsrs	r3, r3, #1
 800b11e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800b120:	89fb      	ldrh	r3, [r7, #14]
 800b122:	3301      	adds	r3, #1
 800b124:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d1f4      	bne.n	800b11a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800b130:	89fb      	ldrh	r3, [r7, #14]
 800b132:	021b      	lsls	r3, r3, #8
 800b134:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	b29b      	uxth	r3, r3
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800b13e:	4413      	add	r3, r2
 800b140:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800b142:	8afb      	ldrh	r3, [r7, #22]

}
 800b144:	4618      	mov	r0, r3
 800b146:	371c      	adds	r7, #28
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b15e:	88fb      	ldrh	r3, [r7, #6]
 800b160:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800b162:	88fa      	ldrh	r2, [r7, #6]
 800b164:	0a12      	lsrs	r2, r2, #8
 800b166:	b292      	uxth	r2, r2
 800b168:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800b16a:	3301      	adds	r3, #1
 800b16c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800b16e:	68fb      	ldr	r3, [r7, #12]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	4613      	mov	r3, r2
 800b188:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800b18a:	2300      	movs	r3, #0
 800b18c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b18e:	79fb      	ldrb	r3, [r7, #7]
 800b190:	4619      	mov	r1, r3
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f7ff ff93 	bl	800b0be <VL53L0X_calc_macro_period_ps>
 800b198:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <VL53L0X_calc_timeout_mclks+0x50>)
 800b1a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a6:	099b      	lsrs	r3, r3, #6
 800b1a8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1b0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	441a      	add	r2, r3
	timeout_period_mclks =
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1c0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800b1c2:	69fb      	ldr	r3, [r7, #28]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3720      	adds	r7, #32
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	10624dd3 	.word	0x10624dd3

0800b1d0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	807b      	strh	r3, [r7, #2]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800b1e4:	787b      	ldrb	r3, [r7, #1]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f7ff ff68 	bl	800b0be <VL53L0X_calc_macro_period_ps>
 800b1ee:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b1f6:	4a0a      	ldr	r2, [pc, #40]	; (800b220 <VL53L0X_calc_timeout_us+0x50>)
 800b1f8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1fc:	099b      	lsrs	r3, r3, #6
 800b1fe:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800b200:	887b      	ldrh	r3, [r7, #2]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	fb02 f303 	mul.w	r3, r2, r3
 800b208:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800b20c:	4a04      	ldr	r2, [pc, #16]	; (800b220 <VL53L0X_calc_timeout_us+0x50>)
 800b20e:	fba2 2303 	umull	r2, r3, r2, r3
 800b212:	099b      	lsrs	r3, r3, #6
 800b214:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800b216:	697b      	ldr	r3, [r7, #20]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	3718      	adds	r7, #24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	10624dd3 	.word	0x10624dd3

0800b224 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08c      	sub	sp, #48	; 0x30
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	460b      	mov	r3, r1
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b232:	2300      	movs	r3, #0
 800b234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800b23e:	2300      	movs	r3, #0
 800b240:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800b242:	2300      	movs	r3, #0
 800b244:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b24a:	7afb      	ldrb	r3, [r7, #11]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d005      	beq.n	800b25c <get_sequence_step_timeout+0x38>
 800b250:	7afb      	ldrb	r3, [r7, #11]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d002      	beq.n	800b25c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b256:	7afb      	ldrb	r3, [r7, #11]
 800b258:	2b02      	cmp	r3, #2
 800b25a:	d128      	bne.n	800b2ae <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b25c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b260:	461a      	mov	r2, r3
 800b262:	2100      	movs	r1, #0
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f7fd fa1b 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b26a:	4603      	mov	r3, r0
 800b26c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800b270:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b274:	2b00      	cmp	r3, #0
 800b276:	d109      	bne.n	800b28c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800b278:	f107 0320 	add.w	r3, r7, #32
 800b27c:	461a      	mov	r2, r3
 800b27e:	2146      	movs	r1, #70	; 0x46
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f001 fe14 	bl	800ceae <VL53L0X_RdByte>
 800b286:	4603      	mov	r3, r0
 800b288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800b28c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b290:	b29b      	uxth	r3, r3
 800b292:	4618      	mov	r0, r3
 800b294:	f7ff ff5c 	bl	800b150 <VL53L0X_decode_timeout>
 800b298:	4603      	mov	r3, r0
 800b29a:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b29c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b2a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f7ff ff93 	bl	800b1d0 <VL53L0X_calc_timeout_us>
 800b2aa:	62b8      	str	r0, [r7, #40]	; 0x28
 800b2ac:	e092      	b.n	800b3d4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b2ae:	7afb      	ldrb	r3, [r7, #11]
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d135      	bne.n	800b320 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b2b4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	68f8      	ldr	r0, [r7, #12]
 800b2be:	f7fd f9ef 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b2c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f040 8081 	bne.w	800b3d4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b2d2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	2100      	movs	r1, #0
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7fd f9e0 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800b2e6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d109      	bne.n	800b302 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800b2ee:	f107 031e 	add.w	r3, r7, #30
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	2151      	movs	r1, #81	; 0x51
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	f001 fdf8 	bl	800ceec <VL53L0X_RdWord>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b302:	8bfb      	ldrh	r3, [r7, #30]
 800b304:	4618      	mov	r0, r3
 800b306:	f7ff ff23 	bl	800b150 <VL53L0X_decode_timeout>
 800b30a:	4603      	mov	r3, r0
 800b30c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b30e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b314:	4619      	mov	r1, r3
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7ff ff5a 	bl	800b1d0 <VL53L0X_calc_timeout_us>
 800b31c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b31e:	e059      	b.n	800b3d4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	2b04      	cmp	r3, #4
 800b324:	d156      	bne.n	800b3d4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b326:	f107 0314 	add.w	r3, r7, #20
 800b32a:	4619      	mov	r1, r3
 800b32c:	68f8      	ldr	r0, [r7, #12]
 800b32e:	f7fd fac3 	bl	80088b8 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800b336:	7dfb      	ldrb	r3, [r7, #23]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d01d      	beq.n	800b378 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b33c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b340:	461a      	mov	r2, r3
 800b342:	2100      	movs	r1, #0
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f7fd f9ab 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800b350:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10f      	bne.n	800b378 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800b358:	f107 031e 	add.w	r3, r7, #30
 800b35c:	461a      	mov	r2, r3
 800b35e:	2151      	movs	r1, #81	; 0x51
 800b360:	68f8      	ldr	r0, [r7, #12]
 800b362:	f001 fdc3 	bl	800ceec <VL53L0X_RdWord>
 800b366:	4603      	mov	r3, r0
 800b368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b36c:	8bfb      	ldrh	r3, [r7, #30]
 800b36e:	4618      	mov	r0, r3
 800b370:	f7ff feee 	bl	800b150 <VL53L0X_decode_timeout>
 800b374:	4603      	mov	r3, r0
 800b376:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b378:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d109      	bne.n	800b394 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b380:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800b384:	461a      	mov	r2, r3
 800b386:	2101      	movs	r1, #1
 800b388:	68f8      	ldr	r0, [r7, #12]
 800b38a:	f7fd f989 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b38e:	4603      	mov	r3, r0
 800b390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800b394:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10f      	bne.n	800b3bc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800b39c:	f107 031c 	add.w	r3, r7, #28
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	2171      	movs	r1, #113	; 0x71
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f001 fda1 	bl	800ceec <VL53L0X_RdWord>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800b3b0:	8bbb      	ldrh	r3, [r7, #28]
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7ff fecc 	bl	800b150 <VL53L0X_decode_timeout>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800b3bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b3be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800b3c4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b3c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f7ff feff 	bl	800b1d0 <VL53L0X_calc_timeout_us>
 800b3d2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3d8:	601a      	str	r2, [r3, #0]

	return Status;
 800b3da:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3730      	adds	r7, #48	; 0x30
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b08a      	sub	sp, #40	; 0x28
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	60f8      	str	r0, [r7, #12]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800b3fa:	7afb      	ldrb	r3, [r7, #11]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d005      	beq.n	800b40c <set_sequence_step_timeout+0x26>
 800b400:	7afb      	ldrb	r3, [r7, #11]
 800b402:	2b01      	cmp	r3, #1
 800b404:	d002      	beq.n	800b40c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800b406:	7afb      	ldrb	r3, [r7, #11]
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d138      	bne.n	800b47e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b40c:	f107 031b 	add.w	r3, r7, #27
 800b410:	461a      	mov	r2, r3
 800b412:	2100      	movs	r1, #0
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f7fd f943 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b41a:	4603      	mov	r3, r0
 800b41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800b420:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11a      	bne.n	800b45e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800b428:	7efb      	ldrb	r3, [r7, #27]
 800b42a:	461a      	mov	r2, r3
 800b42c:	6879      	ldr	r1, [r7, #4]
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f7ff fea4 	bl	800b17c <VL53L0X_calc_timeout_mclks>
 800b434:	4603      	mov	r3, r0
 800b436:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800b438:	8bbb      	ldrh	r3, [r7, #28]
 800b43a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b43e:	d903      	bls.n	800b448 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800b440:	23ff      	movs	r3, #255	; 0xff
 800b442:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b446:	e004      	b.n	800b452 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800b448:	8bbb      	ldrh	r3, [r7, #28]
 800b44a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800b44c:	3b01      	subs	r3, #1
 800b44e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b452:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b456:	b29a      	uxth	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800b45e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b462:	2b00      	cmp	r3, #0
 800b464:	f040 80ab 	bne.w	800b5be <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800b468:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b46c:	461a      	mov	r2, r3
 800b46e:	2146      	movs	r1, #70	; 0x46
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f001 fc9e 	bl	800cdb2 <VL53L0X_WrByte>
 800b476:	4603      	mov	r3, r0
 800b478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800b47c:	e09f      	b.n	800b5be <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800b47e:	7afb      	ldrb	r3, [r7, #11]
 800b480:	2b03      	cmp	r3, #3
 800b482:	d135      	bne.n	800b4f0 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800b484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d11b      	bne.n	800b4c4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b48c:	f107 031b 	add.w	r3, r7, #27
 800b490:	461a      	mov	r2, r3
 800b492:	2100      	movs	r1, #0
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7fd f903 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b49a:	4603      	mov	r3, r0
 800b49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b4a0:	7efb      	ldrb	r3, [r7, #27]
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	6879      	ldr	r1, [r7, #4]
 800b4a6:	68f8      	ldr	r0, [r7, #12]
 800b4a8:	f7ff fe68 	bl	800b17c <VL53L0X_calc_timeout_mclks>
 800b4ac:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b4ae:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b4b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7ff fe20 	bl	800b0f8 <VL53L0X_encode_timeout>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b4bc:	8b3a      	ldrh	r2, [r7, #24]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b4c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d108      	bne.n	800b4de <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b4cc:	8b3b      	ldrh	r3, [r7, #24]
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	2151      	movs	r1, #81	; 0x51
 800b4d2:	68f8      	ldr	r0, [r7, #12]
 800b4d4:	f001 fc8d 	bl	800cdf2 <VL53L0X_WrWord>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b4de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d16b      	bne.n	800b5be <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b4ee:	e066      	b.n	800b5be <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b4f0:	7afb      	ldrb	r3, [r7, #11]
 800b4f2:	2b04      	cmp	r3, #4
 800b4f4:	d160      	bne.n	800b5b8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b4f6:	f107 0310 	add.w	r3, r7, #16
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f7fd f9db 	bl	80088b8 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b502:	2300      	movs	r3, #0
 800b504:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b506:	7cfb      	ldrb	r3, [r7, #19]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d01d      	beq.n	800b548 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b50c:	f107 031b 	add.w	r3, r7, #27
 800b510:	461a      	mov	r2, r3
 800b512:	2100      	movs	r1, #0
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f7fd f8c3 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b51a:	4603      	mov	r3, r0
 800b51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b520:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10f      	bne.n	800b548 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b528:	f107 0318 	add.w	r3, r7, #24
 800b52c:	461a      	mov	r2, r3
 800b52e:	2151      	movs	r1, #81	; 0x51
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f001 fcdb 	bl	800ceec <VL53L0X_RdWord>
 800b536:	4603      	mov	r3, r0
 800b538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b53c:	8b3b      	ldrh	r3, [r7, #24]
 800b53e:	4618      	mov	r0, r3
 800b540:	f7ff fe06 	bl	800b150 <VL53L0X_decode_timeout>
 800b544:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b546:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d109      	bne.n	800b564 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b550:	f107 031b 	add.w	r3, r7, #27
 800b554:	461a      	mov	r2, r3
 800b556:	2101      	movs	r1, #1
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f7fd f8a1 	bl	80086a0 <VL53L0X_GetVcselPulsePeriod>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d128      	bne.n	800b5be <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b56c:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 800b56e:	461a      	mov	r2, r3
 800b570:	6879      	ldr	r1, [r7, #4]
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	f7ff fe02 	bl	800b17c <VL53L0X_calc_timeout_mclks>
 800b578:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b57a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b57c:	6a3a      	ldr	r2, [r7, #32]
 800b57e:	4413      	add	r3, r2
 800b580:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 800b582:	6a38      	ldr	r0, [r7, #32]
 800b584:	f7ff fdb8 	bl	800b0f8 <VL53L0X_encode_timeout>
 800b588:	4603      	mov	r3, r0
 800b58a:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 800b58c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b590:	2b00      	cmp	r3, #0
 800b592:	d108      	bne.n	800b5a6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b594:	8bfb      	ldrh	r3, [r7, #30]
 800b596:	461a      	mov	r2, r3
 800b598:	2171      	movs	r1, #113	; 0x71
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f001 fc29 	bl	800cdf2 <VL53L0X_WrWord>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b5a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d107      	bne.n	800b5be <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b5b6:	e002      	b.n	800b5be <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b5b8:	23fc      	movs	r3, #252	; 0xfc
 800b5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b5be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3728      	adds	r7, #40	; 0x28
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b086      	sub	sp, #24
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	607a      	str	r2, [r7, #4]
 800b5d6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b5dc:	7afb      	ldrb	r3, [r7, #11]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d002      	beq.n	800b5e8 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d00a      	beq.n	800b5fc <VL53L0X_get_vcsel_pulse_period+0x32>
 800b5e6:	e013      	b.n	800b610 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b5e8:	f107 0316 	add.w	r3, r7, #22
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	2150      	movs	r1, #80	; 0x50
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f001 fc5c 	bl	800ceae <VL53L0X_RdByte>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b5fa:	e00b      	b.n	800b614 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b5fc:	f107 0316 	add.w	r3, r7, #22
 800b600:	461a      	mov	r2, r3
 800b602:	2170      	movs	r1, #112	; 0x70
 800b604:	68f8      	ldr	r0, [r7, #12]
 800b606:	f001 fc52 	bl	800ceae <VL53L0X_RdByte>
 800b60a:	4603      	mov	r3, r0
 800b60c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b60e:	e001      	b.n	800b614 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b610:	23fc      	movs	r3, #252	; 0xfc
 800b612:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d107      	bne.n	800b62c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800b61c:	7dbb      	ldrb	r3, [r7, #22]
 800b61e:	4618      	mov	r0, r3
 800b620:	f7fe fff6 	bl	800a610 <VL53L0X_decode_vcsel_period>
 800b624:	4603      	mov	r3, r0
 800b626:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	701a      	strb	r2, [r3, #0]

	return Status;
 800b62c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3718      	adds	r7, #24
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b092      	sub	sp, #72	; 0x48
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b642:	2300      	movs	r3, #0
 800b644:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b648:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b64c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b64e:	f240 7376 	movw	r3, #1910	; 0x776
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800b654:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b658:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b65a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b65e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800b660:	f240 234e 	movw	r3, #590	; 0x24e
 800b664:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800b666:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b66a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b66c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b670:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b672:	f240 2326 	movw	r3, #550	; 0x226
 800b676:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b678:	2300      	movs	r3, #0
 800b67a:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800b67c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b680:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800b686:	683a      	ldr	r2, [r7, #0]
 800b688:	6a3b      	ldr	r3, [r7, #32]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d205      	bcs.n	800b69a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b68e:	23fc      	movs	r3, #252	; 0xfc
 800b690:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800b694:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b698:	e0aa      	b.n	800b7f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800b69a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69e:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800b6a0:	683a      	ldr	r2, [r7, #0]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b6a6:	f107 0314 	add.w	r3, r7, #20
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f7fd f903 	bl	80088b8 <VL53L0X_GetSequenceStepEnables>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800b6b8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d15b      	bne.n	800b778 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800b6c0:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800b6c6:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d102      	bne.n	800b6d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800b6cc:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d052      	beq.n	800b778 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800b6d2:	f107 0310 	add.w	r3, r7, #16
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	2102      	movs	r1, #2
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f7ff fda2 	bl	800b224 <get_sequence_step_timeout>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800b6e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d002      	beq.n	800b6f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800b6ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b6f2:	e07d      	b.n	800b7f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800b6f4:	7d3b      	ldrb	r3, [r7, #20]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00f      	beq.n	800b71a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800b6fa:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800b6fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6fe:	4413      	add	r3, r2
 800b700:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800b702:	69fa      	ldr	r2, [r7, #28]
 800b704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b706:	429a      	cmp	r2, r3
 800b708:	d204      	bcs.n	800b714 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800b70a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	1ad3      	subs	r3, r2, r3
 800b710:	643b      	str	r3, [r7, #64]	; 0x40
 800b712:	e002      	b.n	800b71a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b714:	23fc      	movs	r3, #252	; 0xfc
 800b716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800b71a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800b722:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b726:	e063      	b.n	800b7f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800b728:	7dbb      	ldrb	r3, [r7, #22]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d011      	beq.n	800b752 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b732:	4413      	add	r3, r2
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b738:	69fa      	ldr	r2, [r7, #28]
 800b73a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d204      	bcs.n	800b74a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	643b      	str	r3, [r7, #64]	; 0x40
 800b748:	e016      	b.n	800b778 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b74a:	23fc      	movs	r3, #252	; 0xfc
 800b74c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b750:	e012      	b.n	800b778 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800b752:	7d7b      	ldrb	r3, [r7, #21]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d00f      	beq.n	800b778 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b75c:	4413      	add	r3, r2
 800b75e:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b760:	69fa      	ldr	r2, [r7, #28]
 800b762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b764:	429a      	cmp	r2, r3
 800b766:	d204      	bcs.n	800b772 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b768:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	643b      	str	r3, [r7, #64]	; 0x40
 800b770:	e002      	b.n	800b778 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b772:	23fc      	movs	r3, #252	; 0xfc
 800b774:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b778:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d002      	beq.n	800b786 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b780:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b784:	e034      	b.n	800b7f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800b786:	7dfb      	ldrb	r3, [r7, #23]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d019      	beq.n	800b7c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800b78c:	f107 030c 	add.w	r3, r7, #12
 800b790:	461a      	mov	r2, r3
 800b792:	2103      	movs	r1, #3
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f7ff fd45 	bl	800b224 <get_sequence_step_timeout>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7a4:	4413      	add	r3, r2
 800b7a6:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b7a8:	69fa      	ldr	r2, [r7, #28]
 800b7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d204      	bcs.n	800b7ba <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800b7b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7b2:	69fb      	ldr	r3, [r7, #28]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	643b      	str	r3, [r7, #64]	; 0x40
 800b7b8:	e002      	b.n	800b7c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b7ba:	23fc      	movs	r3, #252	; 0xfc
 800b7bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800b7c0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d111      	bne.n	800b7ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800b7c8:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00e      	beq.n	800b7ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800b7ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800b7d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7d8:	2104      	movs	r1, #4
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7ff fe03 	bl	800b3e6 <set_sequence_step_timeout>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	683a      	ldr	r2, [r7, #0]
 800b7ea:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b7ec:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3748      	adds	r7, #72	; 0x48
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b090      	sub	sp, #64	; 0x40
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b802:	2300      	movs	r3, #0
 800b804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b808:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b80c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b80e:	f240 7376 	movw	r3, #1910	; 0x776
 800b812:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800b814:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b818:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b81a:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b81e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800b820:	f240 234e 	movw	r3, #590	; 0x24e
 800b824:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800b826:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b82a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b82c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b830:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b832:	f240 2326 	movw	r3, #550	; 0x226
 800b836:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800b83c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b840:	441a      	add	r2, r3
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b846:	f107 0318 	add.w	r3, r7, #24
 800b84a:	4619      	mov	r1, r3
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7fd f833 	bl	80088b8 <VL53L0X_GetSequenceStepEnables>
 800b852:	4603      	mov	r3, r0
 800b854:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800b858:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b860:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b864:	e075      	b.n	800b952 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800b866:	7e3b      	ldrb	r3, [r7, #24]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d105      	bne.n	800b878 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800b86c:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d102      	bne.n	800b878 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800b872:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800b874:	2b00      	cmp	r3, #0
 800b876:	d030      	beq.n	800b8da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800b878:	f107 0310 	add.w	r3, r7, #16
 800b87c:	461a      	mov	r2, r3
 800b87e:	2102      	movs	r1, #2
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7ff fccf 	bl	800b224 <get_sequence_step_timeout>
 800b886:	4603      	mov	r3, r0
 800b888:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b88c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b890:	2b00      	cmp	r3, #0
 800b892:	d122      	bne.n	800b8da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800b894:	7e3b      	ldrb	r3, [r7, #24]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d007      	beq.n	800b8aa <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b89e:	6939      	ldr	r1, [r7, #16]
 800b8a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b8a4:	441a      	add	r2, r3
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b8aa:	7ebb      	ldrb	r3, [r7, #26]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d009      	beq.n	800b8c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b8b0:	683b      	ldr	r3, [r7, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b8b4:	6939      	ldr	r1, [r7, #16]
 800b8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b8:	440b      	add	r3, r1
 800b8ba:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b8bc:	441a      	add	r2, r3
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	601a      	str	r2, [r3, #0]
 800b8c2:	e00a      	b.n	800b8da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b8c4:	7e7b      	ldrb	r3, [r7, #25]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d007      	beq.n	800b8da <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b8ce:	6939      	ldr	r1, [r7, #16]
 800b8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d2:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b8d4:	441a      	add	r2, r3
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b8da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d114      	bne.n	800b90c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b8e2:	7efb      	ldrb	r3, [r7, #27]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d011      	beq.n	800b90c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b8e8:	f107 030c 	add.w	r3, r7, #12
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	2103      	movs	r1, #3
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7ff fc97 	bl	800b224 <get_sequence_step_timeout>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b900:	68f9      	ldr	r1, [r7, #12]
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b906:	441a      	add	r2, r3
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b90c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b910:	2b00      	cmp	r3, #0
 800b912:	d114      	bne.n	800b93e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b914:	7f3b      	ldrb	r3, [r7, #28]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d011      	beq.n	800b93e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b91a:	f107 0314 	add.w	r3, r7, #20
 800b91e:	461a      	mov	r2, r3
 800b920:	2104      	movs	r1, #4
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7ff fc7e 	bl	800b224 <get_sequence_step_timeout>
 800b928:	4603      	mov	r3, r0
 800b92a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b932:	6979      	ldr	r1, [r7, #20]
 800b934:	6a3b      	ldr	r3, [r7, #32]
 800b936:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b938:	441a      	add	r2, r3
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b93e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b942:	2b00      	cmp	r3, #0
 800b944:	d103      	bne.n	800b94e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b94e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b952:	4618      	mov	r0, r3
 800b954:	3740      	adds	r7, #64	; 0x40
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
	...

0800b95c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b088      	sub	sp, #32
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b966:	2300      	movs	r3, #0
 800b968:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b96a:	2300      	movs	r3, #0
 800b96c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b96e:	e0c6      	b.n	800bafe <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	4413      	add	r3, r2
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	3301      	adds	r3, #1
 800b97e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b980:	7cfb      	ldrb	r3, [r7, #19]
 800b982:	2bff      	cmp	r3, #255	; 0xff
 800b984:	f040 808d 	bne.w	800baa2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	4413      	add	r3, r2
 800b98e:	781b      	ldrb	r3, [r3, #0]
 800b990:	747b      	strb	r3, [r7, #17]
			Index++;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	3301      	adds	r3, #1
 800b996:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b998:	7c7b      	ldrb	r3, [r7, #17]
 800b99a:	2b03      	cmp	r3, #3
 800b99c:	d87e      	bhi.n	800ba9c <VL53L0X_load_tuning_settings+0x140>
 800b99e:	a201      	add	r2, pc, #4	; (adr r2, 800b9a4 <VL53L0X_load_tuning_settings+0x48>)
 800b9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a4:	0800b9b5 	.word	0x0800b9b5
 800b9a8:	0800b9ef 	.word	0x0800b9ef
 800b9ac:	0800ba29 	.word	0x0800ba29
 800b9b0:	0800ba63 	.word	0x0800ba63
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	743b      	strb	r3, [r7, #16]
				Index++;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	683a      	ldr	r2, [r7, #0]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b9d4:	7c3b      	ldrb	r3, [r7, #16]
 800b9d6:	b29b      	uxth	r3, r3
 800b9d8:	021b      	lsls	r3, r3, #8
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	4413      	add	r3, r2
 800b9e2:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	89ba      	ldrh	r2, [r7, #12]
 800b9e8:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800b9ec:	e087      	b.n	800bafe <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	743b      	strb	r3, [r7, #16]
				Index++;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	683a      	ldr	r2, [r7, #0]
 800ba02:	4413      	add	r3, r2
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	3301      	adds	r3, #1
 800ba0c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ba0e:	7c3b      	ldrb	r3, [r7, #16]
 800ba10:	b29b      	uxth	r3, r3
 800ba12:	021b      	lsls	r3, r3, #8
 800ba14:	b29a      	uxth	r2, r3
 800ba16:	7bfb      	ldrb	r3, [r7, #15]
 800ba18:	b29b      	uxth	r3, r3
 800ba1a:	4413      	add	r3, r2
 800ba1c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	89ba      	ldrh	r2, [r7, #12]
 800ba22:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ba26:	e06a      	b.n	800bafe <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	683a      	ldr	r2, [r7, #0]
 800ba2c:	4413      	add	r3, r2
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	743b      	strb	r3, [r7, #16]
				Index++;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	3301      	adds	r3, #1
 800ba36:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	3301      	adds	r3, #1
 800ba46:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ba48:	7c3b      	ldrb	r3, [r7, #16]
 800ba4a:	b29b      	uxth	r3, r3
 800ba4c:	021b      	lsls	r3, r3, #8
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	4413      	add	r3, r2
 800ba56:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	89ba      	ldrh	r2, [r7, #12]
 800ba5c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ba60:	e04d      	b.n	800bafe <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	4413      	add	r3, r2
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	743b      	strb	r3, [r7, #16]
				Index++;
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	683a      	ldr	r2, [r7, #0]
 800ba76:	4413      	add	r3, r2
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ba82:	7c3b      	ldrb	r3, [r7, #16]
 800ba84:	b29b      	uxth	r3, r3
 800ba86:	021b      	lsls	r3, r3, #8
 800ba88:	b29a      	uxth	r2, r3
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	4413      	add	r3, r2
 800ba90:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	89ba      	ldrh	r2, [r7, #12]
 800ba96:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ba9a:	e030      	b.n	800bafe <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ba9c:	23fc      	movs	r3, #252	; 0xfc
 800ba9e:	77fb      	strb	r3, [r7, #31]
 800baa0:	e02d      	b.n	800bafe <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800baa2:	7cfb      	ldrb	r3, [r7, #19]
 800baa4:	2b04      	cmp	r3, #4
 800baa6:	d828      	bhi.n	800bafa <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	683a      	ldr	r2, [r7, #0]
 800baac:	4413      	add	r3, r2
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	74bb      	strb	r3, [r7, #18]
			Index++;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	3301      	adds	r3, #1
 800bab6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800bab8:	2300      	movs	r3, #0
 800baba:	61bb      	str	r3, [r7, #24]
 800babc:	e00f      	b.n	800bade <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	4413      	add	r3, r2
 800bac4:	7819      	ldrb	r1, [r3, #0]
 800bac6:	f107 0208 	add.w	r2, r7, #8
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	4413      	add	r3, r2
 800bace:	460a      	mov	r2, r1
 800bad0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	3301      	adds	r3, #1
 800bad6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	3301      	adds	r3, #1
 800badc:	61bb      	str	r3, [r7, #24]
 800bade:	7cfb      	ldrb	r3, [r7, #19]
 800bae0:	69ba      	ldr	r2, [r7, #24]
 800bae2:	429a      	cmp	r2, r3
 800bae4:	dbeb      	blt.n	800babe <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800bae6:	7cfb      	ldrb	r3, [r7, #19]
 800bae8:	f107 0208 	add.w	r2, r7, #8
 800baec:	7cb9      	ldrb	r1, [r7, #18]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f001 f913 	bl	800cd1a <VL53L0X_WriteMulti>
 800baf4:	4603      	mov	r3, r0
 800baf6:	77fb      	strb	r3, [r7, #31]
 800baf8:	e001      	b.n	800bafe <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bafa:	23fc      	movs	r3, #252	; 0xfc
 800bafc:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	683a      	ldr	r2, [r7, #0]
 800bb02:	4413      	add	r3, r2
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d004      	beq.n	800bb14 <VL53L0X_load_tuning_settings+0x1b8>
 800bb0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	f43f af2e 	beq.w	800b970 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb14:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3720      	adds	r7, #32
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800bb36:	f107 0313 	add.w	r3, r7, #19
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7fc ff47 	bl	80089d0 <VL53L0X_GetXTalkCompensationEnable>
 800bb42:	4603      	mov	r3, r0
 800bb44:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800bb46:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d111      	bne.n	800bb72 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800bb4e:	7cfb      	ldrb	r3, [r7, #19]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00e      	beq.n	800bb72 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6a1b      	ldr	r3, [r3, #32]
 800bb58:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	8a9b      	ldrh	r3, [r3, #20]
 800bb5e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	fb02 f303 	mul.w	r3, r2, r3
 800bb66:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	3380      	adds	r3, #128	; 0x80
 800bb6c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800bb72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3720      	adds	r7, #32
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b086      	sub	sp, #24
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	60f8      	str	r0, [r7, #12]
 800bb86:	60b9      	str	r1, [r7, #8]
 800bb88:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800bb96:	f107 0310 	add.w	r3, r7, #16
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	68b9      	ldr	r1, [r7, #8]
 800bb9e:	68f8      	ldr	r0, [r7, #12]
 800bba0:	f7ff ffbe 	bl	800bb20 <VL53L0X_get_total_xtalk_rate>
 800bba4:	4603      	mov	r3, r0
 800bba6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800bba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d105      	bne.n	800bbbc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	441a      	add	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	601a      	str	r2, [r3, #0]

	return Status;
 800bbbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b09a      	sub	sp, #104	; 0x68
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800bbd6:	2312      	movs	r3, #18
 800bbd8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800bbda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbde:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800bbe0:	2342      	movs	r3, #66	; 0x42
 800bbe2:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800bbe4:	2306      	movs	r3, #6
 800bbe6:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800bbe8:	2307      	movs	r3, #7
 800bbea:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbec:	2300      	movs	r3, #0
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800bbf8:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800bc00:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800bc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc06:	fb02 f303 	mul.w	r3, r2, r3
 800bc0a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800bc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc0e:	3380      	adds	r3, #128	; 0x80
 800bc10:	0a1b      	lsrs	r3, r3, #8
 800bc12:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800bc14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc18:	fb02 f303 	mul.w	r3, r2, r3
 800bc1c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01b      	beq.n	800bc60 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	029b      	lsls	r3, r3, #10
 800bc2c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800bc32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc34:	4413      	add	r3, r2
 800bc36:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800bc38:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc40:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800bc42:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc44:	4613      	mov	r3, r2
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	4413      	add	r3, r2
 800bc4a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800bc4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bc50:	fb02 f303 	mul.w	r3, r2, r3
 800bc54:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800bc56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bc5c:	0c1b      	lsrs	r3, r3, #16
 800bc5e:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bc64:	fb02 f303 	mul.w	r3, r2, r3
 800bc68:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800bc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bc70:	0c1b      	lsrs	r3, r3, #16
 800bc72:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800bc74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc78:	fb02 f303 	mul.w	r3, r2, r3
 800bc7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800bc7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc80:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bc84:	0c1b      	lsrs	r3, r3, #16
 800bc86:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800bc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc8a:	085a      	lsrs	r2, r3, #1
 800bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8e:	441a      	add	r2, r3
 800bc90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc96:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800bc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc9c:	fb02 f303 	mul.w	r3, r2, r3
 800bca0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800bca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca8:	d302      	bcc.n	800bcb0 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800bcaa:	4b55      	ldr	r3, [pc, #340]	; (800be00 <VL53L0X_calc_dmax+0x238>)
 800bcac:	663b      	str	r3, [r7, #96]	; 0x60
 800bcae:	e016      	b.n	800bcde <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800bcb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcb2:	085a      	lsrs	r2, r3, #1
 800bcb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcb6:	441a      	add	r2, r3
 800bcb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcba:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcbe:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800bcc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcc4:	fb02 f303 	mul.w	r3, r2, r3
 800bcc8:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800bcca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bccc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bcd0:	0c1b      	lsrs	r3, r3, #16
 800bcd2:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800bcd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bcd8:	fb02 f303 	mul.w	r3, r2, r3
 800bcdc:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800bcde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bce0:	039b      	lsls	r3, r3, #14
 800bce2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bce6:	4a47      	ldr	r2, [pc, #284]	; (800be04 <VL53L0X_calc_dmax+0x23c>)
 800bce8:	fba2 2303 	umull	r2, r3, r2, r3
 800bcec:	099b      	lsrs	r3, r3, #6
 800bcee:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcf4:	fb02 f303 	mul.w	r3, r2, r3
 800bcf8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800bcfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcfe:	fb02 f303 	mul.w	r3, r2, r3
 800bd02:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	3308      	adds	r3, #8
 800bd08:	091b      	lsrs	r3, r3, #4
 800bd0a:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800bd0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800bd14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd16:	4613      	mov	r3, r2
 800bd18:	005b      	lsls	r3, r3, #1
 800bd1a:	4413      	add	r3, r2
 800bd1c:	011b      	lsls	r3, r3, #4
 800bd1e:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bd26:	0b9b      	lsrs	r3, r3, #14
 800bd28:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800bd2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd2e:	4413      	add	r3, r2
 800bd30:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800bd32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd34:	085b      	lsrs	r3, r3, #1
 800bd36:	69ba      	ldr	r2, [r7, #24]
 800bd38:	4413      	add	r3, r2
 800bd3a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd40:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd44:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	039b      	lsls	r3, r3, #14
 800bd4a:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800bd4c:	69fb      	ldr	r3, [r7, #28]
 800bd4e:	085b      	lsrs	r3, r3, #1
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	4413      	add	r3, r2
 800bd54:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800bd56:	69ba      	ldr	r2, [r7, #24]
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd5e:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bd64:	fb02 f303 	mul.w	r3, r2, r3
 800bd68:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bd70:	4a24      	ldr	r2, [pc, #144]	; (800be04 <VL53L0X_calc_dmax+0x23c>)
 800bd72:	fba2 2303 	umull	r2, r3, r2, r3
 800bd76:	099b      	lsrs	r3, r3, #6
 800bd78:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	011b      	lsls	r3, r3, #4
 800bd7e:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bd86:	4a1f      	ldr	r2, [pc, #124]	; (800be04 <VL53L0X_calc_dmax+0x23c>)
 800bd88:	fba2 2303 	umull	r2, r3, r2, r3
 800bd8c:	099b      	lsrs	r3, r3, #6
 800bd8e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800bd90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd92:	3380      	adds	r3, #128	; 0x80
 800bd94:	0a1b      	lsrs	r3, r3, #8
 800bd96:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d008      	beq.n	800bdb0 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	085a      	lsrs	r2, r3, #1
 800bda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bda4:	441a      	add	r2, r3
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdac:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdae:	e001      	b.n	800bdb4 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800bdb4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bdb6:	f7fe fc3e 	bl	800a636 <VL53L0X_isqrt>
 800bdba:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d008      	beq.n	800bdd4 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	085a      	lsrs	r2, r3, #1
 800bdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc8:	441a      	add	r2, r3
 800bdca:	69bb      	ldr	r3, [r7, #24]
 800bdcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdd2:	e001      	b.n	800bdd8 <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800bdd8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bdda:	f7fe fc2c 	bl	800a636 <VL53L0X_isqrt>
 800bdde:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800bde0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d902      	bls.n	800bdf4 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 800bdee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bdf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bdf2:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800bdf4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3768      	adds	r7, #104	; 0x68
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	fff00000 	.word	0xfff00000
 800be04:	10624dd3 	.word	0x10624dd3

0800be08 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b0b4      	sub	sp, #208	; 0xd0
 800be0c:	af04      	add	r7, sp, #16
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
 800be14:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800be16:	f44f 7348 	mov.w	r3, #800	; 0x320
 800be1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800be1e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800be22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800be26:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800be2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800be2e:	f241 235c 	movw	r3, #4700	; 0x125c
 800be32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800be36:	4b9e      	ldr	r3, [pc, #632]	; (800c0b0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800be38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800be3c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800be40:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800be42:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800be46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be4e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800be50:	4b98      	ldr	r3, [pc, #608]	; (800c0b4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800be52:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800be54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be58:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800be5a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800be5e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800be60:	f240 6377 	movw	r3, #1655	; 0x677
 800be64:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800be66:	2300      	movs	r3, #0
 800be68:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6a1b      	ldr	r3, [r3, #32]
 800be70:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800be7a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800be7e:	0c1b      	lsrs	r3, r3, #16
 800be80:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800be88:	f107 0310 	add.w	r3, r7, #16
 800be8c:	461a      	mov	r2, r3
 800be8e:	68b9      	ldr	r1, [r7, #8]
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f7ff fe74 	bl	800bb7e <VL53L0X_get_total_signal_rate>
 800be96:	4603      	mov	r3, r0
 800be98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800be9c:	f107 0314 	add.w	r3, r7, #20
 800bea0:	461a      	mov	r2, r3
 800bea2:	68b9      	ldr	r1, [r7, #8]
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	f7ff fe3b 	bl	800bb20 <VL53L0X_get_total_xtalk_rate>
 800beaa:	4603      	mov	r3, r0
 800beac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800beb6:	fb02 f303 	mul.w	r3, r2, r3
 800beba:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800bebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bebe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bec2:	0c1b      	lsrs	r3, r3, #16
 800bec4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800becc:	fb02 f303 	mul.w	r3, r2, r3
 800bed0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800bed4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800bed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800beda:	429a      	cmp	r2, r3
 800bedc:	d902      	bls.n	800bee4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800bede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bee0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800bee4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d168      	bne.n	800bfbe <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800befc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800bf00:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bf04:	461a      	mov	r2, r3
 800bf06:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f7ff f936 	bl	800b17c <VL53L0X_calc_timeout_mclks>
 800bf10:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bf18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800bf22:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800bf26:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f7ff f923 	bl	800b17c <VL53L0X_calc_timeout_mclks>
 800bf36:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800bf3e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bf42:	2b08      	cmp	r3, #8
 800bf44:	d102      	bne.n	800bf4c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800bf46:	2302      	movs	r3, #2
 800bf48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800bf4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bf4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf50:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800bf52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800bf56:	fb02 f303 	mul.w	r3, r2, r3
 800bf5a:	02db      	lsls	r3, r3, #11
 800bf5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800bf60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bf68:	4a53      	ldr	r2, [pc, #332]	; (800c0b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bf6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf6e:	099b      	lsrs	r3, r3, #6
 800bf70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800bf74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf78:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf7a:	fb02 f303 	mul.w	r3, r2, r3
 800bf7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800bf82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bf86:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bf8a:	4a4b      	ldr	r2, [pc, #300]	; (800c0b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bf8c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf90:	099b      	lsrs	r3, r3, #6
 800bf92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	3380      	adds	r3, #128	; 0x80
 800bf9a:	0a1b      	lsrs	r3, r3, #8
 800bf9c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800bfa4:	fb02 f303 	mul.w	r3, r2, r3
 800bfa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800bfac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bfb0:	3380      	adds	r3, #128	; 0x80
 800bfb2:	0a1b      	lsrs	r3, r3, #8
 800bfb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	021b      	lsls	r3, r3, #8
 800bfbc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800bfbe:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800bfc6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800bfca:	e165      	b.n	800c298 <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 800bfcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10c      	bne.n	800bfec <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfd8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bfe0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	601a      	str	r2, [r3, #0]
 800bfea:	e153      	b.n	800c294 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 800bfec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d102      	bne.n	800bffa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800bff4:	2301      	movs	r3, #1
 800bff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800bffa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bffe:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c002:	041a      	lsls	r2, r3, #16
 800c004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c006:	fbb2 f3f3 	udiv	r3, r2, r3
 800c00a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c00e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c014:	429a      	cmp	r2, r3
 800c016:	d902      	bls.n	800c01e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c01a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c01e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c022:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c026:	fb02 f303 	mul.w	r3, r2, r3
 800c02a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c02e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c032:	4613      	mov	r3, r2
 800c034:	005b      	lsls	r3, r3, #1
 800c036:	4413      	add	r3, r2
 800c038:	009b      	lsls	r3, r3, #2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe fafb 	bl	800a636 <VL53L0X_isqrt>
 800c040:	4603      	mov	r3, r0
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	891b      	ldrh	r3, [r3, #8]
 800c04a:	461a      	mov	r2, r3
 800c04c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c04e:	fb02 f303 	mul.w	r3, r2, r3
 800c052:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c056:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c05c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c05e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800c060:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c064:	4a14      	ldr	r2, [pc, #80]	; (800c0b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c066:	fba2 2303 	umull	r2, r3, r2, r3
 800c06a:	099b      	lsrs	r3, r3, #6
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800c06e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c070:	041b      	lsls	r3, r3, #16
 800c072:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c076:	4a10      	ldr	r2, [pc, #64]	; (800c0b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800c078:	fba2 2303 	umull	r2, r3, r2, r3
 800c07c:	099b      	lsrs	r3, r3, #6
 800c07e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c082:	021b      	lsls	r3, r3, #8
 800c084:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c086:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	bfb8      	it	lt
 800c092:	425b      	neglt	r3, r3
 800c094:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c098:	021b      	lsls	r3, r3, #8
 800c09a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	7e1b      	ldrb	r3, [r3, #24]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00b      	beq.n	800c0bc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800c0a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c0a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0ac:	e035      	b.n	800c11a <VL53L0X_calc_sigma_estimate+0x312>
 800c0ae:	bf00      	nop
 800c0b0:	028f87ae 	.word	0x028f87ae
 800c0b4:	0006999a 	.word	0x0006999a
 800c0b8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c0bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800c0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0cc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c0d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0d4:	fb02 f303 	mul.w	r3, r2, r3
 800c0d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c0dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c0e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0e2:	4413      	add	r3, r2
 800c0e4:	0c1b      	lsrs	r3, r3, #16
 800c0e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800c0ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c0f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800c0f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0fa:	085b      	lsrs	r3, r3, #1
 800c0fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800c100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c104:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c108:	fb02 f303 	mul.w	r3, r2, r3
 800c10c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800c110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c114:	0b9b      	lsrs	r3, r3, #14
 800c116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c11e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c120:	fb02 f303 	mul.w	r3, r2, r3
 800c124:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c128:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c12c:	0c1b      	lsrs	r3, r3, #16
 800c12e:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c134:	fb02 f303 	mul.w	r3, r2, r3
 800c138:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800c13a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c13e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c142:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c146:	0c1b      	lsrs	r3, r3, #16
 800c148:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c14a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c14e:	fb02 f303 	mul.w	r3, r2, r3
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	4413      	add	r3, r2
 800c15a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c15e:	f7fe fa6a 	bl	800a636 <VL53L0X_isqrt>
 800c162:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	041b      	lsls	r3, r3, #16
 800c168:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	3332      	adds	r3, #50	; 0x32
 800c16e:	4a4c      	ldr	r2, [pc, #304]	; (800c2a0 <VL53L0X_calc_sigma_estimate+0x498>)
 800c170:	fba2 2303 	umull	r2, r3, r2, r3
 800c174:	095a      	lsrs	r2, r3, #5
 800c176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c178:	fbb2 f3f3 	udiv	r3, r2, r3
 800c17c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c180:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c184:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c188:	fb02 f303 	mul.w	r3, r2, r3
 800c18c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c190:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c194:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c198:	3308      	adds	r3, #8
 800c19a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800c19e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c1a2:	4a40      	ldr	r2, [pc, #256]	; (800c2a4 <VL53L0X_calc_sigma_estimate+0x49c>)
 800c1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a8:	0b5b      	lsrs	r3, r3, #13
 800c1aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c1ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c1b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d902      	bls.n	800c1be <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c1b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800c1be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c1c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800c1cc:	4a36      	ldr	r2, [pc, #216]	; (800c2a8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800c1ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c1d2:	099b      	lsrs	r3, r3, #6
 800c1d4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800c1da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c1de:	441a      	add	r2, r3
 800c1e0:	6a3b      	ldr	r3, [r7, #32]
 800c1e2:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe fa25 	bl	800a636 <VL53L0X_isqrt>
 800c1ec:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	021b      	lsls	r3, r3, #8
 800c1f2:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c1fa:	4a2b      	ldr	r2, [pc, #172]	; (800c2a8 <VL53L0X_calc_sigma_estimate+0x4a0>)
 800c1fc:	fba2 2303 	umull	r2, r3, r2, r3
 800c200:	099b      	lsrs	r3, r3, #6
 800c202:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c204:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c208:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c20c:	fb02 f303 	mul.w	r3, r2, r3
 800c210:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800c212:	69fb      	ldr	r3, [r7, #28]
 800c214:	69fa      	ldr	r2, [r7, #28]
 800c216:	fb02 f303 	mul.w	r3, r2, r3
 800c21a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c220:	4413      	add	r3, r2
 800c222:	4618      	mov	r0, r3
 800c224:	f7fe fa07 	bl	800a636 <VL53L0X_isqrt>
 800c228:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c230:	fb02 f303 	mul.w	r3, r2, r3
 800c234:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d009      	beq.n	800c252 <VL53L0X_calc_sigma_estimate+0x44a>
 800c23e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c242:	2b00      	cmp	r3, #0
 800c244:	d005      	beq.n	800c252 <VL53L0X_calc_sigma_estimate+0x44a>
 800c246:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c24a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c24e:	429a      	cmp	r2, r3
 800c250:	d903      	bls.n	800c25a <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c252:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c260:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800c26c:	6939      	ldr	r1, [r7, #16]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	9303      	str	r3, [sp, #12]
 800c272:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c276:	9302      	str	r3, [sp, #8]
 800c278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c27c:	9301      	str	r3, [sp, #4]
 800c27e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c286:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f7ff fc9d 	bl	800bbc8 <VL53L0X_calc_dmax>
 800c28e:	4603      	mov	r3, r0
 800c290:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c294:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800c298:	4618      	mov	r0, r3
 800c29a:	37c0      	adds	r7, #192	; 0xc0
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	51eb851f 	.word	0x51eb851f
 800c2a4:	d1b71759 	.word	0xd1b71759
 800c2a8:	10624dd3 	.word	0x10624dd3

0800c2ac <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b090      	sub	sp, #64	; 0x40
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	60f8      	str	r0, [r7, #12]
 800c2b4:	607a      	str	r2, [r7, #4]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	72fb      	strb	r3, [r7, #11]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c2fe:	7afb      	ldrb	r3, [r7, #11]
 800c300:	10db      	asrs	r3, r3, #3
 800c302:	b2db      	uxtb	r3, r3
 800c304:	f003 030f 	and.w	r3, r3, #15
 800c308:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c30c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c310:	2b00      	cmp	r3, #0
 800c312:	d017      	beq.n	800c344 <VL53L0X_get_pal_range_status+0x98>
 800c314:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c318:	2b05      	cmp	r3, #5
 800c31a:	d013      	beq.n	800c344 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c31c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c320:	2b07      	cmp	r3, #7
 800c322:	d00f      	beq.n	800c344 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c324:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c328:	2b0c      	cmp	r3, #12
 800c32a:	d00b      	beq.n	800c344 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c32c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c330:	2b0d      	cmp	r3, #13
 800c332:	d007      	beq.n	800c344 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c334:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c338:	2b0e      	cmp	r3, #14
 800c33a:	d003      	beq.n	800c344 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c33c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c340:	2b0f      	cmp	r3, #15
 800c342:	d103      	bne.n	800c34c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c344:	2301      	movs	r3, #1
 800c346:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c34a:	e002      	b.n	800c352 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c352:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c356:	2b00      	cmp	r3, #0
 800c358:	d109      	bne.n	800c36e <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c35a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c35e:	461a      	mov	r2, r3
 800c360:	2100      	movs	r1, #0
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f7fc fc08 	bl	8008b78 <VL53L0X_GetLimitCheckEnable>
 800c368:	4603      	mov	r3, r0
 800c36a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c36e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c372:	2b00      	cmp	r3, #0
 800c374:	d02e      	beq.n	800c3d4 <VL53L0X_get_pal_range_status+0x128>
 800c376:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d12a      	bne.n	800c3d4 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c37e:	f107 0310 	add.w	r3, r7, #16
 800c382:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c386:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff fd3d 	bl	800be08 <VL53L0X_calc_sigma_estimate>
 800c38e:	4603      	mov	r3, r0
 800c390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c394:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3a2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c3a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d113      	bne.n	800c3d4 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c3ac:	f107 0320 	add.w	r3, r7, #32
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	2100      	movs	r1, #0
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f7fc fc65 	bl	8008c84 <VL53L0X_GetLimitCheckValue>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d006      	beq.n	800c3d4 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3c8:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d902      	bls.n	800c3d4 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c3d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d109      	bne.n	800c3f0 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c3dc:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c3e0:	461a      	mov	r2, r3
 800c3e2:	2102      	movs	r1, #2
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7fc fbc7 	bl	8008b78 <VL53L0X_GetLimitCheckEnable>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c3f0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d044      	beq.n	800c482 <VL53L0X_get_pal_range_status+0x1d6>
 800c3f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d140      	bne.n	800c482 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c400:	f107 031c 	add.w	r3, r7, #28
 800c404:	461a      	mov	r2, r3
 800c406:	2102      	movs	r1, #2
 800c408:	68f8      	ldr	r0, [r7, #12]
 800c40a:	f7fc fc3b 	bl	8008c84 <VL53L0X_GetLimitCheckValue>
 800c40e:	4603      	mov	r3, r0
 800c410:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800c414:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d107      	bne.n	800c42c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c41c:	2201      	movs	r2, #1
 800c41e:	21ff      	movs	r1, #255	; 0xff
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f000 fcc6 	bl	800cdb2 <VL53L0X_WrByte>
 800c426:	4603      	mov	r3, r0
 800c428:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c42c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c430:	2b00      	cmp	r3, #0
 800c432:	d109      	bne.n	800c448 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c434:	f107 0316 	add.w	r3, r7, #22
 800c438:	461a      	mov	r2, r3
 800c43a:	21b6      	movs	r1, #182	; 0xb6
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 fd55 	bl	800ceec <VL53L0X_RdWord>
 800c442:	4603      	mov	r3, r0
 800c444:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800c448:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d107      	bne.n	800c460 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c450:	2200      	movs	r2, #0
 800c452:	21ff      	movs	r1, #255	; 0xff
 800c454:	68f8      	ldr	r0, [r7, #12]
 800c456:	f000 fcac 	bl	800cdb2 <VL53L0X_WrByte>
 800c45a:	4603      	mov	r3, r0
 800c45c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c460:	8afb      	ldrh	r3, [r7, #22]
 800c462:	025b      	lsls	r3, r3, #9
 800c464:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c46a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800c46e:	69fb      	ldr	r3, [r7, #28]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d006      	beq.n	800c482 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c474:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c478:	429a      	cmp	r2, r3
 800c47a:	d902      	bls.n	800c482 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c47c:	2301      	movs	r3, #1
 800c47e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c482:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c48a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c48e:	461a      	mov	r2, r3
 800c490:	2103      	movs	r1, #3
 800c492:	68f8      	ldr	r0, [r7, #12]
 800c494:	f7fc fb70 	bl	8008b78 <VL53L0X_GetLimitCheckEnable>
 800c498:	4603      	mov	r3, r0
 800c49a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c49e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d023      	beq.n	800c4ee <VL53L0X_get_pal_range_status+0x242>
 800c4a6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d11f      	bne.n	800c4ee <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c4ae:	893b      	ldrh	r3, [r7, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d102      	bne.n	800c4ba <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	637b      	str	r3, [r7, #52]	; 0x34
 800c4b8:	e005      	b.n	800c4c6 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	021a      	lsls	r2, r3, #8
 800c4be:	893b      	ldrh	r3, [r7, #8]
 800c4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4c4:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c4c6:	f107 0318 	add.w	r3, r7, #24
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	2103      	movs	r1, #3
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f7fc fbd8 	bl	8008c84 <VL53L0X_GetLimitCheckValue>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c4da:	69bb      	ldr	r3, [r7, #24]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d006      	beq.n	800c4ee <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c4e0:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c4e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d202      	bcs.n	800c4ee <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c4ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d14a      	bne.n	800c58c <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c4f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d103      	bne.n	800c506 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c500:	22ff      	movs	r2, #255	; 0xff
 800c502:	701a      	strb	r2, [r3, #0]
 800c504:	e042      	b.n	800c58c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c506:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d007      	beq.n	800c51e <VL53L0X_get_pal_range_status+0x272>
 800c50e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c512:	2b02      	cmp	r3, #2
 800c514:	d003      	beq.n	800c51e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c516:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c51a:	2b03      	cmp	r3, #3
 800c51c:	d103      	bne.n	800c526 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c520:	2205      	movs	r2, #5
 800c522:	701a      	strb	r2, [r3, #0]
 800c524:	e032      	b.n	800c58c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c526:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c52a:	2b06      	cmp	r3, #6
 800c52c:	d003      	beq.n	800c536 <VL53L0X_get_pal_range_status+0x28a>
 800c52e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c532:	2b09      	cmp	r3, #9
 800c534:	d103      	bne.n	800c53e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c538:	2204      	movs	r2, #4
 800c53a:	701a      	strb	r2, [r3, #0]
 800c53c:	e026      	b.n	800c58c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c53e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c542:	2b08      	cmp	r3, #8
 800c544:	d007      	beq.n	800c556 <VL53L0X_get_pal_range_status+0x2aa>
 800c546:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c54a:	2b0a      	cmp	r3, #10
 800c54c:	d003      	beq.n	800c556 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c54e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c552:	2b01      	cmp	r3, #1
 800c554:	d103      	bne.n	800c55e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800c556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c558:	2203      	movs	r2, #3
 800c55a:	701a      	strb	r2, [r3, #0]
 800c55c:	e016      	b.n	800c58c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800c55e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c562:	2b04      	cmp	r3, #4
 800c564:	d003      	beq.n	800c56e <VL53L0X_get_pal_range_status+0x2c2>
 800c566:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d103      	bne.n	800c576 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800c56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c570:	2202      	movs	r2, #2
 800c572:	701a      	strb	r2, [r3, #0]
 800c574:	e00a      	b.n	800c58c <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800c576:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d103      	bne.n	800c586 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800c57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c580:	2201      	movs	r2, #1
 800c582:	701a      	strb	r2, [r3, #0]
 800c584:	e002      	b.n	800c58c <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800c586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c588:	2200      	movs	r2, #0
 800c58a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800c58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d102      	bne.n	800c59a <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c596:	2200      	movs	r2, #0
 800c598:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c59a:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c59e:	461a      	mov	r2, r3
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	f7fc fae8 	bl	8008b78 <VL53L0X_GetLimitCheckEnable>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800c5ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d14f      	bne.n	800c656 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c5b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d003      	beq.n	800c5c6 <VL53L0X_get_pal_range_status+0x31a>
 800c5be:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d103      	bne.n	800c5ce <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5cc:	e002      	b.n	800c5d4 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c5da:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800c5de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c5e2:	2b04      	cmp	r3, #4
 800c5e4:	d003      	beq.n	800c5ee <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c5e6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d103      	bne.n	800c5f6 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5f4:	e002      	b.n	800c5fc <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c602:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c606:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d003      	beq.n	800c616 <VL53L0X_get_pal_range_status+0x36a>
 800c60e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c612:	2b01      	cmp	r3, #1
 800c614:	d103      	bne.n	800c61e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c616:	2301      	movs	r3, #1
 800c618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c61c:	e002      	b.n	800c624 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c62a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c62e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c632:	2b00      	cmp	r3, #0
 800c634:	d003      	beq.n	800c63e <VL53L0X_get_pal_range_status+0x392>
 800c636:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d103      	bne.n	800c646 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c63e:	2301      	movs	r3, #1
 800c640:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c644:	e002      	b.n	800c64c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c652:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c656:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3740      	adds	r7, #64	; 0x40
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
	...

0800c664 <VL53L0X_get_range_status_string>:
	return Status;
}

VL53L0X_Error VL53L0X_get_range_status_string(uint8_t RangeStatus,
		char *pRangeStatusString)
{
 800c664:	b490      	push	{r4, r7}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	4603      	mov	r3, r0
 800c66c:	6039      	str	r1, [r7, #0]
 800c66e:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c670:	2300      	movs	r3, #0
 800c672:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (RangeStatus) {
 800c674:	79fb      	ldrb	r3, [r7, #7]
 800c676:	2b05      	cmp	r3, #5
 800c678:	d850      	bhi.n	800c71c <VL53L0X_get_range_status_string+0xb8>
 800c67a:	a201      	add	r2, pc, #4	; (adr r2, 800c680 <VL53L0X_get_range_status_string+0x1c>)
 800c67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c680:	0800c699 	.word	0x0800c699
 800c684:	0800c6ab 	.word	0x0800c6ab
 800c688:	0800c6c3 	.word	0x0800c6c3
 800c68c:	0800c6d5 	.word	0x0800c6d5
 800c690:	0800c6ef 	.word	0x0800c6ef
 800c694:	0800c707 	.word	0x0800c707
	case 0:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	4a28      	ldr	r2, [pc, #160]	; (800c73c <VL53L0X_get_range_status_string+0xd8>)
 800c69c:	461c      	mov	r4, r3
 800c69e:	4613      	mov	r3, r2
 800c6a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6a2:	6020      	str	r0, [r4, #0]
 800c6a4:	6061      	str	r1, [r4, #4]
 800c6a6:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_RANGEVALID);
	break;
 800c6a8:	e041      	b.n	800c72e <VL53L0X_get_range_status_string+0xca>
	case 1:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	4924      	ldr	r1, [pc, #144]	; (800c740 <VL53L0X_get_range_status_string+0xdc>)
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	cb03      	ldmia	r3!, {r0, r1}
 800c6b4:	6010      	str	r0, [r2, #0]
 800c6b6:	6051      	str	r1, [r2, #4]
 800c6b8:	8819      	ldrh	r1, [r3, #0]
 800c6ba:	789b      	ldrb	r3, [r3, #2]
 800c6bc:	8111      	strh	r1, [r2, #8]
 800c6be:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_SIGMA);
	break;
 800c6c0:	e035      	b.n	800c72e <VL53L0X_get_range_status_string+0xca>
	case 2:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	4a1f      	ldr	r2, [pc, #124]	; (800c744 <VL53L0X_get_range_status_string+0xe0>)
 800c6c6:	461c      	mov	r4, r3
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6cc:	6020      	str	r0, [r4, #0]
 800c6ce:	6061      	str	r1, [r4, #4]
 800c6d0:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_RANGESTATUS_SIGNAL);
	break;
 800c6d2:	e02c      	b.n	800c72e <VL53L0X_get_range_status_string+0xca>
	case 3:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	4a1c      	ldr	r2, [pc, #112]	; (800c748 <VL53L0X_get_range_status_string+0xe4>)
 800c6d8:	461c      	mov	r4, r3
 800c6da:	4613      	mov	r3, r2
 800c6dc:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6de:	6020      	str	r0, [r4, #0]
 800c6e0:	6061      	str	r1, [r4, #4]
 800c6e2:	60a2      	str	r2, [r4, #8]
 800c6e4:	881a      	ldrh	r2, [r3, #0]
 800c6e6:	789b      	ldrb	r3, [r3, #2]
 800c6e8:	81a2      	strh	r2, [r4, #12]
 800c6ea:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_RANGESTATUS_MINRANGE);
	break;
 800c6ec:	e01f      	b.n	800c72e <VL53L0X_get_range_status_string+0xca>
	case 4:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	4916      	ldr	r1, [pc, #88]	; (800c74c <VL53L0X_get_range_status_string+0xe8>)
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	cb03      	ldmia	r3!, {r0, r1}
 800c6f8:	6010      	str	r0, [r2, #0]
 800c6fa:	6051      	str	r1, [r2, #4]
 800c6fc:	8819      	ldrh	r1, [r3, #0]
 800c6fe:	789b      	ldrb	r3, [r3, #2]
 800c700:	8111      	strh	r1, [r2, #8]
 800c702:	7293      	strb	r3, [r2, #10]
			VL53L0X_STRING_RANGESTATUS_PHASE);
	break;
 800c704:	e013      	b.n	800c72e <VL53L0X_get_range_status_string+0xca>
	case 5:
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	4a11      	ldr	r2, [pc, #68]	; (800c750 <VL53L0X_get_range_status_string+0xec>)
 800c70a:	461c      	mov	r4, r3
 800c70c:	4613      	mov	r3, r2
 800c70e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c710:	6020      	str	r0, [r4, #0]
 800c712:	6061      	str	r1, [r4, #4]
 800c714:	60a2      	str	r2, [r4, #8]
 800c716:	881b      	ldrh	r3, [r3, #0]
 800c718:	81a3      	strh	r3, [r4, #12]
			VL53L0X_STRING_RANGESTATUS_HW);
	break;
 800c71a:	e008      	b.n	800c72e <VL53L0X_get_range_status_string+0xca>

	default: /**/
		VL53L0X_COPYSTRING(pRangeStatusString,
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	490d      	ldr	r1, [pc, #52]	; (800c754 <VL53L0X_get_range_status_string+0xf0>)
 800c720:	461a      	mov	r2, r3
 800c722:	460b      	mov	r3, r1
 800c724:	cb03      	ldmia	r3!, {r0, r1}
 800c726:	6010      	str	r0, [r2, #0]
 800c728:	6051      	str	r1, [r2, #4]
 800c72a:	881b      	ldrh	r3, [r3, #0]
 800c72c:	8113      	strh	r3, [r2, #8]
				VL53L0X_STRING_RANGESTATUS_NONE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c72e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bc90      	pop	{r4, r7}
 800c73a:	4770      	bx	lr
 800c73c:	0800db40 	.word	0x0800db40
 800c740:	0800db4c 	.word	0x0800db4c
 800c744:	0800db58 	.word	0x0800db58
 800c748:	0800db64 	.word	0x0800db64
 800c74c:	0800db74 	.word	0x0800db74
 800c750:	0800db80 	.word	0x0800db80
 800c754:	0800d9d8 	.word	0x0800d9d8

0800c758 <VL53L0X_get_pal_error_string>:

VL53L0X_Error VL53L0X_get_pal_error_string(VL53L0X_Error PalErrorCode,
		char *pPalErrorString)
{
 800c758:	b4b0      	push	{r4, r5, r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	6039      	str	r1, [r7, #0]
 800c762:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c764:	2300      	movs	r3, #0
 800c766:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	switch (PalErrorCode) {
 800c768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c76c:	3363      	adds	r3, #99	; 0x63
 800c76e:	2b63      	cmp	r3, #99	; 0x63
 800c770:	f200 81b9 	bhi.w	800cae6 <VL53L0X_get_pal_error_string+0x38e>
 800c774:	a201      	add	r2, pc, #4	; (adr r2, 800c77c <VL53L0X_get_pal_error_string+0x24>)
 800c776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77a:	bf00      	nop
 800c77c:	0800cacb 	.word	0x0800cacb
 800c780:	0800cae7 	.word	0x0800cae7
 800c784:	0800cae7 	.word	0x0800cae7
 800c788:	0800cae7 	.word	0x0800cae7
 800c78c:	0800cae7 	.word	0x0800cae7
 800c790:	0800cae7 	.word	0x0800cae7
 800c794:	0800cae7 	.word	0x0800cae7
 800c798:	0800cae7 	.word	0x0800cae7
 800c79c:	0800cae7 	.word	0x0800cae7
 800c7a0:	0800cae7 	.word	0x0800cae7
 800c7a4:	0800cae7 	.word	0x0800cae7
 800c7a8:	0800cae7 	.word	0x0800cae7
 800c7ac:	0800cae7 	.word	0x0800cae7
 800c7b0:	0800cae7 	.word	0x0800cae7
 800c7b4:	0800cae7 	.word	0x0800cae7
 800c7b8:	0800cae7 	.word	0x0800cae7
 800c7bc:	0800cae7 	.word	0x0800cae7
 800c7c0:	0800cae7 	.word	0x0800cae7
 800c7c4:	0800cae7 	.word	0x0800cae7
 800c7c8:	0800cae7 	.word	0x0800cae7
 800c7cc:	0800cae7 	.word	0x0800cae7
 800c7d0:	0800cae7 	.word	0x0800cae7
 800c7d4:	0800cae7 	.word	0x0800cae7
 800c7d8:	0800cae7 	.word	0x0800cae7
 800c7dc:	0800cae7 	.word	0x0800cae7
 800c7e0:	0800cae7 	.word	0x0800cae7
 800c7e4:	0800cae7 	.word	0x0800cae7
 800c7e8:	0800cae7 	.word	0x0800cae7
 800c7ec:	0800cae7 	.word	0x0800cae7
 800c7f0:	0800cae7 	.word	0x0800cae7
 800c7f4:	0800cae7 	.word	0x0800cae7
 800c7f8:	0800cae7 	.word	0x0800cae7
 800c7fc:	0800cae7 	.word	0x0800cae7
 800c800:	0800cae7 	.word	0x0800cae7
 800c804:	0800cae7 	.word	0x0800cae7
 800c808:	0800cae7 	.word	0x0800cae7
 800c80c:	0800cae7 	.word	0x0800cae7
 800c810:	0800cae7 	.word	0x0800cae7
 800c814:	0800cae7 	.word	0x0800cae7
 800c818:	0800cae7 	.word	0x0800cae7
 800c81c:	0800cae7 	.word	0x0800cae7
 800c820:	0800cae7 	.word	0x0800cae7
 800c824:	0800cae7 	.word	0x0800cae7
 800c828:	0800cae7 	.word	0x0800cae7
 800c82c:	0800cae7 	.word	0x0800cae7
 800c830:	0800cae7 	.word	0x0800cae7
 800c834:	0800cae7 	.word	0x0800cae7
 800c838:	0800cae7 	.word	0x0800cae7
 800c83c:	0800cae7 	.word	0x0800cae7
 800c840:	0800caad 	.word	0x0800caad
 800c844:	0800cae7 	.word	0x0800cae7
 800c848:	0800cae7 	.word	0x0800cae7
 800c84c:	0800cae7 	.word	0x0800cae7
 800c850:	0800cae7 	.word	0x0800cae7
 800c854:	0800cae7 	.word	0x0800cae7
 800c858:	0800cae7 	.word	0x0800cae7
 800c85c:	0800cae7 	.word	0x0800cae7
 800c860:	0800cae7 	.word	0x0800cae7
 800c864:	0800cae7 	.word	0x0800cae7
 800c868:	0800ca8b 	.word	0x0800ca8b
 800c86c:	0800cae7 	.word	0x0800cae7
 800c870:	0800cae7 	.word	0x0800cae7
 800c874:	0800cae7 	.word	0x0800cae7
 800c878:	0800cae7 	.word	0x0800cae7
 800c87c:	0800cae7 	.word	0x0800cae7
 800c880:	0800cae7 	.word	0x0800cae7
 800c884:	0800cae7 	.word	0x0800cae7
 800c888:	0800cae7 	.word	0x0800cae7
 800c88c:	0800cae7 	.word	0x0800cae7
 800c890:	0800ca6f 	.word	0x0800ca6f
 800c894:	0800cae7 	.word	0x0800cae7
 800c898:	0800cae7 	.word	0x0800cae7
 800c89c:	0800cae7 	.word	0x0800cae7
 800c8a0:	0800cae7 	.word	0x0800cae7
 800c8a4:	0800cae7 	.word	0x0800cae7
 800c8a8:	0800cae7 	.word	0x0800cae7
 800c8ac:	0800cae7 	.word	0x0800cae7
 800c8b0:	0800cae7 	.word	0x0800cae7
 800c8b4:	0800cae7 	.word	0x0800cae7
 800c8b8:	0800ca55 	.word	0x0800ca55
 800c8bc:	0800cae7 	.word	0x0800cae7
 800c8c0:	0800cae7 	.word	0x0800cae7
 800c8c4:	0800cae7 	.word	0x0800cae7
 800c8c8:	0800cae7 	.word	0x0800cae7
 800c8cc:	0800cae7 	.word	0x0800cae7
 800c8d0:	0800cae7 	.word	0x0800cae7
 800c8d4:	0800cae7 	.word	0x0800cae7
 800c8d8:	0800c9a1 	.word	0x0800c9a1
 800c8dc:	0800ca37 	.word	0x0800ca37
 800c8e0:	0800ca1f 	.word	0x0800ca1f
 800c8e4:	0800ca07 	.word	0x0800ca07
 800c8e8:	0800c9e9 	.word	0x0800c9e9
 800c8ec:	0800c9cf 	.word	0x0800c9cf
 800c8f0:	0800c9bd 	.word	0x0800c9bd
 800c8f4:	0800c989 	.word	0x0800c989
 800c8f8:	0800c96b 	.word	0x0800c96b
 800c8fc:	0800c957 	.word	0x0800c957
 800c900:	0800c93f 	.word	0x0800c93f
 800c904:	0800c921 	.word	0x0800c921
 800c908:	0800c90d 	.word	0x0800c90d
	case VL53L0X_ERROR_NONE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	4980      	ldr	r1, [pc, #512]	; (800cb10 <VL53L0X_get_pal_error_string+0x3b8>)
 800c910:	461a      	mov	r2, r3
 800c912:	460b      	mov	r3, r1
 800c914:	cb03      	ldmia	r3!, {r0, r1}
 800c916:	6010      	str	r0, [r2, #0]
 800c918:	6051      	str	r1, [r2, #4]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	7213      	strb	r3, [r2, #8]
			VL53L0X_STRING_ERROR_NONE);
	break;
 800c91e:	e0f0      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CALIBRATION_WARNING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	4a7c      	ldr	r2, [pc, #496]	; (800cb14 <VL53L0X_get_pal_error_string+0x3bc>)
 800c924:	461d      	mov	r5, r3
 800c926:	4614      	mov	r4, r2
 800c928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c92a:	6028      	str	r0, [r5, #0]
 800c92c:	6069      	str	r1, [r5, #4]
 800c92e:	60aa      	str	r2, [r5, #8]
 800c930:	60eb      	str	r3, [r5, #12]
 800c932:	cc03      	ldmia	r4!, {r0, r1}
 800c934:	6128      	str	r0, [r5, #16]
 800c936:	6169      	str	r1, [r5, #20]
 800c938:	8823      	ldrh	r3, [r4, #0]
 800c93a:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_CALIBRATION_WARNING);
	break;
 800c93c:	e0e1      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MIN_CLIPPED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	4a75      	ldr	r2, [pc, #468]	; (800cb18 <VL53L0X_get_pal_error_string+0x3c0>)
 800c942:	461d      	mov	r5, r3
 800c944:	4614      	mov	r4, r2
 800c946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c948:	6028      	str	r0, [r5, #0]
 800c94a:	6069      	str	r1, [r5, #4]
 800c94c:	60aa      	str	r2, [r5, #8]
 800c94e:	60eb      	str	r3, [r5, #12]
 800c950:	8823      	ldrh	r3, [r4, #0]
 800c952:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_MIN_CLIPPED);
	break;
 800c954:	e0d5      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_UNDEFINED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	4a70      	ldr	r2, [pc, #448]	; (800cb1c <VL53L0X_get_pal_error_string+0x3c4>)
 800c95a:	461c      	mov	r4, r3
 800c95c:	4615      	mov	r5, r2
 800c95e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c960:	6020      	str	r0, [r4, #0]
 800c962:	6061      	str	r1, [r4, #4]
 800c964:	60a2      	str	r2, [r4, #8]
 800c966:	60e3      	str	r3, [r4, #12]
			VL53L0X_STRING_ERROR_UNDEFINED);
	break;
 800c968:	e0cb      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_PARAMS:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	4a6c      	ldr	r2, [pc, #432]	; (800cb20 <VL53L0X_get_pal_error_string+0x3c8>)
 800c96e:	461d      	mov	r5, r3
 800c970:	4614      	mov	r4, r2
 800c972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c974:	6028      	str	r0, [r5, #0]
 800c976:	6069      	str	r1, [r5, #4]
 800c978:	60aa      	str	r2, [r5, #8]
 800c97a:	60eb      	str	r3, [r5, #12]
 800c97c:	cc03      	ldmia	r4!, {r0, r1}
 800c97e:	6128      	str	r0, [r5, #16]
 800c980:	6169      	str	r1, [r5, #20]
 800c982:	7823      	ldrb	r3, [r4, #0]
 800c984:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_INVALID_PARAMS);
	break;
 800c986:	e0bc      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	4a66      	ldr	r2, [pc, #408]	; (800cb24 <VL53L0X_get_pal_error_string+0x3cc>)
 800c98c:	461d      	mov	r5, r3
 800c98e:	4614      	mov	r4, r2
 800c990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c992:	6028      	str	r0, [r5, #0]
 800c994:	6069      	str	r1, [r5, #4]
 800c996:	60aa      	str	r2, [r5, #8]
 800c998:	60eb      	str	r3, [r5, #12]
 800c99a:	6820      	ldr	r0, [r4, #0]
 800c99c:	6128      	str	r0, [r5, #16]
			VL53L0X_STRING_ERROR_NOT_SUPPORTED);
	break;
 800c99e:	e0b0      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INTERRUPT_NOT_CLEARED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	4a61      	ldr	r2, [pc, #388]	; (800cb28 <VL53L0X_get_pal_error_string+0x3d0>)
 800c9a4:	461d      	mov	r5, r3
 800c9a6:	4614      	mov	r4, r2
 800c9a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9aa:	6028      	str	r0, [r5, #0]
 800c9ac:	6069      	str	r1, [r5, #4]
 800c9ae:	60aa      	str	r2, [r5, #8]
 800c9b0:	60eb      	str	r3, [r5, #12]
 800c9b2:	6820      	ldr	r0, [r4, #0]
 800c9b4:	6128      	str	r0, [r5, #16]
 800c9b6:	88a3      	ldrh	r3, [r4, #4]
 800c9b8:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INTERRUPT_NOT_CLEARED);
	break;
 800c9ba:	e0a2      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_RANGE_ERROR:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	4a5b      	ldr	r2, [pc, #364]	; (800cb2c <VL53L0X_get_pal_error_string+0x3d4>)
 800c9c0:	461c      	mov	r4, r3
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9c6:	6020      	str	r0, [r4, #0]
 800c9c8:	6061      	str	r1, [r4, #4]
 800c9ca:	60a2      	str	r2, [r4, #8]
			VL53L0X_STRING_ERROR_RANGE_ERROR);
	break;
 800c9cc:	e099      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_TIME_OUT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	4a57      	ldr	r2, [pc, #348]	; (800cb30 <VL53L0X_get_pal_error_string+0x3d8>)
 800c9d2:	461c      	mov	r4, r3
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c9d8:	6020      	str	r0, [r4, #0]
 800c9da:	6061      	str	r1, [r4, #4]
 800c9dc:	60a2      	str	r2, [r4, #8]
 800c9de:	881a      	ldrh	r2, [r3, #0]
 800c9e0:	789b      	ldrb	r3, [r3, #2]
 800c9e2:	81a2      	strh	r2, [r4, #12]
 800c9e4:	73a3      	strb	r3, [r4, #14]
			VL53L0X_STRING_ERROR_TIME_OUT);
	break;
 800c9e6:	e08c      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_MODE_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	4a52      	ldr	r2, [pc, #328]	; (800cb34 <VL53L0X_get_pal_error_string+0x3dc>)
 800c9ec:	461d      	mov	r5, r3
 800c9ee:	4614      	mov	r4, r2
 800c9f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9f2:	6028      	str	r0, [r5, #0]
 800c9f4:	6069      	str	r1, [r5, #4]
 800c9f6:	60aa      	str	r2, [r5, #8]
 800c9f8:	60eb      	str	r3, [r5, #12]
 800c9fa:	cc03      	ldmia	r4!, {r0, r1}
 800c9fc:	6128      	str	r0, [r5, #16]
 800c9fe:	6169      	str	r1, [r5, #20]
 800ca00:	7823      	ldrb	r3, [r4, #0]
 800ca02:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_MODE_NOT_SUPPORTED);
	break;
 800ca04:	e07d      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_BUFFER_TOO_SMALL:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	4a4b      	ldr	r2, [pc, #300]	; (800cb38 <VL53L0X_get_pal_error_string+0x3e0>)
 800ca0a:	461d      	mov	r5, r3
 800ca0c:	4614      	mov	r4, r2
 800ca0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca10:	6028      	str	r0, [r5, #0]
 800ca12:	6069      	str	r1, [r5, #4]
 800ca14:	60aa      	str	r2, [r5, #8]
 800ca16:	60eb      	str	r3, [r5, #12]
 800ca18:	7823      	ldrb	r3, [r4, #0]
 800ca1a:	742b      	strb	r3, [r5, #16]
			VL53L0X_STRING_ERROR_BUFFER_TOO_SMALL);
	break;
 800ca1c:	e071      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_NOT_EXISTING:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	4a46      	ldr	r2, [pc, #280]	; (800cb3c <VL53L0X_get_pal_error_string+0x3e4>)
 800ca22:	461d      	mov	r5, r3
 800ca24:	4614      	mov	r4, r2
 800ca26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca28:	6028      	str	r0, [r5, #0]
 800ca2a:	6069      	str	r1, [r5, #4]
 800ca2c:	60aa      	str	r2, [r5, #8]
 800ca2e:	60eb      	str	r3, [r5, #12]
 800ca30:	8823      	ldrh	r3, [r4, #0]
 800ca32:	822b      	strh	r3, [r5, #16]
			VL53L0X_STRING_ERROR_GPIO_NOT_EXISTING);
	break;
 800ca34:	e065      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	4a41      	ldr	r2, [pc, #260]	; (800cb40 <VL53L0X_get_pal_error_string+0x3e8>)
 800ca3a:	461d      	mov	r5, r3
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca40:	6028      	str	r0, [r5, #0]
 800ca42:	6069      	str	r1, [r5, #4]
 800ca44:	60aa      	str	r2, [r5, #8]
 800ca46:	60eb      	str	r3, [r5, #12]
 800ca48:	cc03      	ldmia	r4!, {r0, r1}
 800ca4a:	6128      	str	r0, [r5, #16]
 800ca4c:	6169      	str	r1, [r5, #20]
 800ca4e:	7823      	ldrb	r3, [r4, #0]
 800ca50:	762b      	strb	r3, [r5, #24]
			VL53L0X_STRING_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED);
	break;
 800ca52:	e056      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_CONTROL_INTERFACE:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	4a3b      	ldr	r2, [pc, #236]	; (800cb44 <VL53L0X_get_pal_error_string+0x3ec>)
 800ca58:	461d      	mov	r5, r3
 800ca5a:	4614      	mov	r4, r2
 800ca5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca5e:	6028      	str	r0, [r5, #0]
 800ca60:	6069      	str	r1, [r5, #4]
 800ca62:	60aa      	str	r2, [r5, #8]
 800ca64:	60eb      	str	r3, [r5, #12]
 800ca66:	cc03      	ldmia	r4!, {r0, r1}
 800ca68:	6128      	str	r0, [r5, #16]
 800ca6a:	6169      	str	r1, [r5, #20]
			VL53L0X_STRING_ERROR_CONTROL_INTERFACE);
	break;
 800ca6c:	e049      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_INVALID_COMMAND:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	4a35      	ldr	r2, [pc, #212]	; (800cb48 <VL53L0X_get_pal_error_string+0x3f0>)
 800ca72:	461d      	mov	r5, r3
 800ca74:	4614      	mov	r4, r2
 800ca76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ca78:	6028      	str	r0, [r5, #0]
 800ca7a:	6069      	str	r1, [r5, #4]
 800ca7c:	60aa      	str	r2, [r5, #8]
 800ca7e:	60eb      	str	r3, [r5, #12]
 800ca80:	6820      	ldr	r0, [r4, #0]
 800ca82:	6128      	str	r0, [r5, #16]
 800ca84:	88a3      	ldrh	r3, [r4, #4]
 800ca86:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_INVALID_COMMAND);
	break;
 800ca88:	e03b      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_DIVISION_BY_ZERO:
		VL53L0X_COPYSTRING(pPalErrorString,
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	4a2f      	ldr	r2, [pc, #188]	; (800cb4c <VL53L0X_get_pal_error_string+0x3f4>)
 800ca8e:	461c      	mov	r4, r3
 800ca90:	4615      	mov	r5, r2
 800ca92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca94:	6020      	str	r0, [r4, #0]
 800ca96:	6061      	str	r1, [r4, #4]
 800ca98:	60a2      	str	r2, [r4, #8]
 800ca9a:	60e3      	str	r3, [r4, #12]
 800ca9c:	6828      	ldr	r0, [r5, #0]
 800ca9e:	6120      	str	r0, [r4, #16]
 800caa0:	88ab      	ldrh	r3, [r5, #4]
 800caa2:	79aa      	ldrb	r2, [r5, #6]
 800caa4:	82a3      	strh	r3, [r4, #20]
 800caa6:	4613      	mov	r3, r2
 800caa8:	75a3      	strb	r3, [r4, #22]
			VL53L0X_STRING_ERROR_DIVISION_BY_ZERO);
	break;
 800caaa:	e02a      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_REF_SPAD_INIT:
		VL53L0X_COPYSTRING(pPalErrorString,
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	4a28      	ldr	r2, [pc, #160]	; (800cb50 <VL53L0X_get_pal_error_string+0x3f8>)
 800cab0:	461d      	mov	r5, r3
 800cab2:	4614      	mov	r4, r2
 800cab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cab6:	6028      	str	r0, [r5, #0]
 800cab8:	6069      	str	r1, [r5, #4]
 800caba:	60aa      	str	r2, [r5, #8]
 800cabc:	60eb      	str	r3, [r5, #12]
 800cabe:	cc03      	ldmia	r4!, {r0, r1}
 800cac0:	6128      	str	r0, [r5, #16]
 800cac2:	6169      	str	r1, [r5, #20]
 800cac4:	8823      	ldrh	r3, [r4, #0]
 800cac6:	832b      	strh	r3, [r5, #24]
			VL53L0X_STRING_ERROR_REF_SPAD_INIT);
	break;
 800cac8:	e01b      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>
	case VL53L0X_ERROR_NOT_IMPLEMENTED:
		VL53L0X_COPYSTRING(pPalErrorString,
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	4a21      	ldr	r2, [pc, #132]	; (800cb54 <VL53L0X_get_pal_error_string+0x3fc>)
 800cace:	461d      	mov	r5, r3
 800cad0:	4614      	mov	r4, r2
 800cad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cad4:	6028      	str	r0, [r5, #0]
 800cad6:	6069      	str	r1, [r5, #4]
 800cad8:	60aa      	str	r2, [r5, #8]
 800cada:	60eb      	str	r3, [r5, #12]
 800cadc:	6820      	ldr	r0, [r4, #0]
 800cade:	6128      	str	r0, [r5, #16]
 800cae0:	88a3      	ldrh	r3, [r4, #4]
 800cae2:	82ab      	strh	r3, [r5, #20]
			VL53L0X_STRING_ERROR_NOT_IMPLEMENTED);
	break;
 800cae4:	e00d      	b.n	800cb02 <VL53L0X_get_pal_error_string+0x3aa>

	default:
		VL53L0X_COPYSTRING(pPalErrorString,
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	4a1b      	ldr	r2, [pc, #108]	; (800cb58 <VL53L0X_get_pal_error_string+0x400>)
 800caea:	461d      	mov	r5, r3
 800caec:	4614      	mov	r4, r2
 800caee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800caf0:	6028      	str	r0, [r5, #0]
 800caf2:	6069      	str	r1, [r5, #4]
 800caf4:	60aa      	str	r2, [r5, #8]
 800caf6:	60eb      	str	r3, [r5, #12]
 800caf8:	8823      	ldrh	r3, [r4, #0]
 800cafa:	78a2      	ldrb	r2, [r4, #2]
 800cafc:	822b      	strh	r3, [r5, #16]
 800cafe:	4613      	mov	r3, r2
 800cb00:	74ab      	strb	r3, [r5, #18]
				VL53L0X_STRING_UNKNOW_ERROR_CODE);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cb02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bcb0      	pop	{r4, r5, r7}
 800cb0e:	4770      	bx	lr
 800cb10:	0800db90 	.word	0x0800db90
 800cb14:	0800db9c 	.word	0x0800db9c
 800cb18:	0800dbb8 	.word	0x0800dbb8
 800cb1c:	0800dbcc 	.word	0x0800dbcc
 800cb20:	0800dbdc 	.word	0x0800dbdc
 800cb24:	0800dbf8 	.word	0x0800dbf8
 800cb28:	0800dc0c 	.word	0x0800dc0c
 800cb2c:	0800dc24 	.word	0x0800dc24
 800cb30:	0800dc30 	.word	0x0800dc30
 800cb34:	0800dc40 	.word	0x0800dc40
 800cb38:	0800dc5c 	.word	0x0800dc5c
 800cb3c:	0800dc70 	.word	0x0800dc70
 800cb40:	0800dc84 	.word	0x0800dc84
 800cb44:	0800dca0 	.word	0x0800dca0
 800cb48:	0800dcb8 	.word	0x0800dcb8
 800cb4c:	0800dcd0 	.word	0x0800dcd0
 800cb50:	0800dce8 	.word	0x0800dce8
 800cb54:	0800dd04 	.word	0x0800dd04
 800cb58:	0800db2c 	.word	0x0800db2c

0800cb5c <VL53L0X_write_multi>:
	*/
    return 0;
}

int32_t VL53L0X_write_multi(uint8_t address, uint8_t reg, uint8_t *pdata, int32_t count)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b08a      	sub	sp, #40	; 0x28
 800cb60:	af04      	add	r7, sp, #16
 800cb62:	60ba      	str	r2, [r7, #8]
 800cb64:	607b      	str	r3, [r7, #4]
 800cb66:	4603      	mov	r3, r0
 800cb68:	73fb      	strb	r3, [r7, #15]
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	73bb      	strb	r3, [r7, #14]

	int32_t status = HAL_I2C_Mem_Write(&hi2c1, address, reg, 1, pdata, count, HAL_MAX_DELAY);
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	b299      	uxth	r1, r3
 800cb72:	7bbb      	ldrb	r3, [r7, #14]
 800cb74:	b298      	uxth	r0, r3
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb7e:	9202      	str	r2, [sp, #8]
 800cb80:	9301      	str	r3, [sp, #4]
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	9300      	str	r3, [sp, #0]
 800cb86:	2301      	movs	r3, #1
 800cb88:	4602      	mov	r2, r0
 800cb8a:	4805      	ldr	r0, [pc, #20]	; (800cba0 <VL53L0X_write_multi+0x44>)
 800cb8c:	f7f4 fdd4 	bl	8001738 <HAL_I2C_Mem_Write>
 800cb90:	4603      	mov	r3, r0
 800cb92:	617b      	str	r3, [r7, #20]
	return status;
 800cb94:	697b      	ldr	r3, [r7, #20]
    }

    return status;
    */

}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3718      	adds	r7, #24
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	200004d0 	.word	0x200004d0

0800cba4 <VL53L0X_read_multi>:

int32_t VL53L0X_read_multi(uint8_t address, uint8_t index, uint8_t *pdata, int32_t count)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b08a      	sub	sp, #40	; 0x28
 800cba8:	af04      	add	r7, sp, #16
 800cbaa:	60ba      	str	r2, [r7, #8]
 800cbac:	607b      	str	r3, [r7, #4]
 800cbae:	4603      	mov	r3, r0
 800cbb0:	73fb      	strb	r3, [r7, #15]
 800cbb2:	460b      	mov	r3, r1
 800cbb4:	73bb      	strb	r3, [r7, #14]
    int32_t status = STATUS_OK;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Mem_Read(&hi2c1, address, index, 1, pdata, count, HAL_MAX_DELAY);
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
 800cbbc:	b299      	uxth	r1, r3
 800cbbe:	7bbb      	ldrb	r3, [r7, #14]
 800cbc0:	b298      	uxth	r0, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbca:	9202      	str	r2, [sp, #8]
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	9300      	str	r3, [sp, #0]
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	4805      	ldr	r0, [pc, #20]	; (800cbec <VL53L0X_read_multi+0x48>)
 800cbd8:	f7f4 fea8 	bl	800192c <HAL_I2C_Mem_Read>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	617b      	str	r3, [r7, #20]
    return status;
 800cbe0:	697b      	ldr	r3, [r7, #20]
    trace_i2c("Read  reg : 0x%04X, Val : 0x%s\n", index, value_as_str);
#endif

    return status;
    */
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3718      	adds	r7, #24
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200004d0 	.word	0x200004d0

0800cbf0 <VL53L0X_write_byte>:


int32_t VL53L0X_write_byte(uint8_t address, uint8_t index, uint8_t data)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	71fb      	strb	r3, [r7, #7]
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	71bb      	strb	r3, [r7, #6]
 800cbfe:	4613      	mov	r3, r2
 800cc00:	717b      	strb	r3, [r7, #5]
    int32_t status = STATUS_OK;
 800cc02:	2300      	movs	r3, #0
 800cc04:	60fb      	str	r3, [r7, #12]
    const int32_t cbyte_count = 1;
 800cc06:	2301      	movs	r3, #1
 800cc08:	60bb      	str	r3, [r7, #8]

    status = VL53L0X_write_multi(address, index, &data, cbyte_count);
 800cc0a:	1d7a      	adds	r2, r7, #5
 800cc0c:	79b9      	ldrb	r1, [r7, #6]
 800cc0e:	79f8      	ldrb	r0, [r7, #7]
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	f7ff ffa3 	bl	800cb5c <VL53L0X_write_multi>
 800cc16:	60f8      	str	r0, [r7, #12]

    return status;
 800cc18:	68fb      	ldr	r3, [r7, #12]

}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3710      	adds	r7, #16
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}

0800cc22 <VL53L0X_write_word>:


int32_t VL53L0X_write_word(uint8_t address, uint8_t index, uint16_t data)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b084      	sub	sp, #16
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	4603      	mov	r3, r0
 800cc2a:	71fb      	strb	r3, [r7, #7]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	71bb      	strb	r3, [r7, #6]
 800cc30:	4613      	mov	r3, r2
 800cc32:	80bb      	strh	r3, [r7, #4]
    int32_t status = STATUS_OK;
 800cc34:	2300      	movs	r3, #0
 800cc36:	60fb      	str	r3, [r7, #12]

    uint8_t  buffer[BYTES_PER_WORD];

    // Split 16-bit word into MS and LS uint8_t
    buffer[0] = (uint8_t)(data >> 8);
 800cc38:	88bb      	ldrh	r3, [r7, #4]
 800cc3a:	0a1b      	lsrs	r3, r3, #8
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	723b      	strb	r3, [r7, #8]
    buffer[1] = (uint8_t)(data &  0x00FF);
 800cc42:	88bb      	ldrh	r3, [r7, #4]
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	727b      	strb	r3, [r7, #9]
    status = VL53L0X_write_multi(address, index, buffer, 2);
 800cc48:	f107 0208 	add.w	r2, r7, #8
 800cc4c:	79b9      	ldrb	r1, [r7, #6]
 800cc4e:	79f8      	ldrb	r0, [r7, #7]
 800cc50:	2302      	movs	r3, #2
 800cc52:	f7ff ff83 	bl	800cb5c <VL53L0X_write_multi>
 800cc56:	60f8      	str	r0, [r7, #12]
    return status;
 800cc58:	68fb      	ldr	r3, [r7, #12]
    else
    {
        status = VL53L0X_write_multi(address, index, buffer, BYTES_PER_WORD);
    }
    */
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3710      	adds	r7, #16
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <VL53L0X_read_byte>:

}


int32_t VL53L0X_read_byte(uint8_t address, uint8_t index, uint8_t *pdata)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b084      	sub	sp, #16
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	4603      	mov	r3, r0
 800cc6a:	603a      	str	r2, [r7, #0]
 800cc6c:	71fb      	strb	r3, [r7, #7]
 800cc6e:	460b      	mov	r3, r1
 800cc70:	71bb      	strb	r3, [r7, #6]
    int32_t status = STATUS_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	60fb      	str	r3, [r7, #12]
    int32_t cbyte_count = 1;
 800cc76:	2301      	movs	r3, #1
 800cc78:	60bb      	str	r3, [r7, #8]

    status = VL53L0X_read_multi(address, index, pdata, cbyte_count);
 800cc7a:	79b9      	ldrb	r1, [r7, #6]
 800cc7c:	79f8      	ldrb	r0, [r7, #7]
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	f7ff ff8f 	bl	800cba4 <VL53L0X_read_multi>
 800cc86:	60f8      	str	r0, [r7, #12]

    return status;
 800cc88:	68fb      	ldr	r3, [r7, #12]

}
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	3710      	adds	r7, #16
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}

0800cc92 <VL53L0X_read_word>:


int32_t VL53L0X_read_word(uint8_t address, uint8_t index, uint16_t *pdata)
{
 800cc92:	b580      	push	{r7, lr}
 800cc94:	b084      	sub	sp, #16
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	4603      	mov	r3, r0
 800cc9a:	603a      	str	r2, [r7, #0]
 800cc9c:	71fb      	strb	r3, [r7, #7]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	71bb      	strb	r3, [r7, #6]
    int32_t  status = STATUS_OK;
 800cca2:	2300      	movs	r3, #0
 800cca4:	60fb      	str	r3, [r7, #12]
	uint8_t  buffer[BYTES_PER_WORD];

    status = VL53L0X_read_multi(address, index, buffer, BYTES_PER_WORD);
 800cca6:	f107 0208 	add.w	r2, r7, #8
 800ccaa:	79b9      	ldrb	r1, [r7, #6]
 800ccac:	79f8      	ldrb	r0, [r7, #7]
 800ccae:	2302      	movs	r3, #2
 800ccb0:	f7ff ff78 	bl	800cba4 <VL53L0X_read_multi>
 800ccb4:	60f8      	str	r0, [r7, #12]
	*pdata = ((uint16_t)buffer[0]<<8) + (uint16_t)buffer[1];
 800ccb6:	7a3b      	ldrb	r3, [r7, #8]
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	b29a      	uxth	r2, r3
 800ccbe:	7a7b      	ldrb	r3, [r7, #9]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	4413      	add	r3, r2
 800ccc4:	b29a      	uxth	r2, r3
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	801a      	strh	r2, [r3, #0]

    return status;
 800ccca:	68fb      	ldr	r3, [r7, #12]

}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3710      	adds	r7, #16
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <VL53L0X_read_dword>:

int32_t VL53L0X_read_dword(uint8_t address, uint8_t index, uint32_t *pdata)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	603a      	str	r2, [r7, #0]
 800ccde:	71fb      	strb	r3, [r7, #7]
 800cce0:	460b      	mov	r3, r1
 800cce2:	71bb      	strb	r3, [r7, #6]
    int32_t status = STATUS_OK;
 800cce4:	2300      	movs	r3, #0
 800cce6:	60fb      	str	r3, [r7, #12]
	uint8_t  buffer[4];

    status = VL53L0X_read_multi(address, index, buffer, 4);
 800cce8:	f107 0208 	add.w	r2, r7, #8
 800ccec:	79b9      	ldrb	r1, [r7, #6]
 800ccee:	79f8      	ldrb	r0, [r7, #7]
 800ccf0:	2304      	movs	r3, #4
 800ccf2:	f7ff ff57 	bl	800cba4 <VL53L0X_read_multi>
 800ccf6:	60f8      	str	r0, [r7, #12]
    *pdata = ((uint32_t)buffer[0]<<24) + ((uint32_t)buffer[1]<<16) + ((uint32_t)buffer[2]<<8) + (uint32_t)buffer[3];
 800ccf8:	7a3b      	ldrb	r3, [r7, #8]
 800ccfa:	061a      	lsls	r2, r3, #24
 800ccfc:	7a7b      	ldrb	r3, [r7, #9]
 800ccfe:	041b      	lsls	r3, r3, #16
 800cd00:	441a      	add	r2, r3
 800cd02:	7abb      	ldrb	r3, [r7, #10]
 800cd04:	021b      	lsls	r3, r3, #8
 800cd06:	4413      	add	r3, r2
 800cd08:	7afa      	ldrb	r2, [r7, #11]
 800cd0a:	441a      	add	r2, r3
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	601a      	str	r2, [r3, #0]

    return status;
 800cd10:	68fb      	ldr	r3, [r7, #12]

}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <VL53L0X_WriteMulti>:

    return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b088      	sub	sp, #32
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	60f8      	str	r0, [r7, #12]
 800cd22:	607a      	str	r2, [r7, #4]
 800cd24:	603b      	str	r3, [r7, #0]
 800cd26:	460b      	mov	r3, r1
 800cd28:	72fb      	strb	r3, [r7, #11]

    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	77fb      	strb	r3, [r7, #31]
    int32_t status_int = 0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	61bb      	str	r3, [r7, #24]
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2b3f      	cmp	r3, #63	; 0x3f
 800cd36:	d901      	bls.n	800cd3c <VL53L0X_WriteMulti+0x22>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd38:	23fc      	movs	r3, #252	; 0xfc
 800cd3a:	77fb      	strb	r3, [r7, #31]
    }

	deviceAddress = Dev->I2cDevAddr;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cd42:	75fb      	strb	r3, [r7, #23]

	status_int = VL53L0X_write_multi(deviceAddress, index, pdata, count);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	7af9      	ldrb	r1, [r7, #11]
 800cd48:	7df8      	ldrb	r0, [r7, #23]
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	f7ff ff06 	bl	800cb5c <VL53L0X_write_multi>
 800cd50:	61b8      	str	r0, [r7, #24]

	if (status_int != 0)
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d001      	beq.n	800cd5c <VL53L0X_WriteMulti+0x42>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cd58:	23ec      	movs	r3, #236	; 0xec
 800cd5a:	77fb      	strb	r3, [r7, #31]

    return Status;
 800cd5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3720      	adds	r7, #32
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count){
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b086      	sub	sp, #24
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	607a      	str	r2, [r7, #4]
 800cd72:	603b      	str	r3, [r7, #0]
 800cd74:	460b      	mov	r3, r1
 800cd76:	72fb      	strb	r3, [r7, #11]
    VL53L0X_I2C_USER_VAR
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
	uint8_t deviceAddress;

    if (count>=VL53L0X_MAX_I2C_XFER_SIZE){
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	2b3f      	cmp	r3, #63	; 0x3f
 800cd80:	d901      	bls.n	800cd86 <VL53L0X_ReadMulti+0x1e>
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd82:	23fc      	movs	r3, #252	; 0xfc
 800cd84:	75fb      	strb	r3, [r7, #23]
    }

    deviceAddress = Dev->I2cDevAddr;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cd8c:	75bb      	strb	r3, [r7, #22]

	status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count);
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	7af9      	ldrb	r1, [r7, #11]
 800cd92:	7db8      	ldrb	r0, [r7, #22]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	f7ff ff05 	bl	800cba4 <VL53L0X_read_multi>
 800cd9a:	6138      	str	r0, [r7, #16]

	if (status_int != 0)
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d001      	beq.n	800cda6 <VL53L0X_ReadMulti+0x3e>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cda2:	23ec      	movs	r3, #236	; 0xec
 800cda4:	75fb      	strb	r3, [r7, #23]

    return Status;
 800cda6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3718      	adds	r7, #24
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <VL53L0X_WrByte>:


VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data){
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	6078      	str	r0, [r7, #4]
 800cdba:	460b      	mov	r3, r1
 800cdbc:	70fb      	strb	r3, [r7, #3]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cdcc:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800cdce:	78ba      	ldrb	r2, [r7, #2]
 800cdd0:	78f9      	ldrb	r1, [r7, #3]
 800cdd2:	7bbb      	ldrb	r3, [r7, #14]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff ff0b 	bl	800cbf0 <VL53L0X_write_byte>
 800cdda:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d001      	beq.n	800cde6 <VL53L0X_WrByte+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cde2:	23ec      	movs	r3, #236	; 0xec
 800cde4:	73fb      	strb	r3, [r7, #15]

    return Status;
 800cde6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data){
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	70fb      	strb	r3, [r7, #3]
 800cdfe:	4613      	mov	r3, r2
 800ce00:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce02:	2300      	movs	r3, #0
 800ce04:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;
	uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ce0c:	73bb      	strb	r3, [r7, #14]

	status_int = VL53L0X_write_word(deviceAddress, index, data);
 800ce0e:	883a      	ldrh	r2, [r7, #0]
 800ce10:	78f9      	ldrb	r1, [r7, #3]
 800ce12:	7bbb      	ldrb	r3, [r7, #14]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff ff04 	bl	800cc22 <VL53L0X_write_word>
 800ce1a:	60b8      	str	r0, [r7, #8]

	if (status_int != 0)
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <VL53L0X_WrWord+0x34>
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce22:	23ec      	movs	r3, #236	; 0xec
 800ce24:	73fb      	strb	r3, [r7, #15]

    return Status;
 800ce26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <VL53L0X_UpdateByte>:
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b086      	sub	sp, #24
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	4608      	mov	r0, r1
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	461a      	mov	r2, r3
 800ce40:	4603      	mov	r3, r0
 800ce42:	70fb      	strb	r3, [r7, #3]
 800ce44:	460b      	mov	r3, r1
 800ce46:	70bb      	strb	r3, [r7, #2]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800ce56:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
 800ce58:	f107 020f 	add.w	r2, r7, #15
 800ce5c:	78f9      	ldrb	r1, [r7, #3]
 800ce5e:	7dbb      	ldrb	r3, [r7, #22]
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff fefe 	bl	800cc62 <VL53L0X_read_byte>
 800ce66:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <VL53L0X_UpdateByte+0x40>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce6e:	23ec      	movs	r3, #236	; 0xec
 800ce70:	75fb      	strb	r3, [r7, #23]

    if (Status == VL53L0X_ERROR_NONE) {
 800ce72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d113      	bne.n	800cea2 <VL53L0X_UpdateByte+0x70>
        data = (data & AndData) | OrData;
 800ce7a:	7bfa      	ldrb	r2, [r7, #15]
 800ce7c:	78bb      	ldrb	r3, [r7, #2]
 800ce7e:	4013      	ands	r3, r2
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	787b      	ldrb	r3, [r7, #1]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	73fb      	strb	r3, [r7, #15]
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
 800ce8a:	7bfa      	ldrb	r2, [r7, #15]
 800ce8c:	78f9      	ldrb	r1, [r7, #3]
 800ce8e:	7dbb      	ldrb	r3, [r7, #22]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7ff fead 	bl	800cbf0 <VL53L0X_write_byte>
 800ce96:	6138      	str	r0, [r7, #16]

        if (status_int != 0)
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d001      	beq.n	800cea2 <VL53L0X_UpdateByte+0x70>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ce9e:	23ec      	movs	r3, #236	; 0xec
 800cea0:	75fb      	strb	r3, [r7, #23]
    }

    return Status;
 800cea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3718      	adds	r7, #24
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}

0800ceae <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b086      	sub	sp, #24
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	60f8      	str	r0, [r7, #12]
 800ceb6:	460b      	mov	r3, r1
 800ceb8:	607a      	str	r2, [r7, #4]
 800ceba:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cebc:	2300      	movs	r3, #0
 800cebe:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cec6:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
 800cec8:	7af9      	ldrb	r1, [r7, #11]
 800ceca:	7dbb      	ldrb	r3, [r7, #22]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	4618      	mov	r0, r3
 800ced0:	f7ff fec7 	bl	800cc62 <VL53L0X_read_byte>
 800ced4:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d001      	beq.n	800cee0 <VL53L0X_RdByte+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cedc:	23ec      	movs	r3, #236	; 0xec
 800cede:	75fb      	strb	r3, [r7, #23]

    return Status;
 800cee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3718      	adds	r7, #24
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	460b      	mov	r3, r1
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cefa:	2300      	movs	r3, #0
 800cefc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cf04:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_word(deviceAddress, index, data);
 800cf06:	7af9      	ldrb	r1, [r7, #11]
 800cf08:	7dbb      	ldrb	r3, [r7, #22]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff fec0 	bl	800cc92 <VL53L0X_read_word>
 800cf12:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <VL53L0X_RdWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf1a:	23ec      	movs	r3, #236	; 0xec
 800cf1c:	75fb      	strb	r3, [r7, #23]

    return Status;
 800cf1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3718      	adds	r7, #24
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b086      	sub	sp, #24
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	60f8      	str	r0, [r7, #12]
 800cf32:	460b      	mov	r3, r1
 800cf34:	607a      	str	r2, [r7, #4]
 800cf36:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800cf42:	75bb      	strb	r3, [r7, #22]

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
 800cf44:	7af9      	ldrb	r1, [r7, #11]
 800cf46:	7dbb      	ldrb	r3, [r7, #22]
 800cf48:	687a      	ldr	r2, [r7, #4]
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff fec2 	bl	800ccd4 <VL53L0X_read_dword>
 800cf50:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <VL53L0X_RdDWord+0x32>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cf58:	23ec      	movs	r3, #236	; 0xec
 800cf5a:	75fb      	strb	r3, [r7, #23]

    return Status;
 800cf5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}

0800cf68 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
        WaitForSingleObject(hEvent,cTimeout_ms);
    }

    LOG_FUNCTION_END(status);
*/
    return 0;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	370c      	adds	r7, #12
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr
	...

0800cf80 <__errno>:
 800cf80:	4b01      	ldr	r3, [pc, #4]	; (800cf88 <__errno+0x8>)
 800cf82:	6818      	ldr	r0, [r3, #0]
 800cf84:	4770      	bx	lr
 800cf86:	bf00      	nop
 800cf88:	2000043c 	.word	0x2000043c

0800cf8c <__libc_init_array>:
 800cf8c:	b570      	push	{r4, r5, r6, lr}
 800cf8e:	4e0d      	ldr	r6, [pc, #52]	; (800cfc4 <__libc_init_array+0x38>)
 800cf90:	4c0d      	ldr	r4, [pc, #52]	; (800cfc8 <__libc_init_array+0x3c>)
 800cf92:	1ba4      	subs	r4, r4, r6
 800cf94:	10a4      	asrs	r4, r4, #2
 800cf96:	2500      	movs	r5, #0
 800cf98:	42a5      	cmp	r5, r4
 800cf9a:	d109      	bne.n	800cfb0 <__libc_init_array+0x24>
 800cf9c:	4e0b      	ldr	r6, [pc, #44]	; (800cfcc <__libc_init_array+0x40>)
 800cf9e:	4c0c      	ldr	r4, [pc, #48]	; (800cfd0 <__libc_init_array+0x44>)
 800cfa0:	f000 fc40 	bl	800d824 <_init>
 800cfa4:	1ba4      	subs	r4, r4, r6
 800cfa6:	10a4      	asrs	r4, r4, #2
 800cfa8:	2500      	movs	r5, #0
 800cfaa:	42a5      	cmp	r5, r4
 800cfac:	d105      	bne.n	800cfba <__libc_init_array+0x2e>
 800cfae:	bd70      	pop	{r4, r5, r6, pc}
 800cfb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfb4:	4798      	blx	r3
 800cfb6:	3501      	adds	r5, #1
 800cfb8:	e7ee      	b.n	800cf98 <__libc_init_array+0xc>
 800cfba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cfbe:	4798      	blx	r3
 800cfc0:	3501      	adds	r5, #1
 800cfc2:	e7f2      	b.n	800cfaa <__libc_init_array+0x1e>
 800cfc4:	0800de8c 	.word	0x0800de8c
 800cfc8:	0800de8c 	.word	0x0800de8c
 800cfcc:	0800de8c 	.word	0x0800de8c
 800cfd0:	0800de90 	.word	0x0800de90

0800cfd4 <malloc>:
 800cfd4:	4b02      	ldr	r3, [pc, #8]	; (800cfe0 <malloc+0xc>)
 800cfd6:	4601      	mov	r1, r0
 800cfd8:	6818      	ldr	r0, [r3, #0]
 800cfda:	f000 b86d 	b.w	800d0b8 <_malloc_r>
 800cfde:	bf00      	nop
 800cfe0:	2000043c 	.word	0x2000043c

0800cfe4 <free>:
 800cfe4:	4b02      	ldr	r3, [pc, #8]	; (800cff0 <free+0xc>)
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	6818      	ldr	r0, [r3, #0]
 800cfea:	f000 b817 	b.w	800d01c <_free_r>
 800cfee:	bf00      	nop
 800cff0:	2000043c 	.word	0x2000043c

0800cff4 <memcpy>:
 800cff4:	b510      	push	{r4, lr}
 800cff6:	1e43      	subs	r3, r0, #1
 800cff8:	440a      	add	r2, r1
 800cffa:	4291      	cmp	r1, r2
 800cffc:	d100      	bne.n	800d000 <memcpy+0xc>
 800cffe:	bd10      	pop	{r4, pc}
 800d000:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d004:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d008:	e7f7      	b.n	800cffa <memcpy+0x6>

0800d00a <memset>:
 800d00a:	4402      	add	r2, r0
 800d00c:	4603      	mov	r3, r0
 800d00e:	4293      	cmp	r3, r2
 800d010:	d100      	bne.n	800d014 <memset+0xa>
 800d012:	4770      	bx	lr
 800d014:	f803 1b01 	strb.w	r1, [r3], #1
 800d018:	e7f9      	b.n	800d00e <memset+0x4>
	...

0800d01c <_free_r>:
 800d01c:	b538      	push	{r3, r4, r5, lr}
 800d01e:	4605      	mov	r5, r0
 800d020:	2900      	cmp	r1, #0
 800d022:	d045      	beq.n	800d0b0 <_free_r+0x94>
 800d024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d028:	1f0c      	subs	r4, r1, #4
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	bfb8      	it	lt
 800d02e:	18e4      	addlt	r4, r4, r3
 800d030:	f000 f8d4 	bl	800d1dc <__malloc_lock>
 800d034:	4a1f      	ldr	r2, [pc, #124]	; (800d0b4 <_free_r+0x98>)
 800d036:	6813      	ldr	r3, [r2, #0]
 800d038:	4610      	mov	r0, r2
 800d03a:	b933      	cbnz	r3, 800d04a <_free_r+0x2e>
 800d03c:	6063      	str	r3, [r4, #4]
 800d03e:	6014      	str	r4, [r2, #0]
 800d040:	4628      	mov	r0, r5
 800d042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d046:	f000 b8ca 	b.w	800d1de <__malloc_unlock>
 800d04a:	42a3      	cmp	r3, r4
 800d04c:	d90c      	bls.n	800d068 <_free_r+0x4c>
 800d04e:	6821      	ldr	r1, [r4, #0]
 800d050:	1862      	adds	r2, r4, r1
 800d052:	4293      	cmp	r3, r2
 800d054:	bf04      	itt	eq
 800d056:	681a      	ldreq	r2, [r3, #0]
 800d058:	685b      	ldreq	r3, [r3, #4]
 800d05a:	6063      	str	r3, [r4, #4]
 800d05c:	bf04      	itt	eq
 800d05e:	1852      	addeq	r2, r2, r1
 800d060:	6022      	streq	r2, [r4, #0]
 800d062:	6004      	str	r4, [r0, #0]
 800d064:	e7ec      	b.n	800d040 <_free_r+0x24>
 800d066:	4613      	mov	r3, r2
 800d068:	685a      	ldr	r2, [r3, #4]
 800d06a:	b10a      	cbz	r2, 800d070 <_free_r+0x54>
 800d06c:	42a2      	cmp	r2, r4
 800d06e:	d9fa      	bls.n	800d066 <_free_r+0x4a>
 800d070:	6819      	ldr	r1, [r3, #0]
 800d072:	1858      	adds	r0, r3, r1
 800d074:	42a0      	cmp	r0, r4
 800d076:	d10b      	bne.n	800d090 <_free_r+0x74>
 800d078:	6820      	ldr	r0, [r4, #0]
 800d07a:	4401      	add	r1, r0
 800d07c:	1858      	adds	r0, r3, r1
 800d07e:	4282      	cmp	r2, r0
 800d080:	6019      	str	r1, [r3, #0]
 800d082:	d1dd      	bne.n	800d040 <_free_r+0x24>
 800d084:	6810      	ldr	r0, [r2, #0]
 800d086:	6852      	ldr	r2, [r2, #4]
 800d088:	605a      	str	r2, [r3, #4]
 800d08a:	4401      	add	r1, r0
 800d08c:	6019      	str	r1, [r3, #0]
 800d08e:	e7d7      	b.n	800d040 <_free_r+0x24>
 800d090:	d902      	bls.n	800d098 <_free_r+0x7c>
 800d092:	230c      	movs	r3, #12
 800d094:	602b      	str	r3, [r5, #0]
 800d096:	e7d3      	b.n	800d040 <_free_r+0x24>
 800d098:	6820      	ldr	r0, [r4, #0]
 800d09a:	1821      	adds	r1, r4, r0
 800d09c:	428a      	cmp	r2, r1
 800d09e:	bf04      	itt	eq
 800d0a0:	6811      	ldreq	r1, [r2, #0]
 800d0a2:	6852      	ldreq	r2, [r2, #4]
 800d0a4:	6062      	str	r2, [r4, #4]
 800d0a6:	bf04      	itt	eq
 800d0a8:	1809      	addeq	r1, r1, r0
 800d0aa:	6021      	streq	r1, [r4, #0]
 800d0ac:	605c      	str	r4, [r3, #4]
 800d0ae:	e7c7      	b.n	800d040 <_free_r+0x24>
 800d0b0:	bd38      	pop	{r3, r4, r5, pc}
 800d0b2:	bf00      	nop
 800d0b4:	200004c4 	.word	0x200004c4

0800d0b8 <_malloc_r>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	1ccd      	adds	r5, r1, #3
 800d0bc:	f025 0503 	bic.w	r5, r5, #3
 800d0c0:	3508      	adds	r5, #8
 800d0c2:	2d0c      	cmp	r5, #12
 800d0c4:	bf38      	it	cc
 800d0c6:	250c      	movcc	r5, #12
 800d0c8:	2d00      	cmp	r5, #0
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	db01      	blt.n	800d0d2 <_malloc_r+0x1a>
 800d0ce:	42a9      	cmp	r1, r5
 800d0d0:	d903      	bls.n	800d0da <_malloc_r+0x22>
 800d0d2:	230c      	movs	r3, #12
 800d0d4:	6033      	str	r3, [r6, #0]
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	bd70      	pop	{r4, r5, r6, pc}
 800d0da:	f000 f87f 	bl	800d1dc <__malloc_lock>
 800d0de:	4a21      	ldr	r2, [pc, #132]	; (800d164 <_malloc_r+0xac>)
 800d0e0:	6814      	ldr	r4, [r2, #0]
 800d0e2:	4621      	mov	r1, r4
 800d0e4:	b991      	cbnz	r1, 800d10c <_malloc_r+0x54>
 800d0e6:	4c20      	ldr	r4, [pc, #128]	; (800d168 <_malloc_r+0xb0>)
 800d0e8:	6823      	ldr	r3, [r4, #0]
 800d0ea:	b91b      	cbnz	r3, 800d0f4 <_malloc_r+0x3c>
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	f000 f83d 	bl	800d16c <_sbrk_r>
 800d0f2:	6020      	str	r0, [r4, #0]
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	4630      	mov	r0, r6
 800d0f8:	f000 f838 	bl	800d16c <_sbrk_r>
 800d0fc:	1c43      	adds	r3, r0, #1
 800d0fe:	d124      	bne.n	800d14a <_malloc_r+0x92>
 800d100:	230c      	movs	r3, #12
 800d102:	6033      	str	r3, [r6, #0]
 800d104:	4630      	mov	r0, r6
 800d106:	f000 f86a 	bl	800d1de <__malloc_unlock>
 800d10a:	e7e4      	b.n	800d0d6 <_malloc_r+0x1e>
 800d10c:	680b      	ldr	r3, [r1, #0]
 800d10e:	1b5b      	subs	r3, r3, r5
 800d110:	d418      	bmi.n	800d144 <_malloc_r+0x8c>
 800d112:	2b0b      	cmp	r3, #11
 800d114:	d90f      	bls.n	800d136 <_malloc_r+0x7e>
 800d116:	600b      	str	r3, [r1, #0]
 800d118:	50cd      	str	r5, [r1, r3]
 800d11a:	18cc      	adds	r4, r1, r3
 800d11c:	4630      	mov	r0, r6
 800d11e:	f000 f85e 	bl	800d1de <__malloc_unlock>
 800d122:	f104 000b 	add.w	r0, r4, #11
 800d126:	1d23      	adds	r3, r4, #4
 800d128:	f020 0007 	bic.w	r0, r0, #7
 800d12c:	1ac3      	subs	r3, r0, r3
 800d12e:	d0d3      	beq.n	800d0d8 <_malloc_r+0x20>
 800d130:	425a      	negs	r2, r3
 800d132:	50e2      	str	r2, [r4, r3]
 800d134:	e7d0      	b.n	800d0d8 <_malloc_r+0x20>
 800d136:	428c      	cmp	r4, r1
 800d138:	684b      	ldr	r3, [r1, #4]
 800d13a:	bf16      	itet	ne
 800d13c:	6063      	strne	r3, [r4, #4]
 800d13e:	6013      	streq	r3, [r2, #0]
 800d140:	460c      	movne	r4, r1
 800d142:	e7eb      	b.n	800d11c <_malloc_r+0x64>
 800d144:	460c      	mov	r4, r1
 800d146:	6849      	ldr	r1, [r1, #4]
 800d148:	e7cc      	b.n	800d0e4 <_malloc_r+0x2c>
 800d14a:	1cc4      	adds	r4, r0, #3
 800d14c:	f024 0403 	bic.w	r4, r4, #3
 800d150:	42a0      	cmp	r0, r4
 800d152:	d005      	beq.n	800d160 <_malloc_r+0xa8>
 800d154:	1a21      	subs	r1, r4, r0
 800d156:	4630      	mov	r0, r6
 800d158:	f000 f808 	bl	800d16c <_sbrk_r>
 800d15c:	3001      	adds	r0, #1
 800d15e:	d0cf      	beq.n	800d100 <_malloc_r+0x48>
 800d160:	6025      	str	r5, [r4, #0]
 800d162:	e7db      	b.n	800d11c <_malloc_r+0x64>
 800d164:	200004c4 	.word	0x200004c4
 800d168:	200004c8 	.word	0x200004c8

0800d16c <_sbrk_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	4c06      	ldr	r4, [pc, #24]	; (800d188 <_sbrk_r+0x1c>)
 800d170:	2300      	movs	r3, #0
 800d172:	4605      	mov	r5, r0
 800d174:	4608      	mov	r0, r1
 800d176:	6023      	str	r3, [r4, #0]
 800d178:	f7f3 fe08 	bl	8000d8c <_sbrk>
 800d17c:	1c43      	adds	r3, r0, #1
 800d17e:	d102      	bne.n	800d186 <_sbrk_r+0x1a>
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	b103      	cbz	r3, 800d186 <_sbrk_r+0x1a>
 800d184:	602b      	str	r3, [r5, #0]
 800d186:	bd38      	pop	{r3, r4, r5, pc}
 800d188:	20002294 	.word	0x20002294

0800d18c <strcpy>:
 800d18c:	4603      	mov	r3, r0
 800d18e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d192:	f803 2b01 	strb.w	r2, [r3], #1
 800d196:	2a00      	cmp	r2, #0
 800d198:	d1f9      	bne.n	800d18e <strcpy+0x2>
 800d19a:	4770      	bx	lr

0800d19c <_vsiprintf_r>:
 800d19c:	b500      	push	{lr}
 800d19e:	b09b      	sub	sp, #108	; 0x6c
 800d1a0:	9100      	str	r1, [sp, #0]
 800d1a2:	9104      	str	r1, [sp, #16]
 800d1a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1a8:	9105      	str	r1, [sp, #20]
 800d1aa:	9102      	str	r1, [sp, #8]
 800d1ac:	4905      	ldr	r1, [pc, #20]	; (800d1c4 <_vsiprintf_r+0x28>)
 800d1ae:	9103      	str	r1, [sp, #12]
 800d1b0:	4669      	mov	r1, sp
 800d1b2:	f000 f86f 	bl	800d294 <_svfiprintf_r>
 800d1b6:	9b00      	ldr	r3, [sp, #0]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	701a      	strb	r2, [r3, #0]
 800d1bc:	b01b      	add	sp, #108	; 0x6c
 800d1be:	f85d fb04 	ldr.w	pc, [sp], #4
 800d1c2:	bf00      	nop
 800d1c4:	ffff0208 	.word	0xffff0208

0800d1c8 <vsiprintf>:
 800d1c8:	4613      	mov	r3, r2
 800d1ca:	460a      	mov	r2, r1
 800d1cc:	4601      	mov	r1, r0
 800d1ce:	4802      	ldr	r0, [pc, #8]	; (800d1d8 <vsiprintf+0x10>)
 800d1d0:	6800      	ldr	r0, [r0, #0]
 800d1d2:	f7ff bfe3 	b.w	800d19c <_vsiprintf_r>
 800d1d6:	bf00      	nop
 800d1d8:	2000043c 	.word	0x2000043c

0800d1dc <__malloc_lock>:
 800d1dc:	4770      	bx	lr

0800d1de <__malloc_unlock>:
 800d1de:	4770      	bx	lr

0800d1e0 <__ssputs_r>:
 800d1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1e4:	688e      	ldr	r6, [r1, #8]
 800d1e6:	429e      	cmp	r6, r3
 800d1e8:	4682      	mov	sl, r0
 800d1ea:	460c      	mov	r4, r1
 800d1ec:	4690      	mov	r8, r2
 800d1ee:	4699      	mov	r9, r3
 800d1f0:	d837      	bhi.n	800d262 <__ssputs_r+0x82>
 800d1f2:	898a      	ldrh	r2, [r1, #12]
 800d1f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1f8:	d031      	beq.n	800d25e <__ssputs_r+0x7e>
 800d1fa:	6825      	ldr	r5, [r4, #0]
 800d1fc:	6909      	ldr	r1, [r1, #16]
 800d1fe:	1a6f      	subs	r7, r5, r1
 800d200:	6965      	ldr	r5, [r4, #20]
 800d202:	2302      	movs	r3, #2
 800d204:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d208:	fb95 f5f3 	sdiv	r5, r5, r3
 800d20c:	f109 0301 	add.w	r3, r9, #1
 800d210:	443b      	add	r3, r7
 800d212:	429d      	cmp	r5, r3
 800d214:	bf38      	it	cc
 800d216:	461d      	movcc	r5, r3
 800d218:	0553      	lsls	r3, r2, #21
 800d21a:	d530      	bpl.n	800d27e <__ssputs_r+0x9e>
 800d21c:	4629      	mov	r1, r5
 800d21e:	f7ff ff4b 	bl	800d0b8 <_malloc_r>
 800d222:	4606      	mov	r6, r0
 800d224:	b950      	cbnz	r0, 800d23c <__ssputs_r+0x5c>
 800d226:	230c      	movs	r3, #12
 800d228:	f8ca 3000 	str.w	r3, [sl]
 800d22c:	89a3      	ldrh	r3, [r4, #12]
 800d22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d232:	81a3      	strh	r3, [r4, #12]
 800d234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d23c:	463a      	mov	r2, r7
 800d23e:	6921      	ldr	r1, [r4, #16]
 800d240:	f7ff fed8 	bl	800cff4 <memcpy>
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d24a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d24e:	81a3      	strh	r3, [r4, #12]
 800d250:	6126      	str	r6, [r4, #16]
 800d252:	6165      	str	r5, [r4, #20]
 800d254:	443e      	add	r6, r7
 800d256:	1bed      	subs	r5, r5, r7
 800d258:	6026      	str	r6, [r4, #0]
 800d25a:	60a5      	str	r5, [r4, #8]
 800d25c:	464e      	mov	r6, r9
 800d25e:	454e      	cmp	r6, r9
 800d260:	d900      	bls.n	800d264 <__ssputs_r+0x84>
 800d262:	464e      	mov	r6, r9
 800d264:	4632      	mov	r2, r6
 800d266:	4641      	mov	r1, r8
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	f000 fa93 	bl	800d794 <memmove>
 800d26e:	68a3      	ldr	r3, [r4, #8]
 800d270:	1b9b      	subs	r3, r3, r6
 800d272:	60a3      	str	r3, [r4, #8]
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	441e      	add	r6, r3
 800d278:	6026      	str	r6, [r4, #0]
 800d27a:	2000      	movs	r0, #0
 800d27c:	e7dc      	b.n	800d238 <__ssputs_r+0x58>
 800d27e:	462a      	mov	r2, r5
 800d280:	f000 faa1 	bl	800d7c6 <_realloc_r>
 800d284:	4606      	mov	r6, r0
 800d286:	2800      	cmp	r0, #0
 800d288:	d1e2      	bne.n	800d250 <__ssputs_r+0x70>
 800d28a:	6921      	ldr	r1, [r4, #16]
 800d28c:	4650      	mov	r0, sl
 800d28e:	f7ff fec5 	bl	800d01c <_free_r>
 800d292:	e7c8      	b.n	800d226 <__ssputs_r+0x46>

0800d294 <_svfiprintf_r>:
 800d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d298:	461d      	mov	r5, r3
 800d29a:	898b      	ldrh	r3, [r1, #12]
 800d29c:	061f      	lsls	r7, r3, #24
 800d29e:	b09d      	sub	sp, #116	; 0x74
 800d2a0:	4680      	mov	r8, r0
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	4616      	mov	r6, r2
 800d2a6:	d50f      	bpl.n	800d2c8 <_svfiprintf_r+0x34>
 800d2a8:	690b      	ldr	r3, [r1, #16]
 800d2aa:	b96b      	cbnz	r3, 800d2c8 <_svfiprintf_r+0x34>
 800d2ac:	2140      	movs	r1, #64	; 0x40
 800d2ae:	f7ff ff03 	bl	800d0b8 <_malloc_r>
 800d2b2:	6020      	str	r0, [r4, #0]
 800d2b4:	6120      	str	r0, [r4, #16]
 800d2b6:	b928      	cbnz	r0, 800d2c4 <_svfiprintf_r+0x30>
 800d2b8:	230c      	movs	r3, #12
 800d2ba:	f8c8 3000 	str.w	r3, [r8]
 800d2be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2c2:	e0c8      	b.n	800d456 <_svfiprintf_r+0x1c2>
 800d2c4:	2340      	movs	r3, #64	; 0x40
 800d2c6:	6163      	str	r3, [r4, #20]
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d2cc:	2320      	movs	r3, #32
 800d2ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2d2:	2330      	movs	r3, #48	; 0x30
 800d2d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2d8:	9503      	str	r5, [sp, #12]
 800d2da:	f04f 0b01 	mov.w	fp, #1
 800d2de:	4637      	mov	r7, r6
 800d2e0:	463d      	mov	r5, r7
 800d2e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d2e6:	b10b      	cbz	r3, 800d2ec <_svfiprintf_r+0x58>
 800d2e8:	2b25      	cmp	r3, #37	; 0x25
 800d2ea:	d13e      	bne.n	800d36a <_svfiprintf_r+0xd6>
 800d2ec:	ebb7 0a06 	subs.w	sl, r7, r6
 800d2f0:	d00b      	beq.n	800d30a <_svfiprintf_r+0x76>
 800d2f2:	4653      	mov	r3, sl
 800d2f4:	4632      	mov	r2, r6
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	f7ff ff71 	bl	800d1e0 <__ssputs_r>
 800d2fe:	3001      	adds	r0, #1
 800d300:	f000 80a4 	beq.w	800d44c <_svfiprintf_r+0x1b8>
 800d304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d306:	4453      	add	r3, sl
 800d308:	9309      	str	r3, [sp, #36]	; 0x24
 800d30a:	783b      	ldrb	r3, [r7, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	f000 809d 	beq.w	800d44c <_svfiprintf_r+0x1b8>
 800d312:	2300      	movs	r3, #0
 800d314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	9307      	str	r3, [sp, #28]
 800d320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d324:	931a      	str	r3, [sp, #104]	; 0x68
 800d326:	462f      	mov	r7, r5
 800d328:	2205      	movs	r2, #5
 800d32a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d32e:	4850      	ldr	r0, [pc, #320]	; (800d470 <_svfiprintf_r+0x1dc>)
 800d330:	f7f2 ff5e 	bl	80001f0 <memchr>
 800d334:	9b04      	ldr	r3, [sp, #16]
 800d336:	b9d0      	cbnz	r0, 800d36e <_svfiprintf_r+0xda>
 800d338:	06d9      	lsls	r1, r3, #27
 800d33a:	bf44      	itt	mi
 800d33c:	2220      	movmi	r2, #32
 800d33e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d342:	071a      	lsls	r2, r3, #28
 800d344:	bf44      	itt	mi
 800d346:	222b      	movmi	r2, #43	; 0x2b
 800d348:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d34c:	782a      	ldrb	r2, [r5, #0]
 800d34e:	2a2a      	cmp	r2, #42	; 0x2a
 800d350:	d015      	beq.n	800d37e <_svfiprintf_r+0xea>
 800d352:	9a07      	ldr	r2, [sp, #28]
 800d354:	462f      	mov	r7, r5
 800d356:	2000      	movs	r0, #0
 800d358:	250a      	movs	r5, #10
 800d35a:	4639      	mov	r1, r7
 800d35c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d360:	3b30      	subs	r3, #48	; 0x30
 800d362:	2b09      	cmp	r3, #9
 800d364:	d94d      	bls.n	800d402 <_svfiprintf_r+0x16e>
 800d366:	b1b8      	cbz	r0, 800d398 <_svfiprintf_r+0x104>
 800d368:	e00f      	b.n	800d38a <_svfiprintf_r+0xf6>
 800d36a:	462f      	mov	r7, r5
 800d36c:	e7b8      	b.n	800d2e0 <_svfiprintf_r+0x4c>
 800d36e:	4a40      	ldr	r2, [pc, #256]	; (800d470 <_svfiprintf_r+0x1dc>)
 800d370:	1a80      	subs	r0, r0, r2
 800d372:	fa0b f000 	lsl.w	r0, fp, r0
 800d376:	4318      	orrs	r0, r3
 800d378:	9004      	str	r0, [sp, #16]
 800d37a:	463d      	mov	r5, r7
 800d37c:	e7d3      	b.n	800d326 <_svfiprintf_r+0x92>
 800d37e:	9a03      	ldr	r2, [sp, #12]
 800d380:	1d11      	adds	r1, r2, #4
 800d382:	6812      	ldr	r2, [r2, #0]
 800d384:	9103      	str	r1, [sp, #12]
 800d386:	2a00      	cmp	r2, #0
 800d388:	db01      	blt.n	800d38e <_svfiprintf_r+0xfa>
 800d38a:	9207      	str	r2, [sp, #28]
 800d38c:	e004      	b.n	800d398 <_svfiprintf_r+0x104>
 800d38e:	4252      	negs	r2, r2
 800d390:	f043 0302 	orr.w	r3, r3, #2
 800d394:	9207      	str	r2, [sp, #28]
 800d396:	9304      	str	r3, [sp, #16]
 800d398:	783b      	ldrb	r3, [r7, #0]
 800d39a:	2b2e      	cmp	r3, #46	; 0x2e
 800d39c:	d10c      	bne.n	800d3b8 <_svfiprintf_r+0x124>
 800d39e:	787b      	ldrb	r3, [r7, #1]
 800d3a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a2:	d133      	bne.n	800d40c <_svfiprintf_r+0x178>
 800d3a4:	9b03      	ldr	r3, [sp, #12]
 800d3a6:	1d1a      	adds	r2, r3, #4
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	9203      	str	r2, [sp, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	bfb8      	it	lt
 800d3b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d3b4:	3702      	adds	r7, #2
 800d3b6:	9305      	str	r3, [sp, #20]
 800d3b8:	4d2e      	ldr	r5, [pc, #184]	; (800d474 <_svfiprintf_r+0x1e0>)
 800d3ba:	7839      	ldrb	r1, [r7, #0]
 800d3bc:	2203      	movs	r2, #3
 800d3be:	4628      	mov	r0, r5
 800d3c0:	f7f2 ff16 	bl	80001f0 <memchr>
 800d3c4:	b138      	cbz	r0, 800d3d6 <_svfiprintf_r+0x142>
 800d3c6:	2340      	movs	r3, #64	; 0x40
 800d3c8:	1b40      	subs	r0, r0, r5
 800d3ca:	fa03 f000 	lsl.w	r0, r3, r0
 800d3ce:	9b04      	ldr	r3, [sp, #16]
 800d3d0:	4303      	orrs	r3, r0
 800d3d2:	3701      	adds	r7, #1
 800d3d4:	9304      	str	r3, [sp, #16]
 800d3d6:	7839      	ldrb	r1, [r7, #0]
 800d3d8:	4827      	ldr	r0, [pc, #156]	; (800d478 <_svfiprintf_r+0x1e4>)
 800d3da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3de:	2206      	movs	r2, #6
 800d3e0:	1c7e      	adds	r6, r7, #1
 800d3e2:	f7f2 ff05 	bl	80001f0 <memchr>
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d038      	beq.n	800d45c <_svfiprintf_r+0x1c8>
 800d3ea:	4b24      	ldr	r3, [pc, #144]	; (800d47c <_svfiprintf_r+0x1e8>)
 800d3ec:	bb13      	cbnz	r3, 800d434 <_svfiprintf_r+0x1a0>
 800d3ee:	9b03      	ldr	r3, [sp, #12]
 800d3f0:	3307      	adds	r3, #7
 800d3f2:	f023 0307 	bic.w	r3, r3, #7
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	9303      	str	r3, [sp, #12]
 800d3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3fc:	444b      	add	r3, r9
 800d3fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d400:	e76d      	b.n	800d2de <_svfiprintf_r+0x4a>
 800d402:	fb05 3202 	mla	r2, r5, r2, r3
 800d406:	2001      	movs	r0, #1
 800d408:	460f      	mov	r7, r1
 800d40a:	e7a6      	b.n	800d35a <_svfiprintf_r+0xc6>
 800d40c:	2300      	movs	r3, #0
 800d40e:	3701      	adds	r7, #1
 800d410:	9305      	str	r3, [sp, #20]
 800d412:	4619      	mov	r1, r3
 800d414:	250a      	movs	r5, #10
 800d416:	4638      	mov	r0, r7
 800d418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d41c:	3a30      	subs	r2, #48	; 0x30
 800d41e:	2a09      	cmp	r2, #9
 800d420:	d903      	bls.n	800d42a <_svfiprintf_r+0x196>
 800d422:	2b00      	cmp	r3, #0
 800d424:	d0c8      	beq.n	800d3b8 <_svfiprintf_r+0x124>
 800d426:	9105      	str	r1, [sp, #20]
 800d428:	e7c6      	b.n	800d3b8 <_svfiprintf_r+0x124>
 800d42a:	fb05 2101 	mla	r1, r5, r1, r2
 800d42e:	2301      	movs	r3, #1
 800d430:	4607      	mov	r7, r0
 800d432:	e7f0      	b.n	800d416 <_svfiprintf_r+0x182>
 800d434:	ab03      	add	r3, sp, #12
 800d436:	9300      	str	r3, [sp, #0]
 800d438:	4622      	mov	r2, r4
 800d43a:	4b11      	ldr	r3, [pc, #68]	; (800d480 <_svfiprintf_r+0x1ec>)
 800d43c:	a904      	add	r1, sp, #16
 800d43e:	4640      	mov	r0, r8
 800d440:	f3af 8000 	nop.w
 800d444:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d448:	4681      	mov	r9, r0
 800d44a:	d1d6      	bne.n	800d3fa <_svfiprintf_r+0x166>
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	065b      	lsls	r3, r3, #25
 800d450:	f53f af35 	bmi.w	800d2be <_svfiprintf_r+0x2a>
 800d454:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d456:	b01d      	add	sp, #116	; 0x74
 800d458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45c:	ab03      	add	r3, sp, #12
 800d45e:	9300      	str	r3, [sp, #0]
 800d460:	4622      	mov	r2, r4
 800d462:	4b07      	ldr	r3, [pc, #28]	; (800d480 <_svfiprintf_r+0x1ec>)
 800d464:	a904      	add	r1, sp, #16
 800d466:	4640      	mov	r0, r8
 800d468:	f000 f882 	bl	800d570 <_printf_i>
 800d46c:	e7ea      	b.n	800d444 <_svfiprintf_r+0x1b0>
 800d46e:	bf00      	nop
 800d470:	0800de50 	.word	0x0800de50
 800d474:	0800de56 	.word	0x0800de56
 800d478:	0800de5a 	.word	0x0800de5a
 800d47c:	00000000 	.word	0x00000000
 800d480:	0800d1e1 	.word	0x0800d1e1

0800d484 <_printf_common>:
 800d484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d488:	4691      	mov	r9, r2
 800d48a:	461f      	mov	r7, r3
 800d48c:	688a      	ldr	r2, [r1, #8]
 800d48e:	690b      	ldr	r3, [r1, #16]
 800d490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d494:	4293      	cmp	r3, r2
 800d496:	bfb8      	it	lt
 800d498:	4613      	movlt	r3, r2
 800d49a:	f8c9 3000 	str.w	r3, [r9]
 800d49e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4a2:	4606      	mov	r6, r0
 800d4a4:	460c      	mov	r4, r1
 800d4a6:	b112      	cbz	r2, 800d4ae <_printf_common+0x2a>
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	f8c9 3000 	str.w	r3, [r9]
 800d4ae:	6823      	ldr	r3, [r4, #0]
 800d4b0:	0699      	lsls	r1, r3, #26
 800d4b2:	bf42      	ittt	mi
 800d4b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d4b8:	3302      	addmi	r3, #2
 800d4ba:	f8c9 3000 	strmi.w	r3, [r9]
 800d4be:	6825      	ldr	r5, [r4, #0]
 800d4c0:	f015 0506 	ands.w	r5, r5, #6
 800d4c4:	d107      	bne.n	800d4d6 <_printf_common+0x52>
 800d4c6:	f104 0a19 	add.w	sl, r4, #25
 800d4ca:	68e3      	ldr	r3, [r4, #12]
 800d4cc:	f8d9 2000 	ldr.w	r2, [r9]
 800d4d0:	1a9b      	subs	r3, r3, r2
 800d4d2:	42ab      	cmp	r3, r5
 800d4d4:	dc28      	bgt.n	800d528 <_printf_common+0xa4>
 800d4d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d4da:	6822      	ldr	r2, [r4, #0]
 800d4dc:	3300      	adds	r3, #0
 800d4de:	bf18      	it	ne
 800d4e0:	2301      	movne	r3, #1
 800d4e2:	0692      	lsls	r2, r2, #26
 800d4e4:	d42d      	bmi.n	800d542 <_printf_common+0xbe>
 800d4e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4ea:	4639      	mov	r1, r7
 800d4ec:	4630      	mov	r0, r6
 800d4ee:	47c0      	blx	r8
 800d4f0:	3001      	adds	r0, #1
 800d4f2:	d020      	beq.n	800d536 <_printf_common+0xb2>
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	68e5      	ldr	r5, [r4, #12]
 800d4f8:	f8d9 2000 	ldr.w	r2, [r9]
 800d4fc:	f003 0306 	and.w	r3, r3, #6
 800d500:	2b04      	cmp	r3, #4
 800d502:	bf08      	it	eq
 800d504:	1aad      	subeq	r5, r5, r2
 800d506:	68a3      	ldr	r3, [r4, #8]
 800d508:	6922      	ldr	r2, [r4, #16]
 800d50a:	bf0c      	ite	eq
 800d50c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d510:	2500      	movne	r5, #0
 800d512:	4293      	cmp	r3, r2
 800d514:	bfc4      	itt	gt
 800d516:	1a9b      	subgt	r3, r3, r2
 800d518:	18ed      	addgt	r5, r5, r3
 800d51a:	f04f 0900 	mov.w	r9, #0
 800d51e:	341a      	adds	r4, #26
 800d520:	454d      	cmp	r5, r9
 800d522:	d11a      	bne.n	800d55a <_printf_common+0xd6>
 800d524:	2000      	movs	r0, #0
 800d526:	e008      	b.n	800d53a <_printf_common+0xb6>
 800d528:	2301      	movs	r3, #1
 800d52a:	4652      	mov	r2, sl
 800d52c:	4639      	mov	r1, r7
 800d52e:	4630      	mov	r0, r6
 800d530:	47c0      	blx	r8
 800d532:	3001      	adds	r0, #1
 800d534:	d103      	bne.n	800d53e <_printf_common+0xba>
 800d536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d53e:	3501      	adds	r5, #1
 800d540:	e7c3      	b.n	800d4ca <_printf_common+0x46>
 800d542:	18e1      	adds	r1, r4, r3
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	2030      	movs	r0, #48	; 0x30
 800d548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d54c:	4422      	add	r2, r4
 800d54e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d556:	3302      	adds	r3, #2
 800d558:	e7c5      	b.n	800d4e6 <_printf_common+0x62>
 800d55a:	2301      	movs	r3, #1
 800d55c:	4622      	mov	r2, r4
 800d55e:	4639      	mov	r1, r7
 800d560:	4630      	mov	r0, r6
 800d562:	47c0      	blx	r8
 800d564:	3001      	adds	r0, #1
 800d566:	d0e6      	beq.n	800d536 <_printf_common+0xb2>
 800d568:	f109 0901 	add.w	r9, r9, #1
 800d56c:	e7d8      	b.n	800d520 <_printf_common+0x9c>
	...

0800d570 <_printf_i>:
 800d570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d574:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d578:	460c      	mov	r4, r1
 800d57a:	7e09      	ldrb	r1, [r1, #24]
 800d57c:	b085      	sub	sp, #20
 800d57e:	296e      	cmp	r1, #110	; 0x6e
 800d580:	4617      	mov	r7, r2
 800d582:	4606      	mov	r6, r0
 800d584:	4698      	mov	r8, r3
 800d586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d588:	f000 80b3 	beq.w	800d6f2 <_printf_i+0x182>
 800d58c:	d822      	bhi.n	800d5d4 <_printf_i+0x64>
 800d58e:	2963      	cmp	r1, #99	; 0x63
 800d590:	d036      	beq.n	800d600 <_printf_i+0x90>
 800d592:	d80a      	bhi.n	800d5aa <_printf_i+0x3a>
 800d594:	2900      	cmp	r1, #0
 800d596:	f000 80b9 	beq.w	800d70c <_printf_i+0x19c>
 800d59a:	2958      	cmp	r1, #88	; 0x58
 800d59c:	f000 8083 	beq.w	800d6a6 <_printf_i+0x136>
 800d5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d5a8:	e032      	b.n	800d610 <_printf_i+0xa0>
 800d5aa:	2964      	cmp	r1, #100	; 0x64
 800d5ac:	d001      	beq.n	800d5b2 <_printf_i+0x42>
 800d5ae:	2969      	cmp	r1, #105	; 0x69
 800d5b0:	d1f6      	bne.n	800d5a0 <_printf_i+0x30>
 800d5b2:	6820      	ldr	r0, [r4, #0]
 800d5b4:	6813      	ldr	r3, [r2, #0]
 800d5b6:	0605      	lsls	r5, r0, #24
 800d5b8:	f103 0104 	add.w	r1, r3, #4
 800d5bc:	d52a      	bpl.n	800d614 <_printf_i+0xa4>
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	6011      	str	r1, [r2, #0]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	da03      	bge.n	800d5ce <_printf_i+0x5e>
 800d5c6:	222d      	movs	r2, #45	; 0x2d
 800d5c8:	425b      	negs	r3, r3
 800d5ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d5ce:	486f      	ldr	r0, [pc, #444]	; (800d78c <_printf_i+0x21c>)
 800d5d0:	220a      	movs	r2, #10
 800d5d2:	e039      	b.n	800d648 <_printf_i+0xd8>
 800d5d4:	2973      	cmp	r1, #115	; 0x73
 800d5d6:	f000 809d 	beq.w	800d714 <_printf_i+0x1a4>
 800d5da:	d808      	bhi.n	800d5ee <_printf_i+0x7e>
 800d5dc:	296f      	cmp	r1, #111	; 0x6f
 800d5de:	d020      	beq.n	800d622 <_printf_i+0xb2>
 800d5e0:	2970      	cmp	r1, #112	; 0x70
 800d5e2:	d1dd      	bne.n	800d5a0 <_printf_i+0x30>
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	f043 0320 	orr.w	r3, r3, #32
 800d5ea:	6023      	str	r3, [r4, #0]
 800d5ec:	e003      	b.n	800d5f6 <_printf_i+0x86>
 800d5ee:	2975      	cmp	r1, #117	; 0x75
 800d5f0:	d017      	beq.n	800d622 <_printf_i+0xb2>
 800d5f2:	2978      	cmp	r1, #120	; 0x78
 800d5f4:	d1d4      	bne.n	800d5a0 <_printf_i+0x30>
 800d5f6:	2378      	movs	r3, #120	; 0x78
 800d5f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5fc:	4864      	ldr	r0, [pc, #400]	; (800d790 <_printf_i+0x220>)
 800d5fe:	e055      	b.n	800d6ac <_printf_i+0x13c>
 800d600:	6813      	ldr	r3, [r2, #0]
 800d602:	1d19      	adds	r1, r3, #4
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6011      	str	r1, [r2, #0]
 800d608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d60c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d610:	2301      	movs	r3, #1
 800d612:	e08c      	b.n	800d72e <_printf_i+0x1be>
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6011      	str	r1, [r2, #0]
 800d618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d61c:	bf18      	it	ne
 800d61e:	b21b      	sxthne	r3, r3
 800d620:	e7cf      	b.n	800d5c2 <_printf_i+0x52>
 800d622:	6813      	ldr	r3, [r2, #0]
 800d624:	6825      	ldr	r5, [r4, #0]
 800d626:	1d18      	adds	r0, r3, #4
 800d628:	6010      	str	r0, [r2, #0]
 800d62a:	0628      	lsls	r0, r5, #24
 800d62c:	d501      	bpl.n	800d632 <_printf_i+0xc2>
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	e002      	b.n	800d638 <_printf_i+0xc8>
 800d632:	0668      	lsls	r0, r5, #25
 800d634:	d5fb      	bpl.n	800d62e <_printf_i+0xbe>
 800d636:	881b      	ldrh	r3, [r3, #0]
 800d638:	4854      	ldr	r0, [pc, #336]	; (800d78c <_printf_i+0x21c>)
 800d63a:	296f      	cmp	r1, #111	; 0x6f
 800d63c:	bf14      	ite	ne
 800d63e:	220a      	movne	r2, #10
 800d640:	2208      	moveq	r2, #8
 800d642:	2100      	movs	r1, #0
 800d644:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d648:	6865      	ldr	r5, [r4, #4]
 800d64a:	60a5      	str	r5, [r4, #8]
 800d64c:	2d00      	cmp	r5, #0
 800d64e:	f2c0 8095 	blt.w	800d77c <_printf_i+0x20c>
 800d652:	6821      	ldr	r1, [r4, #0]
 800d654:	f021 0104 	bic.w	r1, r1, #4
 800d658:	6021      	str	r1, [r4, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d13d      	bne.n	800d6da <_printf_i+0x16a>
 800d65e:	2d00      	cmp	r5, #0
 800d660:	f040 808e 	bne.w	800d780 <_printf_i+0x210>
 800d664:	4665      	mov	r5, ip
 800d666:	2a08      	cmp	r2, #8
 800d668:	d10b      	bne.n	800d682 <_printf_i+0x112>
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	07db      	lsls	r3, r3, #31
 800d66e:	d508      	bpl.n	800d682 <_printf_i+0x112>
 800d670:	6923      	ldr	r3, [r4, #16]
 800d672:	6862      	ldr	r2, [r4, #4]
 800d674:	429a      	cmp	r2, r3
 800d676:	bfde      	ittt	le
 800d678:	2330      	movle	r3, #48	; 0x30
 800d67a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d67e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d682:	ebac 0305 	sub.w	r3, ip, r5
 800d686:	6123      	str	r3, [r4, #16]
 800d688:	f8cd 8000 	str.w	r8, [sp]
 800d68c:	463b      	mov	r3, r7
 800d68e:	aa03      	add	r2, sp, #12
 800d690:	4621      	mov	r1, r4
 800d692:	4630      	mov	r0, r6
 800d694:	f7ff fef6 	bl	800d484 <_printf_common>
 800d698:	3001      	adds	r0, #1
 800d69a:	d14d      	bne.n	800d738 <_printf_i+0x1c8>
 800d69c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6a0:	b005      	add	sp, #20
 800d6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6a6:	4839      	ldr	r0, [pc, #228]	; (800d78c <_printf_i+0x21c>)
 800d6a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d6ac:	6813      	ldr	r3, [r2, #0]
 800d6ae:	6821      	ldr	r1, [r4, #0]
 800d6b0:	1d1d      	adds	r5, r3, #4
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6015      	str	r5, [r2, #0]
 800d6b6:	060a      	lsls	r2, r1, #24
 800d6b8:	d50b      	bpl.n	800d6d2 <_printf_i+0x162>
 800d6ba:	07ca      	lsls	r2, r1, #31
 800d6bc:	bf44      	itt	mi
 800d6be:	f041 0120 	orrmi.w	r1, r1, #32
 800d6c2:	6021      	strmi	r1, [r4, #0]
 800d6c4:	b91b      	cbnz	r3, 800d6ce <_printf_i+0x15e>
 800d6c6:	6822      	ldr	r2, [r4, #0]
 800d6c8:	f022 0220 	bic.w	r2, r2, #32
 800d6cc:	6022      	str	r2, [r4, #0]
 800d6ce:	2210      	movs	r2, #16
 800d6d0:	e7b7      	b.n	800d642 <_printf_i+0xd2>
 800d6d2:	064d      	lsls	r5, r1, #25
 800d6d4:	bf48      	it	mi
 800d6d6:	b29b      	uxthmi	r3, r3
 800d6d8:	e7ef      	b.n	800d6ba <_printf_i+0x14a>
 800d6da:	4665      	mov	r5, ip
 800d6dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6e0:	fb02 3311 	mls	r3, r2, r1, r3
 800d6e4:	5cc3      	ldrb	r3, [r0, r3]
 800d6e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d6ea:	460b      	mov	r3, r1
 800d6ec:	2900      	cmp	r1, #0
 800d6ee:	d1f5      	bne.n	800d6dc <_printf_i+0x16c>
 800d6f0:	e7b9      	b.n	800d666 <_printf_i+0xf6>
 800d6f2:	6813      	ldr	r3, [r2, #0]
 800d6f4:	6825      	ldr	r5, [r4, #0]
 800d6f6:	6961      	ldr	r1, [r4, #20]
 800d6f8:	1d18      	adds	r0, r3, #4
 800d6fa:	6010      	str	r0, [r2, #0]
 800d6fc:	0628      	lsls	r0, r5, #24
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	d501      	bpl.n	800d706 <_printf_i+0x196>
 800d702:	6019      	str	r1, [r3, #0]
 800d704:	e002      	b.n	800d70c <_printf_i+0x19c>
 800d706:	066a      	lsls	r2, r5, #25
 800d708:	d5fb      	bpl.n	800d702 <_printf_i+0x192>
 800d70a:	8019      	strh	r1, [r3, #0]
 800d70c:	2300      	movs	r3, #0
 800d70e:	6123      	str	r3, [r4, #16]
 800d710:	4665      	mov	r5, ip
 800d712:	e7b9      	b.n	800d688 <_printf_i+0x118>
 800d714:	6813      	ldr	r3, [r2, #0]
 800d716:	1d19      	adds	r1, r3, #4
 800d718:	6011      	str	r1, [r2, #0]
 800d71a:	681d      	ldr	r5, [r3, #0]
 800d71c:	6862      	ldr	r2, [r4, #4]
 800d71e:	2100      	movs	r1, #0
 800d720:	4628      	mov	r0, r5
 800d722:	f7f2 fd65 	bl	80001f0 <memchr>
 800d726:	b108      	cbz	r0, 800d72c <_printf_i+0x1bc>
 800d728:	1b40      	subs	r0, r0, r5
 800d72a:	6060      	str	r0, [r4, #4]
 800d72c:	6863      	ldr	r3, [r4, #4]
 800d72e:	6123      	str	r3, [r4, #16]
 800d730:	2300      	movs	r3, #0
 800d732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d736:	e7a7      	b.n	800d688 <_printf_i+0x118>
 800d738:	6923      	ldr	r3, [r4, #16]
 800d73a:	462a      	mov	r2, r5
 800d73c:	4639      	mov	r1, r7
 800d73e:	4630      	mov	r0, r6
 800d740:	47c0      	blx	r8
 800d742:	3001      	adds	r0, #1
 800d744:	d0aa      	beq.n	800d69c <_printf_i+0x12c>
 800d746:	6823      	ldr	r3, [r4, #0]
 800d748:	079b      	lsls	r3, r3, #30
 800d74a:	d413      	bmi.n	800d774 <_printf_i+0x204>
 800d74c:	68e0      	ldr	r0, [r4, #12]
 800d74e:	9b03      	ldr	r3, [sp, #12]
 800d750:	4298      	cmp	r0, r3
 800d752:	bfb8      	it	lt
 800d754:	4618      	movlt	r0, r3
 800d756:	e7a3      	b.n	800d6a0 <_printf_i+0x130>
 800d758:	2301      	movs	r3, #1
 800d75a:	464a      	mov	r2, r9
 800d75c:	4639      	mov	r1, r7
 800d75e:	4630      	mov	r0, r6
 800d760:	47c0      	blx	r8
 800d762:	3001      	adds	r0, #1
 800d764:	d09a      	beq.n	800d69c <_printf_i+0x12c>
 800d766:	3501      	adds	r5, #1
 800d768:	68e3      	ldr	r3, [r4, #12]
 800d76a:	9a03      	ldr	r2, [sp, #12]
 800d76c:	1a9b      	subs	r3, r3, r2
 800d76e:	42ab      	cmp	r3, r5
 800d770:	dcf2      	bgt.n	800d758 <_printf_i+0x1e8>
 800d772:	e7eb      	b.n	800d74c <_printf_i+0x1dc>
 800d774:	2500      	movs	r5, #0
 800d776:	f104 0919 	add.w	r9, r4, #25
 800d77a:	e7f5      	b.n	800d768 <_printf_i+0x1f8>
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1ac      	bne.n	800d6da <_printf_i+0x16a>
 800d780:	7803      	ldrb	r3, [r0, #0]
 800d782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d786:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d78a:	e76c      	b.n	800d666 <_printf_i+0xf6>
 800d78c:	0800de61 	.word	0x0800de61
 800d790:	0800de72 	.word	0x0800de72

0800d794 <memmove>:
 800d794:	4288      	cmp	r0, r1
 800d796:	b510      	push	{r4, lr}
 800d798:	eb01 0302 	add.w	r3, r1, r2
 800d79c:	d807      	bhi.n	800d7ae <memmove+0x1a>
 800d79e:	1e42      	subs	r2, r0, #1
 800d7a0:	4299      	cmp	r1, r3
 800d7a2:	d00a      	beq.n	800d7ba <memmove+0x26>
 800d7a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d7ac:	e7f8      	b.n	800d7a0 <memmove+0xc>
 800d7ae:	4283      	cmp	r3, r0
 800d7b0:	d9f5      	bls.n	800d79e <memmove+0xa>
 800d7b2:	1881      	adds	r1, r0, r2
 800d7b4:	1ad2      	subs	r2, r2, r3
 800d7b6:	42d3      	cmn	r3, r2
 800d7b8:	d100      	bne.n	800d7bc <memmove+0x28>
 800d7ba:	bd10      	pop	{r4, pc}
 800d7bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d7c4:	e7f7      	b.n	800d7b6 <memmove+0x22>

0800d7c6 <_realloc_r>:
 800d7c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7c8:	4607      	mov	r7, r0
 800d7ca:	4614      	mov	r4, r2
 800d7cc:	460e      	mov	r6, r1
 800d7ce:	b921      	cbnz	r1, 800d7da <_realloc_r+0x14>
 800d7d0:	4611      	mov	r1, r2
 800d7d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d7d6:	f7ff bc6f 	b.w	800d0b8 <_malloc_r>
 800d7da:	b922      	cbnz	r2, 800d7e6 <_realloc_r+0x20>
 800d7dc:	f7ff fc1e 	bl	800d01c <_free_r>
 800d7e0:	4625      	mov	r5, r4
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7e6:	f000 f814 	bl	800d812 <_malloc_usable_size_r>
 800d7ea:	42a0      	cmp	r0, r4
 800d7ec:	d20f      	bcs.n	800d80e <_realloc_r+0x48>
 800d7ee:	4621      	mov	r1, r4
 800d7f0:	4638      	mov	r0, r7
 800d7f2:	f7ff fc61 	bl	800d0b8 <_malloc_r>
 800d7f6:	4605      	mov	r5, r0
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d0f2      	beq.n	800d7e2 <_realloc_r+0x1c>
 800d7fc:	4631      	mov	r1, r6
 800d7fe:	4622      	mov	r2, r4
 800d800:	f7ff fbf8 	bl	800cff4 <memcpy>
 800d804:	4631      	mov	r1, r6
 800d806:	4638      	mov	r0, r7
 800d808:	f7ff fc08 	bl	800d01c <_free_r>
 800d80c:	e7e9      	b.n	800d7e2 <_realloc_r+0x1c>
 800d80e:	4635      	mov	r5, r6
 800d810:	e7e7      	b.n	800d7e2 <_realloc_r+0x1c>

0800d812 <_malloc_usable_size_r>:
 800d812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d816:	1f18      	subs	r0, r3, #4
 800d818:	2b00      	cmp	r3, #0
 800d81a:	bfbc      	itt	lt
 800d81c:	580b      	ldrlt	r3, [r1, r0]
 800d81e:	18c0      	addlt	r0, r0, r3
 800d820:	4770      	bx	lr
	...

0800d824 <_init>:
 800d824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d826:	bf00      	nop
 800d828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d82a:	bc08      	pop	{r3}
 800d82c:	469e      	mov	lr, r3
 800d82e:	4770      	bx	lr

0800d830 <_fini>:
 800d830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d832:	bf00      	nop
 800d834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d836:	bc08      	pop	{r3}
 800d838:	469e      	mov	lr, r3
 800d83a:	4770      	bx	lr
