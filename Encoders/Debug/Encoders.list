
Encoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007194  08007194  00017194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007244  08007244  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800724c  0800724c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800724c  0800724c  0001724c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007250  08007250  00017250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d8c  200001e8  0800743c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f74  0800743c  00021f74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001726d  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003139  00000000  00000000  00037485  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001030  00000000  00000000  0003a5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ec8  00000000  00000000  0003b5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001960c  00000000  00000000  0003c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1b2  00000000  00000000  00055ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e7bd  00000000  00000000  00064c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f3433  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004604  00000000  00000000  000f34b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800717c 	.word	0x0800717c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800717c 	.word	0x0800717c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <cdc_printf>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t msg[1024];

void cdc_printf(const char * fmt, ...){
 8000590:	b40f      	push	{r0, r1, r2, r3}
 8000592:	b580      	push	{r7, lr}
 8000594:	b082      	sub	sp, #8
 8000596:	af00      	add	r7, sp, #0
	// Make a simple function to print to usb
	va_list args;
	va_start(args, fmt);
 8000598:	f107 0314 	add.w	r3, r7, #20
 800059c:	607b      	str	r3, [r7, #4]
    vsprintf((char *)msg, fmt, args);
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	6939      	ldr	r1, [r7, #16]
 80005a2:	480b      	ldr	r0, [pc, #44]	; (80005d0 <cdc_printf+0x40>)
 80005a4:	f006 fab2 	bl	8006b0c <vsiprintf>
	va_end(args);
	CDC_Transmit_FS(msg, strlen((char *)msg));
 80005a8:	4809      	ldr	r0, [pc, #36]	; (80005d0 <cdc_printf+0x40>)
 80005aa:	f7ff fe19 	bl	80001e0 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	4619      	mov	r1, r3
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <cdc_printf+0x40>)
 80005b6:	f005 fd61 	bl	800607c <CDC_Transmit_FS>
	HAL_Delay(10); // We need to add a little delay or else the data buffer gets overwritten
 80005ba:	200a      	movs	r0, #10
 80005bc:	f000 fb36 	bl	8000c2c <HAL_Delay>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005ca:	b004      	add	sp, #16
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000214 	.word	0x20000214

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fab6 	bl	8000b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f82c 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f93a 	bl	8000858 <MX_GPIO_Init>
  MX_TIM2_Init();
 80005e4:	f000 f890 	bl	8000708 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e8:	f000 f8e2 	bl	80007b0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80005ec:	f005 fc7c 	bl	8005ee8 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005f0:	213c      	movs	r1, #60	; 0x3c
 80005f2:	480c      	ldr	r0, [pc, #48]	; (8000624 <main+0x50>)
 80005f4:	f002 fbfa 	bl	8002dec <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80005f8:	213c      	movs	r1, #60	; 0x3c
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <main+0x54>)
 80005fc:	f002 fbf6 	bl	8002dec <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  switch (Status) {
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <main+0x58>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <main+0x38>
 8000608:	2b01      	cmp	r3, #1
	  	case PRINT_CNT:
	  		cdc_printf("Encoder Counts | L: %d\r\n | R: %d\r\n", (TIM2->CNT), (TIM3->CNT));
	  		break;

	  	case NO_PRINT:
	  		break;
 800060a:	e009      	b.n	8000620 <main+0x4c>
	  		cdc_printf("Encoder Counts | L: %d\r\n | R: %d\r\n", (TIM2->CNT), (TIM3->CNT));
 800060c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000610:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000612:	4b07      	ldr	r3, [pc, #28]	; (8000630 <main+0x5c>)
 8000614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000616:	461a      	mov	r2, r3
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <main+0x60>)
 800061a:	f7ff ffb9 	bl	8000590 <cdc_printf>
	  		break;
 800061e:	bf00      	nop
	  switch (Status) {
 8000620:	e7ee      	b.n	8000600 <main+0x2c>
 8000622:	bf00      	nop
 8000624:	20000654 	.word	0x20000654
 8000628:	20000614 	.word	0x20000614
 800062c:	2000011c 	.word	0x2000011c
 8000630:	40000400 	.word	0x40000400
 8000634:	08007194 	.word	0x08007194

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 f98a 	bl	8006960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <SystemClock_Config+0xc8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <SystemClock_Config+0xcc>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006a8:	2319      	movs	r3, #25
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006ac:	23c0      	movs	r3, #192	; 0xc0
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 feef 	bl	80024a0 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 f8ee 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2103      	movs	r1, #3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 f949 	bl	8002980 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f4:	f000 f8d8 	bl	80008a8 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08c      	sub	sp, #48	; 0x30
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2224      	movs	r2, #36	; 0x24
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f006 f922 	bl	8006960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000724:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_TIM2_Init+0xa4>)
 8000726:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800072a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_TIM2_Init+0xa4>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000732:	4b1e      	ldr	r3, [pc, #120]	; (80007ac <MX_TIM2_Init+0xa4>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_TIM2_Init+0xa4>)
 800073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800073e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_TIM2_Init+0xa4>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_TIM2_Init+0xa4>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800074c:	2303      	movs	r3, #3
 800074e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000754:	2301      	movs	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000764:	2301      	movs	r3, #1
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_TIM2_Init+0xa4>)
 8000778:	f002 faa6 	bl	8002cc8 <HAL_TIM_Encoder_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000782:	f000 f891 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4806      	ldr	r0, [pc, #24]	; (80007ac <MX_TIM2_Init+0xa4>)
 8000794:	f002 fc08 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800079e:	f000 f883 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	3730      	adds	r7, #48	; 0x30
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000654 	.word	0x20000654

080007b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08c      	sub	sp, #48	; 0x30
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007b6:	f107 030c 	add.w	r3, r7, #12
 80007ba:	2224      	movs	r2, #36	; 0x24
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f006 f8ce 	bl	8006960 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007ce:	4a21      	ldr	r2, [pc, #132]	; (8000854 <MX_TIM3_Init+0xa4>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_TIM3_Init+0xa0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007f2:	2303      	movs	r3, #3
 80007f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007fa:	2301      	movs	r3, #1
 80007fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800080a:	2301      	movs	r3, #1
 800080c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	480c      	ldr	r0, [pc, #48]	; (8000850 <MX_TIM3_Init+0xa0>)
 800081e:	f002 fa53 	bl	8002cc8 <HAL_TIM_Encoder_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000828:	f000 f83e 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <MX_TIM3_Init+0xa0>)
 800083a:	f002 fbb5 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000844:	f000 f830 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	3730      	adds	r7, #48	; 0x30
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000614 	.word	0x20000614
 8000854:	40000400 	.word	0x40000400

08000858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_GPIO_Init+0x4c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <MX_GPIO_Init+0x4c>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <MX_GPIO_Init+0x4c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_GPIO_Init+0x4c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <MX_GPIO_Init+0x4c>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_GPIO_Init+0x4c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]

}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ae:	e7fe      	b.n	80008ae <Error_Handler+0x6>

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0f      	ldr	r2, [pc, #60]	; (80008fc <HAL_MspInit+0x4c>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a08      	ldr	r2, [pc, #32]	; (80008fc <HAL_MspInit+0x4c>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08c      	sub	sp, #48	; 0x30
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000920:	d12c      	bne.n	800097c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a2f      	ldr	r2, [pc, #188]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
 800093c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
 8000942:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a28      	ldr	r2, [pc, #160]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b26      	ldr	r3, [pc, #152]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800095a:	2303      	movs	r3, #3
 800095c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800096a:	2301      	movs	r3, #1
 800096c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	481d      	ldr	r0, [pc, #116]	; (80009ec <HAL_TIM_Encoder_MspInit+0xec>)
 8000976:	f000 fa8d 	bl	8000e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800097a:	e030      	b.n	80009de <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a1b      	ldr	r2, [pc, #108]	; (80009f0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d12b      	bne.n	80009de <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a16      	ldr	r2, [pc, #88]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f003 0302 	and.w	r3, r3, #2
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a0f      	ldr	r2, [pc, #60]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <HAL_TIM_Encoder_MspInit+0xe8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009be:	23c0      	movs	r3, #192	; 0xc0
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009ce:	2302      	movs	r3, #2
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4804      	ldr	r0, [pc, #16]	; (80009ec <HAL_TIM_Encoder_MspInit+0xec>)
 80009da:	f000 fa5b 	bl	8000e94 <HAL_GPIO_Init>
}
 80009de:	bf00      	nop
 80009e0:	3730      	adds	r7, #48	; 0x30
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40000400 	.word	0x40000400

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <MemManage_Handler+0x4>

08000a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <BusFault_Handler+0x4>

08000a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <UsageFault_Handler+0x4>

08000a12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a40:	f000 f8d4 	bl	8000bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <OTG_FS_IRQHandler+0x10>)
 8000a4e:	f000 fcf3 	bl	8001438 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20001b68 	.word	0x20001b68

08000a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a64:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <_sbrk+0x5c>)
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <_sbrk+0x60>)
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <_sbrk+0x64>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d102      	bne.n	8000a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a78:	4b11      	ldr	r3, [pc, #68]	; (8000ac0 <_sbrk+0x64>)
 8000a7a:	4a12      	ldr	r2, [pc, #72]	; (8000ac4 <_sbrk+0x68>)
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <_sbrk+0x64>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d207      	bcs.n	8000a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a8c:	f005 ff2e 	bl	80068ec <__errno>
 8000a90:	4602      	mov	r2, r0
 8000a92:	230c      	movs	r3, #12
 8000a94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	e009      	b.n	8000ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <_sbrk+0x64>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <_sbrk+0x64>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <_sbrk+0x64>)
 8000aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aae:	68fb      	ldr	r3, [r7, #12]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20020000 	.word	0x20020000
 8000abc:	00000400 	.word	0x00000400
 8000ac0:	20000204 	.word	0x20000204
 8000ac4:	20001f78 	.word	0x20001f78

08000ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <SystemInit+0x28>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <SystemInit+0x28>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <SystemInit+0x28>)
 8000ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000afa:	e003      	b.n	8000b04 <LoopCopyDataInit>

08000afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b02:	3104      	adds	r1, #4

08000b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b0c:	d3f6      	bcc.n	8000afc <CopyDataInit>
  ldr  r2, =_sbss
 8000b0e:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b10:	e002      	b.n	8000b18 <LoopFillZerobss>

08000b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b14:	f842 3b04 	str.w	r3, [r2], #4

08000b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b1c:	d3f9      	bcc.n	8000b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b1e:	f7ff ffd3 	bl	8000ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b22:	f005 fee9 	bl	80068f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b26:	f7ff fd55 	bl	80005d4 <main>
  bx  lr    
 8000b2a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b30:	08007254 	.word	0x08007254
  ldr  r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b38:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8000b3c:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8000b40:	20001f74 	.word	0x20001f74

08000b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b44:	e7fe      	b.n	8000b44 <ADC_IRQHandler>
	...

08000b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0d      	ldr	r2, [pc, #52]	; (8000b88 <HAL_Init+0x40>)
 8000b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <HAL_Init+0x40>)
 8000b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <HAL_Init+0x40>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <HAL_Init+0x40>)
 8000b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b70:	2003      	movs	r0, #3
 8000b72:	f000 f94d 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f808 	bl	8000b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7c:	f7ff fe98 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40023c00 	.word	0x40023c00

08000b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_InitTick+0x54>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x58>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f965 	bl	8000e7a <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e00e      	b.n	8000bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d80a      	bhi.n	8000bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc8:	f000 f92d 	bl	8000e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bcc:	4a06      	ldr	r2, [pc, #24]	; (8000be8 <HAL_InitTick+0x5c>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e000      	b.n	8000bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000000 	.word	0x20000000
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000004 	.word	0x20000004

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	; (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000694 	.word	0x20000694

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	; (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	20000694 	.word	0x20000694

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_Delay+0x40>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20000008 	.word	0x20000008

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <__NVIC_EnableIRQ+0x38>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	e000e100 	.word	0xe000e100

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff29 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e38:	f7ff ff3e 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	6978      	ldr	r0, [r7, #20]
 8000e44:	f7ff ff8e 	bl	8000d64 <NVIC_EncodePriority>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff5d 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e56:	bf00      	nop
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff31 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ffa2 	bl	8000dcc <SysTick_Config>
 8000e88:	4603      	mov	r3, r0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	e159      	b.n	8001164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8148 	bne.w	800115e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d00b      	beq.n	8000eee <HAL_GPIO_Init+0x5a>
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d007      	beq.n	8000eee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee2:	2b11      	cmp	r3, #17
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b12      	cmp	r3, #18
 8000eec:	d130      	bne.n	8000f50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	2203      	movs	r2, #3
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68da      	ldr	r2, [r3, #12]
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	091b      	lsrs	r3, r3, #4
 8000f3a:	f003 0201 	and.w	r2, r3, #1
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0xfc>
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b12      	cmp	r3, #18
 8000f8e:	d123      	bne.n	8000fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	08da      	lsrs	r2, r3, #3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3208      	adds	r2, #8
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	f003 0307 	and.w	r3, r3, #7
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	691a      	ldr	r2, [r3, #16]
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	69b9      	ldr	r1, [r7, #24]
 8000fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0203 	and.w	r2, r3, #3
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	f000 80a2 	beq.w	800115e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b56      	ldr	r3, [pc, #344]	; (8001178 <HAL_GPIO_Init+0x2e4>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a55      	ldr	r2, [pc, #340]	; (8001178 <HAL_GPIO_Init+0x2e4>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b53      	ldr	r3, [pc, #332]	; (8001178 <HAL_GPIO_Init+0x2e4>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001036:	4a51      	ldr	r2, [pc, #324]	; (800117c <HAL_GPIO_Init+0x2e8>)
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	3302      	adds	r3, #2
 800103e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f003 0303 	and.w	r3, r3, #3
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4013      	ands	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a48      	ldr	r2, [pc, #288]	; (8001180 <HAL_GPIO_Init+0x2ec>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d019      	beq.n	8001096 <HAL_GPIO_Init+0x202>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a47      	ldr	r2, [pc, #284]	; (8001184 <HAL_GPIO_Init+0x2f0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x1fe>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a46      	ldr	r2, [pc, #280]	; (8001188 <HAL_GPIO_Init+0x2f4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x1fa>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a45      	ldr	r2, [pc, #276]	; (800118c <HAL_GPIO_Init+0x2f8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x1f6>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a44      	ldr	r2, [pc, #272]	; (8001190 <HAL_GPIO_Init+0x2fc>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x1f2>
 8001082:	2304      	movs	r3, #4
 8001084:	e008      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001086:	2307      	movs	r3, #7
 8001088:	e006      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108a:	2303      	movs	r3, #3
 800108c:	e004      	b.n	8001098 <HAL_GPIO_Init+0x204>
 800108e:	2302      	movs	r3, #2
 8001090:	e002      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x204>
 8001096:	2300      	movs	r3, #0
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f002 0203 	and.w	r2, r2, #3
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	4093      	lsls	r3, r2
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a8:	4934      	ldr	r1, [pc, #208]	; (800117c <HAL_GPIO_Init+0x2e8>)
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	089b      	lsrs	r3, r3, #2
 80010ae:	3302      	adds	r3, #2
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b6:	4b37      	ldr	r3, [pc, #220]	; (8001194 <HAL_GPIO_Init+0x300>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010da:	4a2e      	ldr	r2, [pc, #184]	; (8001194 <HAL_GPIO_Init+0x300>)
 80010dc:	69bb      	ldr	r3, [r7, #24]
 80010de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010e0:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <HAL_GPIO_Init+0x300>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	4013      	ands	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d003      	beq.n	8001104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001104:	4a23      	ldr	r2, [pc, #140]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800110a:	4b22      	ldr	r3, [pc, #136]	; (8001194 <HAL_GPIO_Init+0x300>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800112e:	4a19      	ldr	r2, [pc, #100]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <HAL_GPIO_Init+0x300>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d003      	beq.n	8001158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <HAL_GPIO_Init+0x300>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3301      	adds	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	f67f aea2 	bls.w	8000eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800116c:	bf00      	nop
 800116e:	3724      	adds	r7, #36	; 0x24
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40013c00 	.word	0x40013c00

08001198 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	b08f      	sub	sp, #60	; 0x3c
 800119c:	af0a      	add	r7, sp, #40	; 0x28
 800119e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e10f      	b.n	80013ca <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f005 f89f 	bl	8006308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2203      	movs	r2, #3
 80011ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f002 f860 	bl	80032ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	687e      	ldr	r6, [r7, #4]
 80011f6:	466d      	mov	r5, sp
 80011f8:	f106 0410 	add.w	r4, r6, #16
 80011fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001200:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001202:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001204:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001208:	e885 0003 	stmia.w	r5, {r0, r1}
 800120c:	1d33      	adds	r3, r6, #4
 800120e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001210:	6838      	ldr	r0, [r7, #0]
 8001212:	f001 ff37 	bl	8003084 <USB_CoreInit>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2202      	movs	r2, #2
 8001220:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e0d0      	b.n	80013ca <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f002 f84e 	bl	80032d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e04a      	b.n	80012d0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	333d      	adds	r3, #61	; 0x3d
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800124e:	7bfa      	ldrb	r2, [r7, #15]
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	00db      	lsls	r3, r3, #3
 8001256:	1a9b      	subs	r3, r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	440b      	add	r3, r1
 800125c:	333c      	adds	r3, #60	; 0x3c
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	b298      	uxth	r0, r3
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	4613      	mov	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	440b      	add	r3, r1
 8001274:	3342      	adds	r3, #66	; 0x42
 8001276:	4602      	mov	r2, r0
 8001278:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	440b      	add	r3, r1
 8001288:	333f      	adds	r3, #63	; 0x3f
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	1a9b      	subs	r3, r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	3344      	adds	r3, #68	; 0x44
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	4613      	mov	r3, r2
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	1a9b      	subs	r3, r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	440b      	add	r3, r1
 80012b0:	3348      	adds	r3, #72	; 0x48
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012b6:	7bfa      	ldrb	r2, [r7, #15]
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	00db      	lsls	r3, r3, #3
 80012be:	1a9b      	subs	r3, r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	3350      	adds	r3, #80	; 0x50
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d3af      	bcc.n	800123a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
 80012de:	e044      	b.n	800136a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012e0:	7bfa      	ldrb	r2, [r7, #15]
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	1a9b      	subs	r3, r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001308:	7bfa      	ldrb	r2, [r7, #15]
 800130a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001322:	7bfa      	ldrb	r2, [r7, #15]
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001338:	7bfa      	ldrb	r2, [r7, #15]
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800134e:	7bfa      	ldrb	r2, [r7, #15]
 8001350:	6879      	ldr	r1, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	7bfa      	ldrb	r2, [r7, #15]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	429a      	cmp	r2, r3
 8001372:	d3b5      	bcc.n	80012e0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	687e      	ldr	r6, [r7, #4]
 800137c:	466d      	mov	r5, sp
 800137e:	f106 0410 	add.w	r4, r6, #16
 8001382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800138e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001392:	1d33      	adds	r3, r6, #4
 8001394:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f001 ffc4 	bl	8003324 <USB_DevInit>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d005      	beq.n	80013ae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2202      	movs	r2, #2
 80013a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00d      	b.n	80013ca <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f003 f80c 	bl	80043e0 <USB_DevDisconnect>

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_PCD_Start+0x1c>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e020      	b.n	8001430 <HAL_PCD_Start+0x5e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d109      	bne.n	8001412 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001402:	2b01      	cmp	r3, #1
 8001404:	d005      	beq.n	8001412 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f001 ff38 	bl	800328c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f002 ffbc 	bl	800439e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	b08d      	sub	sp, #52	; 0x34
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f003 f87a 	bl	8004548 <USB_GetMode>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	f040 839d 	bne.w	8001b96 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f002 ffde 	bl	8004422 <USB_ReadInterrupts>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 8393 	beq.w	8001b94 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f002 ffd5 	bl	8004422 <USB_ReadInterrupts>
 8001478:	4603      	mov	r3, r0
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b02      	cmp	r3, #2
 8001480:	d107      	bne.n	8001492 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	695a      	ldr	r2, [r3, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f002 0202 	and.w	r2, r2, #2
 8001490:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f002 ffc3 	bl	8004422 <USB_ReadInterrupts>
 800149c:	4603      	mov	r3, r0
 800149e:	f003 0310 	and.w	r3, r3, #16
 80014a2:	2b10      	cmp	r3, #16
 80014a4:	d161      	bne.n	800156a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	699a      	ldr	r2, [r3, #24]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0210 	bic.w	r2, r2, #16
 80014b4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	6a1b      	ldr	r3, [r3, #32]
 80014ba:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f003 020f 	and.w	r2, r3, #15
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	1a9b      	subs	r3, r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	3304      	adds	r3, #4
 80014d4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	0c5b      	lsrs	r3, r3, #17
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d124      	bne.n	800152c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d035      	beq.n	800155a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	091b      	lsrs	r3, r3, #4
 80014f6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80014f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	6a38      	ldr	r0, [r7, #32]
 8001502:	f002 fe29 	bl	8004158 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001512:	441a      	add	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	699a      	ldr	r2, [r3, #24]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	091b      	lsrs	r3, r3, #4
 8001520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001524:	441a      	add	r2, r3
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	619a      	str	r2, [r3, #24]
 800152a:	e016      	b.n	800155a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	0c5b      	lsrs	r3, r3, #17
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	2b06      	cmp	r3, #6
 8001536:	d110      	bne.n	800155a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800153e:	2208      	movs	r2, #8
 8001540:	4619      	mov	r1, r3
 8001542:	6a38      	ldr	r0, [r7, #32]
 8001544:	f002 fe08 	bl	8004158 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	699a      	ldr	r2, [r3, #24]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	091b      	lsrs	r3, r3, #4
 8001550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001554:	441a      	add	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699a      	ldr	r2, [r3, #24]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0210 	orr.w	r2, r2, #16
 8001568:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 ff57 	bl	8004422 <USB_ReadInterrupts>
 8001574:	4603      	mov	r3, r0
 8001576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800157e:	d16e      	bne.n	800165e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f002 ff5d 	bl	8004448 <USB_ReadDevAllOutEpInterrupt>
 800158e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001590:	e062      	b.n	8001658 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	d057      	beq.n	800164c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f002 ff82 	bl	80044b0 <USB_ReadDevOutEPInterrupt>
 80015ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d00c      	beq.n	80015d2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	015a      	lsls	r2, r3, #5
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4413      	add	r3, r2
 80015c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c4:	461a      	mov	r2, r3
 80015c6:	2301      	movs	r3, #1
 80015c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80015ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fdb1 	bl	8002134 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00c      	beq.n	80015f6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	015a      	lsls	r2, r3, #5
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	4413      	add	r3, r2
 80015e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e8:	461a      	mov	r2, r3
 80015ea:	2308      	movs	r3, #8
 80015ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80015ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f000 feab 	bl	800234c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160c:	461a      	mov	r2, r3
 800160e:	2310      	movs	r3, #16
 8001610:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001628:	461a      	mov	r2, r3
 800162a:	2320      	movs	r3, #32
 800162c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d009      	beq.n	800164c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	015a      	lsls	r2, r3, #5
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	4413      	add	r3, r2
 8001640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001644:	461a      	mov	r2, r3
 8001646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	3301      	adds	r3, #1
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001654:	085b      	lsrs	r3, r3, #1
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800165a:	2b00      	cmp	r3, #0
 800165c:	d199      	bne.n	8001592 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f002 fedd 	bl	8004422 <USB_ReadInterrupts>
 8001668:	4603      	mov	r3, r0
 800166a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800166e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001672:	f040 80c0 	bne.w	80017f6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fefe 	bl	800447c <USB_ReadDevAllInEpInterrupt>
 8001680:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001686:	e0b2      	b.n	80017ee <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	f000 80a7 	beq.w	80017e2 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 ff24 	bl	80044ec <USB_ReadDevInEPInterrupt>
 80016a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d057      	beq.n	8001760 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	2201      	movs	r2, #1
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69f9      	ldr	r1, [r7, #28]
 80016cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016d0:	4013      	ands	r3, r2
 80016d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	015a      	lsls	r2, r3, #5
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	4413      	add	r3, r2
 80016dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e0:	461a      	mov	r2, r3
 80016e2:	2301      	movs	r3, #1
 80016e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d132      	bne.n	8001754 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016ee:	6879      	ldr	r1, [r7, #4]
 80016f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f2:	4613      	mov	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	1a9b      	subs	r3, r3, r2
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	440b      	add	r3, r1
 80016fc:	3348      	adds	r3, #72	; 0x48
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001704:	4613      	mov	r3, r2
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4403      	add	r3, r0
 800170e:	3344      	adds	r3, #68	; 0x44
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4419      	add	r1, r3
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001718:	4613      	mov	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	1a9b      	subs	r3, r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	3348      	adds	r3, #72	; 0x48
 8001724:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	2b00      	cmp	r3, #0
 800172a:	d113      	bne.n	8001754 <HAL_PCD_IRQHandler+0x31c>
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	4613      	mov	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	3350      	adds	r3, #80	; 0x50
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d108      	bne.n	8001754 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800174c:	461a      	mov	r2, r3
 800174e:	2101      	movs	r1, #1
 8001750:	f002 ff2c 	bl	80045ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f004 fe55 	bl	800640a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001776:	461a      	mov	r2, r3
 8001778:	2308      	movs	r3, #8
 800177a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001792:	461a      	mov	r2, r3
 8001794:	2310      	movs	r3, #16
 8001796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d008      	beq.n	80017b4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	015a      	lsls	r2, r3, #5
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4413      	add	r3, r2
 80017aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ae:	461a      	mov	r2, r3
 80017b0:	2340      	movs	r3, #64	; 0x40
 80017b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017ca:	461a      	mov	r2, r3
 80017cc:	2302      	movs	r3, #2
 80017ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fc1b 	bl	8002018 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	3301      	adds	r3, #1
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ea:	085b      	lsrs	r3, r3, #1
 80017ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f47f af49 	bne.w	8001688 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fe11 	bl	8004422 <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001806:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800180a:	d122      	bne.n	8001852 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001826:	2b01      	cmp	r3, #1
 8001828:	d108      	bne.n	800183c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001832:	2100      	movs	r1, #0
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 fe27 	bl	8002488 <HAL_PCDEx_LPM_Callback>
 800183a:	e002      	b.n	8001842 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f004 fe51 	bl	80064e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695a      	ldr	r2, [r3, #20]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f002 fde3 	bl	8004422 <USB_ReadInterrupts>
 800185c:	4603      	mov	r3, r0
 800185e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001862:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001866:	d112      	bne.n	800188e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b01      	cmp	r3, #1
 8001876:	d102      	bne.n	800187e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f004 fe0d 	bl	8006498 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	695a      	ldr	r2, [r3, #20]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800188c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f002 fdc5 	bl	8004422 <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a2:	f040 80c7 	bne.w	8001a34 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2110      	movs	r1, #16
 80018c0:	4618      	mov	r0, r3
 80018c2:	f001 fe93 	bl	80035ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	e056      	b.n	800197a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	015a      	lsls	r2, r3, #5
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	4413      	add	r3, r2
 80018d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018d8:	461a      	mov	r2, r3
 80018da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	015a      	lsls	r2, r3, #5
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	4413      	add	r3, r2
 80018e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018f0:	0151      	lsls	r1, r2, #5
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	440a      	add	r2, r1
 80018f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018fe:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	015a      	lsls	r2, r3, #5
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	4413      	add	r3, r2
 8001908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001910:	0151      	lsls	r1, r2, #5
 8001912:	69fa      	ldr	r2, [r7, #28]
 8001914:	440a      	add	r2, r1
 8001916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800191a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800191e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	015a      	lsls	r2, r3, #5
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4413      	add	r3, r2
 8001928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800192c:	461a      	mov	r2, r3
 800192e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001932:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001936:	015a      	lsls	r2, r3, #5
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	4413      	add	r3, r2
 800193c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001944:	0151      	lsls	r1, r2, #5
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	440a      	add	r2, r1
 800194a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800194e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001952:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001956:	015a      	lsls	r2, r3, #5
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	4413      	add	r3, r2
 800195c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001964:	0151      	lsls	r1, r2, #5
 8001966:	69fa      	ldr	r2, [r7, #28]
 8001968:	440a      	add	r2, r1
 800196a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800196e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001972:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001976:	3301      	adds	r3, #1
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001980:	429a      	cmp	r2, r3
 8001982:	d3a3      	bcc.n	80018cc <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001992:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001996:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	2b00      	cmp	r3, #0
 800199e:	d016      	beq.n	80019ce <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b0:	f043 030b 	orr.w	r3, r3, #11
 80019b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c6:	f043 030b 	orr.w	r3, r3, #11
 80019ca:	6453      	str	r3, [r2, #68]	; 0x44
 80019cc:	e015      	b.n	80019fa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019e0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019e4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019f4:	f043 030b 	orr.w	r3, r3, #11
 80019f8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	69fa      	ldr	r2, [r7, #28]
 8001a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a0c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f002 fdc4 	bl	80045ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 fcf2 	bl	8004422 <USB_ReadInterrupts>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a48:	d124      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f002 fd88 	bl	8004564 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 fe28 	bl	80036ae <USB_GetDevSpeed>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681c      	ldr	r4, [r3, #0]
 8001a6a:	f001 f921 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8001a6e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f001 fb65 	bl	8003148 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f004 fceb 	bl	800645a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fcc2 	bl	8004422 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d10a      	bne.n	8001abe <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f004 fcc8 	bl	800643e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f002 0208 	and.w	r2, r2, #8
 8001abc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fcad 	bl	8004422 <USB_ReadInterrupts>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ace:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ad2:	d10f      	bne.n	8001af4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4619      	mov	r1, r3
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f004 fd20 	bl	8006524 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	695a      	ldr	r2, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fc92 	bl	8004422 <USB_ReadInterrupts>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b08:	d10f      	bne.n	8001b2a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	4619      	mov	r1, r3
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f004 fcf3 	bl	8006500 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 fc77 	bl	8004422 <USB_ReadInterrupts>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b3e:	d10a      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f004 fd01 	bl	8006548 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695a      	ldr	r2, [r3, #20]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fc61 	bl	8004422 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d115      	bne.n	8001b96 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f004 fcf1 	bl	8006564 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6859      	ldr	r1, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	e000      	b.n	8001b96 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001b94:	bf00      	nop
    }
  }
}
 8001b96:	3734      	adds	r7, #52	; 0x34
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd90      	pop	{r4, r7, pc}

08001b9c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d101      	bne.n	8001bb6 <HAL_PCD_SetAddress+0x1a>
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	e013      	b.n	8001bde <HAL_PCD_SetAddress+0x42>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	78fa      	ldrb	r2, [r7, #3]
 8001bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fbbf 	bl	8004352 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	4608      	mov	r0, r1
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	70fb      	strb	r3, [r7, #3]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	803b      	strh	r3, [r7, #0]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	da0f      	bge.n	8001c2c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	f003 020f 	and.w	r2, r3, #15
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	3338      	adds	r3, #56	; 0x38
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	705a      	strb	r2, [r3, #1]
 8001c2a:	e00f      	b.n	8001c4c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f003 020f 	and.w	r2, r3, #15
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	3304      	adds	r3, #4
 8001c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	78fb      	ldrb	r3, [r7, #3]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001c58:	883a      	ldrh	r2, [r7, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	78ba      	ldrb	r2, [r7, #2]
 8001c62:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	785b      	ldrb	r3, [r3, #1]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d004      	beq.n	8001c76 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001c76:	78bb      	ldrb	r3, [r7, #2]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d102      	bne.n	8001c82 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_PCD_EP_Open+0xaa>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e00e      	b.n	8001cae <HAL_PCD_EP_Open+0xc8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68f9      	ldr	r1, [r7, #12]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f001 fd2a 	bl	80036f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001cac:	7afb      	ldrb	r3, [r7, #11]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da0f      	bge.n	8001cea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cca:	78fb      	ldrb	r3, [r7, #3]
 8001ccc:	f003 020f 	and.w	r2, r3, #15
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	3338      	adds	r3, #56	; 0x38
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	705a      	strb	r2, [r3, #1]
 8001ce8:	e00f      	b.n	8001d0a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 020f 	and.w	r2, r3, #15
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	1a9b      	subs	r3, r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d0a:	78fb      	ldrb	r3, [r7, #3]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d101      	bne.n	8001d24 <HAL_PCD_EP_Close+0x6e>
 8001d20:	2302      	movs	r3, #2
 8001d22:	e00e      	b.n	8001d42 <HAL_PCD_EP_Close+0x8c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f001 fd68 	bl	8003808 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	460b      	mov	r3, r1
 8001d58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2200      	movs	r2, #0
 8001d84:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d102      	bne.n	8001da6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001da6:	7afb      	ldrb	r3, [r7, #11]
 8001da8:	f003 030f 	and.w	r3, r3, #15
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d109      	bne.n	8001dc4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	6979      	ldr	r1, [r7, #20]
 8001dbe:	f002 f843 	bl	8003e48 <USB_EP0StartXfer>
 8001dc2:	e008      	b.n	8001dd6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	6979      	ldr	r1, [r7, #20]
 8001dd2:	f001 fdf5 	bl	80039c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 020f 	and.w	r2, r3, #15
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e02:	681b      	ldr	r3, [r3, #0]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e20:	7afb      	ldrb	r3, [r7, #11]
 8001e22:	f003 020f 	and.w	r2, r3, #15
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	1a9b      	subs	r3, r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	3338      	adds	r3, #56	; 0x38
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	3304      	adds	r3, #4
 8001e36:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2200      	movs	r2, #0
 8001e48:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e50:	7afb      	ldrb	r3, [r7, #11]
 8001e52:	f003 030f 	and.w	r3, r3, #15
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d102      	bne.n	8001e6a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e6a:	7afb      	ldrb	r3, [r7, #11]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	6979      	ldr	r1, [r7, #20]
 8001e82:	f001 ffe1 	bl	8003e48 <USB_EP0StartXfer>
 8001e86:	e008      	b.n	8001e9a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	6979      	ldr	r1, [r7, #20]
 8001e96:	f001 fd93 	bl	80039c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eb0:	78fb      	ldrb	r3, [r7, #3]
 8001eb2:	f003 020f 	and.w	r2, r3, #15
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d901      	bls.n	8001ec2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e050      	b.n	8001f64 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da0f      	bge.n	8001eea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	f003 020f 	and.w	r2, r3, #15
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	3338      	adds	r3, #56	; 0x38
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	705a      	strb	r2, [r3, #1]
 8001ee8:	e00d      	b.n	8001f06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	3304      	adds	r3, #4
 8001efe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2200      	movs	r2, #0
 8001f04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_EP_SetStall+0x82>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e01e      	b.n	8001f64 <HAL_PCD_EP_SetStall+0xc0>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68f9      	ldr	r1, [r7, #12]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 f938 	bl	80041aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10a      	bne.n	8001f5a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	b2d9      	uxtb	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f54:	461a      	mov	r2, r3
 8001f56:	f002 fb29 	bl	80045ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d901      	bls.n	8001f8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e042      	b.n	8002010 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da0f      	bge.n	8001fb2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 020f 	and.w	r2, r3, #15
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	3338      	adds	r3, #56	; 0x38
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	705a      	strb	r2, [r3, #1]
 8001fb0:	e00f      	b.n	8001fd2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fb2:	78fb      	ldrb	r3, [r7, #3]
 8001fb4:	f003 020f 	and.w	r2, r3, #15
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3304      	adds	r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_PCD_EP_ClrStall+0x86>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e00e      	b.n	8002010 <HAL_PCD_EP_ClrStall+0xa4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68f9      	ldr	r1, [r7, #12]
 8002000:	4618      	mov	r0, r3
 8002002:	f002 f940 	bl	8004286 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af02      	add	r7, sp, #8
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3338      	adds	r3, #56	; 0x38
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	3304      	adds	r3, #4
 800203e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	429a      	cmp	r2, r3
 800204a:	d901      	bls.n	8002050 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e06c      	b.n	800212a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	695a      	ldr	r2, [r3, #20]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	429a      	cmp	r2, r3
 8002064:	d902      	bls.n	800206c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	3303      	adds	r3, #3
 8002070:	089b      	lsrs	r3, r3, #2
 8002072:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002074:	e02b      	b.n	80020ce <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	429a      	cmp	r2, r3
 800208a:	d902      	bls.n	8002092 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3303      	adds	r3, #3
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	68d9      	ldr	r1, [r3, #12]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	4603      	mov	r3, r0
 80020b0:	6978      	ldr	r0, [r7, #20]
 80020b2:	f002 f81c 	bl	80040ee <USB_WritePacket>

    ep->xfer_buff  += len;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	441a      	add	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	699a      	ldr	r2, [r3, #24]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	441a      	add	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d809      	bhi.n	80020f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d203      	bcs.n	80020f8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1be      	bne.n	8002076 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	695a      	ldr	r2, [r3, #20]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	429a      	cmp	r2, r3
 8002102:	d811      	bhi.n	8002128 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	2201      	movs	r2, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	43db      	mvns	r3, r3
 800211e:	6939      	ldr	r1, [r7, #16]
 8002120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002124:	4013      	ands	r3, r2
 8002126:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	333c      	adds	r3, #60	; 0x3c
 800214c:	3304      	adds	r3, #4
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	015a      	lsls	r2, r3, #5
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4413      	add	r3, r2
 800215a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b01      	cmp	r3, #1
 8002168:	f040 80a0 	bne.w	80022ac <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d015      	beq.n	80021a2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4a72      	ldr	r2, [pc, #456]	; (8002344 <PCD_EP_OutXfrComplete_int+0x210>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f240 80dd 	bls.w	800233a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 80d7 	beq.w	800233a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	015a      	lsls	r2, r3, #5
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4413      	add	r3, r2
 8002194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002198:	461a      	mov	r2, r3
 800219a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	e0cb      	b.n	800233a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d009      	beq.n	80021c0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	015a      	lsls	r2, r3, #5
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4413      	add	r3, r2
 80021b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b8:	461a      	mov	r2, r3
 80021ba:	2320      	movs	r3, #32
 80021bc:	6093      	str	r3, [r2, #8]
 80021be:	e0bc      	b.n	800233a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f040 80b7 	bne.w	800233a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <PCD_EP_OutXfrComplete_int+0x210>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d90f      	bls.n	80021f4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	461a      	mov	r2, r3
 80021ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f0:	6093      	str	r3, [r2, #8]
 80021f2:	e0a2      	b.n	800233a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002206:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	0159      	lsls	r1, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	440b      	add	r3, r1
 8002210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800221a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4403      	add	r3, r0
 800222a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800222e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	4613      	mov	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4403      	add	r3, r0
 8002252:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4419      	add	r1, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4403      	add	r3, r0
 8002268:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800226c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d114      	bne.n	800229e <PCD_EP_OutXfrComplete_int+0x16a>
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d108      	bne.n	800229e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002296:	461a      	mov	r2, r3
 8002298:	2101      	movs	r1, #1
 800229a:	f002 f987 	bl	80045ac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	4619      	mov	r1, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f004 f895 	bl	80063d4 <HAL_PCD_DataOutStageCallback>
 80022aa:	e046      	b.n	800233a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4a26      	ldr	r2, [pc, #152]	; (8002348 <PCD_EP_OutXfrComplete_int+0x214>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d124      	bne.n	80022fe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ca:	461a      	mov	r2, r3
 80022cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022d0:	6093      	str	r3, [r2, #8]
 80022d2:	e032      	b.n	800233a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ea:	461a      	mov	r2, r3
 80022ec:	2320      	movs	r3, #32
 80022ee:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f004 f86c 	bl	80063d4 <HAL_PCD_DataOutStageCallback>
 80022fc:	e01d      	b.n	800233a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d114      	bne.n	800232e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4613      	mov	r3, r2
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	1a9b      	subs	r3, r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	440b      	add	r3, r1
 8002312:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d108      	bne.n	800232e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6818      	ldr	r0, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002326:	461a      	mov	r2, r3
 8002328:	2100      	movs	r1, #0
 800232a:	f002 f93f 	bl	80045ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	4619      	mov	r1, r3
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f004 f84d 	bl	80063d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	4f54300a 	.word	0x4f54300a
 8002348:	4f54310a 	.word	0x4f54310a

0800234c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	333c      	adds	r3, #60	; 0x3c
 8002364:	3304      	adds	r3, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4a15      	ldr	r2, [pc, #84]	; (80023d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d90e      	bls.n	80023a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002398:	461a      	mov	r2, r3
 800239a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800239e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f004 f805 	bl	80063b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d90c      	bls.n	80023c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d108      	bne.n	80023c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6818      	ldr	r0, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80023c0:	461a      	mov	r2, r3
 80023c2:	2101      	movs	r1, #1
 80023c4:	f002 f8f2 	bl	80045ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	4f54300a 	.word	0x4f54300a

080023d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
 80023e4:	4613      	mov	r3, r2
 80023e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d107      	bne.n	8002406 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80023f6:	883b      	ldrh	r3, [r7, #0]
 80023f8:	0419      	lsls	r1, r3, #16
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	430a      	orrs	r2, r1
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
 8002404:	e028      	b.n	8002458 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240c:	0c1b      	lsrs	r3, r3, #16
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4413      	add	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
 8002418:	e00d      	b.n	8002436 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	3340      	adds	r3, #64	; 0x40
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	4413      	add	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	3301      	adds	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	78fb      	ldrb	r3, [r7, #3]
 800243a:	3b01      	subs	r3, #1
 800243c:	429a      	cmp	r2, r3
 800243e:	d3ec      	bcc.n	800241a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002440:	883b      	ldrh	r3, [r7, #0]
 8002442:	0418      	lsls	r0, r3, #16
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6819      	ldr	r1, [r3, #0]
 8002448:	78fb      	ldrb	r3, [r7, #3]
 800244a:	3b01      	subs	r3, #1
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	4302      	orrs	r2, r0
 8002450:	3340      	adds	r3, #64	; 0x40
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e25b      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d075      	beq.n	80025aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024be:	4ba3      	ldr	r3, [pc, #652]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d00c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d112      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4b9d      	ldr	r3, [pc, #628]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e2:	d10b      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	4b99      	ldr	r3, [pc, #612]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05b      	beq.n	80025a8 <HAL_RCC_OscConfig+0x108>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d157      	bne.n	80025a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e236      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x74>
 8002506:	4b91      	ldr	r3, [pc, #580]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a90      	ldr	r2, [pc, #576]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xb0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x98>
 800251e:	4b8b      	ldr	r3, [pc, #556]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a8a      	ldr	r2, [pc, #552]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a87      	ldr	r2, [pc, #540]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xb0>
 8002538:	4b84      	ldr	r3, [pc, #528]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a83      	ldr	r2, [pc, #524]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a80      	ldr	r2, [pc, #512]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7fe fb5c 	bl	8000c14 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7fe fb58 	bl	8000c14 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1fb      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b76      	ldr	r3, [pc, #472]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xc0>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7fe fb48 	bl	8000c14 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7fe fb44 	bl	8000c14 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1e7      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b6c      	ldr	r3, [pc, #432]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0xe8>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b6:	4b65      	ldr	r3, [pc, #404]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b5f      	ldr	r3, [pc, #380]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b5c      	ldr	r3, [pc, #368]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x152>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1bb      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b56      	ldr	r3, [pc, #344]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4952      	ldr	r1, [pc, #328]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b4f      	ldr	r3, [pc, #316]	; (8002750 <HAL_RCC_OscConfig+0x2b0>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fafd 	bl	8000c14 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe faf9 	bl	8000c14 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e19c      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b46      	ldr	r3, [pc, #280]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4940      	ldr	r1, [pc, #256]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <HAL_RCC_OscConfig+0x2b0>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fadc 	bl	8000c14 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002660:	f7fe fad8 	bl	8000c14 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e17b      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d030      	beq.n	80026ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_RCC_OscConfig+0x2b4>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7fe fabc 	bl	8000c14 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7fe fab8 	bl	8000c14 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e15b      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b26      	ldr	r3, [pc, #152]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x200>
 80026be:	e015      	b.n	80026ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c0:	4b24      	ldr	r3, [pc, #144]	; (8002754 <HAL_RCC_OscConfig+0x2b4>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7fe faa5 	bl	8000c14 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ce:	f7fe faa1 	bl	8000c14 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e144      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 80026e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a0 	beq.w	800283a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fa:	2300      	movs	r3, #0
 80026fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fe:	4b13      	ldr	r3, [pc, #76]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	4b0f      	ldr	r3, [pc, #60]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a0e      	ldr	r2, [pc, #56]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b0c      	ldr	r3, [pc, #48]	; (800274c <HAL_RCC_OscConfig+0x2ac>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	60bb      	str	r3, [r7, #8]
 8002724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002726:	2301      	movs	r3, #1
 8002728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_OscConfig+0x2b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d121      	bne.n	800277a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002736:	4b08      	ldr	r3, [pc, #32]	; (8002758 <HAL_RCC_OscConfig+0x2b8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a07      	ldr	r2, [pc, #28]	; (8002758 <HAL_RCC_OscConfig+0x2b8>)
 800273c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002742:	f7fe fa67 	bl	8000c14 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	e011      	b.n	800276e <HAL_RCC_OscConfig+0x2ce>
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	42470000 	.word	0x42470000
 8002754:	42470e80 	.word	0x42470e80
 8002758:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800275c:	f7fe fa5a 	bl	8000c14 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0fd      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b81      	ldr	r3, [pc, #516]	; (8002974 <HAL_RCC_OscConfig+0x4d4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x2f0>
 8002782:	4b7d      	ldr	r3, [pc, #500]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a7c      	ldr	r2, [pc, #496]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	e01c      	b.n	80027ca <HAL_RCC_OscConfig+0x32a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b05      	cmp	r3, #5
 8002796:	d10c      	bne.n	80027b2 <HAL_RCC_OscConfig+0x312>
 8002798:	4b77      	ldr	r3, [pc, #476]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a76      	ldr	r2, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 800279e:	f043 0304 	orr.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
 80027a4:	4b74      	ldr	r3, [pc, #464]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a73      	ldr	r2, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
 80027b0:	e00b      	b.n	80027ca <HAL_RCC_OscConfig+0x32a>
 80027b2:	4b71      	ldr	r3, [pc, #452]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a70      	ldr	r2, [pc, #448]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
 80027be:	4b6e      	ldr	r3, [pc, #440]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	4a6d      	ldr	r2, [pc, #436]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80027c4:	f023 0304 	bic.w	r3, r3, #4
 80027c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d015      	beq.n	80027fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fa1f 	bl	8000c14 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d8:	e00a      	b.n	80027f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fa1b 	bl	8000c14 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d901      	bls.n	80027f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e0bc      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f0:	4b61      	ldr	r3, [pc, #388]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ee      	beq.n	80027da <HAL_RCC_OscConfig+0x33a>
 80027fc:	e014      	b.n	8002828 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe fa09 	bl	8000c14 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fa05 	bl	8000c14 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	; 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0a6      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800281c:	4b56      	ldr	r3, [pc, #344]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1ee      	bne.n	8002806 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d105      	bne.n	800283a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800282e:	4b52      	ldr	r3, [pc, #328]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a51      	ldr	r2, [pc, #324]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 8002834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 8092 	beq.w	8002968 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 030c 	and.w	r3, r3, #12
 800284c:	2b08      	cmp	r3, #8
 800284e:	d05c      	beq.n	800290a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d141      	bne.n	80028dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002858:	4b48      	ldr	r3, [pc, #288]	; (800297c <HAL_RCC_OscConfig+0x4dc>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe f9d9 	bl	8000c14 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe f9d5 	bl	8000c14 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e078      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002878:	4b3f      	ldr	r3, [pc, #252]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69da      	ldr	r2, [r3, #28]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	019b      	lsls	r3, r3, #6
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	3b01      	subs	r3, #1
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
 80028a8:	4933      	ldr	r1, [pc, #204]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ae:	4b33      	ldr	r3, [pc, #204]	; (800297c <HAL_RCC_OscConfig+0x4dc>)
 80028b0:	2201      	movs	r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b4:	f7fe f9ae 	bl	8000c14 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe f9aa 	bl	8000c14 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e04d      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x41c>
 80028da:	e045      	b.n	8002968 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_RCC_OscConfig+0x4dc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe f997 	bl	8000c14 <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ea:	f7fe f993 	bl	8000c14 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e036      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fc:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x44a>
 8002908:	e02e      	b.n	8002968 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e029      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_RCC_OscConfig+0x4d8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	429a      	cmp	r2, r3
 8002928:	d11c      	bne.n	8002964 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d115      	bne.n	8002964 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293e:	4013      	ands	r3, r2
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002944:	4293      	cmp	r3, r2
 8002946:	d10d      	bne.n	8002964 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d106      	bne.n	8002964 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40007000 	.word	0x40007000
 8002978:	40023800 	.word	0x40023800
 800297c:	42470060 	.word	0x42470060

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0cc      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 030f 	and.w	r3, r3, #15
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d90c      	bls.n	80029bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b8      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a58      	ldr	r2, [pc, #352]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b53      	ldr	r3, [pc, #332]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b50      	ldr	r3, [pc, #320]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	494d      	ldr	r1, [pc, #308]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d044      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d119      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e067      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4934      	ldr	r1, [pc, #208]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7fe f8d0 	bl	8000c14 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7fe f8cc 	bl	8000c14 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e04f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d20c      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4916      	ldr	r1, [pc, #88]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	490e      	ldr	r1, [pc, #56]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b06:	f000 f821 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0a:	4601      	mov	r1, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	5cd3      	ldrb	r3, [r2, r3]
 8002b1a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe f830 	bl	8000b8c <HAL_InitTick>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023c00 	.word	0x40023c00
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	08007200 	.word	0x08007200
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000004 	.word	0x20000004

08002b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	2300      	movs	r3, #0
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b62:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d007      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x32>
 8002b6e:	2b08      	cmp	r3, #8
 8002b70:	d008      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x38>
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f040 808d 	bne.w	8002c92 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b78:	4b4b      	ldr	r3, [pc, #300]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b7a:	60bb      	str	r3, [r7, #8]
       break;
 8002b7c:	e08c      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b7e:	4b4b      	ldr	r3, [pc, #300]	; (8002cac <HAL_RCC_GetSysClockFreq+0x160>)
 8002b80:	60bb      	str	r3, [r7, #8]
      break;
 8002b82:	e089      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b84:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b8e:	4b45      	ldr	r3, [pc, #276]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d023      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9a:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	f04f 0400 	mov.w	r4, #0
 8002ba4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	ea03 0501 	and.w	r5, r3, r1
 8002bb0:	ea04 0602 	and.w	r6, r4, r2
 8002bb4:	4a3d      	ldr	r2, [pc, #244]	; (8002cac <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb6:	fb02 f106 	mul.w	r1, r2, r6
 8002bba:	2200      	movs	r2, #0
 8002bbc:	fb02 f205 	mul.w	r2, r2, r5
 8002bc0:	440a      	add	r2, r1
 8002bc2:	493a      	ldr	r1, [pc, #232]	; (8002cac <HAL_RCC_GetSysClockFreq+0x160>)
 8002bc4:	fba5 0101 	umull	r0, r1, r5, r1
 8002bc8:	1853      	adds	r3, r2, r1
 8002bca:	4619      	mov	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f04f 0400 	mov.w	r4, #0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4623      	mov	r3, r4
 8002bd6:	f7fd fb5b 	bl	8000290 <__aeabi_uldivmod>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	460c      	mov	r4, r1
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e049      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002be2:	4b30      	ldr	r3, [pc, #192]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	099b      	lsrs	r3, r3, #6
 8002be8:	f04f 0400 	mov.w	r4, #0
 8002bec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	ea03 0501 	and.w	r5, r3, r1
 8002bf8:	ea04 0602 	and.w	r6, r4, r2
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	4632      	mov	r2, r6
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	f04f 0400 	mov.w	r4, #0
 8002c08:	0154      	lsls	r4, r2, #5
 8002c0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c0e:	014b      	lsls	r3, r1, #5
 8002c10:	4619      	mov	r1, r3
 8002c12:	4622      	mov	r2, r4
 8002c14:	1b49      	subs	r1, r1, r5
 8002c16:	eb62 0206 	sbc.w	r2, r2, r6
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	f04f 0400 	mov.w	r4, #0
 8002c22:	0194      	lsls	r4, r2, #6
 8002c24:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c28:	018b      	lsls	r3, r1, #6
 8002c2a:	1a5b      	subs	r3, r3, r1
 8002c2c:	eb64 0402 	sbc.w	r4, r4, r2
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	00e2      	lsls	r2, r4, #3
 8002c3a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c3e:	00d9      	lsls	r1, r3, #3
 8002c40:	460b      	mov	r3, r1
 8002c42:	4614      	mov	r4, r2
 8002c44:	195b      	adds	r3, r3, r5
 8002c46:	eb44 0406 	adc.w	r4, r4, r6
 8002c4a:	f04f 0100 	mov.w	r1, #0
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	02a2      	lsls	r2, r4, #10
 8002c54:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c58:	0299      	lsls	r1, r3, #10
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	4621      	mov	r1, r4
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f04f 0400 	mov.w	r4, #0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4623      	mov	r3, r4
 8002c6c:	f7fd fb10 	bl	8000290 <__aeabi_uldivmod>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	3301      	adds	r3, #1
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	60bb      	str	r3, [r7, #8]
      break;
 8002c90:	e002      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c92:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c94:	60bb      	str	r3, [r7, #8]
      break;
 8002c96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c98:	68bb      	ldr	r3, [r7, #8]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	017d7840 	.word	0x017d7840

08002cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000000 	.word	0x20000000

08002cc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e083      	b.n	8002de4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d106      	bne.n	8002cf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fd fe05 	bl	8000900 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0c:	f023 0307 	bic.w	r3, r3, #7
 8002d10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f000 f89d 	bl	8002e5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4a:	f023 0303 	bic.w	r3, r3, #3
 8002d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d68:	f023 030c 	bic.w	r3, r3, #12
 8002d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	4313      	orrs	r3, r2
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	011a      	lsls	r2, r3, #4
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	031b      	lsls	r3, r3, #12
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_TIM_Encoder_Start+0x16>
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d008      	beq.n	8002e12 <HAL_TIM_Encoder_Start+0x26>
 8002e00:	e00f      	b.n	8002e22 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2201      	movs	r2, #1
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f8a6 	bl	8002f5c <TIM_CCxChannelCmd>
      break;
 8002e10:	e016      	b.n	8002e40 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2201      	movs	r2, #1
 8002e18:	2104      	movs	r1, #4
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f89e 	bl	8002f5c <TIM_CCxChannelCmd>
      break;
 8002e20:	e00e      	b.n	8002e40 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2201      	movs	r2, #1
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f896 	bl	8002f5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2201      	movs	r2, #1
 8002e36:	2104      	movs	r1, #4
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 f88f 	bl	8002f5c <TIM_CCxChannelCmd>
      break;
 8002e3e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00f      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a31      	ldr	r2, [pc, #196]	; (8002f44 <TIM_Base_SetConfig+0xe8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a30      	ldr	r2, [pc, #192]	; (8002f48 <TIM_Base_SetConfig+0xec>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <TIM_Base_SetConfig+0xe8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <TIM_Base_SetConfig+0xec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <TIM_Base_SetConfig+0xf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <TIM_Base_SetConfig+0xf8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <TIM_Base_SetConfig+0xfc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d103      	bne.n	8002f2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	615a      	str	r2, [r3, #20]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800

08002f5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2201      	movs	r2, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1a      	ldr	r2, [r3, #32]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1a      	ldr	r2, [r3, #32]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 031f 	and.w	r3, r3, #31
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	621a      	str	r2, [r3, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e050      	b.n	8003062 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d013      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a18      	ldr	r2, [pc, #96]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a15      	ldr	r2, [pc, #84]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a13      	ldr	r2, [pc, #76]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10c      	bne.n	8003050 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800303c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	4313      	orrs	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68ba      	ldr	r2, [r7, #8]
 800304e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40010000 	.word	0x40010000
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40014000 	.word	0x40014000

08003084 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003084:	b084      	sub	sp, #16
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	f107 001c 	add.w	r0, r7, #28
 8003092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003098:	2b01      	cmp	r3, #1
 800309a:	d122      	bne.n	80030e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80030b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80030c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d105      	bne.n	80030d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f001 fac6 	bl	8004668 <USB_CoreReset>
 80030dc:	4603      	mov	r3, r0
 80030de:	73fb      	strb	r3, [r7, #15]
 80030e0:	e01a      	b.n	8003118 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f001 faba 	bl	8004668 <USB_CoreReset>
 80030f4:	4603      	mov	r3, r0
 80030f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80030f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003102:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	639a      	str	r2, [r3, #56]	; 0x38
 800310a:	e005      	b.n	8003118 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10b      	bne.n	8003136 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f043 0206 	orr.w	r2, r3, #6
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f043 0220 	orr.w	r2, r3, #32
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003136:	7bfb      	ldrb	r3, [r7, #15]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003142:	b004      	add	sp, #16
 8003144:	4770      	bx	lr
	...

08003148 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2b02      	cmp	r3, #2
 800315a:	d165      	bne.n	8003228 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4a41      	ldr	r2, [pc, #260]	; (8003264 <USB_SetTurnaroundTime+0x11c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d906      	bls.n	8003172 <USB_SetTurnaroundTime+0x2a>
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4a40      	ldr	r2, [pc, #256]	; (8003268 <USB_SetTurnaroundTime+0x120>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d802      	bhi.n	8003172 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800316c:	230f      	movs	r3, #15
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	e062      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4a3c      	ldr	r2, [pc, #240]	; (8003268 <USB_SetTurnaroundTime+0x120>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d906      	bls.n	8003188 <USB_SetTurnaroundTime+0x40>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	4a3b      	ldr	r2, [pc, #236]	; (800326c <USB_SetTurnaroundTime+0x124>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d802      	bhi.n	8003188 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003182:	230e      	movs	r3, #14
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e057      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4a38      	ldr	r2, [pc, #224]	; (800326c <USB_SetTurnaroundTime+0x124>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d906      	bls.n	800319e <USB_SetTurnaroundTime+0x56>
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4a37      	ldr	r2, [pc, #220]	; (8003270 <USB_SetTurnaroundTime+0x128>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d802      	bhi.n	800319e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003198:	230d      	movs	r3, #13
 800319a:	617b      	str	r3, [r7, #20]
 800319c:	e04c      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4a33      	ldr	r2, [pc, #204]	; (8003270 <USB_SetTurnaroundTime+0x128>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d906      	bls.n	80031b4 <USB_SetTurnaroundTime+0x6c>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4a32      	ldr	r2, [pc, #200]	; (8003274 <USB_SetTurnaroundTime+0x12c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d802      	bhi.n	80031b4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80031ae:	230c      	movs	r3, #12
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	e041      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4a2f      	ldr	r2, [pc, #188]	; (8003274 <USB_SetTurnaroundTime+0x12c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d906      	bls.n	80031ca <USB_SetTurnaroundTime+0x82>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	4a2e      	ldr	r2, [pc, #184]	; (8003278 <USB_SetTurnaroundTime+0x130>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d802      	bhi.n	80031ca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80031c4:	230b      	movs	r3, #11
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e036      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <USB_SetTurnaroundTime+0x130>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d906      	bls.n	80031e0 <USB_SetTurnaroundTime+0x98>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <USB_SetTurnaroundTime+0x134>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d802      	bhi.n	80031e0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80031da:	230a      	movs	r3, #10
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	e02b      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4a26      	ldr	r2, [pc, #152]	; (800327c <USB_SetTurnaroundTime+0x134>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d906      	bls.n	80031f6 <USB_SetTurnaroundTime+0xae>
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4a25      	ldr	r2, [pc, #148]	; (8003280 <USB_SetTurnaroundTime+0x138>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d802      	bhi.n	80031f6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80031f0:	2309      	movs	r3, #9
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e020      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	4a21      	ldr	r2, [pc, #132]	; (8003280 <USB_SetTurnaroundTime+0x138>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d906      	bls.n	800320c <USB_SetTurnaroundTime+0xc4>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4a20      	ldr	r2, [pc, #128]	; (8003284 <USB_SetTurnaroundTime+0x13c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d802      	bhi.n	800320c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003206:	2308      	movs	r3, #8
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	e015      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <USB_SetTurnaroundTime+0x13c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d906      	bls.n	8003222 <USB_SetTurnaroundTime+0xda>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <USB_SetTurnaroundTime+0x140>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d802      	bhi.n	8003222 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800321c:	2307      	movs	r3, #7
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	e00a      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003222:	2306      	movs	r3, #6
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e007      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d102      	bne.n	8003234 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800322e:	2309      	movs	r3, #9
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	e001      	b.n	8003238 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003234:	2309      	movs	r3, #9
 8003236:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	029b      	lsls	r3, r3, #10
 800324c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003250:	431a      	orrs	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	00d8acbf 	.word	0x00d8acbf
 8003268:	00e4e1bf 	.word	0x00e4e1bf
 800326c:	00f423ff 	.word	0x00f423ff
 8003270:	0106737f 	.word	0x0106737f
 8003274:	011a499f 	.word	0x011a499f
 8003278:	01312cff 	.word	0x01312cff
 800327c:	014ca43f 	.word	0x014ca43f
 8003280:	016e35ff 	.word	0x016e35ff
 8003284:	01a6ab1f 	.word	0x01a6ab1f
 8003288:	01e847ff 	.word	0x01e847ff

0800328c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f043 0201 	orr.w	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f023 0201 	bic.w	r2, r3, #1
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d106      	bne.n	80032fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	e00b      	b.n	8003314 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80032fc:	78fb      	ldrb	r3, [r7, #3]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	e001      	b.n	8003314 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	e003      	b.n	800331c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003314:	2032      	movs	r0, #50	; 0x32
 8003316:	f7fd fc89 	bl	8000c2c <HAL_Delay>

  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003324:	b084      	sub	sp, #16
 8003326:	b580      	push	{r7, lr}
 8003328:	b086      	sub	sp, #24
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e009      	b.n	8003358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	3340      	adds	r3, #64	; 0x40
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	3301      	adds	r3, #1
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2b0e      	cmp	r3, #14
 800335c:	d9f2      	bls.n	8003344 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800335e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11c      	bne.n	800339e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	639a      	str	r2, [r3, #56]	; 0x38
 800339c:	e00b      	b.n	80033b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80033bc:	461a      	mov	r2, r3
 80033be:	2300      	movs	r3, #0
 80033c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c8:	4619      	mov	r1, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d0:	461a      	mov	r2, r3
 80033d2:	680b      	ldr	r3, [r1, #0]
 80033d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80033d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d10c      	bne.n	80033f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80033e2:	2100      	movs	r1, #0
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f949 	bl	800367c <USB_SetDevSpeed>
 80033ea:	e008      	b.n	80033fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033ec:	2101      	movs	r1, #1
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f944 	bl	800367c <USB_SetDevSpeed>
 80033f4:	e003      	b.n	80033fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033f6:	2103      	movs	r1, #3
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 f93f 	bl	800367c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033fe:	2110      	movs	r1, #16
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8f3 	bl	80035ec <USB_FlushTxFifo>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f911 	bl	8003638 <USB_FlushRxFifo>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003426:	461a      	mov	r2, r3
 8003428:	2300      	movs	r3, #0
 800342a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	461a      	mov	r2, r3
 8003434:	2300      	movs	r3, #0
 8003436:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800343e:	461a      	mov	r2, r3
 8003440:	2300      	movs	r3, #0
 8003442:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003444:	2300      	movs	r3, #0
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	e043      	b.n	80034d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800345c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003460:	d118      	bne.n	8003494 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003474:	461a      	mov	r2, r3
 8003476:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	e013      	b.n	80034a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348a:	461a      	mov	r2, r3
 800348c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	e008      	b.n	80034a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	015a      	lsls	r2, r3, #5
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	4413      	add	r3, r2
 800349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a0:	461a      	mov	r2, r3
 80034a2:	2300      	movs	r3, #0
 80034a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b2:	461a      	mov	r2, r3
 80034b4:	2300      	movs	r3, #0
 80034b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	461a      	mov	r2, r3
 80034c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	3301      	adds	r3, #1
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d3b7      	bcc.n	800344a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034da:	2300      	movs	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	e043      	b.n	8003568 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034f6:	d118      	bne.n	800352a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10a      	bne.n	8003514 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350a:	461a      	mov	r2, r3
 800350c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e013      	b.n	800353c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	461a      	mov	r2, r3
 8003522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e008      	b.n	800353c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003536:	461a      	mov	r2, r3
 8003538:	2300      	movs	r3, #0
 800353a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	461a      	mov	r2, r3
 800354a:	2300      	movs	r3, #0
 800354c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	015a      	lsls	r2, r3, #5
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	4413      	add	r3, r2
 8003556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800355a:	461a      	mov	r2, r3
 800355c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	3301      	adds	r3, #1
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d3b7      	bcc.n	80034e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003582:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003590:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f043 0210 	orr.w	r2, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699a      	ldr	r2, [r3, #24]
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <USB_DevInit+0x2c4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d005      	beq.n	80035c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f043 0208 	orr.w	r2, r3, #8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80035c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d107      	bne.n	80035d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035d0:	f043 0304 	orr.w	r3, r3, #4
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3718      	adds	r7, #24
 80035de:	46bd      	mov	sp, r7
 80035e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035e4:	b004      	add	sp, #16
 80035e6:	4770      	bx	lr
 80035e8:	803c3800 	.word	0x803c3800

080035ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	f043 0220 	orr.w	r2, r3, #32
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3301      	adds	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <USB_FlushTxFifo+0x48>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e006      	b.n	8003626 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d0f0      	beq.n	8003606 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	00030d40 	.word	0x00030d40

08003638 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2210      	movs	r2, #16
 8003648:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	3301      	adds	r3, #1
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a09      	ldr	r2, [pc, #36]	; (8003678 <USB_FlushRxFifo+0x40>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d901      	bls.n	800365c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e006      	b.n	800366a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d0f0      	beq.n	800364a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	00030d40 	.word	0x00030d40

0800367c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	460b      	mov	r3, r1
 8003686:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	68f9      	ldr	r1, [r7, #12]
 8003698:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b087      	sub	sp, #28
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0306 	and.w	r3, r3, #6
 80036c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d102      	bne.n	80036d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]
 80036d2:	e00a      	b.n	80036ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d002      	beq.n	80036e0 <USB_GetDevSpeed+0x32>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b06      	cmp	r3, #6
 80036de:	d102      	bne.n	80036e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80036e0:	2302      	movs	r3, #2
 80036e2:	75fb      	strb	r3, [r7, #23]
 80036e4:	e001      	b.n	80036ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80036e6:	230f      	movs	r3, #15
 80036e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80036ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	371c      	adds	r7, #28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d13a      	bne.n	800378a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	b29b      	uxth	r3, r3
 800372c:	68f9      	ldr	r1, [r7, #12]
 800372e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003732:	4313      	orrs	r3, r2
 8003734:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d155      	bne.n	80037f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	78db      	ldrb	r3, [r3, #3]
 8003766:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003768:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	059b      	lsls	r3, r3, #22
 800376e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003770:	4313      	orrs	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	440a      	add	r2, r1
 800377a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003786:	6013      	str	r3, [r2, #0]
 8003788:	e036      	b.n	80037f8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	2101      	movs	r1, #1
 800379c:	fa01 f303 	lsl.w	r3, r1, r3
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d11a      	bne.n	80037f8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	78db      	ldrb	r3, [r3, #3]
 80037dc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037de:	430b      	orrs	r3, r1
 80037e0:	4313      	orrs	r3, r2
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037f6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	785b      	ldrb	r3, [r3, #1]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d161      	bne.n	80038e8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	015a      	lsls	r2, r3, #5
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800383a:	d11f      	bne.n	800387c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	440a      	add	r2, r1
 8003852:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003856:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800385a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	0151      	lsls	r1, r2, #5
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	440a      	add	r2, r1
 8003872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800387a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	2101      	movs	r1, #1
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800389c:	4013      	ands	r3, r2
 800389e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	69da      	ldr	r2, [r3, #28]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f003 030f 	and.w	r3, r3, #15
 80038b0:	2101      	movs	r1, #1
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	43db      	mvns	r3, r3
 80038ba:	68f9      	ldr	r1, [r7, #12]
 80038bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038c0:	4013      	ands	r3, r2
 80038c2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	015a      	lsls	r2, r3, #5
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	0159      	lsls	r1, r3, #5
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	440b      	add	r3, r1
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	4619      	mov	r1, r3
 80038e0:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <USB_DeactivateEndpoint+0x1b0>)
 80038e2:	4013      	ands	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
 80038e6:	e060      	b.n	80039aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038fe:	d11f      	bne.n	8003940 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	0151      	lsls	r1, r2, #5
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	440a      	add	r2, r1
 8003916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800391e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4413      	add	r3, r2
 8003928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68ba      	ldr	r2, [r7, #8]
 8003930:	0151      	lsls	r1, r2, #5
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	440a      	add	r2, r1
 8003936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800393a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800393e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003946:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	2101      	movs	r1, #1
 8003952:	fa01 f303 	lsl.w	r3, r1, r3
 8003956:	041b      	lsls	r3, r3, #16
 8003958:	43db      	mvns	r3, r3
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003960:	4013      	ands	r3, r2
 8003962:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f303 	lsl.w	r3, r1, r3
 800397a:	041b      	lsls	r3, r3, #16
 800397c:	43db      	mvns	r3, r3
 800397e:	68f9      	ldr	r1, [r7, #12]
 8003980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003984:	4013      	ands	r3, r2
 8003986:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	0159      	lsls	r1, r3, #5
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	440b      	add	r3, r1
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	4619      	mov	r1, r3
 80039a4:	4b05      	ldr	r3, [pc, #20]	; (80039bc <USB_DeactivateEndpoint+0x1b4>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	ec337800 	.word	0xec337800
 80039bc:	eff37800 	.word	0xeff37800

080039c0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b08a      	sub	sp, #40	; 0x28
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	4613      	mov	r3, r2
 80039cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	785b      	ldrb	r3, [r3, #1]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 815c 	bne.w	8003c9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d132      	bne.n	8003a50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	0151      	lsls	r1, r2, #5
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	440a      	add	r2, r1
 8003a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	0151      	lsls	r1, r2, #5
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	440a      	add	r2, r1
 8003a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	0151      	lsls	r1, r2, #5
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	440a      	add	r2, r1
 8003a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a48:	0cdb      	lsrs	r3, r3, #19
 8003a4a:	04db      	lsls	r3, r3, #19
 8003a4c:	6113      	str	r3, [r2, #16]
 8003a4e:	e074      	b.n	8003b3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	0151      	lsls	r1, r2, #5
 8003a62:	69fa      	ldr	r2, [r7, #28]
 8003a64:	440a      	add	r2, r1
 8003a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a6a:	0cdb      	lsrs	r3, r3, #19
 8003a6c:	04db      	lsls	r3, r3, #19
 8003a6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	0151      	lsls	r1, r2, #5
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	440a      	add	r2, r1
 8003a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa0:	691a      	ldr	r2, [r3, #16]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6959      	ldr	r1, [r3, #20]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	440b      	add	r3, r1
 8003aac:	1e59      	subs	r1, r3, #1
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ab6:	04d9      	lsls	r1, r3, #19
 8003ab8:	4b9d      	ldr	r3, [pc, #628]	; (8003d30 <USB_EPStartXfer+0x370>)
 8003aba:	400b      	ands	r3, r1
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	0148      	lsls	r0, r1, #5
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	4401      	add	r1, r0
 8003ac4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae2:	69b9      	ldr	r1, [r7, #24]
 8003ae4:	0148      	lsls	r0, r1, #5
 8003ae6:	69f9      	ldr	r1, [r7, #28]
 8003ae8:	4401      	add	r1, r0
 8003aea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003aee:	4313      	orrs	r3, r2
 8003af0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	78db      	ldrb	r3, [r3, #3]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d11f      	bne.n	8003b3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003b18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003b3a:	79fb      	ldrb	r3, [r7, #7]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d14b      	bne.n	8003bd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	461a      	mov	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	78db      	ldrb	r3, [r3, #3]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d128      	bne.n	8003bb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d110      	bne.n	8003b96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e00f      	b.n	8003bb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	0151      	lsls	r1, r2, #5
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	440a      	add	r2, r1
 8003bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e12f      	b.n	8003e38 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bf6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	78db      	ldrb	r3, [r3, #3]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d015      	beq.n	8003c2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8117 	beq.w	8003e38 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	69f9      	ldr	r1, [r7, #28]
 8003c22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c26:	4313      	orrs	r3, r2
 8003c28:	634b      	str	r3, [r1, #52]	; 0x34
 8003c2a:	e105      	b.n	8003e38 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d110      	bne.n	8003c5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	e00f      	b.n	8003c7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	0151      	lsls	r1, r2, #5
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	440a      	add	r2, r1
 8003c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	68d9      	ldr	r1, [r3, #12]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781a      	ldrb	r2, [r3, #0]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	b298      	uxth	r0, r3
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	4603      	mov	r3, r0
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fa2b 	bl	80040ee <USB_WritePacket>
 8003c98:	e0ce      	b.n	8003e38 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca6:	691b      	ldr	r3, [r3, #16]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	0151      	lsls	r1, r2, #5
 8003cac:	69fa      	ldr	r2, [r7, #28]
 8003cae:	440a      	add	r2, r1
 8003cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb4:	0cdb      	lsrs	r3, r3, #19
 8003cb6:	04db      	lsls	r3, r3, #19
 8003cb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	0151      	lsls	r1, r2, #5
 8003ccc:	69fa      	ldr	r2, [r7, #28]
 8003cce:	440a      	add	r2, r1
 8003cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cdc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d126      	bne.n	8003d34 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfc:	69b9      	ldr	r1, [r7, #24]
 8003cfe:	0148      	lsls	r0, r1, #5
 8003d00:	69f9      	ldr	r1, [r7, #28]
 8003d02:	4401      	add	r1, r0
 8003d04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	0151      	lsls	r1, r2, #5
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	440a      	add	r2, r1
 8003d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d2a:	6113      	str	r3, [r2, #16]
 8003d2c:	e036      	b.n	8003d9c <USB_EPStartXfer+0x3dc>
 8003d2e:	bf00      	nop
 8003d30:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	1e5a      	subs	r2, r3, #1
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d48:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	8afb      	ldrh	r3, [r7, #22]
 8003d5a:	04d9      	lsls	r1, r3, #19
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <USB_EPStartXfer+0x484>)
 8003d5e:	400b      	ands	r3, r1
 8003d60:	69b9      	ldr	r1, [r7, #24]
 8003d62:	0148      	lsls	r0, r1, #5
 8003d64:	69f9      	ldr	r1, [r7, #28]
 8003d66:	4401      	add	r1, r0
 8003d68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	691a      	ldr	r2, [r3, #16]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	8af9      	ldrh	r1, [r7, #22]
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d8c:	69b9      	ldr	r1, [r7, #24]
 8003d8e:	0148      	lsls	r0, r1, #5
 8003d90:	69f9      	ldr	r1, [r7, #28]
 8003d92:	4401      	add	r1, r0
 8003d94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d10d      	bne.n	8003dbe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	68d9      	ldr	r1, [r3, #12]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	015a      	lsls	r2, r3, #5
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	4413      	add	r3, r2
 8003db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dba:	460a      	mov	r2, r1
 8003dbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	78db      	ldrb	r3, [r3, #3]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d128      	bne.n	8003e18 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d110      	bne.n	8003df8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	0151      	lsls	r1, r2, #5
 8003de8:	69fa      	ldr	r2, [r7, #28]
 8003dea:	440a      	add	r2, r1
 8003dec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	e00f      	b.n	8003e18 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	0151      	lsls	r1, r2, #5
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	440a      	add	r2, r1
 8003e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3720      	adds	r7, #32
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	1ff80000 	.word	0x1ff80000

08003e48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	4613      	mov	r3, r2
 8003e54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	f040 80cd 	bne.w	8004004 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d132      	bne.n	8003ed8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	015a      	lsls	r2, r3, #5
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	0151      	lsls	r1, r2, #5
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	440a      	add	r2, r1
 8003eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	0151      	lsls	r1, r2, #5
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	440a      	add	r2, r1
 8003ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed0:	0cdb      	lsrs	r3, r3, #19
 8003ed2:	04db      	lsls	r3, r3, #19
 8003ed4:	6113      	str	r3, [r2, #16]
 8003ed6:	e04e      	b.n	8003f76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	0151      	lsls	r1, r2, #5
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	440a      	add	r2, r1
 8003eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ef2:	0cdb      	lsrs	r3, r3, #19
 8003ef4:	04db      	lsls	r3, r3, #19
 8003ef6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	0151      	lsls	r1, r2, #5
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d903      	bls.n	8003f30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f66:	6939      	ldr	r1, [r7, #16]
 8003f68:	0148      	lsls	r0, r1, #5
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	4401      	add	r1, r0
 8003f6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f72:	4313      	orrs	r3, r2
 8003f74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d11e      	bne.n	8003fba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	461a      	mov	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	0151      	lsls	r1, r2, #5
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	440a      	add	r2, r1
 8003fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	e092      	b.n	80040e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	0151      	lsls	r1, r2, #5
 8003fcc:	697a      	ldr	r2, [r7, #20]
 8003fce:	440a      	add	r2, r1
 8003fd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d07e      	beq.n	80040e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff8:	6979      	ldr	r1, [r7, #20]
 8003ffa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ffe:	4313      	orrs	r3, r2
 8004000:	634b      	str	r3, [r1, #52]	; 0x34
 8004002:	e06d      	b.n	80040e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401e:	0cdb      	lsrs	r3, r3, #19
 8004020:	04db      	lsls	r3, r3, #19
 8004022:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004042:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004046:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	0151      	lsls	r1, r2, #5
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	440a      	add	r2, r1
 800406e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004072:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004076:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800408e:	6939      	ldr	r1, [r7, #16]
 8004090:	0148      	lsls	r0, r1, #5
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	4401      	add	r1, r0
 8004096:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800409a:	4313      	orrs	r3, r2
 800409c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10d      	bne.n	80040c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d009      	beq.n	80040c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	68d9      	ldr	r1, [r3, #12]
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	460a      	mov	r2, r1
 80040be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b089      	sub	sp, #36	; 0x24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	4611      	mov	r1, r2
 80040fa:	461a      	mov	r2, r3
 80040fc:	460b      	mov	r3, r1
 80040fe:	71fb      	strb	r3, [r7, #7]
 8004100:	4613      	mov	r3, r2
 8004102:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800410c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	d11a      	bne.n	800414a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004114:	88bb      	ldrh	r3, [r7, #4]
 8004116:	3303      	adds	r3, #3
 8004118:	089b      	lsrs	r3, r3, #2
 800411a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800411c:	2300      	movs	r3, #0
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	e00f      	b.n	8004142 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	031a      	lsls	r2, r3, #12
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	4413      	add	r3, r2
 800412a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800412e:	461a      	mov	r2, r3
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	3304      	adds	r3, #4
 800413a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	3301      	adds	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	429a      	cmp	r2, r3
 8004148:	d3eb      	bcc.n	8004122 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3724      	adds	r7, #36	; 0x24
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004158:	b480      	push	{r7}
 800415a:	b089      	sub	sp, #36	; 0x24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	3303      	adds	r3, #3
 8004172:	089b      	lsrs	r3, r3, #2
 8004174:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	e00b      	b.n	8004194 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	601a      	str	r2, [r3, #0]
    pDest++;
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	3304      	adds	r3, #4
 800418c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	3301      	adds	r3, #1
 8004192:	61bb      	str	r3, [r7, #24]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	429a      	cmp	r2, r3
 800419a:	d3ef      	bcc.n	800417c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800419c:	69fb      	ldr	r3, [r7, #28]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3724      	adds	r7, #36	; 0x24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	785b      	ldrb	r3, [r3, #1]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d12c      	bne.n	8004220 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db12      	blt.n	80041fe <USB_EPSetStall+0x54>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00f      	beq.n	80041fe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041fc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68ba      	ldr	r2, [r7, #8]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004218:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e02b      	b.n	8004278 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db12      	blt.n	8004258 <USB_EPSetStall+0xae>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00f      	beq.n	8004258 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	0151      	lsls	r1, r2, #5
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	440a      	add	r2, r1
 800424e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004252:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004256:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004276:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	785b      	ldrb	r3, [r3, #1]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d128      	bne.n	80042f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	0151      	lsls	r1, r2, #5
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	440a      	add	r2, r1
 80042b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	78db      	ldrb	r3, [r3, #3]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d003      	beq.n	80042d2 <USB_EPClearStall+0x4c>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	78db      	ldrb	r3, [r3, #3]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d138      	bne.n	8004344 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e027      	b.n	8004344 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004312:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	78db      	ldrb	r3, [r3, #3]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d003      	beq.n	8004324 <USB_EPClearStall+0x9e>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	78db      	ldrb	r3, [r3, #3]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d10f      	bne.n	8004344 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004342:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004352:	b480      	push	{r7}
 8004354:	b085      	sub	sp, #20
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004370:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004374:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800439e:	b480      	push	{r7}
 80043a0:	b085      	sub	sp, #20
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043b8:	f023 0303 	bic.w	r3, r3, #3
 80043bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043cc:	f023 0302 	bic.w	r3, r3, #2
 80043d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800440e:	f043 0302 	orr.w	r3, r3, #2
 8004412:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4013      	ands	r3, r2
 8004438:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800443a:	68fb      	ldr	r3, [r7, #12]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	0c1b      	lsrs	r3, r3, #16
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	b29b      	uxth	r3, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	015a      	lsls	r2, r3, #5
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	4013      	ands	r3, r2
 80044dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044de:	68bb      	ldr	r3, [r7, #8]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	f003 030f 	and.w	r3, r3, #15
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
 800451c:	01db      	lsls	r3, r3, #7
 800451e:	b2db      	uxtb	r3, r3
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800453a:	68bb      	ldr	r3, [r7, #8]
}
 800453c:	4618      	mov	r0, r3
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f003 0301 	and.w	r3, r3, #1
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004582:	f023 0307 	bic.w	r3, r3, #7
 8004586:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b087      	sub	sp, #28
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	460b      	mov	r3, r1
 80045b6:	607a      	str	r2, [r7, #4]
 80045b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	333c      	adds	r3, #60	; 0x3c
 80045c2:	3304      	adds	r3, #4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	4a26      	ldr	r2, [pc, #152]	; (8004664 <USB_EP0_OutStart+0xb8>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d90a      	bls.n	80045e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045e0:	d101      	bne.n	80045e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	e037      	b.n	8004656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	461a      	mov	r2, r3
 80045ee:	2300      	movs	r3, #0
 80045f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004600:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004614:	f043 0318 	orr.w	r3, r3, #24
 8004618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004628:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800462c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800462e:	7afb      	ldrb	r3, [r7, #11]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d10f      	bne.n	8004654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463a:	461a      	mov	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	4f54300a 	.word	0x4f54300a

08004668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3301      	adds	r3, #1
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4a13      	ldr	r2, [pc, #76]	; (80046cc <USB_CoreReset+0x64>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e01b      	b.n	80046be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	daf2      	bge.n	8004674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f043 0201 	orr.w	r2, r3, #1
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a09      	ldr	r2, [pc, #36]	; (80046cc <USB_CoreReset+0x64>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e006      	b.n	80046be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d0f0      	beq.n	800469e <USB_CoreReset+0x36>

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	00030d40 	.word	0x00030d40

080046d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80046dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80046e0:	f002 f92e 	bl	8006940 <malloc>
 80046e4:	4603      	mov	r3, r0
 80046e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80046f6:	2302      	movs	r3, #2
 80046f8:	e066      	b.n	80047c8 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	7c1b      	ldrb	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d119      	bne.n	800473e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800470a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800470e:	2202      	movs	r2, #2
 8004710:	2181      	movs	r1, #129	; 0x81
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 ff9b 	bl	800664e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800471e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004722:	2202      	movs	r2, #2
 8004724:	2101      	movs	r1, #1
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f001 ff91 	bl	800664e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2210      	movs	r2, #16
 8004738:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800473c:	e016      	b.n	800476c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800473e:	2340      	movs	r3, #64	; 0x40
 8004740:	2202      	movs	r2, #2
 8004742:	2181      	movs	r1, #129	; 0x81
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f001 ff82 	bl	800664e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004750:	2340      	movs	r3, #64	; 0x40
 8004752:	2202      	movs	r2, #2
 8004754:	2101      	movs	r1, #1
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f001 ff79 	bl	800664e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2210      	movs	r2, #16
 8004768:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800476c:	2308      	movs	r3, #8
 800476e:	2203      	movs	r2, #3
 8004770:	2182      	movs	r1, #130	; 0x82
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f001 ff6b 	bl	800664e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	7c1b      	ldrb	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ac:	2101      	movs	r1, #1
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f002 f83c 	bl	800682c <USBD_LL_PrepareReceive>
 80047b4:	e007      	b.n	80047c6 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047bc:	2340      	movs	r3, #64	; 0x40
 80047be:	2101      	movs	r1, #1
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f002 f833 	bl	800682c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80047e0:	2181      	movs	r1, #129	; 0x81
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f001 ff59 	bl	800669a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80047ee:	2101      	movs	r1, #1
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f001 ff52 	bl	800669a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80047fe:	2182      	movs	r1, #130	; 0x82
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f001 ff4a 	bl	800669a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00e      	beq.n	800483e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004830:	4618      	mov	r0, r3
 8004832:	f002 f88d 	bl	8006950 <free>
    pdev->pClassData = NULL;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004858:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800485a:	2300      	movs	r3, #0
 800485c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800485e:	2300      	movs	r3, #0
 8004860:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800486e:	2b00      	cmp	r3, #0
 8004870:	d03a      	beq.n	80048e8 <USBD_CDC_Setup+0xa0>
 8004872:	2b20      	cmp	r3, #32
 8004874:	f040 8097 	bne.w	80049a6 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	88db      	ldrh	r3, [r3, #6]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d029      	beq.n	80048d4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	b25b      	sxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	da11      	bge.n	80048ae <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004896:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	88d2      	ldrh	r2, [r2, #6]
 800489c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800489e:	6939      	ldr	r1, [r7, #16]
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	88db      	ldrh	r3, [r3, #6]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f001 fa9d 	bl	8005de6 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80048ac:	e082      	b.n	80049b4 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	785a      	ldrb	r2, [r3, #1]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	88db      	ldrh	r3, [r3, #6]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80048c4:	6939      	ldr	r1, [r7, #16]
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	88db      	ldrh	r3, [r3, #6]
 80048ca:	461a      	mov	r2, r3
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f001 fab6 	bl	8005e3e <USBD_CtlPrepareRx>
    break;
 80048d2:	e06f      	b.n	80049b4 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	7850      	ldrb	r0, [r2, #1]
 80048e0:	2200      	movs	r2, #0
 80048e2:	6839      	ldr	r1, [r7, #0]
 80048e4:	4798      	blx	r3
    break;
 80048e6:	e065      	b.n	80049b4 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	785b      	ldrb	r3, [r3, #1]
 80048ec:	2b0b      	cmp	r3, #11
 80048ee:	d84f      	bhi.n	8004990 <USBD_CDC_Setup+0x148>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <USBD_CDC_Setup+0xb0>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	08004929 	.word	0x08004929
 80048fc:	0800499f 	.word	0x0800499f
 8004900:	08004991 	.word	0x08004991
 8004904:	08004991 	.word	0x08004991
 8004908:	08004991 	.word	0x08004991
 800490c:	08004991 	.word	0x08004991
 8004910:	08004991 	.word	0x08004991
 8004914:	08004991 	.word	0x08004991
 8004918:	08004991 	.word	0x08004991
 800491c:	08004991 	.word	0x08004991
 8004920:	08004951 	.word	0x08004951
 8004924:	08004979 	.word	0x08004979
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800492e:	2b03      	cmp	r3, #3
 8004930:	d107      	bne.n	8004942 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004932:	f107 030c 	add.w	r3, r7, #12
 8004936:	2202      	movs	r2, #2
 8004938:	4619      	mov	r1, r3
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f001 fa53 	bl	8005de6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004940:	e030      	b.n	80049a4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004942:	6839      	ldr	r1, [r7, #0]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 f9dd 	bl	8005d04 <USBD_CtlError>
        ret = USBD_FAIL;
 800494a:	2303      	movs	r3, #3
 800494c:	75fb      	strb	r3, [r7, #23]
      break;
 800494e:	e029      	b.n	80049a4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004956:	2b03      	cmp	r3, #3
 8004958:	d107      	bne.n	800496a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800495a:	f107 030f 	add.w	r3, r7, #15
 800495e:	2201      	movs	r2, #1
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 fa3f 	bl	8005de6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004968:	e01c      	b.n	80049a4 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800496a:	6839      	ldr	r1, [r7, #0]
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f001 f9c9 	bl	8005d04 <USBD_CtlError>
        ret = USBD_FAIL;
 8004972:	2303      	movs	r3, #3
 8004974:	75fb      	strb	r3, [r7, #23]
      break;
 8004976:	e015      	b.n	80049a4 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800497e:	2b03      	cmp	r3, #3
 8004980:	d00f      	beq.n	80049a2 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004982:	6839      	ldr	r1, [r7, #0]
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f001 f9bd 	bl	8005d04 <USBD_CtlError>
        ret = USBD_FAIL;
 800498a:	2303      	movs	r3, #3
 800498c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800498e:	e008      	b.n	80049a2 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 f9b6 	bl	8005d04 <USBD_CtlError>
      ret = USBD_FAIL;
 8004998:	2303      	movs	r3, #3
 800499a:	75fb      	strb	r3, [r7, #23]
      break;
 800499c:	e002      	b.n	80049a4 <USBD_CDC_Setup+0x15c>
      break;
 800499e:	bf00      	nop
 80049a0:	e008      	b.n	80049b4 <USBD_CDC_Setup+0x16c>
      break;
 80049a2:	bf00      	nop
    }
    break;
 80049a4:	e006      	b.n	80049b4 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80049a6:	6839      	ldr	r1, [r7, #0]
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f001 f9ab 	bl	8005d04 <USBD_CtlError>
    ret = USBD_FAIL;
 80049ae:	2303      	movs	r3, #3
 80049b0:	75fb      	strb	r3, [r7, #23]
    break;
 80049b2:	bf00      	nop
  }

  return (uint8_t)ret;
 80049b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop

080049c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80049d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80049de:	2303      	movs	r3, #3
 80049e0:	e049      	b.n	8004a76 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049e8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80049ea:	78fa      	ldrb	r2, [r7, #3]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3318      	adds	r3, #24
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d029      	beq.n	8004a54 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004a00:	78fa      	ldrb	r2, [r7, #3]
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	3318      	adds	r3, #24
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	78f9      	ldrb	r1, [r7, #3]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	460b      	mov	r3, r1
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	1a5b      	subs	r3, r3, r1
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4403      	add	r3, r0
 8004a20:	3344      	adds	r3, #68	; 0x44
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a28:	fb03 f301 	mul.w	r3, r3, r1
 8004a2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d110      	bne.n	8004a54 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	3318      	adds	r3, #24
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a46:	78f9      	ldrb	r1, [r7, #3]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fecc 	bl	80067ea <USBD_LL_Transmit>
 8004a52:	e00f      	b.n	8004a74 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b084      	sub	sp, #16
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	460b      	mov	r3, r1
 8004a88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d101      	bne.n	8004aa0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e015      	b.n	8004acc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f001 fee2 	bl	800686e <USBD_LL_GetRxDataSize>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ae2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d015      	beq.n	8004b1a <USBD_CDC_EP0_RxReady+0x46>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004af4:	2bff      	cmp	r3, #255	; 0xff
 8004af6:	d010      	beq.n	8004b1a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004b06:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b0e:	b292      	uxth	r2, r2
 8004b10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2243      	movs	r2, #67	; 0x43
 8004b30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004b32:	4b03      	ldr	r3, [pc, #12]	; (8004b40 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	20000094 	.word	0x20000094

08004b44 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2243      	movs	r2, #67	; 0x43
 8004b50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004b52:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	20000050 	.word	0x20000050

08004b64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2243      	movs	r2, #67	; 0x43
 8004b70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004b72:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	200000d8 	.word	0x200000d8

08004b84 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	220a      	movs	r2, #10
 8004b90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004b92:	4b03      	ldr	r3, [pc, #12]	; (8004ba0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	2000000c 	.word	0x2000000c

08004ba4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e004      	b.n	8004bc2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b087      	sub	sp, #28
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004be0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	371c      	adds	r7, #28
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c10:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c36:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e01a      	b.n	8004c80 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d114      	bne.n	8004c7e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004c72:	2181      	movs	r1, #129	; 0x81
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 fdb8 	bl	80067ea <USBD_LL_Transmit>

    ret = USBD_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c96:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e016      	b.n	8004cd4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	7c1b      	ldrb	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d109      	bne.n	8004cc2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cb8:	2101      	movs	r1, #1
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 fdb6 	bl	800682c <USBD_LL_PrepareReceive>
 8004cc0:	e007      	b.n	8004cd2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cc8:	2340      	movs	r3, #64	; 0x40
 8004cca:	2101      	movs	r1, #1
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f001 fdad 	bl	800682c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e025      	b.n	8004d40 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	79fa      	ldrb	r2, [r7, #7]
 8004d32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f001 fc23 	bl	8006580 <USBD_LL_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	e010      	b.n	8004d82 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	f107 020e 	add.w	r2, r7, #14
 8004d74:	4610      	mov	r0, r2
 8004d76:	4798      	blx	r3
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b082      	sub	sp, #8
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 fc40 	bl	8006618 <USBD_LL_Start>
 8004d98:	4603      	mov	r3, r0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d009      	beq.n	8004de6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	78fa      	ldrb	r2, [r7, #3]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	4798      	blx	r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	4611      	mov	r1, r2
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	4798      	blx	r3
  }

  return USBD_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e30:	6839      	ldr	r1, [r7, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 ff2c 	bl	8005c90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004e46:	461a      	mov	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004e54:	f003 031f 	and.w	r3, r3, #31
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d00e      	beq.n	8004e7a <USBD_LL_SetupStage+0x5a>
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d302      	bcc.n	8004e66 <USBD_LL_SetupStage+0x46>
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d014      	beq.n	8004e8e <USBD_LL_SetupStage+0x6e>
 8004e64:	e01d      	b.n	8004ea2 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa18 	bl	80052a4 <USBD_StdDevReq>
 8004e74:	4603      	mov	r3, r0
 8004e76:	73fb      	strb	r3, [r7, #15]
      break;
 8004e78:	e020      	b.n	8004ebc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e80:	4619      	mov	r1, r3
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa7c 	bl	8005380 <USBD_StdItfReq>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e8c:	e016      	b.n	8004ebc <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fab8 	bl	800540c <USBD_StdEPReq>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004ea0:	e00c      	b.n	8004ebc <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004ea8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f001 fc11 	bl	80066d8 <USBD_LL_StallEP>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8004eba:	bf00      	nop
  }

  return ret;
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b086      	sub	sp, #24
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	460b      	mov	r3, r1
 8004ed0:	607a      	str	r2, [r7, #4]
 8004ed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004ed4:	7afb      	ldrb	r3, [r7, #11]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d137      	bne.n	8004f4a <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ee0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d14a      	bne.n	8004f82 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d913      	bls.n	8004f20 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	1ad2      	subs	r2, r2, r3
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	bf28      	it	cs
 8004f12:	4613      	movcs	r3, r2
 8004f14:	461a      	mov	r2, r3
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 ffad 	bl	8005e78 <USBD_CtlContinueRx>
 8004f1e:	e030      	b.n	8004f82 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d105      	bne.n	8004f42 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 ffa9 	bl	8005e9a <USBD_CtlSendStatus>
 8004f48:	e01b      	b.n	8004f82 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d013      	beq.n	8004f7e <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d10e      	bne.n	8004f7e <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	7afa      	ldrb	r2, [r7, #11]
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	4798      	blx	r3
 8004f70:	4603      	mov	r3, r0
 8004f72:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004f7a:	7dfb      	ldrb	r3, [r7, #23]
 8004f7c:	e002      	b.n	8004f84 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e000      	b.n	8004f84 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	460b      	mov	r3, r1
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004f9a:	7afb      	ldrb	r3, [r7, #11]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d16a      	bne.n	8005076 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3314      	adds	r3, #20
 8004fa4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d155      	bne.n	800505c <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	689a      	ldr	r2, [r3, #8]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d914      	bls.n	8004fe6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 ff22 	bl	8005e1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2100      	movs	r1, #0
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f001 fc24 	bl	800682c <USBD_LL_PrepareReceive>
 8004fe4:	e03a      	b.n	800505c <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	68da      	ldr	r2, [r3, #12]
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d11c      	bne.n	800502c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d316      	bcc.n	800502c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005008:	429a      	cmp	r2, r3
 800500a:	d20f      	bcs.n	800502c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800500c:	2200      	movs	r2, #0
 800500e:	2100      	movs	r1, #0
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 ff03 	bl	8005e1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800501e:	2300      	movs	r3, #0
 8005020:	2200      	movs	r2, #0
 8005022:	2100      	movs	r1, #0
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f001 fc01 	bl	800682c <USBD_LL_PrepareReceive>
 800502a:	e017      	b.n	800505c <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800503e:	2b03      	cmp	r3, #3
 8005040:	d105      	bne.n	800504e <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800504e:	2180      	movs	r1, #128	; 0x80
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f001 fb41 	bl	80066d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 ff32 	bl	8005ec0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d123      	bne.n	80050ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f7ff fe9b 	bl	8004da2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005074:	e01b      	b.n	80050ae <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d013      	beq.n	80050aa <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005088:	2b03      	cmp	r3, #3
 800508a:	d10e      	bne.n	80050aa <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	7afa      	ldrb	r2, [r7, #11]
 8005096:	4611      	mov	r1, r2
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	4798      	blx	r3
 800509c:	4603      	mov	r3, r0
 800509e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
 80050a8:	e002      	b.n	80050b0 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e000      	b.n	80050b0 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d009      	beq.n	80050fc <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6852      	ldr	r2, [r2, #4]
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	4611      	mov	r1, r2
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	2200      	movs	r2, #0
 8005100:	2100      	movs	r1, #0
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 faa3 	bl	800664e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2240      	movs	r2, #64	; 0x40
 8005114:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005118:	2340      	movs	r3, #64	; 0x40
 800511a:	2200      	movs	r2, #0
 800511c:	2180      	movs	r1, #128	; 0x80
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f001 fa95 	bl	800664e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2240      	movs	r2, #64	; 0x40
 800512e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	460b      	mov	r3, r1
 8005144:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	78fa      	ldrb	r2, [r7, #3]
 800514a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2204      	movs	r2, #4
 8005172:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005192:	2b04      	cmp	r3, #4
 8005194:	d105      	bne.n	80051a2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d10b      	bne.n	80051da <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d009      	beq.n	800525c <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6852      	ldr	r2, [r2, #4]
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	4611      	mov	r1, r2
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	4798      	blx	r3
  }

  return USBD_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005266:	b480      	push	{r7}
 8005268:	b087      	sub	sp, #28
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	3301      	adds	r3, #1
 800527c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005284:	8a3b      	ldrh	r3, [r7, #16]
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	b21a      	sxth	r2, r3
 800528a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800528e:	4313      	orrs	r3, r2
 8005290:	b21b      	sxth	r3, r3
 8005292:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005294:	89fb      	ldrh	r3, [r7, #14]
}
 8005296:	4618      	mov	r0, r3
 8005298:	371c      	adds	r7, #28
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
	...

080052a4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d004      	beq.n	80052c8 <USBD_StdDevReq+0x24>
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d002      	beq.n	80052c8 <USBD_StdDevReq+0x24>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <USBD_StdDevReq+0x38>
 80052c6:	e050      	b.n	800536a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
 80052d6:	4603      	mov	r3, r0
 80052d8:	73fb      	strb	r3, [r7, #15]
    break;
 80052da:	e04b      	b.n	8005374 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	785b      	ldrb	r3, [r3, #1]
 80052e0:	2b09      	cmp	r3, #9
 80052e2:	d83c      	bhi.n	800535e <USBD_StdDevReq+0xba>
 80052e4:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <USBD_StdDevReq+0x48>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005341 	.word	0x08005341
 80052f0:	08005355 	.word	0x08005355
 80052f4:	0800535f 	.word	0x0800535f
 80052f8:	0800534b 	.word	0x0800534b
 80052fc:	0800535f 	.word	0x0800535f
 8005300:	0800531f 	.word	0x0800531f
 8005304:	08005315 	.word	0x08005315
 8005308:	0800535f 	.word	0x0800535f
 800530c:	08005337 	.word	0x08005337
 8005310:	08005329 	.word	0x08005329
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8005314:	6839      	ldr	r1, [r7, #0]
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f9ce 	bl	80056b8 <USBD_GetDescriptor>
      break;
 800531c:	e024      	b.n	8005368 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fb33 	bl	800598c <USBD_SetAddress>
      break;
 8005326:	e01f      	b.n	8005368 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fb70 	bl	8005a10 <USBD_SetConfig>
 8005330:	4603      	mov	r3, r0
 8005332:	73fb      	strb	r3, [r7, #15]
      break;
 8005334:	e018      	b.n	8005368 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fc0d 	bl	8005b58 <USBD_GetConfig>
      break;
 800533e:	e013      	b.n	8005368 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005340:	6839      	ldr	r1, [r7, #0]
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 fc3c 	bl	8005bc0 <USBD_GetStatus>
      break;
 8005348:	e00e      	b.n	8005368 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800534a:	6839      	ldr	r1, [r7, #0]
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fc6a 	bl	8005c26 <USBD_SetFeature>
      break;
 8005352:	e009      	b.n	8005368 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fc79 	bl	8005c4e <USBD_ClrFeature>
      break;
 800535c:	e004      	b.n	8005368 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800535e:	6839      	ldr	r1, [r7, #0]
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fccf 	bl	8005d04 <USBD_CtlError>
      break;
 8005366:	bf00      	nop
    }
    break;
 8005368:	e004      	b.n	8005374 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800536a:	6839      	ldr	r1, [r7, #0]
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fcc9 	bl	8005d04 <USBD_CtlError>
    break;
 8005372:	bf00      	nop
  }

  return ret;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop

08005380 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005396:	2b20      	cmp	r3, #32
 8005398:	d003      	beq.n	80053a2 <USBD_StdItfReq+0x22>
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d001      	beq.n	80053a2 <USBD_StdItfReq+0x22>
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d12a      	bne.n	80053f8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a8:	3b01      	subs	r3, #1
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d81d      	bhi.n	80053ea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	889b      	ldrh	r3, [r3, #4]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d813      	bhi.n	80053e0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
 80053c6:	4603      	mov	r3, r0
 80053c8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	88db      	ldrh	r3, [r3, #6]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d110      	bne.n	80053f4 <USBD_StdItfReq+0x74>
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10d      	bne.n	80053f4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fd5e 	bl	8005e9a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80053de:	e009      	b.n	80053f4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fc8e 	bl	8005d04 <USBD_CtlError>
      break;
 80053e8:	e004      	b.n	80053f4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fc89 	bl	8005d04 <USBD_CtlError>
      break;
 80053f2:	e000      	b.n	80053f6 <USBD_StdItfReq+0x76>
      break;
 80053f4:	bf00      	nop
    }
    break;
 80053f6:	e004      	b.n	8005402 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fc82 	bl	8005d04 <USBD_CtlError>
    break;
 8005400:	bf00      	nop
  }

  return ret;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	889b      	ldrh	r3, [r3, #4]
 800541e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005428:	2b20      	cmp	r3, #32
 800542a:	d004      	beq.n	8005436 <USBD_StdEPReq+0x2a>
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d002      	beq.n	8005436 <USBD_StdEPReq+0x2a>
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00a      	beq.n	800544a <USBD_StdEPReq+0x3e>
 8005434:	e135      	b.n	80056a2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	4798      	blx	r3
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]
    break;
 8005448:	e130      	b.n	80056ac <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	785b      	ldrb	r3, [r3, #1]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d03e      	beq.n	80054d0 <USBD_StdEPReq+0xc4>
 8005452:	2b03      	cmp	r3, #3
 8005454:	d002      	beq.n	800545c <USBD_StdEPReq+0x50>
 8005456:	2b00      	cmp	r3, #0
 8005458:	d077      	beq.n	800554a <USBD_StdEPReq+0x13e>
 800545a:	e11c      	b.n	8005696 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005462:	2b02      	cmp	r3, #2
 8005464:	d002      	beq.n	800546c <USBD_StdEPReq+0x60>
 8005466:	2b03      	cmp	r3, #3
 8005468:	d015      	beq.n	8005496 <USBD_StdEPReq+0x8a>
 800546a:	e02b      	b.n	80054c4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800546c:	7bbb      	ldrb	r3, [r7, #14]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00c      	beq.n	800548c <USBD_StdEPReq+0x80>
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	d009      	beq.n	800548c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005478:	7bbb      	ldrb	r3, [r7, #14]
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 f92b 	bl	80066d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005482:	2180      	movs	r1, #128	; 0x80
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f001 f927 	bl	80066d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800548a:	e020      	b.n	80054ce <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fc38 	bl	8005d04 <USBD_CtlError>
        break;
 8005494:	e01b      	b.n	80054ce <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	885b      	ldrh	r3, [r3, #2]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10e      	bne.n	80054bc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800549e:	7bbb      	ldrb	r3, [r7, #14]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00b      	beq.n	80054bc <USBD_StdEPReq+0xb0>
 80054a4:	7bbb      	ldrb	r3, [r7, #14]
 80054a6:	2b80      	cmp	r3, #128	; 0x80
 80054a8:	d008      	beq.n	80054bc <USBD_StdEPReq+0xb0>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	88db      	ldrh	r3, [r3, #6]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d104      	bne.n	80054bc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80054b2:	7bbb      	ldrb	r3, [r7, #14]
 80054b4:	4619      	mov	r1, r3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f001 f90e 	bl	80066d8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fcec 	bl	8005e9a <USBD_CtlSendStatus>

        break;
 80054c2:	e004      	b.n	80054ce <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80054c4:	6839      	ldr	r1, [r7, #0]
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fc1c 	bl	8005d04 <USBD_CtlError>
        break;
 80054cc:	bf00      	nop
      }
      break;
 80054ce:	e0e7      	b.n	80056a0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d002      	beq.n	80054e0 <USBD_StdEPReq+0xd4>
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d015      	beq.n	800550a <USBD_StdEPReq+0xfe>
 80054de:	e02d      	b.n	800553c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054e0:	7bbb      	ldrb	r3, [r7, #14]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00c      	beq.n	8005500 <USBD_StdEPReq+0xf4>
 80054e6:	7bbb      	ldrb	r3, [r7, #14]
 80054e8:	2b80      	cmp	r3, #128	; 0x80
 80054ea:	d009      	beq.n	8005500 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 f8f1 	bl	80066d8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f001 f8ed 	bl	80066d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80054fe:	e023      	b.n	8005548 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fbfe 	bl	8005d04 <USBD_CtlError>
        break;
 8005508:	e01e      	b.n	8005548 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	885b      	ldrh	r3, [r3, #2]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d119      	bne.n	8005546 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 f8f8 	bl	8006716 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 fcb7 	bl	8005e9a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	6839      	ldr	r1, [r7, #0]
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	4798      	blx	r3
        }
        break;
 800553a:	e004      	b.n	8005546 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fbe0 	bl	8005d04 <USBD_CtlError>
        break;
 8005544:	e000      	b.n	8005548 <USBD_StdEPReq+0x13c>
        break;
 8005546:	bf00      	nop
      }
      break;
 8005548:	e0aa      	b.n	80056a0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005550:	2b02      	cmp	r3, #2
 8005552:	d002      	beq.n	800555a <USBD_StdEPReq+0x14e>
 8005554:	2b03      	cmp	r3, #3
 8005556:	d032      	beq.n	80055be <USBD_StdEPReq+0x1b2>
 8005558:	e097      	b.n	800568a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800555a:	7bbb      	ldrb	r3, [r7, #14]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d007      	beq.n	8005570 <USBD_StdEPReq+0x164>
 8005560:	7bbb      	ldrb	r3, [r7, #14]
 8005562:	2b80      	cmp	r3, #128	; 0x80
 8005564:	d004      	beq.n	8005570 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005566:	6839      	ldr	r1, [r7, #0]
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fbcb 	bl	8005d04 <USBD_CtlError>
          break;
 800556e:	e091      	b.n	8005694 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005570:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005574:	2b00      	cmp	r3, #0
 8005576:	da0b      	bge.n	8005590 <USBD_StdEPReq+0x184>
 8005578:	7bbb      	ldrb	r3, [r7, #14]
 800557a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800557e:	4613      	mov	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	3310      	adds	r3, #16
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	4413      	add	r3, r2
 800558c:	3304      	adds	r3, #4
 800558e:	e00b      	b.n	80055a8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005590:	7bbb      	ldrb	r3, [r7, #14]
 8005592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	3304      	adds	r3, #4
 80055a8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2202      	movs	r2, #2
 80055b4:	4619      	mov	r1, r3
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fc15 	bl	8005de6 <USBD_CtlSendData>
        break;
 80055bc:	e06a      	b.n	8005694 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80055be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da11      	bge.n	80055ea <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	f003 020f 	and.w	r2, r3, #15
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	3324      	adds	r3, #36	; 0x24
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d117      	bne.n	8005610 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80055e0:	6839      	ldr	r1, [r7, #0]
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fb8e 	bl	8005d04 <USBD_CtlError>
            break;
 80055e8:	e054      	b.n	8005694 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80055ea:	7bbb      	ldrb	r3, [r7, #14]
 80055ec:	f003 020f 	and.w	r2, r3, #15
 80055f0:	6879      	ldr	r1, [r7, #4]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	440b      	add	r3, r1
 80055fc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d104      	bne.n	8005610 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f000 fb7b 	bl	8005d04 <USBD_CtlError>
            break;
 800560e:	e041      	b.n	8005694 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da0b      	bge.n	8005630 <USBD_StdEPReq+0x224>
 8005618:	7bbb      	ldrb	r3, [r7, #14]
 800561a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	3310      	adds	r3, #16
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	e00b      	b.n	8005648 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005630:	7bbb      	ldrb	r3, [r7, #14]
 8005632:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005636:	4613      	mov	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	3304      	adds	r3, #4
 8005648:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800564a:	7bbb      	ldrb	r3, [r7, #14]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <USBD_StdEPReq+0x24a>
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d103      	bne.n	800565e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	e00e      	b.n	800567c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800565e:	7bbb      	ldrb	r3, [r7, #14]
 8005660:	4619      	mov	r1, r3
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 f876 	bl	8006754 <USBD_LL_IsStallEP>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2201      	movs	r2, #1
 8005672:	601a      	str	r2, [r3, #0]
 8005674:	e002      	b.n	800567c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2202      	movs	r2, #2
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fbaf 	bl	8005de6 <USBD_CtlSendData>
          break;
 8005688:	e004      	b.n	8005694 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 fb39 	bl	8005d04 <USBD_CtlError>
        break;
 8005692:	bf00      	nop
      }
      break;
 8005694:	e004      	b.n	80056a0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005696:	6839      	ldr	r1, [r7, #0]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fb33 	bl	8005d04 <USBD_CtlError>
      break;
 800569e:	bf00      	nop
    }
    break;
 80056a0:	e004      	b.n	80056ac <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80056a2:	6839      	ldr	r1, [r7, #0]
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb2d 	bl	8005d04 <USBD_CtlError>
    break;
 80056aa:	bf00      	nop
  }

  return ret;
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056c2:	2300      	movs	r3, #0
 80056c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80056ca:	2300      	movs	r3, #0
 80056cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	885b      	ldrh	r3, [r3, #2]
 80056d2:	0a1b      	lsrs	r3, r3, #8
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	2b06      	cmp	r3, #6
 80056da:	f200 8128 	bhi.w	800592e <USBD_GetDescriptor+0x276>
 80056de:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <USBD_GetDescriptor+0x2c>)
 80056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e4:	08005701 	.word	0x08005701
 80056e8:	08005719 	.word	0x08005719
 80056ec:	08005759 	.word	0x08005759
 80056f0:	0800592f 	.word	0x0800592f
 80056f4:	0800592f 	.word	0x0800592f
 80056f8:	080058cf 	.word	0x080058cf
 80056fc:	080058fb 	.word	0x080058fb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	7c12      	ldrb	r2, [r2, #16]
 800570c:	f107 0108 	add.w	r1, r7, #8
 8005710:	4610      	mov	r0, r2
 8005712:	4798      	blx	r3
 8005714:	60f8      	str	r0, [r7, #12]
    break;
 8005716:	e112      	b.n	800593e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	7c1b      	ldrb	r3, [r3, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10d      	bne.n	800573c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	f107 0208 	add.w	r2, r7, #8
 800572c:	4610      	mov	r0, r2
 800572e:	4798      	blx	r3
 8005730:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	2202      	movs	r2, #2
 8005738:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800573a:	e100      	b.n	800593e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005744:	f107 0208 	add.w	r2, r7, #8
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
 800574c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	3301      	adds	r3, #1
 8005752:	2202      	movs	r2, #2
 8005754:	701a      	strb	r2, [r3, #0]
    break;
 8005756:	e0f2      	b.n	800593e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	885b      	ldrh	r3, [r3, #2]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b05      	cmp	r3, #5
 8005760:	f200 80ac 	bhi.w	80058bc <USBD_GetDescriptor+0x204>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <USBD_GetDescriptor+0xb4>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	08005785 	.word	0x08005785
 8005770:	080057b9 	.word	0x080057b9
 8005774:	080057ed 	.word	0x080057ed
 8005778:	08005821 	.word	0x08005821
 800577c:	08005855 	.word	0x08005855
 8005780:	08005889 	.word	0x08005889
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	7c12      	ldrb	r2, [r2, #16]
 800579c:	f107 0108 	add.w	r1, r7, #8
 80057a0:	4610      	mov	r0, r2
 80057a2:	4798      	blx	r3
 80057a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80057a6:	e091      	b.n	80058cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 faaa 	bl	8005d04 <USBD_CtlError>
        err++;
 80057b0:	7afb      	ldrb	r3, [r7, #11]
 80057b2:	3301      	adds	r3, #1
 80057b4:	72fb      	strb	r3, [r7, #11]
      break;
 80057b6:	e089      	b.n	80058cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00b      	beq.n	80057dc <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	7c12      	ldrb	r2, [r2, #16]
 80057d0:	f107 0108 	add.w	r1, r7, #8
 80057d4:	4610      	mov	r0, r2
 80057d6:	4798      	blx	r3
 80057d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80057da:	e077      	b.n	80058cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fa90 	bl	8005d04 <USBD_CtlError>
        err++;
 80057e4:	7afb      	ldrb	r3, [r7, #11]
 80057e6:	3301      	adds	r3, #1
 80057e8:	72fb      	strb	r3, [r7, #11]
      break;
 80057ea:	e06f      	b.n	80058cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00b      	beq.n	8005810 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	7c12      	ldrb	r2, [r2, #16]
 8005804:	f107 0108 	add.w	r1, r7, #8
 8005808:	4610      	mov	r0, r2
 800580a:	4798      	blx	r3
 800580c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800580e:	e05d      	b.n	80058cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa76 	bl	8005d04 <USBD_CtlError>
        err++;
 8005818:	7afb      	ldrb	r3, [r7, #11]
 800581a:	3301      	adds	r3, #1
 800581c:	72fb      	strb	r3, [r7, #11]
      break;
 800581e:	e055      	b.n	80058cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	7c12      	ldrb	r2, [r2, #16]
 8005838:	f107 0108 	add.w	r1, r7, #8
 800583c:	4610      	mov	r0, r2
 800583e:	4798      	blx	r3
 8005840:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005842:	e043      	b.n	80058cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa5c 	bl	8005d04 <USBD_CtlError>
        err++;
 800584c:	7afb      	ldrb	r3, [r7, #11]
 800584e:	3301      	adds	r3, #1
 8005850:	72fb      	strb	r3, [r7, #11]
      break;
 8005852:	e03b      	b.n	80058cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00b      	beq.n	8005878 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	7c12      	ldrb	r2, [r2, #16]
 800586c:	f107 0108 	add.w	r1, r7, #8
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
 8005874:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005876:	e029      	b.n	80058cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa42 	bl	8005d04 <USBD_CtlError>
        err++;
 8005880:	7afb      	ldrb	r3, [r7, #11]
 8005882:	3301      	adds	r3, #1
 8005884:	72fb      	strb	r3, [r7, #11]
      break;
 8005886:	e021      	b.n	80058cc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00b      	beq.n	80058ac <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	7c12      	ldrb	r2, [r2, #16]
 80058a0:	f107 0108 	add.w	r1, r7, #8
 80058a4:	4610      	mov	r0, r2
 80058a6:	4798      	blx	r3
 80058a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058aa:	e00f      	b.n	80058cc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fa28 	bl	8005d04 <USBD_CtlError>
        err++;
 80058b4:	7afb      	ldrb	r3, [r7, #11]
 80058b6:	3301      	adds	r3, #1
 80058b8:	72fb      	strb	r3, [r7, #11]
      break;
 80058ba:	e007      	b.n	80058cc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fa20 	bl	8005d04 <USBD_CtlError>
      err++;
 80058c4:	7afb      	ldrb	r3, [r7, #11]
 80058c6:	3301      	adds	r3, #1
 80058c8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80058ca:	bf00      	nop
    }
    break;
 80058cc:	e037      	b.n	800593e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7c1b      	ldrb	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d109      	bne.n	80058ea <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	f107 0208 	add.w	r2, r7, #8
 80058e2:	4610      	mov	r0, r2
 80058e4:	4798      	blx	r3
 80058e6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80058e8:	e029      	b.n	800593e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fa09 	bl	8005d04 <USBD_CtlError>
      err++;
 80058f2:	7afb      	ldrb	r3, [r7, #11]
 80058f4:	3301      	adds	r3, #1
 80058f6:	72fb      	strb	r3, [r7, #11]
    break;
 80058f8:	e021      	b.n	800593e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	7c1b      	ldrb	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	f107 0208 	add.w	r2, r7, #8
 800590e:	4610      	mov	r0, r2
 8005910:	4798      	blx	r3
 8005912:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3301      	adds	r3, #1
 8005918:	2207      	movs	r2, #7
 800591a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800591c:	e00f      	b.n	800593e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f9ef 	bl	8005d04 <USBD_CtlError>
      err++;
 8005926:	7afb      	ldrb	r3, [r7, #11]
 8005928:	3301      	adds	r3, #1
 800592a:	72fb      	strb	r3, [r7, #11]
    break;
 800592c:	e007      	b.n	800593e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f9e7 	bl	8005d04 <USBD_CtlError>
    err++;
 8005936:	7afb      	ldrb	r3, [r7, #11]
 8005938:	3301      	adds	r3, #1
 800593a:	72fb      	strb	r3, [r7, #11]
    break;
 800593c:	bf00      	nop
  }

  if (err != 0U)
 800593e:	7afb      	ldrb	r3, [r7, #11]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11e      	bne.n	8005982 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	88db      	ldrh	r3, [r3, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d016      	beq.n	800597a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800594c:	893b      	ldrh	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00e      	beq.n	8005970 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	88da      	ldrh	r2, [r3, #6]
 8005956:	893b      	ldrh	r3, [r7, #8]
 8005958:	4293      	cmp	r3, r2
 800595a:	bf28      	it	cs
 800595c:	4613      	movcs	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005962:	893b      	ldrh	r3, [r7, #8]
 8005964:	461a      	mov	r2, r3
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa3c 	bl	8005de6 <USBD_CtlSendData>
 800596e:	e009      	b.n	8005984 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005970:	6839      	ldr	r1, [r7, #0]
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f9c6 	bl	8005d04 <USBD_CtlError>
 8005978:	e004      	b.n	8005984 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fa8d 	bl	8005e9a <USBD_CtlSendStatus>
 8005980:	e000      	b.n	8005984 <USBD_GetDescriptor+0x2cc>
    return;
 8005982:	bf00      	nop
    }
  }
}
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop

0800598c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	889b      	ldrh	r3, [r3, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d130      	bne.n	8005a00 <USBD_SetAddress+0x74>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	88db      	ldrh	r3, [r3, #6]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d12c      	bne.n	8005a00 <USBD_SetAddress+0x74>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	885b      	ldrh	r3, [r3, #2]
 80059aa:	2b7f      	cmp	r3, #127	; 0x7f
 80059ac:	d828      	bhi.n	8005a00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	885b      	ldrh	r3, [r3, #2]
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d104      	bne.n	80059ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f99c 	bl	8005d04 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059cc:	e01c      	b.n	8005a08 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	7bfa      	ldrb	r2, [r7, #15]
 80059d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	4619      	mov	r1, r3
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fee6 	bl	80067ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 fa5a 	bl	8005e9a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d004      	beq.n	80059f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059f4:	e008      	b.n	8005a08 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059fe:	e003      	b.n	8005a08 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f97e 	bl	8005d04 <USBD_CtlError>
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	885b      	ldrh	r3, [r3, #2]
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	4b4b      	ldr	r3, [pc, #300]	; (8005b54 <USBD_SetConfig+0x144>)
 8005a26:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005a28:	4b4a      	ldr	r3, [pc, #296]	; (8005b54 <USBD_SetConfig+0x144>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d905      	bls.n	8005a3c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005a30:	6839      	ldr	r1, [r7, #0]
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f966 	bl	8005d04 <USBD_CtlError>
    return USBD_FAIL;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e087      	b.n	8005b4c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d002      	beq.n	8005a4c <USBD_SetConfig+0x3c>
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d025      	beq.n	8005a96 <USBD_SetConfig+0x86>
 8005a4a:	e071      	b.n	8005b30 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005a4c:	4b41      	ldr	r3, [pc, #260]	; (8005b54 <USBD_SetConfig+0x144>)
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01c      	beq.n	8005a8e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005a54:	4b3f      	ldr	r3, [pc, #252]	; (8005b54 <USBD_SetConfig+0x144>)
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005a5e:	4b3d      	ldr	r3, [pc, #244]	; (8005b54 <USBD_SetConfig+0x144>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff f9a7 	bl	8004db8 <USBD_SetClassConfig>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d004      	beq.n	8005a7e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f944 	bl	8005d04 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005a7c:	e065      	b.n	8005b4a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa0b 	bl	8005e9a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2203      	movs	r2, #3
 8005a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005a8c:	e05d      	b.n	8005b4a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fa03 	bl	8005e9a <USBD_CtlSendStatus>
    break;
 8005a94:	e059      	b.n	8005b4a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005a96:	4b2f      	ldr	r3, [pc, #188]	; (8005b54 <USBD_SetConfig+0x144>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d112      	bne.n	8005ac4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005aa6:	4b2b      	ldr	r3, [pc, #172]	; (8005b54 <USBD_SetConfig+0x144>)
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005ab0:	4b28      	ldr	r3, [pc, #160]	; (8005b54 <USBD_SetConfig+0x144>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff f99a 	bl	8004df0 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f9ec 	bl	8005e9a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005ac2:	e042      	b.n	8005b4a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005ac4:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <USBD_SetConfig+0x144>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d02a      	beq.n	8005b28 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f7ff f988 	bl	8004df0 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005ae0:	4b1c      	ldr	r3, [pc, #112]	; (8005b54 <USBD_SetConfig+0x144>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <USBD_SetConfig+0x144>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff f961 	bl	8004db8 <USBD_SetClassConfig>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00f      	beq.n	8005b20 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005b00:	6839      	ldr	r1, [r7, #0]
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f8fe 	bl	8005d04 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff f96d 	bl	8004df0 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005b1e:	e014      	b.n	8005b4a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f9ba 	bl	8005e9a <USBD_CtlSendStatus>
    break;
 8005b26:	e010      	b.n	8005b4a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f9b6 	bl	8005e9a <USBD_CtlSendStatus>
    break;
 8005b2e:	e00c      	b.n	8005b4a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f8e6 	bl	8005d04 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005b38:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <USBD_SetConfig+0x144>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f7ff f956 	bl	8004df0 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005b44:	2303      	movs	r3, #3
 8005b46:	73fb      	strb	r3, [r7, #15]
    break;
 8005b48:	bf00      	nop
  }

  return ret;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20000208 	.word	0x20000208

08005b58 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	88db      	ldrh	r3, [r3, #6]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d004      	beq.n	8005b74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b6a:	6839      	ldr	r1, [r7, #0]
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f8c9 	bl	8005d04 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005b72:	e021      	b.n	8005bb8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	db17      	blt.n	8005bae <USBD_GetConfig+0x56>
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	dd02      	ble.n	8005b88 <USBD_GetConfig+0x30>
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	d00b      	beq.n	8005b9e <USBD_GetConfig+0x46>
 8005b86:	e012      	b.n	8005bae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	3308      	adds	r3, #8
 8005b92:	2201      	movs	r2, #1
 8005b94:	4619      	mov	r1, r3
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f925 	bl	8005de6 <USBD_CtlSendData>
      break;
 8005b9c:	e00c      	b.n	8005bb8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f91d 	bl	8005de6 <USBD_CtlSendData>
      break;
 8005bac:	e004      	b.n	8005bb8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f8a7 	bl	8005d04 <USBD_CtlError>
      break;
 8005bb6:	bf00      	nop
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d81e      	bhi.n	8005c14 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	88db      	ldrh	r3, [r3, #6]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d004      	beq.n	8005be8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f88f 	bl	8005d04 <USBD_CtlError>
      break;
 8005be6:	e01a      	b.n	8005c1e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f043 0202 	orr.w	r2, r3, #2
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	330c      	adds	r3, #12
 8005c08:	2202      	movs	r2, #2
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f8ea 	bl	8005de6 <USBD_CtlSendData>
    break;
 8005c12:	e004      	b.n	8005c1e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005c14:	6839      	ldr	r1, [r7, #0]
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f874 	bl	8005d04 <USBD_CtlError>
    break;
 8005c1c:	bf00      	nop
  }
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	885b      	ldrh	r3, [r3, #2]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d106      	bne.n	8005c46 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f92a 	bl	8005e9a <USBD_CtlSendStatus>
  }
}
 8005c46:	bf00      	nop
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	2b02      	cmp	r3, #2
 8005c62:	d80b      	bhi.n	8005c7c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	885b      	ldrh	r3, [r3, #2]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d10c      	bne.n	8005c86 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f910 	bl	8005e9a <USBD_CtlSendStatus>
      }
      break;
 8005c7a:	e004      	b.n	8005c86 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005c7c:	6839      	ldr	r1, [r7, #0]
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f840 	bl	8005d04 <USBD_CtlError>
      break;
 8005c84:	e000      	b.n	8005c88 <USBD_ClrFeature+0x3a>
      break;
 8005c86:	bf00      	nop
  }
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	781a      	ldrb	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	781a      	ldrb	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f7ff fad3 	bl	8005266 <SWAPBYTE>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f7ff fac6 	bl	8005266 <SWAPBYTE>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f7ff fab9 	bl	8005266 <SWAPBYTE>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	80da      	strh	r2, [r3, #6]
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d0e:	2180      	movs	r1, #128	; 0x80
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fce1 	bl	80066d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005d16:	2100      	movs	r1, #0
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 fcdd 	bl	80066d8 <USBD_LL_StallEP>
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b086      	sub	sp, #24
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	60f8      	str	r0, [r7, #12]
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d036      	beq.n	8005daa <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005d40:	6938      	ldr	r0, [r7, #16]
 8005d42:	f000 f836 	bl	8005db2 <USBD_GetLen>
 8005d46:	4603      	mov	r3, r0
 8005d48:	3301      	adds	r3, #1
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4413      	add	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	7812      	ldrb	r2, [r2, #0]
 8005d5e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
 8005d62:	3301      	adds	r3, #1
 8005d64:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	701a      	strb	r2, [r3, #0]
  idx++;
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	3301      	adds	r3, #1
 8005d74:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005d76:	e013      	b.n	8005da0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	7812      	ldrb	r2, [r2, #0]
 8005d82:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	3301      	adds	r3, #1
 8005d88:	613b      	str	r3, [r7, #16]
    idx++;
 8005d8a:	7dfb      	ldrb	r3, [r7, #23]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	4413      	add	r3, r2
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]
    idx++;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e7      	bne.n	8005d78 <USBD_GetString+0x52>
 8005da8:	e000      	b.n	8005dac <USBD_GetString+0x86>
    return;
 8005daa:	bf00      	nop
  }
}
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005dc2:	e005      	b.n	8005dd0 <USBD_GetLen+0x1e>
  {
    len++;
 8005dc4:	7bfb      	ldrb	r3, [r7, #15]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1f5      	bne.n	8005dc4 <USBD_GetLen+0x12>
  }

  return len;
 8005dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b084      	sub	sp, #16
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2202      	movs	r2, #2
 8005df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 fcec 	bl	80067ea <USBD_LL_Transmit>

  return USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 fcdb 	bl	80067ea <USBD_LL_Transmit>

  return USBD_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	2100      	movs	r1, #0
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fcdf 	bl	800682c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fcce 	bl	800682c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2204      	movs	r2, #4
 8005ea6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2200      	movs	r2, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fc9a 	bl	80067ea <USBD_LL_Transmit>

  return USBD_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3708      	adds	r7, #8
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2205      	movs	r2, #5
 8005ecc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fca8 	bl	800682c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005eec:	2200      	movs	r2, #0
 8005eee:	4912      	ldr	r1, [pc, #72]	; (8005f38 <MX_USB_DEVICE_Init+0x50>)
 8005ef0:	4812      	ldr	r0, [pc, #72]	; (8005f3c <MX_USB_DEVICE_Init+0x54>)
 8005ef2:	f7fe fef3 	bl	8004cdc <USBD_Init>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005efc:	f7fa fcd4 	bl	80008a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005f00:	490f      	ldr	r1, [pc, #60]	; (8005f40 <MX_USB_DEVICE_Init+0x58>)
 8005f02:	480e      	ldr	r0, [pc, #56]	; (8005f3c <MX_USB_DEVICE_Init+0x54>)
 8005f04:	f7fe ff20 	bl	8004d48 <USBD_RegisterClass>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005f0e:	f7fa fccb 	bl	80008a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005f12:	490c      	ldr	r1, [pc, #48]	; (8005f44 <MX_USB_DEVICE_Init+0x5c>)
 8005f14:	4809      	ldr	r0, [pc, #36]	; (8005f3c <MX_USB_DEVICE_Init+0x54>)
 8005f16:	f7fe fe45 	bl	8004ba4 <USBD_CDC_RegisterInterface>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005f20:	f7fa fcc2 	bl	80008a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005f24:	4805      	ldr	r0, [pc, #20]	; (8005f3c <MX_USB_DEVICE_Init+0x54>)
 8005f26:	f7fe ff30 	bl	8004d8a <USBD_Start>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005f30:	f7fa fcba 	bl	80008a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005f34:	bf00      	nop
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000134 	.word	0x20000134
 8005f3c:	20000698 	.word	0x20000698
 8005f40:	20000018 	.word	0x20000018
 8005f44:	20000120 	.word	0x20000120

08005f48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	4905      	ldr	r1, [pc, #20]	; (8005f64 <CDC_Init_FS+0x1c>)
 8005f50:	4805      	ldr	r0, [pc, #20]	; (8005f68 <CDC_Init_FS+0x20>)
 8005f52:	f7fe fe3c 	bl	8004bce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005f56:	4905      	ldr	r1, [pc, #20]	; (8005f6c <CDC_Init_FS+0x24>)
 8005f58:	4803      	ldr	r0, [pc, #12]	; (8005f68 <CDC_Init_FS+0x20>)
 8005f5a:	f7fe fe51 	bl	8004c00 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005f5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	20001168 	.word	0x20001168
 8005f68:	20000698 	.word	0x20000698
 8005f6c:	20000968 	.word	0x20000968

08005f70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	4603      	mov	r3, r0
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	71fb      	strb	r3, [r7, #7]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f90:	79fb      	ldrb	r3, [r7, #7]
 8005f92:	2b23      	cmp	r3, #35	; 0x23
 8005f94:	d84a      	bhi.n	800602c <CDC_Control_FS+0xac>
 8005f96:	a201      	add	r2, pc, #4	; (adr r2, 8005f9c <CDC_Control_FS+0x1c>)
 8005f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9c:	0800602d 	.word	0x0800602d
 8005fa0:	0800602d 	.word	0x0800602d
 8005fa4:	0800602d 	.word	0x0800602d
 8005fa8:	0800602d 	.word	0x0800602d
 8005fac:	0800602d 	.word	0x0800602d
 8005fb0:	0800602d 	.word	0x0800602d
 8005fb4:	0800602d 	.word	0x0800602d
 8005fb8:	0800602d 	.word	0x0800602d
 8005fbc:	0800602d 	.word	0x0800602d
 8005fc0:	0800602d 	.word	0x0800602d
 8005fc4:	0800602d 	.word	0x0800602d
 8005fc8:	0800602d 	.word	0x0800602d
 8005fcc:	0800602d 	.word	0x0800602d
 8005fd0:	0800602d 	.word	0x0800602d
 8005fd4:	0800602d 	.word	0x0800602d
 8005fd8:	0800602d 	.word	0x0800602d
 8005fdc:	0800602d 	.word	0x0800602d
 8005fe0:	0800602d 	.word	0x0800602d
 8005fe4:	0800602d 	.word	0x0800602d
 8005fe8:	0800602d 	.word	0x0800602d
 8005fec:	0800602d 	.word	0x0800602d
 8005ff0:	0800602d 	.word	0x0800602d
 8005ff4:	0800602d 	.word	0x0800602d
 8005ff8:	0800602d 	.word	0x0800602d
 8005ffc:	0800602d 	.word	0x0800602d
 8006000:	0800602d 	.word	0x0800602d
 8006004:	0800602d 	.word	0x0800602d
 8006008:	0800602d 	.word	0x0800602d
 800600c:	0800602d 	.word	0x0800602d
 8006010:	0800602d 	.word	0x0800602d
 8006014:	0800602d 	.word	0x0800602d
 8006018:	0800602d 	.word	0x0800602d
 800601c:	0800602d 	.word	0x0800602d
 8006020:	0800602d 	.word	0x0800602d
 8006024:	0800602d 	.word	0x0800602d
 8006028:	0800602d 	.word	0x0800602d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800602c:	bf00      	nop
  }

  return (USBD_OK);
 800602e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006030:	4618      	mov	r0, r3
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (Buf[0] == 'p')
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b70      	cmp	r3, #112	; 0x70
 800604c:	d103      	bne.n	8006056 <CDC_Receive_FS+0x1a>
	  Status = PRINT_CNT;
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <CDC_Receive_FS+0x38>)
 8006050:	2200      	movs	r2, #0
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e002      	b.n	800605c <CDC_Receive_FS+0x20>
  else {
	  Status = NO_PRINT;
 8006056:	4b07      	ldr	r3, [pc, #28]	; (8006074 <CDC_Receive_FS+0x38>)
 8006058:	2201      	movs	r2, #1
 800605a:	801a      	strh	r2, [r3, #0]
  }
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800605c:	6879      	ldr	r1, [r7, #4]
 800605e:	4806      	ldr	r0, [pc, #24]	; (8006078 <CDC_Receive_FS+0x3c>)
 8006060:	f7fe fdce 	bl	8004c00 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006064:	4804      	ldr	r0, [pc, #16]	; (8006078 <CDC_Receive_FS+0x3c>)
 8006066:	f7fe fe0f 	bl	8004c88 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800606a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	2000011c 	.word	0x2000011c
 8006078:	20000698 	.word	0x20000698

0800607c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800608c:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <CDC_Transmit_FS+0x48>)
 800608e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006092:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800609e:	2301      	movs	r3, #1
 80060a0:	e00b      	b.n	80060ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80060a2:	887b      	ldrh	r3, [r7, #2]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4806      	ldr	r0, [pc, #24]	; (80060c4 <CDC_Transmit_FS+0x48>)
 80060aa:	f7fe fd90 	bl	8004bce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80060ae:	4805      	ldr	r0, [pc, #20]	; (80060c4 <CDC_Transmit_FS+0x48>)
 80060b0:	f7fe fdba 	bl	8004c28 <USBD_CDC_TransmitPacket>
 80060b4:	4603      	mov	r3, r0
 80060b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000698 	.word	0x20000698

080060c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4613      	mov	r3, r2
 80060d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80060d6:	2300      	movs	r3, #0
 80060d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80060da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
	...

080060ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2212      	movs	r2, #18
 80060fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80060fe:	4b03      	ldr	r3, [pc, #12]	; (800610c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006100:	4618      	mov	r0, r3
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	20000150 	.word	0x20000150

08006110 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2204      	movs	r2, #4
 8006120:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006122:	4b03      	ldr	r3, [pc, #12]	; (8006130 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr
 8006130:	20000164 	.word	0x20000164

08006134 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	4603      	mov	r3, r0
 800613c:	6039      	str	r1, [r7, #0]
 800613e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d105      	bne.n	8006152 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	4907      	ldr	r1, [pc, #28]	; (8006168 <USBD_FS_ProductStrDescriptor+0x34>)
 800614a:	4808      	ldr	r0, [pc, #32]	; (800616c <USBD_FS_ProductStrDescriptor+0x38>)
 800614c:	f7ff fdeb 	bl	8005d26 <USBD_GetString>
 8006150:	e004      	b.n	800615c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	4904      	ldr	r1, [pc, #16]	; (8006168 <USBD_FS_ProductStrDescriptor+0x34>)
 8006156:	4805      	ldr	r0, [pc, #20]	; (800616c <USBD_FS_ProductStrDescriptor+0x38>)
 8006158:	f7ff fde5 	bl	8005d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 800615c:	4b02      	ldr	r3, [pc, #8]	; (8006168 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800615e:	4618      	mov	r0, r3
 8006160:	3708      	adds	r7, #8
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	20001968 	.word	0x20001968
 800616c:	080071b8 	.word	0x080071b8

08006170 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	6039      	str	r1, [r7, #0]
 800617a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	4904      	ldr	r1, [pc, #16]	; (8006190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006180:	4804      	ldr	r0, [pc, #16]	; (8006194 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006182:	f7ff fdd0 	bl	8005d26 <USBD_GetString>
  return USBD_StrDesc;
 8006186:	4b02      	ldr	r3, [pc, #8]	; (8006190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20001968 	.word	0x20001968
 8006194:	080071d0 	.word	0x080071d0

08006198 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	221a      	movs	r2, #26
 80061a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80061aa:	f000 f843 	bl	8006234 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80061ae:	4b02      	ldr	r3, [pc, #8]	; (80061b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3708      	adds	r7, #8
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	20000168 	.word	0x20000168

080061bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	6039      	str	r1, [r7, #0]
 80061c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d105      	bne.n	80061da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	4907      	ldr	r1, [pc, #28]	; (80061f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061d2:	4808      	ldr	r0, [pc, #32]	; (80061f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80061d4:	f7ff fda7 	bl	8005d26 <USBD_GetString>
 80061d8:	e004      	b.n	80061e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	4904      	ldr	r1, [pc, #16]	; (80061f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80061de:	4805      	ldr	r0, [pc, #20]	; (80061f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80061e0:	f7ff fda1 	bl	8005d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061e4:	4b02      	ldr	r3, [pc, #8]	; (80061f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20001968 	.word	0x20001968
 80061f4:	080071e4 	.word	0x080071e4

080061f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	6039      	str	r1, [r7, #0]
 8006202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006204:	79fb      	ldrb	r3, [r7, #7]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d105      	bne.n	8006216 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	4907      	ldr	r1, [pc, #28]	; (800622c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800620e:	4808      	ldr	r0, [pc, #32]	; (8006230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006210:	f7ff fd89 	bl	8005d26 <USBD_GetString>
 8006214:	e004      	b.n	8006220 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006216:	683a      	ldr	r2, [r7, #0]
 8006218:	4904      	ldr	r1, [pc, #16]	; (800622c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800621a:	4805      	ldr	r0, [pc, #20]	; (8006230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800621c:	f7ff fd83 	bl	8005d26 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006220:	4b02      	ldr	r3, [pc, #8]	; (800622c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	20001968 	.word	0x20001968
 8006230:	080071f0 	.word	0x080071f0

08006234 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800623a:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <Get_SerialNum+0x44>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006240:	4b0e      	ldr	r3, [pc, #56]	; (800627c <Get_SerialNum+0x48>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006246:	4b0e      	ldr	r3, [pc, #56]	; (8006280 <Get_SerialNum+0x4c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800625a:	2208      	movs	r2, #8
 800625c:	4909      	ldr	r1, [pc, #36]	; (8006284 <Get_SerialNum+0x50>)
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f000 f814 	bl	800628c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006264:	2204      	movs	r2, #4
 8006266:	4908      	ldr	r1, [pc, #32]	; (8006288 <Get_SerialNum+0x54>)
 8006268:	68b8      	ldr	r0, [r7, #8]
 800626a:	f000 f80f 	bl	800628c <IntToUnicode>
  }
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	1fff7a10 	.word	0x1fff7a10
 800627c:	1fff7a14 	.word	0x1fff7a14
 8006280:	1fff7a18 	.word	0x1fff7a18
 8006284:	2000016a 	.word	0x2000016a
 8006288:	2000017a 	.word	0x2000017a

0800628c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	4613      	mov	r3, r2
 8006298:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800629e:	2300      	movs	r3, #0
 80062a0:	75fb      	strb	r3, [r7, #23]
 80062a2:	e027      	b.n	80062f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	0f1b      	lsrs	r3, r3, #28
 80062a8:	2b09      	cmp	r3, #9
 80062aa:	d80b      	bhi.n	80062c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	0f1b      	lsrs	r3, r3, #28
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4619      	mov	r1, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	440b      	add	r3, r1
 80062bc:	3230      	adds	r2, #48	; 0x30
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	e00a      	b.n	80062da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	0f1b      	lsrs	r3, r3, #28
 80062c8:	b2da      	uxtb	r2, r3
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	4619      	mov	r1, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	440b      	add	r3, r1
 80062d4:	3237      	adds	r2, #55	; 0x37
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	3301      	adds	r3, #1
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	4413      	add	r3, r2
 80062ea:	2200      	movs	r2, #0
 80062ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80062ee:	7dfb      	ldrb	r3, [r7, #23]
 80062f0:	3301      	adds	r3, #1
 80062f2:	75fb      	strb	r3, [r7, #23]
 80062f4:	7dfa      	ldrb	r2, [r7, #23]
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d3d3      	bcc.n	80062a4 <IntToUnicode+0x18>
  }
}
 80062fc:	bf00      	nop
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	; 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006310:	f107 0314 	add.w	r3, r7, #20
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	605a      	str	r2, [r3, #4]
 800631a:	609a      	str	r2, [r3, #8]
 800631c:	60da      	str	r2, [r3, #12]
 800631e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006328:	d13a      	bne.n	80063a0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800632a:	2300      	movs	r3, #0
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	4b1e      	ldr	r3, [pc, #120]	; (80063a8 <HAL_PCD_MspInit+0xa0>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	4a1d      	ldr	r2, [pc, #116]	; (80063a8 <HAL_PCD_MspInit+0xa0>)
 8006334:	f043 0301 	orr.w	r3, r3, #1
 8006338:	6313      	str	r3, [r2, #48]	; 0x30
 800633a:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <HAL_PCD_MspInit+0xa0>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	613b      	str	r3, [r7, #16]
 8006344:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006346:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800634a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800634c:	2302      	movs	r3, #2
 800634e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006354:	2303      	movs	r3, #3
 8006356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006358:	230a      	movs	r3, #10
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800635c:	f107 0314 	add.w	r3, r7, #20
 8006360:	4619      	mov	r1, r3
 8006362:	4812      	ldr	r0, [pc, #72]	; (80063ac <HAL_PCD_MspInit+0xa4>)
 8006364:	f7fa fd96 	bl	8000e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <HAL_PCD_MspInit+0xa0>)
 800636a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636c:	4a0e      	ldr	r2, [pc, #56]	; (80063a8 <HAL_PCD_MspInit+0xa0>)
 800636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006372:	6353      	str	r3, [r2, #52]	; 0x34
 8006374:	2300      	movs	r3, #0
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_PCD_MspInit+0xa0>)
 800637a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637c:	4a0a      	ldr	r2, [pc, #40]	; (80063a8 <HAL_PCD_MspInit+0xa0>)
 800637e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006382:	6453      	str	r3, [r2, #68]	; 0x44
 8006384:	4b08      	ldr	r3, [pc, #32]	; (80063a8 <HAL_PCD_MspInit+0xa0>)
 8006386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006390:	2200      	movs	r2, #0
 8006392:	2100      	movs	r1, #0
 8006394:	2043      	movs	r0, #67	; 0x43
 8006396:	f7fa fd46 	bl	8000e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800639a:	2043      	movs	r0, #67	; 0x43
 800639c:	f7fa fd5f 	bl	8000e5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80063a0:	bf00      	nop
 80063a2:	3728      	adds	r7, #40	; 0x28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40023800 	.word	0x40023800
 80063ac:	40020000 	.word	0x40020000

080063b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fe fd2a 	bl	8004e20 <USBD_LL_SetupStage>
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80063e6:	78fa      	ldrb	r2, [r7, #3]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	4619      	mov	r1, r3
 80063fe:	f7fe fd62 	bl	8004ec6 <USBD_LL_DataOutStage>
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800641c:	78fa      	ldrb	r2, [r7, #3]
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	4613      	mov	r3, r2
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	1a9b      	subs	r3, r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	3348      	adds	r3, #72	; 0x48
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	78fb      	ldrb	r3, [r7, #3]
 8006430:	4619      	mov	r1, r3
 8006432:	f7fe fdab 	bl	8004f8c <USBD_LL_DataInStage>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe feaf 	bl	80051b0 <USBD_LL_SOF>
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006462:	2301      	movs	r3, #1
 8006464:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d001      	beq.n	8006472 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800646e:	f7fa fa1b 	bl	80008a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006478:	7bfa      	ldrb	r2, [r7, #15]
 800647a:	4611      	mov	r1, r2
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe fe5c 	bl	800513a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006488:	4618      	mov	r0, r3
 800648a:	f7fe fe15 	bl	80050b8 <USBD_LL_Reset>
}
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fe fe57 	bl	800515a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	6812      	ldr	r2, [r2, #0]
 80064ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d005      	beq.n	80064d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <HAL_PCD_SuspendCallback+0x48>)
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	4a03      	ldr	r2, [pc, #12]	; (80064e0 <HAL_PCD_SuspendCallback+0x48>)
 80064d2:	f043 0306 	orr.w	r3, r3, #6
 80064d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80064d8:	bf00      	nop
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	e000ed00 	.word	0xe000ed00

080064e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fe46 	bl	8005184 <USBD_LL_Resume>
}
 80064f8:	bf00      	nop
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006512:	78fa      	ldrb	r2, [r7, #3]
 8006514:	4611      	mov	r1, r2
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe fe71 	bl	80051fe <USBD_LL_IsoOUTIncomplete>
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006536:	78fa      	ldrb	r2, [r7, #3]
 8006538:	4611      	mov	r1, r2
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe fe52 	bl	80051e4 <USBD_LL_IsoINIncomplete>
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fe5e 	bl	8005218 <USBD_LL_DevConnected>
}
 800655c:	bf00      	nop
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006572:	4618      	mov	r0, r3
 8006574:	f7fe fe5b 	bl	800522e <USBD_LL_DevDisconnected>
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d13c      	bne.n	800660a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006590:	4a20      	ldr	r2, [pc, #128]	; (8006614 <USBD_LL_Init+0x94>)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <USBD_LL_Init+0x94>)
 800659c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80065a0:	4b1c      	ldr	r3, [pc, #112]	; (8006614 <USBD_LL_Init+0x94>)
 80065a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80065a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80065a8:	4b1a      	ldr	r3, [pc, #104]	; (8006614 <USBD_LL_Init+0x94>)
 80065aa:	2204      	movs	r2, #4
 80065ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80065ae:	4b19      	ldr	r3, [pc, #100]	; (8006614 <USBD_LL_Init+0x94>)
 80065b0:	2202      	movs	r2, #2
 80065b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80065b4:	4b17      	ldr	r3, [pc, #92]	; (8006614 <USBD_LL_Init+0x94>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80065ba:	4b16      	ldr	r3, [pc, #88]	; (8006614 <USBD_LL_Init+0x94>)
 80065bc:	2202      	movs	r2, #2
 80065be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80065c0:	4b14      	ldr	r3, [pc, #80]	; (8006614 <USBD_LL_Init+0x94>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80065c6:	4b13      	ldr	r3, [pc, #76]	; (8006614 <USBD_LL_Init+0x94>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <USBD_LL_Init+0x94>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <USBD_LL_Init+0x94>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80065d8:	4b0e      	ldr	r3, [pc, #56]	; (8006614 <USBD_LL_Init+0x94>)
 80065da:	2200      	movs	r2, #0
 80065dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80065de:	480d      	ldr	r0, [pc, #52]	; (8006614 <USBD_LL_Init+0x94>)
 80065e0:	f7fa fdda 	bl	8001198 <HAL_PCD_Init>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d001      	beq.n	80065ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80065ea:	f7fa f95d 	bl	80008a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80065ee:	2180      	movs	r1, #128	; 0x80
 80065f0:	4808      	ldr	r0, [pc, #32]	; (8006614 <USBD_LL_Init+0x94>)
 80065f2:	f7fb ff38 	bl	8002466 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80065f6:	2240      	movs	r2, #64	; 0x40
 80065f8:	2100      	movs	r1, #0
 80065fa:	4806      	ldr	r0, [pc, #24]	; (8006614 <USBD_LL_Init+0x94>)
 80065fc:	f7fb feec 	bl	80023d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006600:	2280      	movs	r2, #128	; 0x80
 8006602:	2101      	movs	r1, #1
 8006604:	4803      	ldr	r0, [pc, #12]	; (8006614 <USBD_LL_Init+0x94>)
 8006606:	f7fb fee7 	bl	80023d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20001b68 	.word	0x20001b68

08006618 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800662e:	4618      	mov	r0, r3
 8006630:	f7fa fecf 	bl	80013d2 <HAL_PCD_Start>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f92a 	bl	8006894 <USBD_Get_USB_Status>
 8006640:	4603      	mov	r3, r0
 8006642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006644:	7bbb      	ldrb	r3, [r7, #14]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	4608      	mov	r0, r1
 8006658:	4611      	mov	r1, r2
 800665a:	461a      	mov	r2, r3
 800665c:	4603      	mov	r3, r0
 800665e:	70fb      	strb	r3, [r7, #3]
 8006660:	460b      	mov	r3, r1
 8006662:	70bb      	strb	r3, [r7, #2]
 8006664:	4613      	mov	r3, r2
 8006666:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006676:	78bb      	ldrb	r3, [r7, #2]
 8006678:	883a      	ldrh	r2, [r7, #0]
 800667a:	78f9      	ldrb	r1, [r7, #3]
 800667c:	f7fb fab3 	bl	8001be6 <HAL_PCD_EP_Open>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006684:	7bfb      	ldrb	r3, [r7, #15]
 8006686:	4618      	mov	r0, r3
 8006688:	f000 f904 	bl	8006894 <USBD_Get_USB_Status>
 800668c:	4603      	mov	r3, r0
 800668e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006690:	7bbb      	ldrb	r3, [r7, #14]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fb fafc 	bl	8001cb6 <HAL_PCD_EP_Close>
 80066be:	4603      	mov	r3, r0
 80066c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 f8e5 	bl	8006894 <USBD_Get_USB_Status>
 80066ca:	4603      	mov	r3, r0
 80066cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80066f2:	78fa      	ldrb	r2, [r7, #3]
 80066f4:	4611      	mov	r1, r2
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fb fbd4 	bl	8001ea4 <HAL_PCD_EP_SetStall>
 80066fc:	4603      	mov	r3, r0
 80066fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f8c6 	bl	8006894 <USBD_Get_USB_Status>
 8006708:	4603      	mov	r3, r0
 800670a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800670c:	7bbb      	ldrb	r3, [r7, #14]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006730:	78fa      	ldrb	r2, [r7, #3]
 8006732:	4611      	mov	r1, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f7fb fc19 	bl	8001f6c <HAL_PCD_EP_ClrStall>
 800673a:	4603      	mov	r3, r0
 800673c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	4618      	mov	r0, r3
 8006742:	f000 f8a7 	bl	8006894 <USBD_Get_USB_Status>
 8006746:	4603      	mov	r3, r0
 8006748:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800674a:	7bbb      	ldrb	r3, [r7, #14]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	460b      	mov	r3, r1
 800675e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006766:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800676c:	2b00      	cmp	r3, #0
 800676e:	da0b      	bge.n	8006788 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	4613      	mov	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	440b      	add	r3, r1
 8006782:	333e      	adds	r3, #62	; 0x3e
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	e00b      	b.n	80067a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800678e:	68f9      	ldr	r1, [r7, #12]
 8006790:	4613      	mov	r3, r2
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	1a9b      	subs	r3, r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	440b      	add	r3, r1
 800679a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800679e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067c6:	78fa      	ldrb	r2, [r7, #3]
 80067c8:	4611      	mov	r1, r2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fb f9e6 	bl	8001b9c <HAL_PCD_SetAddress>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f85c 	bl	8006894 <USBD_Get_USB_Status>
 80067dc:	4603      	mov	r3, r0
 80067de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80067e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b086      	sub	sp, #24
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	460b      	mov	r3, r1
 80067f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067fe:	2300      	movs	r3, #0
 8006800:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006808:	7af9      	ldrb	r1, [r7, #11]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	f7fb faff 	bl	8001e10 <HAL_PCD_EP_Transmit>
 8006812:	4603      	mov	r3, r0
 8006814:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 f83b 	bl	8006894 <USBD_Get_USB_Status>
 800681e:	4603      	mov	r3, r0
 8006820:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006822:	7dbb      	ldrb	r3, [r7, #22]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	460b      	mov	r3, r1
 800683a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800683c:	2300      	movs	r3, #0
 800683e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800684a:	7af9      	ldrb	r1, [r7, #11]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	f7fb fa7b 	bl	8001d4a <HAL_PCD_EP_Receive>
 8006854:	4603      	mov	r3, r0
 8006856:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006858:	7dfb      	ldrb	r3, [r7, #23]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 f81a 	bl	8006894 <USBD_Get_USB_Status>
 8006860:	4603      	mov	r3, r0
 8006862:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006864:	7dbb      	ldrb	r3, [r7, #22]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
 8006876:	460b      	mov	r3, r1
 8006878:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006880:	78fa      	ldrb	r2, [r7, #3]
 8006882:	4611      	mov	r1, r2
 8006884:	4618      	mov	r0, r3
 8006886:	f7fb faab 	bl	8001de0 <HAL_PCD_EP_GetRxCount>
 800688a:	4603      	mov	r3, r0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d817      	bhi.n	80068d8 <USBD_Get_USB_Status+0x44>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <USBD_Get_USB_Status+0x1c>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068c7 	.word	0x080068c7
 80068b8:	080068cd 	.word	0x080068cd
 80068bc:	080068d3 	.word	0x080068d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80068c0:	2300      	movs	r3, #0
 80068c2:	73fb      	strb	r3, [r7, #15]
    break;
 80068c4:	e00b      	b.n	80068de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80068c6:	2303      	movs	r3, #3
 80068c8:	73fb      	strb	r3, [r7, #15]
    break;
 80068ca:	e008      	b.n	80068de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80068cc:	2301      	movs	r3, #1
 80068ce:	73fb      	strb	r3, [r7, #15]
    break;
 80068d0:	e005      	b.n	80068de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80068d2:	2303      	movs	r3, #3
 80068d4:	73fb      	strb	r3, [r7, #15]
    break;
 80068d6:	e002      	b.n	80068de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80068d8:	2303      	movs	r3, #3
 80068da:	73fb      	strb	r3, [r7, #15]
    break;
 80068dc:	bf00      	nop
  }
  return usb_status;
 80068de:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <__errno>:
 80068ec:	4b01      	ldr	r3, [pc, #4]	; (80068f4 <__errno+0x8>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	20000184 	.word	0x20000184

080068f8 <__libc_init_array>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	4e0d      	ldr	r6, [pc, #52]	; (8006930 <__libc_init_array+0x38>)
 80068fc:	4c0d      	ldr	r4, [pc, #52]	; (8006934 <__libc_init_array+0x3c>)
 80068fe:	1ba4      	subs	r4, r4, r6
 8006900:	10a4      	asrs	r4, r4, #2
 8006902:	2500      	movs	r5, #0
 8006904:	42a5      	cmp	r5, r4
 8006906:	d109      	bne.n	800691c <__libc_init_array+0x24>
 8006908:	4e0b      	ldr	r6, [pc, #44]	; (8006938 <__libc_init_array+0x40>)
 800690a:	4c0c      	ldr	r4, [pc, #48]	; (800693c <__libc_init_array+0x44>)
 800690c:	f000 fc36 	bl	800717c <_init>
 8006910:	1ba4      	subs	r4, r4, r6
 8006912:	10a4      	asrs	r4, r4, #2
 8006914:	2500      	movs	r5, #0
 8006916:	42a5      	cmp	r5, r4
 8006918:	d105      	bne.n	8006926 <__libc_init_array+0x2e>
 800691a:	bd70      	pop	{r4, r5, r6, pc}
 800691c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006920:	4798      	blx	r3
 8006922:	3501      	adds	r5, #1
 8006924:	e7ee      	b.n	8006904 <__libc_init_array+0xc>
 8006926:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800692a:	4798      	blx	r3
 800692c:	3501      	adds	r5, #1
 800692e:	e7f2      	b.n	8006916 <__libc_init_array+0x1e>
 8006930:	0800724c 	.word	0x0800724c
 8006934:	0800724c 	.word	0x0800724c
 8006938:	0800724c 	.word	0x0800724c
 800693c:	08007250 	.word	0x08007250

08006940 <malloc>:
 8006940:	4b02      	ldr	r3, [pc, #8]	; (800694c <malloc+0xc>)
 8006942:	4601      	mov	r1, r0
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	f000 b861 	b.w	8006a0c <_malloc_r>
 800694a:	bf00      	nop
 800694c:	20000184 	.word	0x20000184

08006950 <free>:
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <free+0xc>)
 8006952:	4601      	mov	r1, r0
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	f000 b80b 	b.w	8006970 <_free_r>
 800695a:	bf00      	nop
 800695c:	20000184 	.word	0x20000184

08006960 <memset>:
 8006960:	4402      	add	r2, r0
 8006962:	4603      	mov	r3, r0
 8006964:	4293      	cmp	r3, r2
 8006966:	d100      	bne.n	800696a <memset+0xa>
 8006968:	4770      	bx	lr
 800696a:	f803 1b01 	strb.w	r1, [r3], #1
 800696e:	e7f9      	b.n	8006964 <memset+0x4>

08006970 <_free_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4605      	mov	r5, r0
 8006974:	2900      	cmp	r1, #0
 8006976:	d045      	beq.n	8006a04 <_free_r+0x94>
 8006978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800697c:	1f0c      	subs	r4, r1, #4
 800697e:	2b00      	cmp	r3, #0
 8006980:	bfb8      	it	lt
 8006982:	18e4      	addlt	r4, r4, r3
 8006984:	f000 f8cc 	bl	8006b20 <__malloc_lock>
 8006988:	4a1f      	ldr	r2, [pc, #124]	; (8006a08 <_free_r+0x98>)
 800698a:	6813      	ldr	r3, [r2, #0]
 800698c:	4610      	mov	r0, r2
 800698e:	b933      	cbnz	r3, 800699e <_free_r+0x2e>
 8006990:	6063      	str	r3, [r4, #4]
 8006992:	6014      	str	r4, [r2, #0]
 8006994:	4628      	mov	r0, r5
 8006996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800699a:	f000 b8c2 	b.w	8006b22 <__malloc_unlock>
 800699e:	42a3      	cmp	r3, r4
 80069a0:	d90c      	bls.n	80069bc <_free_r+0x4c>
 80069a2:	6821      	ldr	r1, [r4, #0]
 80069a4:	1862      	adds	r2, r4, r1
 80069a6:	4293      	cmp	r3, r2
 80069a8:	bf04      	itt	eq
 80069aa:	681a      	ldreq	r2, [r3, #0]
 80069ac:	685b      	ldreq	r3, [r3, #4]
 80069ae:	6063      	str	r3, [r4, #4]
 80069b0:	bf04      	itt	eq
 80069b2:	1852      	addeq	r2, r2, r1
 80069b4:	6022      	streq	r2, [r4, #0]
 80069b6:	6004      	str	r4, [r0, #0]
 80069b8:	e7ec      	b.n	8006994 <_free_r+0x24>
 80069ba:	4613      	mov	r3, r2
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	b10a      	cbz	r2, 80069c4 <_free_r+0x54>
 80069c0:	42a2      	cmp	r2, r4
 80069c2:	d9fa      	bls.n	80069ba <_free_r+0x4a>
 80069c4:	6819      	ldr	r1, [r3, #0]
 80069c6:	1858      	adds	r0, r3, r1
 80069c8:	42a0      	cmp	r0, r4
 80069ca:	d10b      	bne.n	80069e4 <_free_r+0x74>
 80069cc:	6820      	ldr	r0, [r4, #0]
 80069ce:	4401      	add	r1, r0
 80069d0:	1858      	adds	r0, r3, r1
 80069d2:	4282      	cmp	r2, r0
 80069d4:	6019      	str	r1, [r3, #0]
 80069d6:	d1dd      	bne.n	8006994 <_free_r+0x24>
 80069d8:	6810      	ldr	r0, [r2, #0]
 80069da:	6852      	ldr	r2, [r2, #4]
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	4401      	add	r1, r0
 80069e0:	6019      	str	r1, [r3, #0]
 80069e2:	e7d7      	b.n	8006994 <_free_r+0x24>
 80069e4:	d902      	bls.n	80069ec <_free_r+0x7c>
 80069e6:	230c      	movs	r3, #12
 80069e8:	602b      	str	r3, [r5, #0]
 80069ea:	e7d3      	b.n	8006994 <_free_r+0x24>
 80069ec:	6820      	ldr	r0, [r4, #0]
 80069ee:	1821      	adds	r1, r4, r0
 80069f0:	428a      	cmp	r2, r1
 80069f2:	bf04      	itt	eq
 80069f4:	6811      	ldreq	r1, [r2, #0]
 80069f6:	6852      	ldreq	r2, [r2, #4]
 80069f8:	6062      	str	r2, [r4, #4]
 80069fa:	bf04      	itt	eq
 80069fc:	1809      	addeq	r1, r1, r0
 80069fe:	6021      	streq	r1, [r4, #0]
 8006a00:	605c      	str	r4, [r3, #4]
 8006a02:	e7c7      	b.n	8006994 <_free_r+0x24>
 8006a04:	bd38      	pop	{r3, r4, r5, pc}
 8006a06:	bf00      	nop
 8006a08:	2000020c 	.word	0x2000020c

08006a0c <_malloc_r>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	1ccd      	adds	r5, r1, #3
 8006a10:	f025 0503 	bic.w	r5, r5, #3
 8006a14:	3508      	adds	r5, #8
 8006a16:	2d0c      	cmp	r5, #12
 8006a18:	bf38      	it	cc
 8006a1a:	250c      	movcc	r5, #12
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	4606      	mov	r6, r0
 8006a20:	db01      	blt.n	8006a26 <_malloc_r+0x1a>
 8006a22:	42a9      	cmp	r1, r5
 8006a24:	d903      	bls.n	8006a2e <_malloc_r+0x22>
 8006a26:	230c      	movs	r3, #12
 8006a28:	6033      	str	r3, [r6, #0]
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
 8006a2e:	f000 f877 	bl	8006b20 <__malloc_lock>
 8006a32:	4a21      	ldr	r2, [pc, #132]	; (8006ab8 <_malloc_r+0xac>)
 8006a34:	6814      	ldr	r4, [r2, #0]
 8006a36:	4621      	mov	r1, r4
 8006a38:	b991      	cbnz	r1, 8006a60 <_malloc_r+0x54>
 8006a3a:	4c20      	ldr	r4, [pc, #128]	; (8006abc <_malloc_r+0xb0>)
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	b91b      	cbnz	r3, 8006a48 <_malloc_r+0x3c>
 8006a40:	4630      	mov	r0, r6
 8006a42:	f000 f83d 	bl	8006ac0 <_sbrk_r>
 8006a46:	6020      	str	r0, [r4, #0]
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f000 f838 	bl	8006ac0 <_sbrk_r>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d124      	bne.n	8006a9e <_malloc_r+0x92>
 8006a54:	230c      	movs	r3, #12
 8006a56:	6033      	str	r3, [r6, #0]
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f000 f862 	bl	8006b22 <__malloc_unlock>
 8006a5e:	e7e4      	b.n	8006a2a <_malloc_r+0x1e>
 8006a60:	680b      	ldr	r3, [r1, #0]
 8006a62:	1b5b      	subs	r3, r3, r5
 8006a64:	d418      	bmi.n	8006a98 <_malloc_r+0x8c>
 8006a66:	2b0b      	cmp	r3, #11
 8006a68:	d90f      	bls.n	8006a8a <_malloc_r+0x7e>
 8006a6a:	600b      	str	r3, [r1, #0]
 8006a6c:	50cd      	str	r5, [r1, r3]
 8006a6e:	18cc      	adds	r4, r1, r3
 8006a70:	4630      	mov	r0, r6
 8006a72:	f000 f856 	bl	8006b22 <__malloc_unlock>
 8006a76:	f104 000b 	add.w	r0, r4, #11
 8006a7a:	1d23      	adds	r3, r4, #4
 8006a7c:	f020 0007 	bic.w	r0, r0, #7
 8006a80:	1ac3      	subs	r3, r0, r3
 8006a82:	d0d3      	beq.n	8006a2c <_malloc_r+0x20>
 8006a84:	425a      	negs	r2, r3
 8006a86:	50e2      	str	r2, [r4, r3]
 8006a88:	e7d0      	b.n	8006a2c <_malloc_r+0x20>
 8006a8a:	428c      	cmp	r4, r1
 8006a8c:	684b      	ldr	r3, [r1, #4]
 8006a8e:	bf16      	itet	ne
 8006a90:	6063      	strne	r3, [r4, #4]
 8006a92:	6013      	streq	r3, [r2, #0]
 8006a94:	460c      	movne	r4, r1
 8006a96:	e7eb      	b.n	8006a70 <_malloc_r+0x64>
 8006a98:	460c      	mov	r4, r1
 8006a9a:	6849      	ldr	r1, [r1, #4]
 8006a9c:	e7cc      	b.n	8006a38 <_malloc_r+0x2c>
 8006a9e:	1cc4      	adds	r4, r0, #3
 8006aa0:	f024 0403 	bic.w	r4, r4, #3
 8006aa4:	42a0      	cmp	r0, r4
 8006aa6:	d005      	beq.n	8006ab4 <_malloc_r+0xa8>
 8006aa8:	1a21      	subs	r1, r4, r0
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f000 f808 	bl	8006ac0 <_sbrk_r>
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0cf      	beq.n	8006a54 <_malloc_r+0x48>
 8006ab4:	6025      	str	r5, [r4, #0]
 8006ab6:	e7db      	b.n	8006a70 <_malloc_r+0x64>
 8006ab8:	2000020c 	.word	0x2000020c
 8006abc:	20000210 	.word	0x20000210

08006ac0 <_sbrk_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4c06      	ldr	r4, [pc, #24]	; (8006adc <_sbrk_r+0x1c>)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	6023      	str	r3, [r4, #0]
 8006acc:	f7f9 ffc6 	bl	8000a5c <_sbrk>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_sbrk_r+0x1a>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_sbrk_r+0x1a>
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20001f70 	.word	0x20001f70

08006ae0 <_vsiprintf_r>:
 8006ae0:	b500      	push	{lr}
 8006ae2:	b09b      	sub	sp, #108	; 0x6c
 8006ae4:	9100      	str	r1, [sp, #0]
 8006ae6:	9104      	str	r1, [sp, #16]
 8006ae8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006aec:	9105      	str	r1, [sp, #20]
 8006aee:	9102      	str	r1, [sp, #8]
 8006af0:	4905      	ldr	r1, [pc, #20]	; (8006b08 <_vsiprintf_r+0x28>)
 8006af2:	9103      	str	r1, [sp, #12]
 8006af4:	4669      	mov	r1, sp
 8006af6:	f000 f86f 	bl	8006bd8 <_svfiprintf_r>
 8006afa:	9b00      	ldr	r3, [sp, #0]
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	b01b      	add	sp, #108	; 0x6c
 8006b02:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b06:	bf00      	nop
 8006b08:	ffff0208 	.word	0xffff0208

08006b0c <vsiprintf>:
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	460a      	mov	r2, r1
 8006b10:	4601      	mov	r1, r0
 8006b12:	4802      	ldr	r0, [pc, #8]	; (8006b1c <vsiprintf+0x10>)
 8006b14:	6800      	ldr	r0, [r0, #0]
 8006b16:	f7ff bfe3 	b.w	8006ae0 <_vsiprintf_r>
 8006b1a:	bf00      	nop
 8006b1c:	20000184 	.word	0x20000184

08006b20 <__malloc_lock>:
 8006b20:	4770      	bx	lr

08006b22 <__malloc_unlock>:
 8006b22:	4770      	bx	lr

08006b24 <__ssputs_r>:
 8006b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b28:	688e      	ldr	r6, [r1, #8]
 8006b2a:	429e      	cmp	r6, r3
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	4690      	mov	r8, r2
 8006b32:	4699      	mov	r9, r3
 8006b34:	d837      	bhi.n	8006ba6 <__ssputs_r+0x82>
 8006b36:	898a      	ldrh	r2, [r1, #12]
 8006b38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b3c:	d031      	beq.n	8006ba2 <__ssputs_r+0x7e>
 8006b3e:	6825      	ldr	r5, [r4, #0]
 8006b40:	6909      	ldr	r1, [r1, #16]
 8006b42:	1a6f      	subs	r7, r5, r1
 8006b44:	6965      	ldr	r5, [r4, #20]
 8006b46:	2302      	movs	r3, #2
 8006b48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b50:	f109 0301 	add.w	r3, r9, #1
 8006b54:	443b      	add	r3, r7
 8006b56:	429d      	cmp	r5, r3
 8006b58:	bf38      	it	cc
 8006b5a:	461d      	movcc	r5, r3
 8006b5c:	0553      	lsls	r3, r2, #21
 8006b5e:	d530      	bpl.n	8006bc2 <__ssputs_r+0x9e>
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7ff ff53 	bl	8006a0c <_malloc_r>
 8006b66:	4606      	mov	r6, r0
 8006b68:	b950      	cbnz	r0, 8006b80 <__ssputs_r+0x5c>
 8006b6a:	230c      	movs	r3, #12
 8006b6c:	f8ca 3000 	str.w	r3, [sl]
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b76:	81a3      	strh	r3, [r4, #12]
 8006b78:	f04f 30ff 	mov.w	r0, #4294967295
 8006b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b80:	463a      	mov	r2, r7
 8006b82:	6921      	ldr	r1, [r4, #16]
 8006b84:	f000 faa8 	bl	80070d8 <memcpy>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b92:	81a3      	strh	r3, [r4, #12]
 8006b94:	6126      	str	r6, [r4, #16]
 8006b96:	6165      	str	r5, [r4, #20]
 8006b98:	443e      	add	r6, r7
 8006b9a:	1bed      	subs	r5, r5, r7
 8006b9c:	6026      	str	r6, [r4, #0]
 8006b9e:	60a5      	str	r5, [r4, #8]
 8006ba0:	464e      	mov	r6, r9
 8006ba2:	454e      	cmp	r6, r9
 8006ba4:	d900      	bls.n	8006ba8 <__ssputs_r+0x84>
 8006ba6:	464e      	mov	r6, r9
 8006ba8:	4632      	mov	r2, r6
 8006baa:	4641      	mov	r1, r8
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	f000 fa9e 	bl	80070ee <memmove>
 8006bb2:	68a3      	ldr	r3, [r4, #8]
 8006bb4:	1b9b      	subs	r3, r3, r6
 8006bb6:	60a3      	str	r3, [r4, #8]
 8006bb8:	6823      	ldr	r3, [r4, #0]
 8006bba:	441e      	add	r6, r3
 8006bbc:	6026      	str	r6, [r4, #0]
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	e7dc      	b.n	8006b7c <__ssputs_r+0x58>
 8006bc2:	462a      	mov	r2, r5
 8006bc4:	f000 faac 	bl	8007120 <_realloc_r>
 8006bc8:	4606      	mov	r6, r0
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d1e2      	bne.n	8006b94 <__ssputs_r+0x70>
 8006bce:	6921      	ldr	r1, [r4, #16]
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	f7ff fecd 	bl	8006970 <_free_r>
 8006bd6:	e7c8      	b.n	8006b6a <__ssputs_r+0x46>

08006bd8 <_svfiprintf_r>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	461d      	mov	r5, r3
 8006bde:	898b      	ldrh	r3, [r1, #12]
 8006be0:	061f      	lsls	r7, r3, #24
 8006be2:	b09d      	sub	sp, #116	; 0x74
 8006be4:	4680      	mov	r8, r0
 8006be6:	460c      	mov	r4, r1
 8006be8:	4616      	mov	r6, r2
 8006bea:	d50f      	bpl.n	8006c0c <_svfiprintf_r+0x34>
 8006bec:	690b      	ldr	r3, [r1, #16]
 8006bee:	b96b      	cbnz	r3, 8006c0c <_svfiprintf_r+0x34>
 8006bf0:	2140      	movs	r1, #64	; 0x40
 8006bf2:	f7ff ff0b 	bl	8006a0c <_malloc_r>
 8006bf6:	6020      	str	r0, [r4, #0]
 8006bf8:	6120      	str	r0, [r4, #16]
 8006bfa:	b928      	cbnz	r0, 8006c08 <_svfiprintf_r+0x30>
 8006bfc:	230c      	movs	r3, #12
 8006bfe:	f8c8 3000 	str.w	r3, [r8]
 8006c02:	f04f 30ff 	mov.w	r0, #4294967295
 8006c06:	e0c8      	b.n	8006d9a <_svfiprintf_r+0x1c2>
 8006c08:	2340      	movs	r3, #64	; 0x40
 8006c0a:	6163      	str	r3, [r4, #20]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c10:	2320      	movs	r3, #32
 8006c12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c16:	2330      	movs	r3, #48	; 0x30
 8006c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c1c:	9503      	str	r5, [sp, #12]
 8006c1e:	f04f 0b01 	mov.w	fp, #1
 8006c22:	4637      	mov	r7, r6
 8006c24:	463d      	mov	r5, r7
 8006c26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c2a:	b10b      	cbz	r3, 8006c30 <_svfiprintf_r+0x58>
 8006c2c:	2b25      	cmp	r3, #37	; 0x25
 8006c2e:	d13e      	bne.n	8006cae <_svfiprintf_r+0xd6>
 8006c30:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c34:	d00b      	beq.n	8006c4e <_svfiprintf_r+0x76>
 8006c36:	4653      	mov	r3, sl
 8006c38:	4632      	mov	r2, r6
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4640      	mov	r0, r8
 8006c3e:	f7ff ff71 	bl	8006b24 <__ssputs_r>
 8006c42:	3001      	adds	r0, #1
 8006c44:	f000 80a4 	beq.w	8006d90 <_svfiprintf_r+0x1b8>
 8006c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4a:	4453      	add	r3, sl
 8006c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4e:	783b      	ldrb	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 809d 	beq.w	8006d90 <_svfiprintf_r+0x1b8>
 8006c56:	2300      	movs	r3, #0
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	9307      	str	r3, [sp, #28]
 8006c64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c68:	931a      	str	r3, [sp, #104]	; 0x68
 8006c6a:	462f      	mov	r7, r5
 8006c6c:	2205      	movs	r2, #5
 8006c6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006c72:	4850      	ldr	r0, [pc, #320]	; (8006db4 <_svfiprintf_r+0x1dc>)
 8006c74:	f7f9 fabc 	bl	80001f0 <memchr>
 8006c78:	9b04      	ldr	r3, [sp, #16]
 8006c7a:	b9d0      	cbnz	r0, 8006cb2 <_svfiprintf_r+0xda>
 8006c7c:	06d9      	lsls	r1, r3, #27
 8006c7e:	bf44      	itt	mi
 8006c80:	2220      	movmi	r2, #32
 8006c82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c86:	071a      	lsls	r2, r3, #28
 8006c88:	bf44      	itt	mi
 8006c8a:	222b      	movmi	r2, #43	; 0x2b
 8006c8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006c90:	782a      	ldrb	r2, [r5, #0]
 8006c92:	2a2a      	cmp	r2, #42	; 0x2a
 8006c94:	d015      	beq.n	8006cc2 <_svfiprintf_r+0xea>
 8006c96:	9a07      	ldr	r2, [sp, #28]
 8006c98:	462f      	mov	r7, r5
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	250a      	movs	r5, #10
 8006c9e:	4639      	mov	r1, r7
 8006ca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ca4:	3b30      	subs	r3, #48	; 0x30
 8006ca6:	2b09      	cmp	r3, #9
 8006ca8:	d94d      	bls.n	8006d46 <_svfiprintf_r+0x16e>
 8006caa:	b1b8      	cbz	r0, 8006cdc <_svfiprintf_r+0x104>
 8006cac:	e00f      	b.n	8006cce <_svfiprintf_r+0xf6>
 8006cae:	462f      	mov	r7, r5
 8006cb0:	e7b8      	b.n	8006c24 <_svfiprintf_r+0x4c>
 8006cb2:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <_svfiprintf_r+0x1dc>)
 8006cb4:	1a80      	subs	r0, r0, r2
 8006cb6:	fa0b f000 	lsl.w	r0, fp, r0
 8006cba:	4318      	orrs	r0, r3
 8006cbc:	9004      	str	r0, [sp, #16]
 8006cbe:	463d      	mov	r5, r7
 8006cc0:	e7d3      	b.n	8006c6a <_svfiprintf_r+0x92>
 8006cc2:	9a03      	ldr	r2, [sp, #12]
 8006cc4:	1d11      	adds	r1, r2, #4
 8006cc6:	6812      	ldr	r2, [r2, #0]
 8006cc8:	9103      	str	r1, [sp, #12]
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	db01      	blt.n	8006cd2 <_svfiprintf_r+0xfa>
 8006cce:	9207      	str	r2, [sp, #28]
 8006cd0:	e004      	b.n	8006cdc <_svfiprintf_r+0x104>
 8006cd2:	4252      	negs	r2, r2
 8006cd4:	f043 0302 	orr.w	r3, r3, #2
 8006cd8:	9207      	str	r2, [sp, #28]
 8006cda:	9304      	str	r3, [sp, #16]
 8006cdc:	783b      	ldrb	r3, [r7, #0]
 8006cde:	2b2e      	cmp	r3, #46	; 0x2e
 8006ce0:	d10c      	bne.n	8006cfc <_svfiprintf_r+0x124>
 8006ce2:	787b      	ldrb	r3, [r7, #1]
 8006ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce6:	d133      	bne.n	8006d50 <_svfiprintf_r+0x178>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	1d1a      	adds	r2, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9203      	str	r2, [sp, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bfb8      	it	lt
 8006cf4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006cf8:	3702      	adds	r7, #2
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	4d2e      	ldr	r5, [pc, #184]	; (8006db8 <_svfiprintf_r+0x1e0>)
 8006cfe:	7839      	ldrb	r1, [r7, #0]
 8006d00:	2203      	movs	r2, #3
 8006d02:	4628      	mov	r0, r5
 8006d04:	f7f9 fa74 	bl	80001f0 <memchr>
 8006d08:	b138      	cbz	r0, 8006d1a <_svfiprintf_r+0x142>
 8006d0a:	2340      	movs	r3, #64	; 0x40
 8006d0c:	1b40      	subs	r0, r0, r5
 8006d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d12:	9b04      	ldr	r3, [sp, #16]
 8006d14:	4303      	orrs	r3, r0
 8006d16:	3701      	adds	r7, #1
 8006d18:	9304      	str	r3, [sp, #16]
 8006d1a:	7839      	ldrb	r1, [r7, #0]
 8006d1c:	4827      	ldr	r0, [pc, #156]	; (8006dbc <_svfiprintf_r+0x1e4>)
 8006d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d22:	2206      	movs	r2, #6
 8006d24:	1c7e      	adds	r6, r7, #1
 8006d26:	f7f9 fa63 	bl	80001f0 <memchr>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d038      	beq.n	8006da0 <_svfiprintf_r+0x1c8>
 8006d2e:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <_svfiprintf_r+0x1e8>)
 8006d30:	bb13      	cbnz	r3, 8006d78 <_svfiprintf_r+0x1a0>
 8006d32:	9b03      	ldr	r3, [sp, #12]
 8006d34:	3307      	adds	r3, #7
 8006d36:	f023 0307 	bic.w	r3, r3, #7
 8006d3a:	3308      	adds	r3, #8
 8006d3c:	9303      	str	r3, [sp, #12]
 8006d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d40:	444b      	add	r3, r9
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	e76d      	b.n	8006c22 <_svfiprintf_r+0x4a>
 8006d46:	fb05 3202 	mla	r2, r5, r2, r3
 8006d4a:	2001      	movs	r0, #1
 8006d4c:	460f      	mov	r7, r1
 8006d4e:	e7a6      	b.n	8006c9e <_svfiprintf_r+0xc6>
 8006d50:	2300      	movs	r3, #0
 8006d52:	3701      	adds	r7, #1
 8006d54:	9305      	str	r3, [sp, #20]
 8006d56:	4619      	mov	r1, r3
 8006d58:	250a      	movs	r5, #10
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d60:	3a30      	subs	r2, #48	; 0x30
 8006d62:	2a09      	cmp	r2, #9
 8006d64:	d903      	bls.n	8006d6e <_svfiprintf_r+0x196>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d0c8      	beq.n	8006cfc <_svfiprintf_r+0x124>
 8006d6a:	9105      	str	r1, [sp, #20]
 8006d6c:	e7c6      	b.n	8006cfc <_svfiprintf_r+0x124>
 8006d6e:	fb05 2101 	mla	r1, r5, r1, r2
 8006d72:	2301      	movs	r3, #1
 8006d74:	4607      	mov	r7, r0
 8006d76:	e7f0      	b.n	8006d5a <_svfiprintf_r+0x182>
 8006d78:	ab03      	add	r3, sp, #12
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4b11      	ldr	r3, [pc, #68]	; (8006dc4 <_svfiprintf_r+0x1ec>)
 8006d80:	a904      	add	r1, sp, #16
 8006d82:	4640      	mov	r0, r8
 8006d84:	f3af 8000 	nop.w
 8006d88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006d8c:	4681      	mov	r9, r0
 8006d8e:	d1d6      	bne.n	8006d3e <_svfiprintf_r+0x166>
 8006d90:	89a3      	ldrh	r3, [r4, #12]
 8006d92:	065b      	lsls	r3, r3, #25
 8006d94:	f53f af35 	bmi.w	8006c02 <_svfiprintf_r+0x2a>
 8006d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d9a:	b01d      	add	sp, #116	; 0x74
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	ab03      	add	r3, sp, #12
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	4622      	mov	r2, r4
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <_svfiprintf_r+0x1ec>)
 8006da8:	a904      	add	r1, sp, #16
 8006daa:	4640      	mov	r0, r8
 8006dac:	f000 f882 	bl	8006eb4 <_printf_i>
 8006db0:	e7ea      	b.n	8006d88 <_svfiprintf_r+0x1b0>
 8006db2:	bf00      	nop
 8006db4:	08007210 	.word	0x08007210
 8006db8:	08007216 	.word	0x08007216
 8006dbc:	0800721a 	.word	0x0800721a
 8006dc0:	00000000 	.word	0x00000000
 8006dc4:	08006b25 	.word	0x08006b25

08006dc8 <_printf_common>:
 8006dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dcc:	4691      	mov	r9, r2
 8006dce:	461f      	mov	r7, r3
 8006dd0:	688a      	ldr	r2, [r1, #8]
 8006dd2:	690b      	ldr	r3, [r1, #16]
 8006dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	bfb8      	it	lt
 8006ddc:	4613      	movlt	r3, r2
 8006dde:	f8c9 3000 	str.w	r3, [r9]
 8006de2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006de6:	4606      	mov	r6, r0
 8006de8:	460c      	mov	r4, r1
 8006dea:	b112      	cbz	r2, 8006df2 <_printf_common+0x2a>
 8006dec:	3301      	adds	r3, #1
 8006dee:	f8c9 3000 	str.w	r3, [r9]
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	0699      	lsls	r1, r3, #26
 8006df6:	bf42      	ittt	mi
 8006df8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006dfc:	3302      	addmi	r3, #2
 8006dfe:	f8c9 3000 	strmi.w	r3, [r9]
 8006e02:	6825      	ldr	r5, [r4, #0]
 8006e04:	f015 0506 	ands.w	r5, r5, #6
 8006e08:	d107      	bne.n	8006e1a <_printf_common+0x52>
 8006e0a:	f104 0a19 	add.w	sl, r4, #25
 8006e0e:	68e3      	ldr	r3, [r4, #12]
 8006e10:	f8d9 2000 	ldr.w	r2, [r9]
 8006e14:	1a9b      	subs	r3, r3, r2
 8006e16:	42ab      	cmp	r3, r5
 8006e18:	dc28      	bgt.n	8006e6c <_printf_common+0xa4>
 8006e1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006e1e:	6822      	ldr	r2, [r4, #0]
 8006e20:	3300      	adds	r3, #0
 8006e22:	bf18      	it	ne
 8006e24:	2301      	movne	r3, #1
 8006e26:	0692      	lsls	r2, r2, #26
 8006e28:	d42d      	bmi.n	8006e86 <_printf_common+0xbe>
 8006e2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e2e:	4639      	mov	r1, r7
 8006e30:	4630      	mov	r0, r6
 8006e32:	47c0      	blx	r8
 8006e34:	3001      	adds	r0, #1
 8006e36:	d020      	beq.n	8006e7a <_printf_common+0xb2>
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	68e5      	ldr	r5, [r4, #12]
 8006e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e40:	f003 0306 	and.w	r3, r3, #6
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	bf08      	it	eq
 8006e48:	1aad      	subeq	r5, r5, r2
 8006e4a:	68a3      	ldr	r3, [r4, #8]
 8006e4c:	6922      	ldr	r2, [r4, #16]
 8006e4e:	bf0c      	ite	eq
 8006e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e54:	2500      	movne	r5, #0
 8006e56:	4293      	cmp	r3, r2
 8006e58:	bfc4      	itt	gt
 8006e5a:	1a9b      	subgt	r3, r3, r2
 8006e5c:	18ed      	addgt	r5, r5, r3
 8006e5e:	f04f 0900 	mov.w	r9, #0
 8006e62:	341a      	adds	r4, #26
 8006e64:	454d      	cmp	r5, r9
 8006e66:	d11a      	bne.n	8006e9e <_printf_common+0xd6>
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e008      	b.n	8006e7e <_printf_common+0xb6>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	4652      	mov	r2, sl
 8006e70:	4639      	mov	r1, r7
 8006e72:	4630      	mov	r0, r6
 8006e74:	47c0      	blx	r8
 8006e76:	3001      	adds	r0, #1
 8006e78:	d103      	bne.n	8006e82 <_printf_common+0xba>
 8006e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e82:	3501      	adds	r5, #1
 8006e84:	e7c3      	b.n	8006e0e <_printf_common+0x46>
 8006e86:	18e1      	adds	r1, r4, r3
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	2030      	movs	r0, #48	; 0x30
 8006e8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e90:	4422      	add	r2, r4
 8006e92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	e7c5      	b.n	8006e2a <_printf_common+0x62>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4622      	mov	r2, r4
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	4630      	mov	r0, r6
 8006ea6:	47c0      	blx	r8
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d0e6      	beq.n	8006e7a <_printf_common+0xb2>
 8006eac:	f109 0901 	add.w	r9, r9, #1
 8006eb0:	e7d8      	b.n	8006e64 <_printf_common+0x9c>
	...

08006eb4 <_printf_i>:
 8006eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006eb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006ebc:	460c      	mov	r4, r1
 8006ebe:	7e09      	ldrb	r1, [r1, #24]
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	296e      	cmp	r1, #110	; 0x6e
 8006ec4:	4617      	mov	r7, r2
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	4698      	mov	r8, r3
 8006eca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ecc:	f000 80b3 	beq.w	8007036 <_printf_i+0x182>
 8006ed0:	d822      	bhi.n	8006f18 <_printf_i+0x64>
 8006ed2:	2963      	cmp	r1, #99	; 0x63
 8006ed4:	d036      	beq.n	8006f44 <_printf_i+0x90>
 8006ed6:	d80a      	bhi.n	8006eee <_printf_i+0x3a>
 8006ed8:	2900      	cmp	r1, #0
 8006eda:	f000 80b9 	beq.w	8007050 <_printf_i+0x19c>
 8006ede:	2958      	cmp	r1, #88	; 0x58
 8006ee0:	f000 8083 	beq.w	8006fea <_printf_i+0x136>
 8006ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ee8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006eec:	e032      	b.n	8006f54 <_printf_i+0xa0>
 8006eee:	2964      	cmp	r1, #100	; 0x64
 8006ef0:	d001      	beq.n	8006ef6 <_printf_i+0x42>
 8006ef2:	2969      	cmp	r1, #105	; 0x69
 8006ef4:	d1f6      	bne.n	8006ee4 <_printf_i+0x30>
 8006ef6:	6820      	ldr	r0, [r4, #0]
 8006ef8:	6813      	ldr	r3, [r2, #0]
 8006efa:	0605      	lsls	r5, r0, #24
 8006efc:	f103 0104 	add.w	r1, r3, #4
 8006f00:	d52a      	bpl.n	8006f58 <_printf_i+0xa4>
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	da03      	bge.n	8006f12 <_printf_i+0x5e>
 8006f0a:	222d      	movs	r2, #45	; 0x2d
 8006f0c:	425b      	negs	r3, r3
 8006f0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006f12:	486f      	ldr	r0, [pc, #444]	; (80070d0 <_printf_i+0x21c>)
 8006f14:	220a      	movs	r2, #10
 8006f16:	e039      	b.n	8006f8c <_printf_i+0xd8>
 8006f18:	2973      	cmp	r1, #115	; 0x73
 8006f1a:	f000 809d 	beq.w	8007058 <_printf_i+0x1a4>
 8006f1e:	d808      	bhi.n	8006f32 <_printf_i+0x7e>
 8006f20:	296f      	cmp	r1, #111	; 0x6f
 8006f22:	d020      	beq.n	8006f66 <_printf_i+0xb2>
 8006f24:	2970      	cmp	r1, #112	; 0x70
 8006f26:	d1dd      	bne.n	8006ee4 <_printf_i+0x30>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	f043 0320 	orr.w	r3, r3, #32
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	e003      	b.n	8006f3a <_printf_i+0x86>
 8006f32:	2975      	cmp	r1, #117	; 0x75
 8006f34:	d017      	beq.n	8006f66 <_printf_i+0xb2>
 8006f36:	2978      	cmp	r1, #120	; 0x78
 8006f38:	d1d4      	bne.n	8006ee4 <_printf_i+0x30>
 8006f3a:	2378      	movs	r3, #120	; 0x78
 8006f3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f40:	4864      	ldr	r0, [pc, #400]	; (80070d4 <_printf_i+0x220>)
 8006f42:	e055      	b.n	8006ff0 <_printf_i+0x13c>
 8006f44:	6813      	ldr	r3, [r2, #0]
 8006f46:	1d19      	adds	r1, r3, #4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6011      	str	r1, [r2, #0]
 8006f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f54:	2301      	movs	r3, #1
 8006f56:	e08c      	b.n	8007072 <_printf_i+0x1be>
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6011      	str	r1, [r2, #0]
 8006f5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006f60:	bf18      	it	ne
 8006f62:	b21b      	sxthne	r3, r3
 8006f64:	e7cf      	b.n	8006f06 <_printf_i+0x52>
 8006f66:	6813      	ldr	r3, [r2, #0]
 8006f68:	6825      	ldr	r5, [r4, #0]
 8006f6a:	1d18      	adds	r0, r3, #4
 8006f6c:	6010      	str	r0, [r2, #0]
 8006f6e:	0628      	lsls	r0, r5, #24
 8006f70:	d501      	bpl.n	8006f76 <_printf_i+0xc2>
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	e002      	b.n	8006f7c <_printf_i+0xc8>
 8006f76:	0668      	lsls	r0, r5, #25
 8006f78:	d5fb      	bpl.n	8006f72 <_printf_i+0xbe>
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	4854      	ldr	r0, [pc, #336]	; (80070d0 <_printf_i+0x21c>)
 8006f7e:	296f      	cmp	r1, #111	; 0x6f
 8006f80:	bf14      	ite	ne
 8006f82:	220a      	movne	r2, #10
 8006f84:	2208      	moveq	r2, #8
 8006f86:	2100      	movs	r1, #0
 8006f88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f8c:	6865      	ldr	r5, [r4, #4]
 8006f8e:	60a5      	str	r5, [r4, #8]
 8006f90:	2d00      	cmp	r5, #0
 8006f92:	f2c0 8095 	blt.w	80070c0 <_printf_i+0x20c>
 8006f96:	6821      	ldr	r1, [r4, #0]
 8006f98:	f021 0104 	bic.w	r1, r1, #4
 8006f9c:	6021      	str	r1, [r4, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d13d      	bne.n	800701e <_printf_i+0x16a>
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	f040 808e 	bne.w	80070c4 <_printf_i+0x210>
 8006fa8:	4665      	mov	r5, ip
 8006faa:	2a08      	cmp	r2, #8
 8006fac:	d10b      	bne.n	8006fc6 <_printf_i+0x112>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	07db      	lsls	r3, r3, #31
 8006fb2:	d508      	bpl.n	8006fc6 <_printf_i+0x112>
 8006fb4:	6923      	ldr	r3, [r4, #16]
 8006fb6:	6862      	ldr	r2, [r4, #4]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	bfde      	ittt	le
 8006fbc:	2330      	movle	r3, #48	; 0x30
 8006fbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fc6:	ebac 0305 	sub.w	r3, ip, r5
 8006fca:	6123      	str	r3, [r4, #16]
 8006fcc:	f8cd 8000 	str.w	r8, [sp]
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	aa03      	add	r2, sp, #12
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f7ff fef6 	bl	8006dc8 <_printf_common>
 8006fdc:	3001      	adds	r0, #1
 8006fde:	d14d      	bne.n	800707c <_printf_i+0x1c8>
 8006fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe4:	b005      	add	sp, #20
 8006fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fea:	4839      	ldr	r0, [pc, #228]	; (80070d0 <_printf_i+0x21c>)
 8006fec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ff0:	6813      	ldr	r3, [r2, #0]
 8006ff2:	6821      	ldr	r1, [r4, #0]
 8006ff4:	1d1d      	adds	r5, r3, #4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6015      	str	r5, [r2, #0]
 8006ffa:	060a      	lsls	r2, r1, #24
 8006ffc:	d50b      	bpl.n	8007016 <_printf_i+0x162>
 8006ffe:	07ca      	lsls	r2, r1, #31
 8007000:	bf44      	itt	mi
 8007002:	f041 0120 	orrmi.w	r1, r1, #32
 8007006:	6021      	strmi	r1, [r4, #0]
 8007008:	b91b      	cbnz	r3, 8007012 <_printf_i+0x15e>
 800700a:	6822      	ldr	r2, [r4, #0]
 800700c:	f022 0220 	bic.w	r2, r2, #32
 8007010:	6022      	str	r2, [r4, #0]
 8007012:	2210      	movs	r2, #16
 8007014:	e7b7      	b.n	8006f86 <_printf_i+0xd2>
 8007016:	064d      	lsls	r5, r1, #25
 8007018:	bf48      	it	mi
 800701a:	b29b      	uxthmi	r3, r3
 800701c:	e7ef      	b.n	8006ffe <_printf_i+0x14a>
 800701e:	4665      	mov	r5, ip
 8007020:	fbb3 f1f2 	udiv	r1, r3, r2
 8007024:	fb02 3311 	mls	r3, r2, r1, r3
 8007028:	5cc3      	ldrb	r3, [r0, r3]
 800702a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800702e:	460b      	mov	r3, r1
 8007030:	2900      	cmp	r1, #0
 8007032:	d1f5      	bne.n	8007020 <_printf_i+0x16c>
 8007034:	e7b9      	b.n	8006faa <_printf_i+0xf6>
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	6825      	ldr	r5, [r4, #0]
 800703a:	6961      	ldr	r1, [r4, #20]
 800703c:	1d18      	adds	r0, r3, #4
 800703e:	6010      	str	r0, [r2, #0]
 8007040:	0628      	lsls	r0, r5, #24
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	d501      	bpl.n	800704a <_printf_i+0x196>
 8007046:	6019      	str	r1, [r3, #0]
 8007048:	e002      	b.n	8007050 <_printf_i+0x19c>
 800704a:	066a      	lsls	r2, r5, #25
 800704c:	d5fb      	bpl.n	8007046 <_printf_i+0x192>
 800704e:	8019      	strh	r1, [r3, #0]
 8007050:	2300      	movs	r3, #0
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	4665      	mov	r5, ip
 8007056:	e7b9      	b.n	8006fcc <_printf_i+0x118>
 8007058:	6813      	ldr	r3, [r2, #0]
 800705a:	1d19      	adds	r1, r3, #4
 800705c:	6011      	str	r1, [r2, #0]
 800705e:	681d      	ldr	r5, [r3, #0]
 8007060:	6862      	ldr	r2, [r4, #4]
 8007062:	2100      	movs	r1, #0
 8007064:	4628      	mov	r0, r5
 8007066:	f7f9 f8c3 	bl	80001f0 <memchr>
 800706a:	b108      	cbz	r0, 8007070 <_printf_i+0x1bc>
 800706c:	1b40      	subs	r0, r0, r5
 800706e:	6060      	str	r0, [r4, #4]
 8007070:	6863      	ldr	r3, [r4, #4]
 8007072:	6123      	str	r3, [r4, #16]
 8007074:	2300      	movs	r3, #0
 8007076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800707a:	e7a7      	b.n	8006fcc <_printf_i+0x118>
 800707c:	6923      	ldr	r3, [r4, #16]
 800707e:	462a      	mov	r2, r5
 8007080:	4639      	mov	r1, r7
 8007082:	4630      	mov	r0, r6
 8007084:	47c0      	blx	r8
 8007086:	3001      	adds	r0, #1
 8007088:	d0aa      	beq.n	8006fe0 <_printf_i+0x12c>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	079b      	lsls	r3, r3, #30
 800708e:	d413      	bmi.n	80070b8 <_printf_i+0x204>
 8007090:	68e0      	ldr	r0, [r4, #12]
 8007092:	9b03      	ldr	r3, [sp, #12]
 8007094:	4298      	cmp	r0, r3
 8007096:	bfb8      	it	lt
 8007098:	4618      	movlt	r0, r3
 800709a:	e7a3      	b.n	8006fe4 <_printf_i+0x130>
 800709c:	2301      	movs	r3, #1
 800709e:	464a      	mov	r2, r9
 80070a0:	4639      	mov	r1, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	47c0      	blx	r8
 80070a6:	3001      	adds	r0, #1
 80070a8:	d09a      	beq.n	8006fe0 <_printf_i+0x12c>
 80070aa:	3501      	adds	r5, #1
 80070ac:	68e3      	ldr	r3, [r4, #12]
 80070ae:	9a03      	ldr	r2, [sp, #12]
 80070b0:	1a9b      	subs	r3, r3, r2
 80070b2:	42ab      	cmp	r3, r5
 80070b4:	dcf2      	bgt.n	800709c <_printf_i+0x1e8>
 80070b6:	e7eb      	b.n	8007090 <_printf_i+0x1dc>
 80070b8:	2500      	movs	r5, #0
 80070ba:	f104 0919 	add.w	r9, r4, #25
 80070be:	e7f5      	b.n	80070ac <_printf_i+0x1f8>
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1ac      	bne.n	800701e <_printf_i+0x16a>
 80070c4:	7803      	ldrb	r3, [r0, #0]
 80070c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070ce:	e76c      	b.n	8006faa <_printf_i+0xf6>
 80070d0:	08007221 	.word	0x08007221
 80070d4:	08007232 	.word	0x08007232

080070d8 <memcpy>:
 80070d8:	b510      	push	{r4, lr}
 80070da:	1e43      	subs	r3, r0, #1
 80070dc:	440a      	add	r2, r1
 80070de:	4291      	cmp	r1, r2
 80070e0:	d100      	bne.n	80070e4 <memcpy+0xc>
 80070e2:	bd10      	pop	{r4, pc}
 80070e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ec:	e7f7      	b.n	80070de <memcpy+0x6>

080070ee <memmove>:
 80070ee:	4288      	cmp	r0, r1
 80070f0:	b510      	push	{r4, lr}
 80070f2:	eb01 0302 	add.w	r3, r1, r2
 80070f6:	d807      	bhi.n	8007108 <memmove+0x1a>
 80070f8:	1e42      	subs	r2, r0, #1
 80070fa:	4299      	cmp	r1, r3
 80070fc:	d00a      	beq.n	8007114 <memmove+0x26>
 80070fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007102:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007106:	e7f8      	b.n	80070fa <memmove+0xc>
 8007108:	4283      	cmp	r3, r0
 800710a:	d9f5      	bls.n	80070f8 <memmove+0xa>
 800710c:	1881      	adds	r1, r0, r2
 800710e:	1ad2      	subs	r2, r2, r3
 8007110:	42d3      	cmn	r3, r2
 8007112:	d100      	bne.n	8007116 <memmove+0x28>
 8007114:	bd10      	pop	{r4, pc}
 8007116:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800711a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800711e:	e7f7      	b.n	8007110 <memmove+0x22>

08007120 <_realloc_r>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	4607      	mov	r7, r0
 8007124:	4614      	mov	r4, r2
 8007126:	460e      	mov	r6, r1
 8007128:	b921      	cbnz	r1, 8007134 <_realloc_r+0x14>
 800712a:	4611      	mov	r1, r2
 800712c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007130:	f7ff bc6c 	b.w	8006a0c <_malloc_r>
 8007134:	b922      	cbnz	r2, 8007140 <_realloc_r+0x20>
 8007136:	f7ff fc1b 	bl	8006970 <_free_r>
 800713a:	4625      	mov	r5, r4
 800713c:	4628      	mov	r0, r5
 800713e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007140:	f000 f814 	bl	800716c <_malloc_usable_size_r>
 8007144:	42a0      	cmp	r0, r4
 8007146:	d20f      	bcs.n	8007168 <_realloc_r+0x48>
 8007148:	4621      	mov	r1, r4
 800714a:	4638      	mov	r0, r7
 800714c:	f7ff fc5e 	bl	8006a0c <_malloc_r>
 8007150:	4605      	mov	r5, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	d0f2      	beq.n	800713c <_realloc_r+0x1c>
 8007156:	4631      	mov	r1, r6
 8007158:	4622      	mov	r2, r4
 800715a:	f7ff ffbd 	bl	80070d8 <memcpy>
 800715e:	4631      	mov	r1, r6
 8007160:	4638      	mov	r0, r7
 8007162:	f7ff fc05 	bl	8006970 <_free_r>
 8007166:	e7e9      	b.n	800713c <_realloc_r+0x1c>
 8007168:	4635      	mov	r5, r6
 800716a:	e7e7      	b.n	800713c <_realloc_r+0x1c>

0800716c <_malloc_usable_size_r>:
 800716c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007170:	1f18      	subs	r0, r3, #4
 8007172:	2b00      	cmp	r3, #0
 8007174:	bfbc      	itt	lt
 8007176:	580b      	ldrlt	r3, [r1, r0]
 8007178:	18c0      	addlt	r0, r0, r3
 800717a:	4770      	bx	lr

0800717c <_init>:
 800717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717e:	bf00      	nop
 8007180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007182:	bc08      	pop	{r3}
 8007184:	469e      	mov	lr, r3
 8007186:	4770      	bx	lr

08007188 <_fini>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	bf00      	nop
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr
